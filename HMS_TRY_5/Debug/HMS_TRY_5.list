
HMS_TRY_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f328  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010bc  0800f4c8  0800f4c8  0001f4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010584  08010584  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08010584  08010584  00020584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801058c  0801058c  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801058c  0801058c  0002058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010590  08010590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08010594  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d10  20000244  080107d8  00030244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f54  080107d8  00034f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002280d  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd0  00000000  00000000  00052a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00057758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00059318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d93a  00000000  00000000  0005ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d70  00000000  00000000  00078672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9e6f  00000000  00000000  0009b3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088dc  00000000  00000000  001452a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4b0 	.word	0x0800f4b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800f4b0 	.word	0x0800f4b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <vApplicationGetIdleTaskMemory+0x30>)
 8000f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000260 	.word	0x20000260
 8000f8c:	20000314 	.word	0x20000314

08000f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b0b4      	sub	sp, #208	; 0xd0
 8000f94:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f96:	f001 f8cb 	bl	8002130 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f9a:	f000 f8bd 	bl	8001118 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f9e:	f000 f9fb 	bl	8001398 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000fa2:	f000 f9a5 	bl	80012f0 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8000fa6:	f000 f9cd 	bl	8001344 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000faa:	f000 f921 	bl	80011f0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000fae:	f000 f971 	bl	8001294 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	print("Working\n\r");
 8000fb2:	484d      	ldr	r0, [pc, #308]	; (80010e8 <main+0x158>)
 8000fb4:	f005 fc2e 	bl	8006814 <print>

	LCD_Begin();
 8000fb8:	f008 f892 	bl	80090e0 <LCD_Begin>
	LCD_SetRotation(0);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f009 f9bd 	bl	800a33c <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 8000fc2:	2332      	movs	r3, #50	; 0x32
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fca:	22f0      	movs	r2, #240	; 0xf0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f009 fb37 	bl	800a642 <colorgradient>
	HMS_bgdisplay();
 8000fd4:	f005 fea2 	bl	8006d1c <HMS_bgdisplay>

	gpio_config(PORTC, 9, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2109      	movs	r1, #9
 8000fe6:	4841      	ldr	r0, [pc, #260]	; (80010ec <main+0x15c>)
 8000fe8:	f005 f8a0 	bl	800612c <gpio_config>
	gpio_IT_config(PORTC, 9, FALLING_EDGE);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2109      	movs	r1, #9
 8000ff0:	483e      	ldr	r0, [pc, #248]	; (80010ec <main+0x15c>)
 8000ff2:	f005 f977 	bl	80062e4 <gpio_IT_config>
	gpio_IT_EN(9, EXTI9_5_IRQn);
 8000ff6:	2117      	movs	r1, #23
 8000ff8:	2009      	movs	r0, #9
 8000ffa:	f005 fb91 	bl	8006720 <gpio_IT_EN>
	gpio_config(PORTC, 6, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 8000ffe:	2300      	movs	r3, #0
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2301      	movs	r3, #1
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	2200      	movs	r2, #0
 800100a:	2106      	movs	r1, #6
 800100c:	4837      	ldr	r0, [pc, #220]	; (80010ec <main+0x15c>)
 800100e:	f005 f88d 	bl	800612c <gpio_config>
	gpio_IT_config(PORTC, 6, FALLING_EDGE);
 8001012:	2201      	movs	r2, #1
 8001014:	2106      	movs	r1, #6
 8001016:	4835      	ldr	r0, [pc, #212]	; (80010ec <main+0x15c>)
 8001018:	f005 f964 	bl	80062e4 <gpio_IT_config>
	gpio_IT_EN(6, EXTI9_5_IRQn);
 800101c:	2117      	movs	r1, #23
 800101e:	2006      	movs	r0, #6
 8001020:	f005 fb7e 	bl	8006720 <gpio_IT_EN>

//	ESP_Init("realme GT Master Edition", "9999161397");

	char print_char[PRINT_CHAR_LEN] = { 0 };
 8001024:	2300      	movs	r3, #0
 8001026:	667b      	str	r3, [r7, #100]	; 0x64
 8001028:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800102c:	2260      	movs	r2, #96	; 0x60
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00b f8ad 	bl	800c190 <memset>

	while (!(mlx90614_init())) {
 8001036:	e005      	b.n	8001044 <main+0xb4>
		print("Error in MLX90614 INIT\n");
 8001038:	482d      	ldr	r0, [pc, #180]	; (80010f0 <main+0x160>)
 800103a:	f005 fbeb 	bl	8006814 <print>
		mlx90614_workingFlag = 0;
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <main+0x164>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	while (!(mlx90614_init())) {
 8001044:	f007 f9ee 	bl	8008424 <mlx90614_init>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f1      	bne.n	8001038 <main+0xa8>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <main+0x168>)
 8001056:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f009 fb9d 	bl	800a7a6 <osMessageCreate>
 800106c:	4603      	mov	r3, r0
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <main+0x16c>)
 8001070:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <main+0x170>)
 8001074:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001078:	461d      	mov	r5, r3
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fb2a 	bl	800a6e6 <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <main+0x174>)
 8001096:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 512);
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <main+0x178>)
 800109a:	f107 041c 	add.w	r4, r7, #28
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f009 fb17 	bl	800a6e6 <osThreadCreate>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <main+0x17c>)
 80010bc:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 256);
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <main+0x180>)
 80010c0:	463c      	mov	r4, r7
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80010d0:	463b      	mov	r3, r7
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 fb06 	bl	800a6e6 <osThreadCreate>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <main+0x184>)
 80010de:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80010e0:	f009 fafa 	bl	800a6d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010e4:	e7fe      	b.n	80010e4 <main+0x154>
 80010e6:	bf00      	nop
 80010e8:	0800f4ec 	.word	0x0800f4ec
 80010ec:	40020800 	.word	0x40020800
 80010f0:	0800f4f8 	.word	0x0800f4f8
 80010f4:	20000011 	.word	0x20000011
 80010f8:	0800f510 	.word	0x0800f510
 80010fc:	20000644 	.word	0x20000644
 8001100:	0800f520 	.word	0x0800f520
 8001104:	20000638 	.word	0x20000638
 8001108:	0800f53c 	.word	0x0800f53c
 800110c:	2000063c 	.word	0x2000063c
 8001110:	0800f558 	.word	0x0800f558
 8001114:	20000640 	.word	0x20000640

08001118 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00b f832 	bl	800c190 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0xd0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <SystemClock_Config+0xd0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd4>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800119a:	2307      	movs	r3, #7
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f8dc 	bl	8004360 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
		Error_Handler();
 80011ae:	f000 fca5 	bl	8001afc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fb3e 	bl	8004850 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc6>
		Error_Handler();
 80011da:	f000 fc8f 	bl	8001afc <Error_Handler>
	}
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	; 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADC1_Init+0x98>)
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <MX_ADC1_Init+0x9c>)
 8001206:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ADC1_Init+0x98>)
 800120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_ADC1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC1_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_ADC1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_ADC1_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_ADC1_Init+0x98>)
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <MX_ADC1_Init+0xa0>)
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_ADC1_Init+0x98>)
 800123e:	2201      	movs	r2, #1
 8001240:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_ADC1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_ADC1_Init+0x98>)
 800124c:	2201      	movs	r2, #1
 800124e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_ADC1_Init+0x98>)
 8001252:	f000 ffd3 	bl	80021fc <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x70>
		Error_Handler();
 800125c:	f000 fc4e 	bl	8001afc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001260:	230e      	movs	r3, #14
 8001262:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_ADC1_Init+0x98>)
 8001272:	f001 f953 	bl	800251c <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0x90>
		Error_Handler();
 800127c:	f000 fc3e 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000514 	.word	0x20000514
 800128c:	40012000 	.word	0x40012000
 8001290:	0f000001 	.word	0x0f000001

08001294 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x50>)
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <MX_I2C1_Init+0x54>)
 800129c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_I2C1_Init+0x58>)
 80012a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012d2:	f001 ff37 	bl	8003144 <HAL_I2C_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80012dc:	f000 fc0e 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000055c 	.word	0x2000055c
 80012e8:	40005400 	.word	0x40005400
 80012ec:	000186a0 	.word	0x000186a0

080012f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f003 ff64 	bl	80051f4 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001332:	f000 fbe3 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200005b0 	.word	0x200005b0
 8001340:	40004400 	.word	0x40004400

08001344 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART6_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART6_UART_Init+0x4c>)
 800137c:	f003 ff3a 	bl	80051f4 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001386:	f000 fbb9 	bl	8001afc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200005f4 	.word	0x200005f4
 8001394:	40011400 	.word	0x40011400

08001398 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a25      	ldr	r2, [pc, #148]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_GPIO_Init+0xd0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <MX_GPIO_Init+0xd0>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <MX_GPIO_Init+0xd4>)
 8001424:	f001 fe74 	bl	8003110 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001432:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_GPIO_Init+0xd8>)
 8001440:	f001 fbfe 	bl	8002c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_GPIO_Init+0xd4>)
 800145c:	f001 fbf0 	bl	8002c40 <HAL_GPIO_Init>

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020800 	.word	0x40020800

08001474 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI9_5_IRQHandler() {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(9)) {
 800147a:	2009      	movs	r0, #9
 800147c:	f005 f96e 	bl	800675c <gpio_IT_CHK>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01b      	beq.n	80014be <EXTI9_5_IRQHandler+0x4a>
		for (int i = 2000000; i > 0; i--)
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <EXTI9_5_IRQHandler+0x84>)
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e002      	b.n	8001492 <EXTI9_5_IRQHandler+0x1e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dcf9      	bgt.n	800148c <EXTI9_5_IRQHandler+0x18>
			;
		menu_select_flag = (menu_select_flag + 1) % 3;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <EXTI9_5_IRQHandler+0x88>)
 800149a:	f993 3000 	ldrsb.w	r3, [r3]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <EXTI9_5_IRQHandler+0x8c>)
 80014a2:	fb83 3102 	smull	r3, r1, r3, r2
 80014a6:	17d3      	asrs	r3, r2, #31
 80014a8:	1ac9      	subs	r1, r1, r3
 80014aa:	460b      	mov	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	1ad1      	subs	r1, r2, r3
 80014b2:	b24a      	sxtb	r2, r1
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <EXTI9_5_IRQHandler+0x88>)
 80014b6:	701a      	strb	r2, [r3, #0]

//		print("interrupt: %d\r\n", menu_select_flag);
		gpio_IT_CLR(9);
 80014b8:	2009      	movs	r0, #9
 80014ba:	f005 f969 	bl	8006790 <gpio_IT_CLR>
	}
	if (gpio_IT_CHK(6)) {
 80014be:	2006      	movs	r0, #6
 80014c0:	f005 f94c 	bl	800675c <gpio_IT_CHK>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d012      	beq.n	80014f0 <EXTI9_5_IRQHandler+0x7c>
		for (int i = 2000000; i > 0; i--);
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <EXTI9_5_IRQHandler+0x84>)
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	e002      	b.n	80014d6 <EXTI9_5_IRQHandler+0x62>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dcf9      	bgt.n	80014d0 <EXTI9_5_IRQHandler+0x5c>
		connectWifi = true;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <EXTI9_5_IRQHandler+0x90>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
//		print("GPIO 6 INT\r\n");
		ESP_Init("realme GT Master Edition", "9999161397");
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <EXTI9_5_IRQHandler+0x94>)
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <EXTI9_5_IRQHandler+0x98>)
 80014e6:	f005 f9b9 	bl	800685c <ESP_Init>
		gpio_IT_CLR(6);
 80014ea:	2006      	movs	r0, #6
 80014ec:	f005 f950 	bl	8006790 <gpio_IT_CLR>
	}
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	001e8480 	.word	0x001e8480
 80014fc:	20000010 	.word	0x20000010
 8001500:	55555556 	.word	0x55555556
 8001504:	20000013 	.word	0x20000013
 8001508:	0800f574 	.word	0x0800f574
 800150c:	0800f580 	.word	0x0800f580

08001510 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if(connectWifi){
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <StartDefaultTask+0x44>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <StartDefaultTask+0x20>
			ESP_Init("realme GT Master Edition", "9999161397");
 8001520:	490d      	ldr	r1, [pc, #52]	; (8001558 <StartDefaultTask+0x48>)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <StartDefaultTask+0x4c>)
 8001524:	f005 f99a 	bl	800685c <ESP_Init>
			connectWifi = false;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <StartDefaultTask+0x44>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e00d      	b.n	800154c <StartDefaultTask+0x3c>
		}
		else{
			Server_Start(globalTemp, globalHR, globalSpO2, globalECG);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <StartDefaultTask+0x50>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <StartDefaultTask+0x54>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <StartDefaultTask+0x58>)
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <StartDefaultTask+0x5c>)
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f005 fb5a 	bl	8006c00 <Server_Start>
		}

		osDelay(10);
 800154c:	200a      	movs	r0, #10
 800154e:	f009 f916 	bl	800a77e <osDelay>
		if(connectWifi){
 8001552:	e7e1      	b.n	8001518 <StartDefaultTask+0x8>
 8001554:	20000013 	.word	0x20000013
 8001558:	0800f574 	.word	0x0800f574
 800155c:	0800f580 	.word	0x0800f580
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	20000008 	.word	0x20000008
 800156c:	2000000c 	.word	0x2000000c

08001570 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b0a6      	sub	sp, #152	; 0x98
 8001574:	af08      	add	r7, sp, #32
 8001576:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	char print_char[PRINT_CHAR_LEN] = { 0 };
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2260      	movs	r2, #96	; 0x60
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00a fe03 	bl	800c190 <memset>
	uint32_t max30100_startTime = HAL_GetTick(), max30100_lapsedTime = 500;
 800158a:	f000 fe07 	bl	800219c <HAL_GetTick>
 800158e:	6778      	str	r0, [r7, #116]	; 0x74
 8001590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001594:	673b      	str	r3, [r7, #112]	; 0x70
	/* Infinite loop */
	for (;;) {
		if (menu_select_flag == 0) {
 8001596:	4b90      	ldr	r3, [pc, #576]	; (80017d8 <StartTask02+0x268>)
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d14c      	bne.n	800163a <StartTask02+0xca>
			if (mlx90614_workingFlag == 1) {
 80015a0:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <StartTask02+0x26c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d12c      	bne.n	8001602 <StartTask02+0x92>
				mlx90614_status = mlx90614_getObject1(&temp);
 80015a8:	488d      	ldr	r0, [pc, #564]	; (80017e0 <StartTask02+0x270>)
 80015aa:	f007 f845 	bl	8008638 <mlx90614_getObject1>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b8c      	ldr	r3, [pc, #560]	; (80017e4 <StartTask02+0x274>)
 80015b4:	701a      	strb	r2, [r3, #0]
				if (mlx90614_status == true) {
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <StartTask02+0x274>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d11d      	bne.n	80015fa <StartTask02+0x8a>
					dts = displayTemp_ok;
 80015be:	4b8a      	ldr	r3, [pc, #552]	; (80017e8 <StartTask02+0x278>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
					if ((temp > 0) && (temp < 100)) {
 80015c4:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <StartTask02+0x270>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	dd0e      	ble.n	80015f2 <StartTask02+0x82>
 80015d4:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <StartTask02+0x270>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80017ec <StartTask02+0x27c>
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d504      	bpl.n	80015f2 <StartTask02+0x82>
						globalTemp = temp;
 80015e8:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <StartTask02+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a80      	ldr	r2, [pc, #512]	; (80017f0 <StartTask02+0x280>)
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e01f      	b.n	8001632 <StartTask02+0xc2>
					} else {
						dts = displayTemp_errorVal;
 80015f2:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <StartTask02+0x278>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e01b      	b.n	8001632 <StartTask02+0xc2>
					}
				} else {
					mlx90614_workingFlag = 0;
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <StartTask02+0x26c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e017      	b.n	8001632 <StartTask02+0xc2>
				}
			} else if (mlx90614_workingFlag == 0) {
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <StartTask02+0x26c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d113      	bne.n	8001632 <StartTask02+0xc2>
				if (!(mlx90614_init())) {
 800160a:	f006 ff0b 	bl	8008424 <mlx90614_init>
 800160e:	4603      	mov	r3, r0
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <StartTask02+0xbc>
					dts = displayTemp_errorInit;
 800161a:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <StartTask02+0x278>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	701a      	strb	r2, [r3, #0]
					MX_I2C1_Init();
 8001620:	f7ff fe38 	bl	8001294 <MX_I2C1_Init>
					mlx90614_workingFlag = 0;
 8001624:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <StartTask02+0x26c>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e002      	b.n	8001632 <StartTask02+0xc2>
				} else {
					mlx90614_workingFlag = 1;
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <StartTask02+0x26c>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
				}
			}
			osDelay(200);
 8001632:	20c8      	movs	r0, #200	; 0xc8
 8001634:	f009 f8a3 	bl	800a77e <osDelay>
 8001638:	e14f      	b.n	80018da <StartTask02+0x36a>
		}
		//		/*
		else if (menu_select_flag == 1) {
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <StartTask02+0x268>)
 800163c:	f993 3000 	ldrsb.w	r3, [r3]
 8001640:	2b01      	cmp	r3, #1
 8001642:	f040 80f9 	bne.w	8001838 <StartTask02+0x2c8>
			if (max30100_update(&max30100, &result) != HAL_OK) {
 8001646:	496b      	ldr	r1, [pc, #428]	; (80017f4 <StartTask02+0x284>)
 8001648:	486b      	ldr	r0, [pc, #428]	; (80017f8 <StartTask02+0x288>)
 800164a:	f006 f823 	bl	8007694 <max30100_update>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01d      	beq.n	8001690 <StartTask02+0x120>
				print("Error Reading...Retrying\n");
 8001654:	4869      	ldr	r0, [pc, #420]	; (80017fc <StartTask02+0x28c>)
 8001656:	f005 f8dd 	bl	8006814 <print>
				MX_I2C1_Init();
 800165a:	f7ff fe1b 	bl	8001294 <MX_I2C1_Init>
				max30100_init(&max30100, &hi2c1,
 800165e:	2300      	movs	r3, #0
 8001660:	9306      	str	r3, [sp, #24]
 8001662:	2301      	movs	r3, #1
 8001664:	9305      	str	r3, [sp, #20]
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	230f      	movs	r3, #15
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	2303      	movs	r3, #3
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2308      	movs	r3, #8
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2303      	movs	r3, #3
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	4960      	ldr	r1, [pc, #384]	; (8001800 <StartTask02+0x290>)
 8001680:	485d      	ldr	r0, [pc, #372]	; (80017f8 <StartTask02+0x288>)
 8001682:	f005 fef1 	bl	8007468 <max30100_init>
				MAX30100_DEFAULT_MEAN_FILTER_SIZE,
				MAX30100_DEFAULT_PULSE_BPM_SAMPLE_SIZE,
				true,
				false);
				//				max30100_resume(&max30100);
				Delay(1000);
 8001686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168a:	f009 f878 	bl	800a77e <osDelay>
 800168e:	e124      	b.n	80018da <StartTask02+0x36a>
			} else {
				if (max30100_off) {
 8001690:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <StartTask02+0x294>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <StartTask02+0x13a>
					max30100_resume(&max30100);
 8001698:	4857      	ldr	r0, [pc, #348]	; (80017f8 <StartTask02+0x288>)
 800169a:	f006 fc6b 	bl	8007f74 <max30100_resume>
					max30100_off = false;
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <StartTask02+0x294>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
					max30100_on = true;
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <StartTask02+0x298>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
				}
				hrBeatTimer = HAL_GetTick();
 80016aa:	f000 fd77 	bl	800219c <HAL_GetTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b56      	ldr	r3, [pc, #344]	; (800180c <StartTask02+0x29c>)
 80016b4:	801a      	strh	r2, [r3, #0]
				if (result.pulse_detected) {
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <StartTask02+0x284>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <StartTask02+0x162>
					print("BEAT: %d\n", beatCounter++);
 80016be:	4b54      	ldr	r3, [pc, #336]	; (8001810 <StartTask02+0x2a0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	b2d1      	uxtb	r1, r2
 80016c6:	4a52      	ldr	r2, [pc, #328]	; (8001810 <StartTask02+0x2a0>)
 80016c8:	7011      	strb	r1, [r2, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4851      	ldr	r0, [pc, #324]	; (8001814 <StartTask02+0x2a4>)
 80016ce:	f005 f8a1 	bl	8006814 <print>
				}
				if (HAL_GetTick() - max30100_startTime > max30100_lapsedTime) {
 80016d2:	f000 fd63 	bl	800219c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016de:	429a      	cmp	r2, r3
 80016e0:	f080 80fb 	bcs.w	80018da <StartTask02+0x36a>
					if (result.ir_dc_value < 10000.00) {
 80016e4:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <StartTask02+0x284>)
 80016e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ea:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001818 <StartTask02+0x2a8>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d50b      	bpl.n	8001710 <StartTask02+0x1a0>
						print("No finger Detected\n");
 80016f8:	4848      	ldr	r0, [pc, #288]	; (800181c <StartTask02+0x2ac>)
 80016fa:	f005 f88b 	bl	8006814 <print>
						max30100.current_bpm = 0.0;
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <StartTask02+0x288>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
						max30100.current_spO2 = 0.0;
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <StartTask02+0x288>)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	679a      	str	r2, [r3, #120]	; 0x78
 800170e:	e05f      	b.n	80017d0 <StartTask02+0x260>
					} else {
						if (beatCounter < BEAT_COUNTER_LIMIT) {
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <StartTask02+0x2a0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b18      	cmp	r3, #24
 8001716:	d815      	bhi.n	8001744 <StartTask02+0x1d4>
#if DEBUG_MAX30100 == 1
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
									result.heart_bpm, result.spO2);
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <StartTask02+0x284>)
 800171a:	685b      	ldr	r3, [r3, #4]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff1b 	bl	8000558 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
									result.heart_bpm, result.spO2);
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <StartTask02+0x284>)
 8001728:	695b      	ldr	r3, [r3, #20]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	e9cd 2300 	strd	r2, r3, [sp]
 8001738:	4622      	mov	r2, r4
 800173a:	462b      	mov	r3, r5
 800173c:	4838      	ldr	r0, [pc, #224]	; (8001820 <StartTask02+0x2b0>)
 800173e:	f005 f869 	bl	8006814 <print>
 8001742:	e045      	b.n	80017d0 <StartTask02+0x260>
#endif
						} else if (beatCounter > BEAT_COUNTER_LIMIT) {
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <StartTask02+0x2a0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b19      	cmp	r3, #25
 800174a:	d941      	bls.n	80017d0 <StartTask02+0x260>
							finalHR = result.heart_bpm;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <StartTask02+0x284>)
 800174e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001756:	ee17 3a90 	vmov	r3, s15
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <StartTask02+0x2b4>)
 800175e:	801a      	strh	r2, [r3, #0]
							finalSpO2 = result.spO2;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <StartTask02+0x284>)
 8001762:	edd3 7a05 	vldr	s15, [r3, #20]
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	ee17 3a90 	vmov	r3, s15
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <StartTask02+0x2b8>)
 8001772:	801a      	strh	r2, [r3, #0]
							print(
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <StartTask02+0x2b4>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	4619      	mov	r1, r3
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <StartTask02+0x2b8>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	461a      	mov	r2, r3
 8001784:	4829      	ldr	r0, [pc, #164]	; (800182c <StartTask02+0x2bc>)
 8001786:	f005 f845 	bl	8006814 <print>
									"//===============| Final HR: %d | SpO2: %d%%|==============//\n",
									finalHR, finalSpO2);
							beatCounter = 0;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <StartTask02+0x2a0>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]

							if ((finalHR > 0) && (finalHR < 100)) {
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <StartTask02+0x2b4>)
 8001792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dd0a      	ble.n	80017b0 <StartTask02+0x240>
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <StartTask02+0x2b4>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	2b63      	cmp	r3, #99	; 0x63
 80017a2:	dc05      	bgt.n	80017b0 <StartTask02+0x240>
								globalHR = finalHR;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <StartTask02+0x2b4>)
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <StartTask02+0x2c0>)
 80017ae:	601a      	str	r2, [r3, #0]
							}
							if ((finalSpO2 > 0) && (finalSpO2 < 100)) {
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <StartTask02+0x2b8>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd0a      	ble.n	80017d0 <StartTask02+0x260>
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <StartTask02+0x2b8>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	2b63      	cmp	r3, #99	; 0x63
 80017c2:	dc05      	bgt.n	80017d0 <StartTask02+0x260>
								globalSpO2 = finalSpO2;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <StartTask02+0x2b8>)
 80017c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <StartTask02+0x2c4>)
 80017ce:	601a      	str	r2, [r3, #0]
							}
						}
					}
					max30100_startTime = HAL_GetTick();
 80017d0:	f000 fce4 	bl	800219c <HAL_GetTick>
 80017d4:	6778      	str	r0, [r7, #116]	; 0x74
 80017d6:	e080      	b.n	80018da <StartTask02+0x36a>
 80017d8:	20000010 	.word	0x20000010
 80017dc:	20000011 	.word	0x20000011
 80017e0:	20000648 	.word	0x20000648
 80017e4:	2000064c 	.word	0x2000064c
 80017e8:	2000064d 	.word	0x2000064d
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	20000000 	.word	0x20000000
 80017f4:	200006e4 	.word	0x200006e4
 80017f8:	20000658 	.word	0x20000658
 80017fc:	0800f59c 	.word	0x0800f59c
 8001800:	2000055c 	.word	0x2000055c
 8001804:	20000012 	.word	0x20000012
 8001808:	200006e0 	.word	0x200006e0
 800180c:	200006de 	.word	0x200006de
 8001810:	200006d8 	.word	0x200006d8
 8001814:	0800f5b8 	.word	0x0800f5b8
 8001818:	461c4000 	.word	0x461c4000
 800181c:	0800f5c4 	.word	0x0800f5c4
 8001820:	0800f5d8 	.word	0x0800f5d8
 8001824:	200006da 	.word	0x200006da
 8001828:	200006dc 	.word	0x200006dc
 800182c:	0800f5f4 	.word	0x0800f5f4
 8001830:	20000004 	.word	0x20000004
 8001834:	20000008 	.word	0x20000008
				}
			}
		}
		//		*/
		else if (menu_select_flag == 2) {
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <StartTask02+0x374>)
 800183a:	f993 3000 	ldrsb.w	r3, [r3]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d14b      	bne.n	80018da <StartTask02+0x36a>
			if (max30100_on) {
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <StartTask02+0x378>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <StartTask02+0x2f2>
				max30100_shutdown(&max30100);
 800184a:	4828      	ldr	r0, [pc, #160]	; (80018ec <StartTask02+0x37c>)
 800184c:	f006 fb72 	bl	8007f34 <max30100_shutdown>
				HAL_I2C_DeInit(&hi2c1);
 8001850:	4827      	ldr	r0, [pc, #156]	; (80018f0 <StartTask02+0x380>)
 8001852:	f001 fdbb 	bl	80033cc <HAL_I2C_DeInit>
				max30100_off = true;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <StartTask02+0x384>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
				max30100_on = false;
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <StartTask02+0x378>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
			}
			adcDataPrev = adcData;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <StartTask02+0x388>)
 8001864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <StartTask02+0x38c>)
 800186a:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 800186c:	4824      	ldr	r0, [pc, #144]	; (8001900 <StartTask02+0x390>)
 800186e:	f000 fd09 	bl	8002284 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8001872:	2164      	movs	r1, #100	; 0x64
 8001874:	4822      	ldr	r0, [pc, #136]	; (8001900 <StartTask02+0x390>)
 8001876:	f000 fdb9 	bl	80023ec <HAL_ADC_PollForConversion>
			adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <StartTask02+0x390>)
 800187c:	f000 fe41 	bl	8002502 <HAL_ADC_GetValue>
 8001880:	4603      	mov	r3, r0
 8001882:	b21a      	sxth	r2, r3
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <StartTask02+0x388>)
 8001886:	801a      	strh	r2, [r3, #0]
			sprintf(print_char, "Analog Val: %d\n", adcData);
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <StartTask02+0x388>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	461a      	mov	r2, r3
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	491b      	ldr	r1, [pc, #108]	; (8001904 <StartTask02+0x394>)
 8001896:	4618      	mov	r0, r3
 8001898:	f00b fa46 	bl	800cd28 <siprintf>
			USART_WRITE(USART2, print_char, strlen(print_char), 10);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fc9d 	bl	80001e0 <strlen>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f107 010c 	add.w	r1, r7, #12
 80018ac:	230a      	movs	r3, #10
 80018ae:	4816      	ldr	r0, [pc, #88]	; (8001908 <StartTask02+0x398>)
 80018b0:	f004 ff80 	bl	80067b4 <USART_WRITE>

			if ((adcData - adcDataPrev) > 800) {
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <StartTask02+0x388>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <StartTask02+0x38c>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80018c8:	dd04      	ble.n	80018d4 <StartTask02+0x364>
				ECG_HR += 1;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <StartTask02+0x39c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <StartTask02+0x39c>)
 80018d2:	6013      	str	r3, [r2, #0]
			}
			osDelay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f008 ff52 	bl	800a77e <osDelay>
		}

		//		print("Task 2 Running\r\n");
		osDelay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f008 ff4f 	bl	800a77e <osDelay>
		if (menu_select_flag == 0) {
 80018e0:	e659      	b.n	8001596 <StartTask02+0x26>
 80018e2:	bf00      	nop
 80018e4:	20000010 	.word	0x20000010
 80018e8:	200006e0 	.word	0x200006e0
 80018ec:	20000658 	.word	0x20000658
 80018f0:	2000055c 	.word	0x2000055c
 80018f4:	20000012 	.word	0x20000012
 80018f8:	2000064e 	.word	0x2000064e
 80018fc:	20000650 	.word	0x20000650
 8001900:	20000514 	.word	0x20000514
 8001904:	0800f634 	.word	0x0800f634
 8001908:	40004400 	.word	0x40004400
 800190c:	20000654 	.word	0x20000654

08001910 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	uint32_t ecg_startTime = HAL_GetTick(), ecg_lapsedTime = 60000;
 8001918:	f000 fc40 	bl	800219c <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001922:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		if (menu_select_flag == 0) {
 8001924:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <StartTask03+0x190>)
 8001926:	f993 3000 	ldrsb.w	r3, [r3]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d146      	bne.n	80019bc <StartTask03+0xac>
			if (dts == displayTemp_ok) {
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <StartTask03+0x194>)
 8001930:	f993 3000 	ldrsb.w	r3, [r3]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d116      	bne.n	8001966 <StartTask03+0x56>
#if DEBUG_TEMP == 1
					print("Temp in Celsius: = %0.2f\n", globalTemp);
		#endif
				LCD_SetTextColor(WHITE, BLUE);
 8001938:	211f      	movs	r1, #31
 800193a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800193e:	f008 fce5 	bl	800a30c <LCD_SetTextColor>
				LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 8001942:	21ba      	movs	r1, #186	; 0xba
 8001944:	2082      	movs	r0, #130	; 0x82
 8001946:	f008 fcb3 	bl	800a2b0 <LCD_SetCursor>
				LCD_SetTextSize(2);
 800194a:	2002      	movs	r0, #2
 800194c:	f008 fcc8 	bl	800a2e0 <LCD_SetTextSize>
				LCD_Printf("%0.2f'C", globalTemp);
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <StartTask03+0x198>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fdff 	bl	8000558 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4853      	ldr	r0, [pc, #332]	; (8001aac <StartTask03+0x19c>)
 8001960:	f008 fbbe 	bl	800a0e0 <LCD_Printf>
 8001964:	e097      	b.n	8001a96 <StartTask03+0x186>
			} else if (dts == displayTemp_errorVal) {
 8001966:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <StartTask03+0x194>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <StartTask03+0x80>
#if DEBUG_TEMP == 1
					print("Temp in Celsius: = %0.2f\n", globalTemp);
		#endif
				LCD_SetTextColor(WHITE, BLUE);
 8001970:	211f      	movs	r1, #31
 8001972:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001976:	f008 fcc9 	bl	800a30c <LCD_SetTextColor>
				LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 800197a:	21ba      	movs	r1, #186	; 0xba
 800197c:	2082      	movs	r0, #130	; 0x82
 800197e:	f008 fc97 	bl	800a2b0 <LCD_SetCursor>
				LCD_SetTextSize(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f008 fcac 	bl	800a2e0 <LCD_SetTextSize>
				LCD_Printf("     NA");
 8001988:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <StartTask03+0x1a0>)
 800198a:	f008 fba9 	bl	800a0e0 <LCD_Printf>
 800198e:	e082      	b.n	8001a96 <StartTask03+0x186>
			} else if (dts == displayTemp_errorInit) {
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <StartTask03+0x194>)
 8001992:	f993 3000 	ldrsb.w	r3, [r3]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d17c      	bne.n	8001a96 <StartTask03+0x186>
#if DEBUG_TEMP == 1
					print("Error in MLX90614 INIT\n");
		#endif
				LCD_SetTextColor(WHITE, BLUE);
 800199c:	211f      	movs	r1, #31
 800199e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019a2:	f008 fcb3 	bl	800a30c <LCD_SetTextColor>
				LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80019a6:	21ba      	movs	r1, #186	; 0xba
 80019a8:	2082      	movs	r0, #130	; 0x82
 80019aa:	f008 fc81 	bl	800a2b0 <LCD_SetCursor>
				LCD_SetTextSize(2);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f008 fc96 	bl	800a2e0 <LCD_SetTextSize>
				LCD_Printf("  ERROR");
 80019b4:	483f      	ldr	r0, [pc, #252]	; (8001ab4 <StartTask03+0x1a4>)
 80019b6:	f008 fb93 	bl	800a0e0 <LCD_Printf>
 80019ba:	e06c      	b.n	8001a96 <StartTask03+0x186>
			}
		} else if (menu_select_flag == 1) {
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <StartTask03+0x190>)
 80019be:	f993 3000 	ldrsb.w	r3, [r3]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d124      	bne.n	8001a10 <StartTask03+0x100>
			LCD_SetTextColor(WHITE, RED);
 80019c6:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80019ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019ce:	f008 fc9d 	bl	800a30c <LCD_SetTextColor>
			LCD_SetCursor(155, (TFTHEIGHT / 3) + 20);
 80019d2:	217e      	movs	r1, #126	; 0x7e
 80019d4:	209b      	movs	r0, #155	; 0x9b
 80019d6:	f008 fc6b 	bl	800a2b0 <LCD_SetCursor>
			LCD_SetTextSize(2);
 80019da:	2002      	movs	r0, #2
 80019dc:	f008 fc80 	bl	800a2e0 <LCD_SetTextSize>
			LCD_Printf("%dBPM", globalHR);
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <StartTask03+0x1a8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4835      	ldr	r0, [pc, #212]	; (8001abc <StartTask03+0x1ac>)
 80019e8:	f008 fb7a 	bl	800a0e0 <LCD_Printf>

			LCD_SetTextColor(WHITE, GREEN);
 80019ec:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80019f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019f4:	f008 fc8a 	bl	800a30c <LCD_SetTextColor>
			LCD_SetCursor(175, (TFTHEIGHT / 3) + 50);
 80019f8:	219c      	movs	r1, #156	; 0x9c
 80019fa:	20af      	movs	r0, #175	; 0xaf
 80019fc:	f008 fc58 	bl	800a2b0 <LCD_SetCursor>
			LCD_Printf("%d%%", finalSpO2);
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <StartTask03+0x1b0>)
 8001a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a06:	4619      	mov	r1, r3
 8001a08:	482e      	ldr	r0, [pc, #184]	; (8001ac4 <StartTask03+0x1b4>)
 8001a0a:	f008 fb69 	bl	800a0e0 <LCD_Printf>
 8001a0e:	e042      	b.n	8001a96 <StartTask03+0x186>
		} else if (menu_select_flag == 2) {
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <StartTask03+0x190>)
 8001a12:	f993 3000 	ldrsb.w	r3, [r3]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d13d      	bne.n	8001a96 <StartTask03+0x186>
			//			LCD_ECGAnimation();
			if ((HAL_GetTick() - ecg_startTime) > ecg_lapsedTime) {
 8001a1a:	f000 fbbf 	bl	800219c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d235      	bcs.n	8001a96 <StartTask03+0x186>
				if ((ECG_HR > 0) && (ECG_HR < 100))
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <StartTask03+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dd07      	ble.n	8001a42 <StartTask03+0x132>
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <StartTask03+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b63      	cmp	r3, #99	; 0x63
 8001a38:	dc03      	bgt.n	8001a42 <StartTask03+0x132>
					globalECG = ECG_HR;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <StartTask03+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <StartTask03+0x1bc>)
 8001a40:	6013      	str	r3, [r2, #0]
#if DEBUG_ECG == 1
					sprintf(print_char,"<======|The ECG Heart Rate is: %d|======>\r\n", ECG_HR);
					USART_WRITE(USART2, print_char, strlen(print_char), 10);
		#endif
				LCD_SetTextColor(BLACK, WHITE);
 8001a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a46:	2000      	movs	r0, #0
 8001a48:	f008 fc60 	bl	800a30c <LCD_SetTextColor>
				LCD_SetCursor(190, 270);
 8001a4c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001a50:	20be      	movs	r0, #190	; 0xbe
 8001a52:	f008 fc2d 	bl	800a2b0 <LCD_SetCursor>
				LCD_SetTextSize(2);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f008 fc42 	bl	800a2e0 <LCD_SetTextSize>
				if (globalECG < 10)
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <StartTask03+0x1bc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	dc06      	bgt.n	8001a72 <StartTask03+0x162>
					LCD_Printf(" %d", globalECG);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <StartTask03+0x1bc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <StartTask03+0x1c0>)
 8001a6c:	f008 fb38 	bl	800a0e0 <LCD_Printf>
 8001a70:	e009      	b.n	8001a86 <StartTask03+0x176>
				else if (globalECG < 100)
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <StartTask03+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b63      	cmp	r3, #99	; 0x63
 8001a78:	dc05      	bgt.n	8001a86 <StartTask03+0x176>
					LCD_Printf("%d", globalECG);
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <StartTask03+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <StartTask03+0x1c4>)
 8001a82:	f008 fb2d 	bl	800a0e0 <LCD_Printf>
				ECG_HR = 0;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <StartTask03+0x1b8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
				LCD_ECGAnimation();
 8001a8c:	f005 fcc4 	bl	8007418 <LCD_ECGAnimation>
				ecg_startTime = HAL_GetTick();
 8001a90:	f000 fb84 	bl	800219c <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]
			}
		}
		osDelay(200);
 8001a96:	20c8      	movs	r0, #200	; 0xc8
 8001a98:	f008 fe71 	bl	800a77e <osDelay>
		if (menu_select_flag == 0) {
 8001a9c:	e742      	b.n	8001924 <StartTask03+0x14>
 8001a9e:	bf00      	nop
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	2000064d 	.word	0x2000064d
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	0800f644 	.word	0x0800f644
 8001ab0:	0800f64c 	.word	0x0800f64c
 8001ab4:	0800f654 	.word	0x0800f654
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	0800f65c 	.word	0x0800f65c
 8001ac0:	200006dc 	.word	0x200006dc
 8001ac4:	0800f664 	.word	0x0800f664
 8001ac8:	20000654 	.word	0x20000654
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	0800f66c 	.word	0x0800f66c
 8001ad4:	0800f670 	.word	0x0800f670

08001ad8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001aea:	f000 fb43 	bl	8002174 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40014800 	.word	0x40014800

08001afc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_MspInit+0x54>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_MspInit+0x54>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_MspInit+0x54>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_MspInit+0x54>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_MspInit+0x54>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_MspInit+0x54>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	210f      	movs	r1, #15
 8001b4a:	f06f 0001 	mvn.w	r0, #1
 8001b4e:	f000 ffbb 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_ADC_MspInit+0x7c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d127      	bne.n	8001bd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_ADC_MspInit+0x80>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <HAL_ADC_MspInit+0x84>)
 8001bce:	f001 f837 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020800 	.word	0x40020800

08001be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_I2C_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12c      	bne.n	8001c64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <HAL_I2C_MspInit+0x8c>)
 8001c44:	f000 fffc 	bl	8002c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020400 	.word	0x40020400

08001c78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_I2C_MspDeInit+0x3c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10f      	bne.n	8001caa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_I2C_MspDeInit+0x40>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_I2C_MspDeInit+0x40>)
 8001c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <HAL_I2C_MspDeInit+0x44>)
 8001c9c:	f001 f954 	bl	8002f48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <HAL_I2C_MspDeInit+0x44>)
 8001ca6:	f001 f94f 	bl	8002f48 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40005400 	.word	0x40005400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3a      	ldr	r2, [pc, #232]	; (8001dc8 <HAL_UART_MspInit+0x108>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d134      	bne.n	8001d4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4826      	ldr	r0, [pc, #152]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d36:	f000 ff83 	bl	8002c40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	2026      	movs	r0, #38	; 0x26
 8001d40:	f000 fec2 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d44:	2026      	movs	r0, #38	; 0x26
 8001d46:	f000 fedb 	bl	8002b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d4a:	e039      	b.n	8001dc0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_UART_MspInit+0x114>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d134      	bne.n	8001dc0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001da0:	2308      	movs	r3, #8
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001dac:	f000 ff48 	bl	8002c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2105      	movs	r1, #5
 8001db4:	2047      	movs	r0, #71	; 0x47
 8001db6:	f000 fe87 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dba:	2047      	movs	r0, #71	; 0x47
 8001dbc:	f000 fea0 	bl	8002b00 <HAL_NVIC_EnableIRQ>
}
 8001dc0:	bf00      	nop
 8001dc2:	3730      	adds	r7, #48	; 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40011400 	.word	0x40011400

08001dd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_InitTick+0xd0>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	4a2d      	ldr	r2, [pc, #180]	; (8001ea8 <HAL_InitTick+0xd0>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6453      	str	r3, [r2, #68]	; 0x44
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_InitTick+0xd0>)
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e04:	f107 020c 	add.w	r2, r7, #12
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 ff3e 	bl	8004c90 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e14:	f002 ff28 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8001e18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_InitTick+0xd4>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0c9b      	lsrs	r3, r3, #18
 8001e24:	3b01      	subs	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e2a:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <HAL_InitTick+0xdc>)
 8001e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e34:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001e4e:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e50:	f002 ff50 	bl	8004cf4 <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d11b      	bne.n	8001e9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <HAL_InitTick+0xd8>)
 8001e64:	f002 ffa0 	bl	8004da8 <HAL_TIM_Base_Start_IT>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d111      	bne.n	8001e9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e76:	201a      	movs	r0, #26
 8001e78:	f000 fe42 	bl	8002b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	d808      	bhi.n	8001e94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001e82:	2200      	movs	r2, #0
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	201a      	movs	r0, #26
 8001e88:	f000 fe1e 	bl	8002ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_InitTick+0xe0>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e002      	b.n	8001e9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	20000708 	.word	0x20000708
 8001eb4:	40014800 	.word	0x40014800
 8001eb8:	20000018 	.word	0x20000018

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <MemManage_Handler+0x4>

08001ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <BusFault_Handler+0x4>

08001ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler+0x4>

08001eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001eee:	f002 ffbd 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000708 	.word	0x20000708

08001efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <USART2_IRQHandler+0x14>)
 8001f02:	f006 ff27 	bl	8008d54 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f06:	4802      	ldr	r0, [pc, #8]	; (8001f10 <USART2_IRQHandler+0x14>)
 8001f08:	f003 f9c2 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200005b0 	.word	0x200005b0

08001f14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr(&huart6);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <USART6_IRQHandler+0x14>)
 8001f1a:	f006 ff1b 	bl	8008d54 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f1e:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART6_IRQHandler+0x14>)
 8001f20:	f003 f9b6 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200005f4 	.word	0x200005f4

08001f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_kill>:

int _kill(int pid, int sig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f46:	f009 ffe9 	bl	800bf1c <__errno>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2216      	movs	r2, #22
 8001f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_exit>:

void _exit (int status)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ffe7 	bl	8001f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f6e:	e7fe      	b.n	8001f6e <_exit+0x12>

08001f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e00a      	b.n	8001f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f82:	f3af 8000 	nop.w
 8001f86:	4601      	mov	r1, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf0      	blt.n	8001f82 <_read+0x12>
	}

return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e009      	b.n	8001fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	60ba      	str	r2, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf1      	blt.n	8001fbc <_write+0x12>
	}
	return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_close>:

int _close(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200a:	605a      	str	r2, [r3, #4]
	return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_isatty>:

int _isatty(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	return 1;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f009 ff4e 	bl	800bf1c <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20018000 	.word	0x20018000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	20000750 	.word	0x20000750
 80020b4:	20004f58 	.word	0x20004f58

080020b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020e2:	490e      	ldr	r1, [pc, #56]	; (800211c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f8:	4c0b      	ldr	r4, [pc, #44]	; (8002128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002106:	f7ff ffd7 	bl	80020b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210a:	f00a f803 	bl	800c114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe ff3f 	bl	8000f90 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8002120:	08010594 	.word	0x08010594
  ldr r2, =_sbss
 8002124:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002128:	20004f54 	.word	0x20004f54

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 fcaa 	bl	8002ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f7ff fe3a 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fcd0 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000001c 	.word	0x2000001c
 8002198:	20000754 	.word	0x20000754

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000754 	.word	0x20000754

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000001c 	.word	0x2000001c

080021fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e033      	b.n	800227a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fca0 	bl	8001b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002242:	f023 0302 	bic.w	r3, r3, #2
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa86 	bl	8002760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
 800226a:	e001      	b.n	8002270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_ADC_Start+0x1a>
 800229a:	2302      	movs	r3, #2
 800229c:	e097      	b.n	80023ce <HAL_ADC_Start+0x14a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d018      	beq.n	80022e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022c4:	4b45      	ldr	r3, [pc, #276]	; (80023dc <HAL_ADC_Start+0x158>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_ADC_Start+0x15c>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0c9a      	lsrs	r2, r3, #18
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f9      	bne.n	80022da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d15f      	bne.n	80023b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800231e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002332:	d106      	bne.n	8002342 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f023 0206 	bic.w	r2, r3, #6
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
 8002340:	e002      	b.n	8002348 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_ADC_Start+0x160>)
 8002352:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800235c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d129      	bne.n	80023cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e020      	b.n	80023cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <HAL_ADC_Start+0x164>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d11b      	bne.n	80023cc <HAL_ADC_Start+0x148>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d114      	bne.n	80023cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	e00b      	b.n	80023cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0210 	orr.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000014 	.word	0x20000014
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	40012300 	.word	0x40012300
 80023e8:	40012000 	.word	0x40012000

080023ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d113      	bne.n	8002432 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e063      	b.n	80024fa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002432:	f7ff feb3 	bl	800219c <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002438:	e021      	b.n	800247e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d01d      	beq.n	800247e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_ADC_PollForConversion+0x6c>
 8002448:	f7ff fea8 	bl	800219c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d212      	bcs.n	800247e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d00b      	beq.n	800247e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e03d      	b.n	80024fa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b02      	cmp	r3, #2
 800248a:	d1d6      	bne.n	800243a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0212 	mvn.w	r2, #18
 8002494:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d123      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11f      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e105      	b.n	8002744 <HAL_ADC_ConfigChannel+0x228>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b05      	subs	r3, #5
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e04c      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d824      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b23      	subs	r3, #35	; 0x23
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e023      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b41      	subs	r3, #65	; 0x41
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b41      	subs	r3, #65	; 0x41
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_ADC_ConfigChannel+0x234>)
 80026c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d123      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x1e6>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d11b      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d111      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_ADC_ConfigChannel+0x23c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_ADC_ConfigChannel+0x240>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9a      	lsrs	r2, r3, #18
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800272c:	e002      	b.n	8002734 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3b01      	subs	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	40012000 	.word	0x40012000
 8002758:	20000014 	.word	0x20000014
 800275c:	431bde83 	.word	0x431bde83

08002760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <ADC_Init+0x1f0>)
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4a58      	ldr	r2, [pc, #352]	; (8002954 <ADC_Init+0x1f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e00f      	b.n	800285e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800285c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0202 	bic.w	r2, r2, #2
 800286c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	035a      	lsls	r2, r3, #13
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e007      	b.n	80028d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	051a      	lsls	r2, r3, #20
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	029a      	lsls	r2, r3, #10
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	0f000001 	.word	0x0f000001

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff4c 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ada:	f7ff ff61 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6978      	ldr	r0, [r7, #20]
 8002ae6:	f7ff ffb1 	bl	8002a4c <NVIC_EncodePriority>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff80 	bl	80029f8 <__NVIC_SetPriority>
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff54 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b2a:	f7ff fb37 	bl	800219c <HAL_GetTick>
 8002b2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d008      	beq.n	8002b4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e052      	b.n	8002bf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0216 	bic.w	r2, r2, #22
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_DMA_Abort+0x62>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9e:	e013      	b.n	8002bc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba0:	f7ff fafc 	bl	800219c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d90c      	bls.n	8002bc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e015      	b.n	8002bf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e4      	bne.n	8002ba0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	223f      	movs	r2, #63	; 0x3f
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00c      	b.n	8002c34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e159      	b.n	8002f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8148 	bne.w	8002f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a2 	beq.w	8002f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_GPIO_Init+0x2f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x202>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x1fe>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <HAL_GPIO_Init+0x2f8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_Init+0x2fc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x1f6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x1f2>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e008      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e006      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e36:	2303      	movs	r3, #3
 8002e38:	e004      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e002      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e42:	2300      	movs	r3, #0
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f002 0203 	and.w	r2, r2, #3
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4093      	lsls	r3, r2
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e54:	4935      	ldr	r1, [pc, #212]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f aea2 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e0bb      	b.n	80030dc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f64:	2201      	movs	r2, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f040 80ab 	bne.w	80030d6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f80:	4a5c      	ldr	r2, [pc, #368]	; (80030f4 <HAL_GPIO_DeInit+0x1ac>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a54      	ldr	r2, [pc, #336]	; (80030f8 <HAL_GPIO_DeInit+0x1b0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_DeInit+0x96>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a53      	ldr	r2, [pc, #332]	; (80030fc <HAL_GPIO_DeInit+0x1b4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_DeInit+0x92>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_GPIO_DeInit+0x1b8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_DeInit+0x8e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	; (8003104 <HAL_GPIO_DeInit+0x1bc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_DeInit+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_GPIO_DeInit+0x1c0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_DeInit+0x86>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e008      	b.n	8002fe0 <HAL_GPIO_DeInit+0x98>
 8002fce:	2307      	movs	r3, #7
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_DeInit+0x98>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <HAL_GPIO_DeInit+0x98>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_DeInit+0x98>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_DeInit+0x98>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d132      	bne.n	8003056 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4944      	ldr	r1, [pc, #272]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ffe:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	4941      	ldr	r1, [pc, #260]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8003008:	4013      	ands	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800300c:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	493d      	ldr	r1, [pc, #244]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8003016:	4013      	ands	r3, r2
 8003018:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	493a      	ldr	r1, [pc, #232]	; (800310c <HAL_GPIO_DeInit+0x1c4>)
 8003024:	4013      	ands	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003038:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <HAL_GPIO_DeInit+0x1ac>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	43da      	mvns	r2, r3
 8003048:	482a      	ldr	r0, [pc, #168]	; (80030f4 <HAL_GPIO_DeInit+0x1ac>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	400a      	ands	r2, r1
 8003050:	3302      	adds	r3, #2
 8003052:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2103      	movs	r1, #3
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	08d2      	lsrs	r2, r2, #3
 800308c:	4019      	ands	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2103      	movs	r1, #3
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	401a      	ands	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	2101      	movs	r1, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2103      	movs	r1, #3
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	f67f af40 	bls.w	8002f64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	40020400 	.word	0x40020400
 8003100:	40020800 	.word	0x40020800
 8003104:	40020c00 	.word	0x40020c00
 8003108:	40021000 	.word	0x40021000
 800310c:	40013c00 	.word	0x40013c00

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e12b      	b.n	80033ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fd3c 	bl	8001be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	; 0x24
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a8:	f001 fd4a 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a81      	ldr	r2, [pc, #516]	; (80033b8 <HAL_I2C_Init+0x274>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d807      	bhi.n	80031c8 <HAL_I2C_Init+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a80      	ldr	r2, [pc, #512]	; (80033bc <HAL_I2C_Init+0x278>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	bf94      	ite	ls
 80031c0:	2301      	movls	r3, #1
 80031c2:	2300      	movhi	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e006      	b.n	80031d6 <HAL_I2C_Init+0x92>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a7d      	ldr	r2, [pc, #500]	; (80033c0 <HAL_I2C_Init+0x27c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0e7      	b.n	80033ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a78      	ldr	r2, [pc, #480]	; (80033c4 <HAL_I2C_Init+0x280>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9b      	lsrs	r3, r3, #18
 80031e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a6a      	ldr	r2, [pc, #424]	; (80033b8 <HAL_I2C_Init+0x274>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d802      	bhi.n	8003218 <HAL_I2C_Init+0xd4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3301      	adds	r3, #1
 8003216:	e009      	b.n	800322c <HAL_I2C_Init+0xe8>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_I2C_Init+0x284>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	3301      	adds	r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800323e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	495c      	ldr	r1, [pc, #368]	; (80033b8 <HAL_I2C_Init+0x274>)
 8003248:	428b      	cmp	r3, r1
 800324a:	d819      	bhi.n	8003280 <HAL_I2C_Init+0x13c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e59      	subs	r1, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fbb1 f3f3 	udiv	r3, r1, r3
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003260:	400b      	ands	r3, r1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_I2C_Init+0x138>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fbb1 f3f3 	udiv	r3, r1, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	e051      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 800327c:	2304      	movs	r3, #4
 800327e:	e04f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <HAL_I2C_Init+0x168>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e012      	b.n	80032d2 <HAL_I2C_Init+0x18e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e58      	subs	r0, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	0099      	lsls	r1, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x196>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e022      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_I2C_Init+0x1bc>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1e58      	subs	r0, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	440b      	add	r3, r1
 80032f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	e00f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	0099      	lsls	r1, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	fbb0 f3f3 	udiv	r3, r0, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6809      	ldr	r1, [r1, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800334e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6911      	ldr	r1, [r2, #16]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	000186a0 	.word	0x000186a0
 80033bc:	001e847f 	.word	0x001e847f
 80033c0:	003d08ff 	.word	0x003d08ff
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	10624dd3 	.word	0x10624dd3

080033cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e021      	b.n	8003422 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2224      	movs	r2, #36	; 0x24
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fc3e 	bl	8001c78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	817b      	strh	r3, [r7, #10]
 800343c:	4613      	mov	r3, r2
 800343e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7fe feac 	bl	800219c <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	f040 80e0 	bne.w	8003614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	4970      	ldr	r1, [pc, #448]	; (8003620 <HAL_I2C_Master_Transmit+0x1f4>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fda0 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	e0d3      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_I2C_Master_Transmit+0x50>
 8003478:	2302      	movs	r3, #2
 800347a:	e0cc      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d007      	beq.n	80034a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2221      	movs	r2, #33	; 0x21
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2210      	movs	r2, #16
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	893a      	ldrh	r2, [r7, #8]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_I2C_Master_Transmit+0x1f8>)
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fbf0 	bl	8003cd0 <I2C_MasterRequestWrite>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e08d      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003510:	e066      	b.n	80035e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6a39      	ldr	r1, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fe1a 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06b      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d11b      	bne.n	80035b4 <HAL_I2C_Master_Transmit+0x188>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d017      	beq.n	80035b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	6a39      	ldr	r1, [r7, #32]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fe0a 	bl	80041d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e01a      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d194      	bne.n	8003512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000

08003628 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003642:	f7fe fdab 	bl	800219c <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	f040 8208 	bne.w	8003a66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2319      	movs	r3, #25
 800365c:	2201      	movs	r2, #1
 800365e:	497b      	ldr	r1, [pc, #492]	; (800384c <HAL_I2C_Mem_Read+0x224>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fc9f 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
 800366e:	e1fb      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2C_Mem_Read+0x56>
 800367a:	2302      	movs	r3, #2
 800367c:	e1f4      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d007      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2222      	movs	r2, #34	; 0x22
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a5b      	ldr	r2, [pc, #364]	; (8003850 <HAL_I2C_Mem_Read+0x228>)
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e6:	88f8      	ldrh	r0, [r7, #6]
 80036e8:	893a      	ldrh	r2, [r7, #8]
 80036ea:	8979      	ldrh	r1, [r7, #10]
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4603      	mov	r3, r0
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb6c 	bl	8003dd4 <I2C_RequestMemoryRead>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1b0      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d113      	bne.n	8003736 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e184      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b01      	cmp	r3, #1
 800373c:	d11b      	bne.n	8003776 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e164      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	2b02      	cmp	r3, #2
 800377c:	d11b      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	e144      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037cc:	e138      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f200 80f1 	bhi.w	80039ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d123      	bne.n	8003828 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fd35 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e139      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003826:	e10b      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b02      	cmp	r3, #2
 800382e:	d14e      	bne.n	80038ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	2200      	movs	r2, #0
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <HAL_I2C_Mem_Read+0x22c>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fbb2 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e10e      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000
 8003854:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038cc:	e0b8      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	2200      	movs	r2, #0
 80038d6:	4966      	ldr	r1, [pc, #408]	; (8003a70 <HAL_I2C_Mem_Read+0x448>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fb63 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0bf      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2200      	movs	r2, #0
 8003932:	494f      	ldr	r1, [pc, #316]	; (8003a70 <HAL_I2C_Mem_Read+0x448>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fb35 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e091      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b8:	e042      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc48 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e04c      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d118      	bne.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f aec2 	bne.w	80037ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00010004 	.word	0x00010004

08003a74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7fe fb8a 	bl	800219c <HAL_GetTick>
 8003a88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	f040 8111 	bne.w	8003cbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2319      	movs	r3, #25
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4988      	ldr	r1, [pc, #544]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa7c 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e104      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2C_IsDeviceReady+0x50>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0fd      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d007      	beq.n	8003aea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2224      	movs	r2, #36	; 0x24
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <HAL_I2C_IsDeviceReady+0x258>)
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fa3a 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d103      	bne.n	8003b4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0b6      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fb1b 	bl	800219c <HAL_GetTick>
 8003b66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b96:	e025      	b.n	8003be4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b98:	f7fe fb00 	bl	800219c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <HAL_I2C_IsDeviceReady+0x13a>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	22a0      	movs	r2, #160	; 0xa0
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2ba0      	cmp	r3, #160	; 0xa0
 8003bee:	d005      	beq.n	8003bfc <HAL_I2C_IsDeviceReady+0x188>
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_I2C_IsDeviceReady+0x188>
 8003bf6:	7dbb      	ldrb	r3, [r7, #22]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0cd      	beq.n	8003b98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d129      	bne.n	8003c66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f9ae 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e036      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e02c      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	490f      	ldr	r1, [pc, #60]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f98a 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e012      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f4ff af32 	bcc.w	8003b0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d006      	beq.n	8003cfa <I2C_MasterRequestWrite+0x2a>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d003      	beq.n	8003cfa <I2C_MasterRequestWrite+0x2a>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf8:	d108      	bne.n	8003d0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e00b      	b.n	8003d24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d107      	bne.n	8003d24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f937 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d103      	bne.n	8003d54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e035      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d60:	d108      	bne.n	8003d74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d70:	611a      	str	r2, [r3, #16]
 8003d72:	e01b      	b.n	8003dac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	11db      	asrs	r3, r3, #7
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f063 030f 	orn	r3, r3, #15
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <I2C_MasterRequestWrite+0xfc>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f95d 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e010      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <I2C_MasterRequestWrite+0x100>)
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f94d 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	00010008 	.word	0x00010008
 8003dd0:	00010002 	.word	0x00010002

08003dd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8c2 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d103      	bne.n	8003e3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0aa      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	4952      	ldr	r1, [pc, #328]	; (8003fa0 <I2C_RequestMemoryRead+0x1cc>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f8fa 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e097      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f964 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e076      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e021      	b.n	8003f00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f93e 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e050      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f923 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d107      	bne.n	8003f28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e035      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f82b 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d103      	bne.n	8003f6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e013      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f70:	897b      	ldrh	r3, [r7, #10]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	4906      	ldr	r1, [pc, #24]	; (8003fa0 <I2C_RequestMemoryRead+0x1cc>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f863 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e025      	b.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d021      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe f8ed 	bl	800219c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e023      	b.n	800404a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10d      	bne.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	e00c      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d0b6      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004060:	e051      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d123      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e046      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d021      	beq.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fe f86b 	bl	800219c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e020      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10c      	bne.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e00b      	b.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d18d      	bne.n	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415c:	e02d      	b.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f8ce 	bl	8004300 <I2C_IsAcknowledgeFailed>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d021      	beq.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fe f811 	bl	800219c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d1ca      	bne.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041de:	e02d      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f88d 	bl	8004300 <I2C_IsAcknowledgeFailed>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e02d      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d021      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7fd ffd0 	bl	800219c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d116      	bne.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d1ca      	bne.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004260:	e042      	b.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d119      	bne.n	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0210 	mvn.w	r2, #16
 8004278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e029      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd ff7a 	bl	800219c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e007      	b.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d1b5      	bne.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d11b      	bne.n	8004350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e267      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d075      	beq.n	800446a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004392:	2b08      	cmp	r3, #8
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a2:	d10b      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b7e      	ldr	r3, [pc, #504]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <HAL_RCC_OscConfig+0x108>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d157      	bne.n	8004468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e242      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x74>
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a75      	ldr	r2, [pc, #468]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01d      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b70      	ldr	r3, [pc, #448]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6f      	ldr	r2, [pc, #444]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6c      	ldr	r2, [pc, #432]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043f8:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fec0 	bl	800219c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd febc 	bl	800219c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e207      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0xc0>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd feac 	bl	800219c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004448:	f7fd fea8 	bl	800219c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1f3      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0xe8>
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448a:	2b08      	cmp	r3, #8
 800448c:	d11c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1c7      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c6:	e03a      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x244>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fe61 	bl	800219c <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044de:	f7fd fe5d 	bl	800219c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1a8      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4925      	ldr	r1, [pc, #148]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCC_OscConfig+0x244>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fe40 	bl	800219c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004520:	f7fd fe3c 	bl	800219c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e187      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d036      	beq.n	80045b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fe20 	bl	800219c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004560:	f7fd fe1c 	bl	800219c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e167      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x200>
 800457e:	e01b      	b.n	80045b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fd fe09 	bl	800219c <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	e00e      	b.n	80045ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458e:	f7fd fe05 	bl	800219c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d907      	bls.n	80045ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e150      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000
 80045a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ea      	bne.n	800458e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8097 	beq.w	80046f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b7d      	ldr	r3, [pc, #500]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a7c      	ldr	r2, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b77      	ldr	r3, [pc, #476]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b74      	ldr	r3, [pc, #464]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fdc5 	bl	800219c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fdc1 	bl	800219c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e10c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_OscConfig+0x474>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x2ea>
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x30c>
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a5e      	ldr	r2, [pc, #376]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800466c:	4b58      	ldr	r3, [pc, #352]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a57      	ldr	r2, [pc, #348]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a54      	ldr	r2, [pc, #336]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 0304 	bic.w	r3, r3, #4
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fd86 	bl	800219c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd fd82 	bl	800219c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0cb      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b49      	ldr	r3, [pc, #292]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCC_OscConfig+0x334>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fd fd70 	bl	800219c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd fd6c 	bl	800219c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b5      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ee      	bne.n	80046c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4a38      	ldr	r2, [pc, #224]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a1 	beq.w	8004840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b08      	cmp	r3, #8
 8004708:	d05c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d141      	bne.n	8004796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd fd40 	bl	800219c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd fd3c 	bl	800219c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	491b      	ldr	r1, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fd fd15 	bl	800219c <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd fd11 	bl	800219c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e05c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x416>
 8004794:	e054      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd fcfe 	bl	800219c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd fcfa 	bl	800219c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e045      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
 80047c2:	e03d      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e038      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x4ec>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d028      	beq.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d121      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cc      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90c      	bls.n	800488c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d044      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e06f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e067      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4934      	ldr	r1, [pc, #208]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fd fc2c 	bl	800219c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fd fc28 	bl	800219c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20c      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd f9ee 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	0800fe08 	.word	0x0800fe08
 8004a14:	20000014 	.word	0x20000014
 8004a18:	20000018 	.word	0x20000018

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b094      	sub	sp, #80	; 0x50
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80e1 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e0db      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a54:	e0db      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b73      	ldr	r3, [pc, #460]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5a:	e0d8      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	0159      	lsls	r1, r3, #5
 8004a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa0:	0150      	lsls	r0, r2, #5
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	1a51      	subs	r1, r2, r1
 8004aaa:	6139      	str	r1, [r7, #16]
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	018b      	lsls	r3, r1, #6
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aca:	4651      	mov	r1, sl
 8004acc:	018a      	lsls	r2, r1, #6
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aee:	4690      	mov	r8, r2
 8004af0:	4699      	mov	r9, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	eb18 0303 	adds.w	r3, r8, r3
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	462b      	mov	r3, r5
 8004afc:	eb49 0303 	adc.w	r3, r9, r3
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	024b      	lsls	r3, r1, #9
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b18:	4621      	mov	r1, r4
 8004b1a:	024a      	lsls	r2, r1, #9
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2c:	f7fc f894 	bl	8000c58 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e058      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2200      	movs	r2, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	4611      	mov	r1, r2
 8004b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b66:	0150      	lsls	r0, r2, #5
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b90:	eb63 050b 	sbc.w	r5, r3, fp
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	00eb      	lsls	r3, r5, #3
 8004b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba2:	00e2      	lsls	r2, r4, #3
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	18e3      	adds	r3, r4, r3
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	028b      	lsls	r3, r1, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bcc:	4621      	mov	r1, r4
 8004bce:	028a      	lsls	r2, r1, #10
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	61fa      	str	r2, [r7, #28]
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	f7fc f83a 	bl	8000c58 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3750      	adds	r7, #80	; 0x50
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000014 	.word	0x20000014

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800fe18 	.word	0x0800fe18

08004c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c6c:	f7ff ffdc 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0b5b      	lsrs	r3, r3, #13
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	0800fe18 	.word	0x0800fe18

08004c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_GetClockConfig+0x5c>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0203 	and.w	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_GetClockConfig+0x5c>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCC_GetClockConfig+0x5c>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_RCC_GetClockConfig+0x5c>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCC_GetClockConfig+0x60>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0207 	and.w	r2, r3, #7
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e041      	b.n	8004d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f839 	bl	8004d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 f9ca 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d001      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e044      	b.n	8004e4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x6c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dea:	d013      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x6c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_TIM_Base_Start_IT+0xb4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x6c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_TIM_Base_Start_IT+0xb8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x6c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x6c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d111      	bne.n	8004e38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d010      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	e007      	b.n	8004e48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40014000 	.word	0x40014000

08004e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8ee 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8e0 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8f1 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0204 	mvn.w	r2, #4
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8c4 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8b6 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8c7 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f89a 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f88c 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f89d 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f870 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f862 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f873 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0201 	mvn.w	r2, #1
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fd74 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8e2 	bl	80051e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f838 	bl	80050b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0220 	mvn.w	r2, #32
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8ac 	bl	80051cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a31      	ldr	r2, [pc, #196]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	; (80051bc <TIM_Base_SetConfig+0xf0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <TIM_Base_SetConfig+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <TIM_Base_SetConfig+0xf4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <TIM_Base_SetConfig+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_Base_SetConfig+0xfc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e03f      	b.n	8005286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc fd50 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	; 0x24
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fc7b 	bl	8005b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800524c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800525c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800526c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0ba      	sub	sp, #232	; 0xe8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_UART_IRQHandler+0x66>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fb65 	bl	80059be <UART_Receive_IT>
      return;
 80052f4:	e256      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80de 	beq.w	80054bc <HAL_UART_IRQHandler+0x22c>
 8005300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80d1 	beq.w	80054bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_UART_IRQHandler+0xae>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xd2>
 800534a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0202 	orr.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_UART_IRQHandler+0xf6>
 800536e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d011      	beq.n	80053b6 <HAL_UART_IRQHandler+0x126>
 8005392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d105      	bne.n	80053aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800539e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 81ed 	beq.w	800579a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_UART_IRQHandler+0x14e>
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 faf0 	bl	80059be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_UART_IRQHandler+0x17a>
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d04f      	beq.n	80054aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9f8 	bl	8005800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d141      	bne.n	80054a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800544a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800544e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1d9      	bne.n	800541e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	4a7d      	ldr	r2, [pc, #500]	; (800566c <HAL_UART_IRQHandler+0x3dc>)
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd fbbc 	bl	8002bfc <HAL_DMA_Abort_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e00e      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f99a 	bl	80057d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00a      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f996 	bl	80057d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e006      	b.n	80054b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f992 	bl	80057d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054b6:	e170      	b.n	800579a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	bf00      	nop
    return;
 80054ba:	e16e      	b.n	800579a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f040 814a 	bne.w	800575a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8143 	beq.w	800575a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 813c 	beq.w	800575a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	f040 80b4 	bne.w	8005670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8140 	beq.w	800579e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005526:	429a      	cmp	r2, r3
 8005528:	f080 8139 	bcs.w	800579e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	f000 8088 	beq.w	8005652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800555c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800556e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800557a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1d9      	bne.n	8005542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800559e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e1      	bne.n	800558e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e3      	bne.n	80055ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005634:	65ba      	str	r2, [r7, #88]	; 0x58
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800563a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e3      	bne.n	8005610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	4618      	mov	r0, r3
 800564e:	f7fd fa65 	bl	8002b1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565a:	b29b      	uxth	r3, r3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b29b      	uxth	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8c0 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005668:	e099      	b.n	800579e <HAL_UART_IRQHandler+0x50e>
 800566a:	bf00      	nop
 800566c:	080058c7 	.word	0x080058c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005678:	b29b      	uxth	r3, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 808b 	beq.w	80057a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800568c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8086 	beq.w	80057a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ba:	647a      	str	r2, [r7, #68]	; 0x44
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	623b      	str	r3, [r7, #32]
   return(result);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056f2:	633a      	str	r2, [r7, #48]	; 0x30
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e3      	bne.n	80056ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60fb      	str	r3, [r7, #12]
   return(result);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005738:	61fa      	str	r2, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	617b      	str	r3, [r7, #20]
   return(result);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e3      	bne.n	8005714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800574c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f848 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005758:	e023      	b.n	80057a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_UART_IRQHandler+0x4ea>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8bb 	bl	80058ee <UART_Transmit_IT>
    return;
 8005778:	e014      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <HAL_UART_IRQHandler+0x514>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f8fb 	bl	800598e <UART_EndTransmit_IT>
    return;
 8005798:	e004      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
    return;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
      return;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <HAL_UART_IRQHandler+0x514>
      return;
 80057a2:	bf00      	nop
  }
}
 80057a4:	37e8      	adds	r7, #232	; 0xe8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b095      	sub	sp, #84	; 0x54
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800581e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005828:	643a      	str	r2, [r7, #64]	; 0x40
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800582e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	61fb      	str	r3, [r7, #28]
   return(result);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	2b01      	cmp	r3, #1
 8005876:	d119      	bne.n	80058ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	60bb      	str	r3, [r7, #8]
   return(result);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f023 0310 	bic.w	r3, r3, #16
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005898:	61ba      	str	r2, [r7, #24]
 800589a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6979      	ldr	r1, [r7, #20]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058ba:	bf00      	nop
 80058bc:	3754      	adds	r7, #84	; 0x54
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ff77 	bl	80057d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b21      	cmp	r3, #33	; 0x21
 8005900:	d13e      	bne.n	8005980 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d114      	bne.n	8005936 <UART_Transmit_IT+0x48>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d110      	bne.n	8005936 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005928:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	1c9a      	adds	r2, r3, #2
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	621a      	str	r2, [r3, #32]
 8005934:	e008      	b.n	8005948 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6211      	str	r1, [r2, #32]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4619      	mov	r1, r3
 8005956:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800596a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fefc 	bl	80057ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08c      	sub	sp, #48	; 0x30
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b22      	cmp	r3, #34	; 0x22
 80059d0:	f040 80ab 	bne.w	8005b2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059dc:	d117      	bne.n	8005a0e <UART_Receive_IT+0x50>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d113      	bne.n	8005a0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a0c:	e026      	b.n	8005a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d007      	beq.n	8005a32 <UART_Receive_IT+0x74>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <UART_Receive_IT+0x82>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e008      	b.n	8005a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d15a      	bne.n	8005b26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0220 	bic.w	r2, r2, #32
 8005a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d135      	bne.n	8005b1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f023 0310 	bic.w	r3, r3, #16
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad6:	623a      	str	r2, [r7, #32]
 8005ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	69f9      	ldr	r1, [r7, #28]
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d10a      	bne.n	8005b0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fe67 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
 8005b1a:	e002      	b.n	8005b22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fe4f 	bl	80057c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e002      	b.n	8005b2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3730      	adds	r7, #48	; 0x30
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b0c0      	sub	sp, #256	; 0x100
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	68d9      	ldr	r1, [r3, #12]
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	ea40 0301 	orr.w	r3, r0, r1
 8005b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b8c:	f021 010c 	bic.w	r1, r1, #12
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	6999      	ldr	r1, [r3, #24]
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	ea40 0301 	orr.w	r3, r0, r1
 8005bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b8f      	ldr	r3, [pc, #572]	; (8005e00 <UART_SetConfig+0x2cc>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d005      	beq.n	8005bd4 <UART_SetConfig+0xa0>
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b8d      	ldr	r3, [pc, #564]	; (8005e04 <UART_SetConfig+0x2d0>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d104      	bne.n	8005bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7ff f848 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bdc:	e003      	b.n	8005be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bde:	f7ff f82f 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8005be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf0:	f040 810c 	bne.w	8005e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	1891      	adds	r1, r2, r2
 8005c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c16:	4621      	mov	r1, r4
 8005c18:	eb12 0801 	adds.w	r8, r2, r1
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	eb43 0901 	adc.w	r9, r3, r1
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c36:	4690      	mov	r8, r2
 8005c38:	4699      	mov	r9, r3
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	eb18 0303 	adds.w	r3, r8, r3
 8005c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c44:	462b      	mov	r3, r5
 8005c46:	eb49 0303 	adc.w	r3, r9, r3
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c62:	460b      	mov	r3, r1
 8005c64:	18db      	adds	r3, r3, r3
 8005c66:	653b      	str	r3, [r7, #80]	; 0x50
 8005c68:	4613      	mov	r3, r2
 8005c6a:	eb42 0303 	adc.w	r3, r2, r3
 8005c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c78:	f7fa ffee 	bl	8000c58 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <UART_SetConfig+0x2d4>)
 8005c82:	fba3 2302 	umull	r2, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	011c      	lsls	r4, r3, #4
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cac:	4641      	mov	r1, r8
 8005cae:	eb12 0a01 	adds.w	sl, r2, r1
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ccc:	4692      	mov	sl, r2
 8005cce:	469b      	mov	fp, r3
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8005cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	18db      	adds	r3, r3, r3
 8005cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cfe:	4613      	mov	r3, r2
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
 8005d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d0e:	f7fa ffa3 	bl	8000c58 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <UART_SetConfig+0x2d4>)
 8005d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	; 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1acb      	subs	r3, r1, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 2302 	umull	r2, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d3c:	441c      	add	r4, r3
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d60:	4641      	mov	r1, r8
 8005d62:	1851      	adds	r1, r2, r1
 8005d64:	6339      	str	r1, [r7, #48]	; 0x30
 8005d66:	4649      	mov	r1, r9
 8005d68:	414b      	adcs	r3, r1
 8005d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d78:	4659      	mov	r1, fp
 8005d7a:	00cb      	lsls	r3, r1, #3
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d82:	4651      	mov	r1, sl
 8005d84:	00ca      	lsls	r2, r1, #3
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d94:	464b      	mov	r3, r9
 8005d96:	460a      	mov	r2, r1
 8005d98:	eb42 0303 	adc.w	r3, r2, r3
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dca:	f7fa ff45 	bl	8000c58 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <UART_SetConfig+0x2d4>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <UART_SetConfig+0x2d4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 0207 	and.w	r2, r3, #7
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4422      	add	r2, r4
 8005dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dfc:	e105      	b.n	800600a <UART_SetConfig+0x4d6>
 8005dfe:	bf00      	nop
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40011400 	.word	0x40011400
 8005e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e1e:	4642      	mov	r2, r8
 8005e20:	464b      	mov	r3, r9
 8005e22:	1891      	adds	r1, r2, r2
 8005e24:	6239      	str	r1, [r7, #32]
 8005e26:	415b      	adcs	r3, r3
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e2e:	4641      	mov	r1, r8
 8005e30:	1854      	adds	r4, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb43 0501 	adc.w	r5, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	00eb      	lsls	r3, r5, #3
 8005e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e46:	00e2      	lsls	r2, r4, #3
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	4643      	mov	r3, r8
 8005e4e:	18e3      	adds	r3, r4, r3
 8005e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e54:	464b      	mov	r3, r9
 8005e56:	eb45 0303 	adc.w	r3, r5, r3
 8005e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	008b      	lsls	r3, r1, #2
 8005e7e:	4621      	mov	r1, r4
 8005e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e84:	4621      	mov	r1, r4
 8005e86:	008a      	lsls	r2, r1, #2
 8005e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e8c:	f7fa fee4 	bl	8000c58 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4b60      	ldr	r3, [pc, #384]	; (8006018 <UART_SetConfig+0x4e4>)
 8005e96:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	011c      	lsls	r4, r3, #4
 8005e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	61b9      	str	r1, [r7, #24]
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	1851      	adds	r1, r2, r1
 8005ec4:	6139      	str	r1, [r7, #16]
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	414b      	adcs	r3, r1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ed8:	4659      	mov	r1, fp
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4651      	mov	r1, sl
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4642      	mov	r2, r8
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f18:	4649      	mov	r1, r9
 8005f1a:	008b      	lsls	r3, r1, #2
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f22:	4641      	mov	r1, r8
 8005f24:	008a      	lsls	r2, r1, #2
 8005f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f2a:	f7fa fe95 	bl	8000c58 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4b39      	ldr	r3, [pc, #228]	; (8006018 <UART_SetConfig+0x4e4>)
 8005f34:	fba3 1302 	umull	r1, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	2164      	movs	r1, #100	; 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	3332      	adds	r3, #50	; 0x32
 8005f46:	4a34      	ldr	r2, [pc, #208]	; (8006018 <UART_SetConfig+0x4e4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f52:	441c      	add	r4, r3
 8005f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f58:	2200      	movs	r2, #0
 8005f5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f5c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f62:	4642      	mov	r2, r8
 8005f64:	464b      	mov	r3, r9
 8005f66:	1891      	adds	r1, r2, r2
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	415b      	adcs	r3, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f72:	4641      	mov	r1, r8
 8005f74:	1851      	adds	r1, r2, r1
 8005f76:	6039      	str	r1, [r7, #0]
 8005f78:	4649      	mov	r1, r9
 8005f7a:	414b      	adcs	r3, r1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	00cb      	lsls	r3, r1, #3
 8005f8e:	4651      	mov	r1, sl
 8005f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f94:	4651      	mov	r1, sl
 8005f96:	00ca      	lsls	r2, r1, #3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	189b      	adds	r3, r3, r2
 8005fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb8:	667a      	str	r2, [r7, #100]	; 0x64
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	008b      	lsls	r3, r1, #2
 8005fca:	4641      	mov	r1, r8
 8005fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	008a      	lsls	r2, r1, #2
 8005fd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fd8:	f7fa fe3e 	bl	8000c58 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <UART_SetConfig+0x4e4>)
 8005fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2164      	movs	r1, #100	; 0x64
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	3332      	adds	r3, #50	; 0x32
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <UART_SetConfig+0x4e4>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4422      	add	r2, r4
 8006008:	609a      	str	r2, [r3, #8]
}
 800600a:	bf00      	nop
 800600c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006016:	bf00      	nop
 8006018:	51eb851f 	.word	0x51eb851f

0800601c <__NVIC_EnableIRQ>:
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db0b      	blt.n	8006046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	f003 021f 	and.w	r2, r3, #31
 8006034:	4907      	ldr	r1, [pc, #28]	; (8006054 <__NVIC_EnableIRQ+0x38>)
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2001      	movs	r0, #1
 800603e:	fa00 f202 	lsl.w	r2, r0, r2
 8006042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000e100 	.word	0xe000e100

08006058 <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8006058:	b490      	push	{r4, r7}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4623      	mov	r3, r4
 8006068:	80fb      	strh	r3, [r7, #6]
 800606a:	4603      	mov	r3, r0
 800606c:	80bb      	strh	r3, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	807b      	strh	r3, [r7, #2]
 8006072:	4613      	mov	r3, r2
 8006074:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	88bb      	ldrh	r3, [r7, #4]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	8a39      	ldrh	r1, [r7, #16]
 800607e:	883a      	ldrh	r2, [r7, #0]
 8006080:	1a8a      	subs	r2, r1, r2
 8006082:	fb03 f202 	mul.w	r2, r3, r2
 8006086:	8879      	ldrh	r1, [r7, #2]
 8006088:	88bb      	ldrh	r3, [r7, #4]
 800608a:	1ac9      	subs	r1, r1, r3
 800608c:	883b      	ldrh	r3, [r7, #0]
 800608e:	440b      	add	r3, r1
 8006090:	fb92 f3f3 	sdiv	r3, r2, r3
 8006094:	b29b      	uxth	r3, r3
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bc90      	pop	{r4, r7}
 800609e:	4770      	bx	lr

080060a0 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <gpio_clk_en+0x78>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d106      	bne.n	80060be <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <gpio_clk_en+0x7c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <gpio_clk_en+0x7c>)
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 80060bc:	e026      	b.n	800610c <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <gpio_clk_en+0x80>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d106      	bne.n	80060d4 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <gpio_clk_en+0x7c>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	4a14      	ldr	r2, [pc, #80]	; (800611c <gpio_clk_en+0x7c>)
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80060d2:	e01b      	b.n	800610c <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <gpio_clk_en+0x84>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d106      	bne.n	80060ea <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <gpio_clk_en+0x7c>)
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	4a0e      	ldr	r2, [pc, #56]	; (800611c <gpio_clk_en+0x7c>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80060e8:	e010      	b.n	800610c <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a0e      	ldr	r2, [pc, #56]	; (8006128 <gpio_clk_en+0x88>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d106      	bne.n	8006100 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <gpio_clk_en+0x7c>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <gpio_clk_en+0x7c>)
 80060f8:	f043 0308 	orr.w	r3, r3, #8
 80060fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80060fe:	e005      	b.n	800610c <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <gpio_clk_en+0x7c>)
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	4a05      	ldr	r2, [pc, #20]	; (800611c <gpio_clk_en+0x7c>)
 8006106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40020000 	.word	0x40020000
 800611c:	40023800 	.word	0x40023800
 8006120:	40020400 	.word	0x40020400
 8006124:	40020800 	.word	0x40020800
 8006128:	40020c00 	.word	0x40020c00

0800612c <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d117      	bne.n	8006170 <gpio_config+0x44>
		gpio_clk_en(port);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ffad 	bl	80060a0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f846 	bl	80061dc <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f85b 	bl	8006210 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f870 	bl	8006244 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f885 	bl	8006278 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 800616e:	e031      	b.n	80061d4 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <gpio_config+0x66>
		gpio_clk_en(port);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff92 	bl	80060a0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f82b 	bl	80061dc <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f85a 	bl	8006244 <gpio_PUPD>
}
 8006190:	e020      	b.n	80061d4 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d112      	bne.n	80061be <gpio_config+0x92>
		gpio_clk_en(port);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff ff81 	bl	80060a0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f81a 	bl	80061dc <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f849 	bl	8006244 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f85e 	bl	8006278 <gpio_PHPL_OD>
}
 80061bc:	e00a      	b.n	80061d4 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d107      	bne.n	80061d4 <gpio_config+0xa8>
		gpio_clk_en(port);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff6b 	bl	80060a0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f804 	bl	80061dc <gpio_moder>
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4907      	ldr	r1, [pc, #28]	; (800620c <gpio_moder+0x30>)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000020 	.word	0x20000020

08006210 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	4907      	ldr	r1, [pc, #28]	; (8006240 <gpio_speed+0x30>)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	431a      	orrs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20000020 	.word	0x20000020

08006244 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	4907      	ldr	r1, [pc, #28]	; (8006274 <gpio_PUPD+0x30>)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	431a      	orrs	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	60da      	str	r2, [r3, #12]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	20000020 	.word	0x20000020

08006278 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <gpio_write>:
}

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 80062b6:	2201      	movs	r2, #1
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 80062c4:	e007      	b.n	80062d6 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3310      	adds	r3, #16
 80062ca:	2201      	movs	r2, #1
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	619a      	str	r2, [r3, #24]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
	SYSCFG_CLK_EN;
 80062f2:	4baa      	ldr	r3, [pc, #680]	; (800659c <gpio_IT_config+0x2b8>)
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	4aa9      	ldr	r2, [pc, #676]	; (800659c <gpio_IT_config+0x2b8>)
 80062f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fc:	6453      	str	r3, [r2, #68]	; 0x44
	if (port == GPIOA) {
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4aa7      	ldr	r2, [pc, #668]	; (80065a0 <gpio_IT_config+0x2bc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d166      	bne.n	80063d4 <gpio_IT_config+0xf0>
		switch (pinNumber) {
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b0f      	cmp	r3, #15
 800630a:	f200 81ca 	bhi.w	80066a2 <gpio_IT_config+0x3be>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <gpio_IT_config+0x30>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006355 	.word	0x08006355
 8006318:	0800635d 	.word	0x0800635d
 800631c:	08006365 	.word	0x08006365
 8006320:	0800636d 	.word	0x0800636d
 8006324:	08006375 	.word	0x08006375
 8006328:	0800637d 	.word	0x0800637d
 800632c:	08006385 	.word	0x08006385
 8006330:	0800638d 	.word	0x0800638d
 8006334:	08006395 	.word	0x08006395
 8006338:	0800639d 	.word	0x0800639d
 800633c:	080063a5 	.word	0x080063a5
 8006340:	080063ad 	.word	0x080063ad
 8006344:	080063b5 	.word	0x080063b5
 8006348:	080063bd 	.word	0x080063bd
 800634c:	080063c5 	.word	0x080063c5
 8006350:	080063cd 	.word	0x080063cd
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8006354:	4b93      	ldr	r3, [pc, #588]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
			break;
 800635a:	e1a2      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 800635c:	4b91      	ldr	r3, [pc, #580]	; (80065a4 <gpio_IT_config+0x2c0>)
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
			break;
 8006362:	e19e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8006364:	4b8f      	ldr	r3, [pc, #572]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
			break;
 800636a:	e19a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 800636c:	4b8d      	ldr	r3, [pc, #564]	; (80065a4 <gpio_IT_config+0x2c0>)
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
			break;
 8006372:	e196      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8006374:	4b8b      	ldr	r3, [pc, #556]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006376:	2200      	movs	r2, #0
 8006378:	60da      	str	r2, [r3, #12]
			break;
 800637a:	e192      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 800637c:	4b89      	ldr	r3, [pc, #548]	; (80065a4 <gpio_IT_config+0x2c0>)
 800637e:	2200      	movs	r2, #0
 8006380:	60da      	str	r2, [r3, #12]
			break;
 8006382:	e18e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8006384:	4b87      	ldr	r3, [pc, #540]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
			break;
 800638a:	e18a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 800638c:	4b85      	ldr	r3, [pc, #532]	; (80065a4 <gpio_IT_config+0x2c0>)
 800638e:	2200      	movs	r2, #0
 8006390:	60da      	str	r2, [r3, #12]
			break;
 8006392:	e186      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8006394:	4b83      	ldr	r3, [pc, #524]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006396:	2200      	movs	r2, #0
 8006398:	611a      	str	r2, [r3, #16]
			break;
 800639a:	e182      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 800639c:	4b81      	ldr	r3, [pc, #516]	; (80065a4 <gpio_IT_config+0x2c0>)
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
			break;
 80063a2:	e17e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 80063a4:	4b7f      	ldr	r3, [pc, #508]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]
			break;
 80063aa:	e17a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 80063ac:	4b7d      	ldr	r3, [pc, #500]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	611a      	str	r2, [r3, #16]
			break;
 80063b2:	e176      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 80063b4:	4b7b      	ldr	r3, [pc, #492]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	615a      	str	r2, [r3, #20]
			break;
 80063ba:	e172      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 80063bc:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063be:	2200      	movs	r2, #0
 80063c0:	615a      	str	r2, [r3, #20]
			break;
 80063c2:	e16e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 80063c4:	4b77      	ldr	r3, [pc, #476]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	615a      	str	r2, [r3, #20]
			break;
 80063ca:	e16a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 80063cc:	4b75      	ldr	r3, [pc, #468]	; (80065a4 <gpio_IT_config+0x2c0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	615a      	str	r2, [r3, #20]
			break;
 80063d2:	e166      	b.n	80066a2 <gpio_IT_config+0x3be>
		}	// end of Port A
	} else if (port == GPIOB) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a74      	ldr	r2, [pc, #464]	; (80065a8 <gpio_IT_config+0x2c4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d16f      	bne.n	80064bc <gpio_IT_config+0x1d8>
		switch (pinNumber) {
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	f200 815f 	bhi.w	80066a2 <gpio_IT_config+0x3be>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <gpio_IT_config+0x108>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	08006435 	.word	0x08006435
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	08006447 	.word	0x08006447
 80063fc:	08006451 	.word	0x08006451
 8006400:	08006459 	.word	0x08006459
 8006404:	08006461 	.word	0x08006461
 8006408:	0800646b 	.word	0x0800646b
 800640c:	08006475 	.word	0x08006475
 8006410:	0800647d 	.word	0x0800647d
 8006414:	08006485 	.word	0x08006485
 8006418:	0800648f 	.word	0x0800648f
 800641c:	08006499 	.word	0x08006499
 8006420:	080064a1 	.word	0x080064a1
 8006424:	080064a9 	.word	0x080064a9
 8006428:	080064b3 	.word	0x080064b3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 800642c:	4b5d      	ldr	r3, [pc, #372]	; (80065a4 <gpio_IT_config+0x2c0>)
 800642e:	2201      	movs	r2, #1
 8006430:	609a      	str	r2, [r3, #8]
			break;
 8006432:	e136      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8006434:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006436:	2210      	movs	r2, #16
 8006438:	609a      	str	r2, [r3, #8]
			break;
 800643a:	e132      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 800643c:	4b59      	ldr	r3, [pc, #356]	; (80065a4 <gpio_IT_config+0x2c0>)
 800643e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006442:	609a      	str	r2, [r3, #8]
			break;
 8006444:	e12d      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8006446:	4b57      	ldr	r3, [pc, #348]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800644c:	609a      	str	r2, [r3, #8]
			break;
 800644e:	e128      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8006450:	4b54      	ldr	r3, [pc, #336]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006452:	2201      	movs	r2, #1
 8006454:	60da      	str	r2, [r3, #12]
			break;
 8006456:	e124      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8006458:	4b52      	ldr	r3, [pc, #328]	; (80065a4 <gpio_IT_config+0x2c0>)
 800645a:	2210      	movs	r2, #16
 800645c:	60da      	str	r2, [r3, #12]
			break;
 800645e:	e120      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8006460:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006466:	60da      	str	r2, [r3, #12]
			break;
 8006468:	e11b      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 800646a:	4b4e      	ldr	r3, [pc, #312]	; (80065a4 <gpio_IT_config+0x2c0>)
 800646c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006470:	60da      	str	r2, [r3, #12]
			break;
 8006472:	e116      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8006474:	4b4b      	ldr	r3, [pc, #300]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006476:	2201      	movs	r2, #1
 8006478:	611a      	str	r2, [r3, #16]
			break;
 800647a:	e112      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 800647c:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <gpio_IT_config+0x2c0>)
 800647e:	2210      	movs	r2, #16
 8006480:	611a      	str	r2, [r3, #16]
			break;
 8006482:	e10e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8006484:	4b47      	ldr	r3, [pc, #284]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800648a:	611a      	str	r2, [r3, #16]
			break;
 800648c:	e109      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 800648e:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006494:	611a      	str	r2, [r3, #16]
			break;
 8006496:	e104      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8006498:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <gpio_IT_config+0x2c0>)
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
			break;
 800649e:	e100      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 80064a0:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <gpio_IT_config+0x2c0>)
 80064a2:	2210      	movs	r2, #16
 80064a4:	615a      	str	r2, [r3, #20]
			break;
 80064a6:	e0fc      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 80064a8:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <gpio_IT_config+0x2c0>)
 80064aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ae:	615a      	str	r2, [r3, #20]
			break;
 80064b0:	e0f7      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 80064b2:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <gpio_IT_config+0x2c0>)
 80064b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064b8:	615a      	str	r2, [r3, #20]
			break;
 80064ba:	e0f2      	b.n	80066a2 <gpio_IT_config+0x3be>
		}	// end of Port B
	} else if (port == GPIOC) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a3b      	ldr	r2, [pc, #236]	; (80065ac <gpio_IT_config+0x2c8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d17a      	bne.n	80065ba <gpio_IT_config+0x2d6>
		switch (pinNumber) {
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	f200 80eb 	bhi.w	80066a2 <gpio_IT_config+0x3be>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <gpio_IT_config+0x1f0>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	08006515 	.word	0x08006515
 80064d8:	0800651d 	.word	0x0800651d
 80064dc:	08006525 	.word	0x08006525
 80064e0:	0800652f 	.word	0x0800652f
 80064e4:	08006539 	.word	0x08006539
 80064e8:	08006541 	.word	0x08006541
 80064ec:	08006549 	.word	0x08006549
 80064f0:	08006553 	.word	0x08006553
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	08006565 	.word	0x08006565
 80064fc:	0800656d 	.word	0x0800656d
 8006500:	08006577 	.word	0x08006577
 8006504:	08006581 	.word	0x08006581
 8006508:	08006589 	.word	0x08006589
 800650c:	08006591 	.word	0x08006591
 8006510:	080065b1 	.word	0x080065b1
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006516:	2202      	movs	r2, #2
 8006518:	609a      	str	r2, [r3, #8]
			break;
 800651a:	e0c2      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <gpio_IT_config+0x2c0>)
 800651e:	2220      	movs	r2, #32
 8006520:	609a      	str	r2, [r3, #8]
			break;
 8006522:	e0be      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8006524:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800652a:	609a      	str	r2, [r3, #8]
			break;
 800652c:	e0b9      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006534:	609a      	str	r2, [r3, #8]
			break;
 8006536:	e0b4      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <gpio_IT_config+0x2c0>)
 800653a:	2202      	movs	r2, #2
 800653c:	60da      	str	r2, [r3, #12]
			break;
 800653e:	e0b0      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8006540:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006542:	2220      	movs	r2, #32
 8006544:	60da      	str	r2, [r3, #12]
			break;
 8006546:	e0ac      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <gpio_IT_config+0x2c0>)
 800654a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654e:	60da      	str	r2, [r3, #12]
			break;
 8006550:	e0a7      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006558:	60da      	str	r2, [r3, #12]
			break;
 800655a:	e0a2      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <gpio_IT_config+0x2c0>)
 800655e:	2202      	movs	r2, #2
 8006560:	611a      	str	r2, [r3, #16]
			break;
 8006562:	e09e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006566:	2220      	movs	r2, #32
 8006568:	611a      	str	r2, [r3, #16]
			break;
 800656a:	e09a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <gpio_IT_config+0x2c0>)
 800656e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006572:	611a      	str	r2, [r3, #16]
			break;
 8006574:	e095      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800657c:	611a      	str	r2, [r3, #16]
			break;
 800657e:	e090      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8006580:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006582:	2202      	movs	r2, #2
 8006584:	615a      	str	r2, [r3, #20]
			break;
 8006586:	e08c      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <gpio_IT_config+0x2c0>)
 800658a:	2220      	movs	r2, #32
 800658c:	615a      	str	r2, [r3, #20]
			break;
 800658e:	e088      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <gpio_IT_config+0x2c0>)
 8006592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006596:	615a      	str	r2, [r3, #20]
			break;
 8006598:	e083      	b.n	80066a2 <gpio_IT_config+0x3be>
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800
 80065a0:	40020000 	.word	0x40020000
 80065a4:	40013800 	.word	0x40013800
 80065a8:	40020400 	.word	0x40020400
 80065ac:	40020800 	.word	0x40020800
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 80065b0:	4b58      	ldr	r3, [pc, #352]	; (8006714 <gpio_IT_config+0x430>)
 80065b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b6:	615a      	str	r2, [r3, #20]
			break;
 80065b8:	e073      	b.n	80066a2 <gpio_IT_config+0x3be>
		}	// end of Port C
	} else if (port == GPIOD) {
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a56      	ldr	r2, [pc, #344]	; (8006718 <gpio_IT_config+0x434>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d16e      	bne.n	80066a0 <gpio_IT_config+0x3bc>
		switch (pinNumber) {
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b0f      	cmp	r3, #15
 80065c6:	d86c      	bhi.n	80066a2 <gpio_IT_config+0x3be>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <gpio_IT_config+0x2ec>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006611 	.word	0x08006611
 80065d4:	08006619 	.word	0x08006619
 80065d8:	08006621 	.word	0x08006621
 80065dc:	0800662b 	.word	0x0800662b
 80065e0:	08006635 	.word	0x08006635
 80065e4:	0800663d 	.word	0x0800663d
 80065e8:	08006645 	.word	0x08006645
 80065ec:	0800664f 	.word	0x0800664f
 80065f0:	08006659 	.word	0x08006659
 80065f4:	08006661 	.word	0x08006661
 80065f8:	08006669 	.word	0x08006669
 80065fc:	08006673 	.word	0x08006673
 8006600:	0800667d 	.word	0x0800667d
 8006604:	08006685 	.word	0x08006685
 8006608:	0800668d 	.word	0x0800668d
 800660c:	08006697 	.word	0x08006697
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8006610:	4b40      	ldr	r3, [pc, #256]	; (8006714 <gpio_IT_config+0x430>)
 8006612:	2203      	movs	r2, #3
 8006614:	609a      	str	r2, [r3, #8]
			break;
 8006616:	e044      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8006618:	4b3e      	ldr	r3, [pc, #248]	; (8006714 <gpio_IT_config+0x430>)
 800661a:	2230      	movs	r2, #48	; 0x30
 800661c:	609a      	str	r2, [r3, #8]
			break;
 800661e:	e040      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8006620:	4b3c      	ldr	r3, [pc, #240]	; (8006714 <gpio_IT_config+0x430>)
 8006622:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006626:	609a      	str	r2, [r3, #8]
			break;
 8006628:	e03b      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 800662a:	4b3a      	ldr	r3, [pc, #232]	; (8006714 <gpio_IT_config+0x430>)
 800662c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006630:	609a      	str	r2, [r3, #8]
			break;
 8006632:	e036      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8006634:	4b37      	ldr	r3, [pc, #220]	; (8006714 <gpio_IT_config+0x430>)
 8006636:	2203      	movs	r2, #3
 8006638:	60da      	str	r2, [r3, #12]
			break;
 800663a:	e032      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 800663c:	4b35      	ldr	r3, [pc, #212]	; (8006714 <gpio_IT_config+0x430>)
 800663e:	2230      	movs	r2, #48	; 0x30
 8006640:	60da      	str	r2, [r3, #12]
			break;
 8006642:	e02e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8006644:	4b33      	ldr	r3, [pc, #204]	; (8006714 <gpio_IT_config+0x430>)
 8006646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800664a:	60da      	str	r2, [r3, #12]
			break;
 800664c:	e029      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 800664e:	4b31      	ldr	r3, [pc, #196]	; (8006714 <gpio_IT_config+0x430>)
 8006650:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006654:	60da      	str	r2, [r3, #12]
			break;
 8006656:	e024      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8006658:	4b2e      	ldr	r3, [pc, #184]	; (8006714 <gpio_IT_config+0x430>)
 800665a:	2203      	movs	r2, #3
 800665c:	611a      	str	r2, [r3, #16]
			break;
 800665e:	e020      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8006660:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <gpio_IT_config+0x430>)
 8006662:	2230      	movs	r2, #48	; 0x30
 8006664:	611a      	str	r2, [r3, #16]
			break;
 8006666:	e01c      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8006668:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <gpio_IT_config+0x430>)
 800666a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800666e:	611a      	str	r2, [r3, #16]
			break;
 8006670:	e017      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8006672:	4b28      	ldr	r3, [pc, #160]	; (8006714 <gpio_IT_config+0x430>)
 8006674:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006678:	611a      	str	r2, [r3, #16]
			break;
 800667a:	e012      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 800667c:	4b25      	ldr	r3, [pc, #148]	; (8006714 <gpio_IT_config+0x430>)
 800667e:	2203      	movs	r2, #3
 8006680:	615a      	str	r2, [r3, #20]
			break;
 8006682:	e00e      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <gpio_IT_config+0x430>)
 8006686:	2230      	movs	r2, #48	; 0x30
 8006688:	615a      	str	r2, [r3, #20]
			break;
 800668a:	e00a      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 800668c:	4b21      	ldr	r3, [pc, #132]	; (8006714 <gpio_IT_config+0x430>)
 800668e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006692:	615a      	str	r2, [r3, #20]
			break;
 8006694:	e005      	b.n	80066a2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8006696:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <gpio_IT_config+0x430>)
 8006698:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800669c:	615a      	str	r2, [r3, #20]
			break;
 800669e:	e000      	b.n	80066a2 <gpio_IT_config+0x3be>
		}	// end of Port D
	}
 80066a0:	bf00      	nop

	if (edge == RISING_EDGE) {
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <gpio_IT_config+0x3da>
		EXTI->RTSR |= 1 << pinNumber;
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <gpio_IT_config+0x438>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2101      	movs	r1, #1
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	fa01 f202 	lsl.w	r2, r1, r2
 80066b4:	4611      	mov	r1, r2
 80066b6:	4a19      	ldr	r2, [pc, #100]	; (800671c <gpio_IT_config+0x438>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 80066bc:	e024      	b.n	8006708 <gpio_IT_config+0x424>
	} else if (edge == FALLING_EDGE) {
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d10a      	bne.n	80066da <gpio_IT_config+0x3f6>
		EXTI->FTSR |= 1 << pinNumber;
 80066c4:	4b15      	ldr	r3, [pc, #84]	; (800671c <gpio_IT_config+0x438>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2101      	movs	r1, #1
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	fa01 f202 	lsl.w	r2, r1, r2
 80066d0:	4611      	mov	r1, r2
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <gpio_IT_config+0x438>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	60d3      	str	r3, [r2, #12]
}
 80066d8:	e016      	b.n	8006708 <gpio_IT_config+0x424>
	} else if (edge == RISING_FALLING_EDGE) {
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d113      	bne.n	8006708 <gpio_IT_config+0x424>
		EXTI->RTSR |= 1 << pinNumber;
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <gpio_IT_config+0x438>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2101      	movs	r1, #1
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ec:	4611      	mov	r1, r2
 80066ee:	4a0b      	ldr	r2, [pc, #44]	; (800671c <gpio_IT_config+0x438>)
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <gpio_IT_config+0x438>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2101      	movs	r1, #1
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006700:	4611      	mov	r1, r2
 8006702:	4a06      	ldr	r2, [pc, #24]	; (800671c <gpio_IT_config+0x438>)
 8006704:	430b      	orrs	r3, r1
 8006706:	60d3      	str	r3, [r2, #12]
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40013800 	.word	0x40013800
 8006718:	40020c00 	.word	0x40020c00
 800671c:	40013c00 	.word	0x40013c00

08006720 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	460a      	mov	r2, r1
 800672a:	71fb      	strb	r3, [r7, #7]
 800672c:	4613      	mov	r3, r2
 800672e:	71bb      	strb	r3, [r7, #6]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <gpio_IT_EN+0x38>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	79fa      	ldrb	r2, [r7, #7]
 8006736:	2101      	movs	r1, #1
 8006738:	fa01 f202 	lsl.w	r2, r1, r2
 800673c:	4611      	mov	r1, r2
 800673e:	4a06      	ldr	r2, [pc, #24]	; (8006758 <gpio_IT_EN+0x38>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8006744:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fc67 	bl	800601c <__NVIC_EnableIRQ>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40013c00 	.word	0x40013c00

0800675c <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <gpio_IT_CHK+0x30>)
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	79fa      	ldrb	r2, [r7, #7]
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f202 	lsl.w	r2, r1, r2
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <gpio_IT_CHK+0x20>
		return 1;
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <gpio_IT_CHK+0x22>
	} else {
		return 0;
 800677c:	2300      	movs	r3, #0
	}
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40013c00 	.word	0x40013c00

08006790 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <gpio_IT_CLR+0x20>)
 80067a2:	615a      	str	r2, [r3, #20]
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40013c00 	.word	0x40013c00

080067b4 <USART_WRITE>:
	}

}

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 80067c6:	2300      	movs	r3, #0
 80067c8:	82fb      	strh	r3, [r7, #22]
 80067ca:	e017      	b.n	80067fc <USART_WRITE+0x48>
		if (len == 1) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d103      	bne.n	80067da <USART_WRITE+0x26>
			usart->DR = ch;
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	e006      	b.n	80067e8 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 80067da:	8afb      	ldrh	r3, [r7, #22]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4413      	add	r3, r2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 80067e8:	bf00      	nop
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f9      	beq.n	80067ea <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 80067f6:	8afb      	ldrh	r3, [r7, #22]
 80067f8:	3301      	adds	r3, #1
 80067fa:	82fb      	strh	r3, [r7, #22]
 80067fc:	8afb      	ldrh	r3, [r7, #22]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d8e3      	bhi.n	80067cc <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8006814:	b40f      	push	{r0, r1, r2, r3}
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800682a:	480a      	ldr	r0, [pc, #40]	; (8006854 <print+0x40>)
 800682c:	f006 fb1a 	bl	800ce64 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8006830:	4808      	ldr	r0, [pc, #32]	; (8006854 <print+0x40>)
 8006832:	f7f9 fcd5 	bl	80001e0 <strlen>
 8006836:	4603      	mov	r3, r0
 8006838:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	2364      	movs	r3, #100	; 0x64
 800683e:	4905      	ldr	r1, [pc, #20]	; (8006854 <print+0x40>)
 8006840:	4805      	ldr	r0, [pc, #20]	; (8006858 <print+0x44>)
 8006842:	f7ff ffb7 	bl	80067b4 <USART_WRITE>

}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006850:	b004      	add	sp, #16
 8006852:	4770      	bx	lr
 8006854:	20000758 	.word	0x20000758
 8006858:	40004400 	.word	0x40004400

0800685c <ESP_Init>:
char *REFRESH = "<a class=\"button button-on\" href=\"/hms\">Refresh</a>";
char *Terminate = "</body></html>";

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b098      	sub	sp, #96	; 0x60
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8006866:	f001 ff13 	bl	8008690 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800686a:	4966      	ldr	r1, [pc, #408]	; (8006a04 <ESP_Init+0x1a8>)
 800686c:	4866      	ldr	r0, [pc, #408]	; (8006a08 <ESP_Init+0x1ac>)
 800686e:	f002 f980 	bl	8008b72 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8006872:	4966      	ldr	r1, [pc, #408]	; (8006a0c <ESP_Init+0x1b0>)
 8006874:	4866      	ldr	r0, [pc, #408]	; (8006a10 <ESP_Init+0x1b4>)
 8006876:	f002 f97c 	bl	8008b72 <Uart_sendstring>
	for (int i = 0; i < 5; i++) {
 800687a:	2300      	movs	r3, #0
 800687c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800687e:	e00a      	b.n	8006896 <ESP_Init+0x3a>
		Uart_sendstring(".", pc_uart);
 8006880:	4962      	ldr	r1, [pc, #392]	; (8006a0c <ESP_Init+0x1b0>)
 8006882:	4864      	ldr	r0, [pc, #400]	; (8006a14 <ESP_Init+0x1b8>)
 8006884:	f002 f975 	bl	8008b72 <Uart_sendstring>
		HAL_Delay(1000);
 8006888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800688c:	f7fb fc92 	bl	80021b4 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 8006890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006892:	3301      	adds	r3, #1
 8006894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006898:	2b04      	cmp	r3, #4
 800689a:	ddf1      	ble.n	8006880 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 800689c:	4859      	ldr	r0, [pc, #356]	; (8006a04 <ESP_Init+0x1a8>)
 800689e:	f001 ffb5 	bl	800880c <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 80068a2:	4958      	ldr	r1, [pc, #352]	; (8006a04 <ESP_Init+0x1a8>)
 80068a4:	485c      	ldr	r0, [pc, #368]	; (8006a18 <ESP_Init+0x1bc>)
 80068a6:	f002 f964 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80068aa:	bf00      	nop
 80068ac:	4955      	ldr	r1, [pc, #340]	; (8006a04 <ESP_Init+0x1a8>)
 80068ae:	485b      	ldr	r0, [pc, #364]	; (8006a1c <ESP_Init+0x1c0>)
 80068b0:	f002 f9f4 	bl	8008c9c <Wait_for>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f8      	beq.n	80068ac <ESP_Init+0x50>
		;
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80068ba:	4954      	ldr	r1, [pc, #336]	; (8006a0c <ESP_Init+0x1b0>)
 80068bc:	4858      	ldr	r0, [pc, #352]	; (8006a20 <ESP_Init+0x1c4>)
 80068be:	f002 f958 	bl	8008b72 <Uart_sendstring>

	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 80068c2:	4850      	ldr	r0, [pc, #320]	; (8006a04 <ESP_Init+0x1a8>)
 80068c4:	f001 ffa2 	bl	800880c <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80068c8:	494e      	ldr	r1, [pc, #312]	; (8006a04 <ESP_Init+0x1a8>)
 80068ca:	4856      	ldr	r0, [pc, #344]	; (8006a24 <ESP_Init+0x1c8>)
 80068cc:	f002 f951 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80068d0:	bf00      	nop
 80068d2:	494c      	ldr	r1, [pc, #304]	; (8006a04 <ESP_Init+0x1a8>)
 80068d4:	4851      	ldr	r0, [pc, #324]	; (8006a1c <ESP_Init+0x1c0>)
 80068d6:	f002 f9e1 	bl	8008c9c <Wait_for>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f8      	beq.n	80068d2 <ESP_Init+0x76>
		;
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80068e0:	494a      	ldr	r1, [pc, #296]	; (8006a0c <ESP_Init+0x1b0>)
 80068e2:	4851      	ldr	r0, [pc, #324]	; (8006a28 <ESP_Init+0x1cc>)
 80068e4:	f002 f945 	bl	8008b72 <Uart_sendstring>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 80068e8:	4846      	ldr	r0, [pc, #280]	; (8006a04 <ESP_Init+0x1a8>)
 80068ea:	f001 ff8f 	bl	800880c <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80068ee:	4947      	ldr	r1, [pc, #284]	; (8006a0c <ESP_Init+0x1b0>)
 80068f0:	484e      	ldr	r0, [pc, #312]	; (8006a2c <ESP_Init+0x1d0>)
 80068f2:	f002 f93e 	bl	8008b72 <Uart_sendstring>
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80068f6:	f107 0008 	add.w	r0, r7, #8
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	494c      	ldr	r1, [pc, #304]	; (8006a30 <ESP_Init+0x1d4>)
 8006900:	f006 fa12 	bl	800cd28 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	493e      	ldr	r1, [pc, #248]	; (8006a04 <ESP_Init+0x1a8>)
 800690a:	4618      	mov	r0, r3
 800690c:	f002 f931 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8006910:	bf00      	nop
 8006912:	493c      	ldr	r1, [pc, #240]	; (8006a04 <ESP_Init+0x1a8>)
 8006914:	4841      	ldr	r0, [pc, #260]	; (8006a1c <ESP_Init+0x1c0>)
 8006916:	f002 f9c1 	bl	8008c9c <Wait_for>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f8      	beq.n	8006912 <ESP_Init+0xb6>
		;
	sprintf(data, "Connected to,\"%s\"\n\n", SSID);
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4943      	ldr	r1, [pc, #268]	; (8006a34 <ESP_Init+0x1d8>)
 8006928:	4618      	mov	r0, r3
 800692a:	f006 f9fd 	bl	800cd28 <siprintf>
	Uart_sendstring(data, pc_uart);
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4936      	ldr	r1, [pc, #216]	; (8006a0c <ESP_Init+0x1b0>)
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f91c 	bl	8008b72 <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 800693a:	4832      	ldr	r0, [pc, #200]	; (8006a04 <ESP_Init+0x1a8>)
 800693c:	f001 ff66 	bl	800880c <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8006940:	4930      	ldr	r1, [pc, #192]	; (8006a04 <ESP_Init+0x1a8>)
 8006942:	483d      	ldr	r0, [pc, #244]	; (8006a38 <ESP_Init+0x1dc>)
 8006944:	f002 f915 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)))
 8006948:	bf00      	nop
 800694a:	492e      	ldr	r1, [pc, #184]	; (8006a04 <ESP_Init+0x1a8>)
 800694c:	483b      	ldr	r0, [pc, #236]	; (8006a3c <ESP_Init+0x1e0>)
 800694e:	f002 f9a5 	bl	8008c9c <Wait_for>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f8      	beq.n	800694a <ESP_Init+0xee>
		;
	while (!(Copy_upto("\"", buffer, wifi_uart)))
 8006958:	bf00      	nop
 800695a:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <ESP_Init+0x1a8>)
 800695c:	4938      	ldr	r1, [pc, #224]	; (8006a40 <ESP_Init+0x1e4>)
 800695e:	4839      	ldr	r0, [pc, #228]	; (8006a44 <ESP_Init+0x1e8>)
 8006960:	f002 f91e 	bl	8008ba0 <Copy_upto>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f7      	beq.n	800695a <ESP_Init+0xfe>
		;
	while (!(Wait_for("OK\r\n", wifi_uart)))
 800696a:	bf00      	nop
 800696c:	4925      	ldr	r1, [pc, #148]	; (8006a04 <ESP_Init+0x1a8>)
 800696e:	482b      	ldr	r0, [pc, #172]	; (8006a1c <ESP_Init+0x1c0>)
 8006970:	f002 f994 	bl	8008c9c <Wait_for>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f8      	beq.n	800696c <ESP_Init+0x110>
		;
	int len = strlen(buffer);
 800697a:	4831      	ldr	r0, [pc, #196]	; (8006a40 <ESP_Init+0x1e4>)
 800697c:	f7f9 fc30 	bl	80001e0 <strlen>
 8006980:	4603      	mov	r3, r0
 8006982:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len - 1] = '\0';
 8006984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006986:	3b01      	subs	r3, #1
 8006988:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <ESP_Init+0x1e4>)
 800698a:	2100      	movs	r1, #0
 800698c:	54d1      	strb	r1, [r2, r3]
	sprintf(data, "IP ADDR: %s\n\n", buffer);
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <ESP_Init+0x1e4>)
 8006994:	492c      	ldr	r1, [pc, #176]	; (8006a48 <ESP_Init+0x1ec>)
 8006996:	4618      	mov	r0, r3
 8006998:	f006 f9c6 	bl	800cd28 <siprintf>
	Uart_sendstring(data, pc_uart);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	491a      	ldr	r1, [pc, #104]	; (8006a0c <ESP_Init+0x1b0>)
 80069a2:	4618      	mov	r0, r3
 80069a4:	f002 f8e5 	bl	8008b72 <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 80069a8:	4816      	ldr	r0, [pc, #88]	; (8006a04 <ESP_Init+0x1a8>)
 80069aa:	f001 ff2f 	bl	800880c <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80069ae:	4915      	ldr	r1, [pc, #84]	; (8006a04 <ESP_Init+0x1a8>)
 80069b0:	4826      	ldr	r0, [pc, #152]	; (8006a4c <ESP_Init+0x1f0>)
 80069b2:	f002 f8de 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80069b6:	bf00      	nop
 80069b8:	4912      	ldr	r1, [pc, #72]	; (8006a04 <ESP_Init+0x1a8>)
 80069ba:	4818      	ldr	r0, [pc, #96]	; (8006a1c <ESP_Init+0x1c0>)
 80069bc:	f002 f96e 	bl	8008c9c <Wait_for>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f8      	beq.n	80069b8 <ESP_Init+0x15c>
		;
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80069c6:	4911      	ldr	r1, [pc, #68]	; (8006a0c <ESP_Init+0x1b0>)
 80069c8:	4821      	ldr	r0, [pc, #132]	; (8006a50 <ESP_Init+0x1f4>)
 80069ca:	f002 f8d2 	bl	8008b72 <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 80069ce:	480d      	ldr	r0, [pc, #52]	; (8006a04 <ESP_Init+0x1a8>)
 80069d0:	f001 ff1c 	bl	800880c <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80069d4:	490b      	ldr	r1, [pc, #44]	; (8006a04 <ESP_Init+0x1a8>)
 80069d6:	481f      	ldr	r0, [pc, #124]	; (8006a54 <ESP_Init+0x1f8>)
 80069d8:	f002 f8cb 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80069dc:	bf00      	nop
 80069de:	4909      	ldr	r1, [pc, #36]	; (8006a04 <ESP_Init+0x1a8>)
 80069e0:	480e      	ldr	r0, [pc, #56]	; (8006a1c <ESP_Init+0x1c0>)
 80069e2:	f002 f95b 	bl	8008c9c <Wait_for>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f8      	beq.n	80069de <ESP_Init+0x182>
		;
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80069ec:	4907      	ldr	r1, [pc, #28]	; (8006a0c <ESP_Init+0x1b0>)
 80069ee:	481a      	ldr	r0, [pc, #104]	; (8006a58 <ESP_Init+0x1fc>)
 80069f0:	f002 f8bf 	bl	8008b72 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80069f4:	4905      	ldr	r1, [pc, #20]	; (8006a0c <ESP_Init+0x1b0>)
 80069f6:	4819      	ldr	r0, [pc, #100]	; (8006a5c <ESP_Init+0x200>)
 80069f8:	f002 f8bb 	bl	8008b72 <Uart_sendstring>

}
 80069fc:	bf00      	nop
 80069fe:	3760      	adds	r7, #96	; 0x60
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200005f4 	.word	0x200005f4
 8006a08:	0800fac0 	.word	0x0800fac0
 8006a0c:	200005b0 	.word	0x200005b0
 8006a10:	0800facc 	.word	0x0800facc
 8006a14:	0800fad8 	.word	0x0800fad8
 8006a18:	0800fadc 	.word	0x0800fadc
 8006a1c:	0800fae4 	.word	0x0800fae4
 8006a20:	0800faec 	.word	0x0800faec
 8006a24:	0800faf8 	.word	0x0800faf8
 8006a28:	0800fb08 	.word	0x0800fb08
 8006a2c:	0800fb18 	.word	0x0800fb18
 8006a30:	0800fb3c 	.word	0x0800fb3c
 8006a34:	0800fb54 	.word	0x0800fb54
 8006a38:	0800fb68 	.word	0x0800fb68
 8006a3c:	0800fb74 	.word	0x0800fb74
 8006a40:	20000858 	.word	0x20000858
 8006a44:	0800fb84 	.word	0x0800fb84
 8006a48:	0800fb88 	.word	0x0800fb88
 8006a4c:	0800fb98 	.word	0x0800fb98
 8006a50:	0800fba8 	.word	0x0800fba8
 8006a54:	0800fbb8 	.word	0x0800fbb8
 8006a58:	0800fbcc 	.word	0x0800fbcc
 8006a5c:	0800fbe0 	.word	0x0800fbe0

08006a60 <Server_Send>:

int Server_Send(char *str, int Link_ID) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b098      	sub	sp, #96	; 0x60
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	int len = strlen(str);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7f9 fbb8 	bl	80001e0 <strlen>
 8006a70:	4603      	mov	r3, r0
 8006a72:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf(data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8006a74:	f107 000c 	add.w	r0, r7, #12
 8006a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	491a      	ldr	r1, [pc, #104]	; (8006ae8 <Server_Send+0x88>)
 8006a7e:	f006 f953 	bl	800cd28 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	4919      	ldr	r1, [pc, #100]	; (8006aec <Server_Send+0x8c>)
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 f872 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 8006a8e:	bf00      	nop
 8006a90:	4916      	ldr	r1, [pc, #88]	; (8006aec <Server_Send+0x8c>)
 8006a92:	4817      	ldr	r0, [pc, #92]	; (8006af0 <Server_Send+0x90>)
 8006a94:	f002 f902 	bl	8008c9c <Wait_for>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f8      	beq.n	8006a90 <Server_Send+0x30>
		;
	Uart_sendstring(str, wifi_uart);
 8006a9e:	4913      	ldr	r1, [pc, #76]	; (8006aec <Server_Send+0x8c>)
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f866 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)))
 8006aa6:	bf00      	nop
 8006aa8:	4910      	ldr	r1, [pc, #64]	; (8006aec <Server_Send+0x8c>)
 8006aaa:	4812      	ldr	r0, [pc, #72]	; (8006af4 <Server_Send+0x94>)
 8006aac:	f002 f8f6 	bl	8008c9c <Wait_for>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f8      	beq.n	8006aa8 <Server_Send+0x48>
		;
	sprintf(data, "AT+CIPCLOSE=5\r\n");
 8006ab6:	f107 030c 	add.w	r3, r7, #12
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <Server_Send+0x98>)
 8006abc:	4618      	mov	r0, r3
 8006abe:	f006 f933 	bl	800cd28 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8006ac2:	f107 030c 	add.w	r3, r7, #12
 8006ac6:	4909      	ldr	r1, [pc, #36]	; (8006aec <Server_Send+0x8c>)
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f002 f852 	bl	8008b72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8006ace:	bf00      	nop
 8006ad0:	4906      	ldr	r1, [pc, #24]	; (8006aec <Server_Send+0x8c>)
 8006ad2:	480a      	ldr	r0, [pc, #40]	; (8006afc <Server_Send+0x9c>)
 8006ad4:	f002 f8e2 	bl	8008c9c <Wait_for>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f8      	beq.n	8006ad0 <Server_Send+0x70>
		;
	return 1;
 8006ade:	2301      	movs	r3, #1
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3760      	adds	r7, #96	; 0x60
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	0800fc00 	.word	0x0800fc00
 8006aec:	200005f4 	.word	0x200005f4
 8006af0:	0800fc14 	.word	0x0800fc14
 8006af4:	0800fc18 	.word	0x0800fc18
 8006af8:	0800fc20 	.word	0x0800fc20
 8006afc:	0800fae4 	.word	0x0800fae4

08006b00 <Server_Handle>:

void Server_Handle(char *str, int Link_ID, float temp, int HR, int SpO2,
		int ECG) {
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	f6ad 1dbc 	subw	sp, sp, #2492	; 0x9bc
 8006b06:	af04      	add	r7, sp, #16
 8006b08:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8006b0c:	f6a4 1494 	subw	r4, r4, #2452	; 0x994
 8006b10:	6020      	str	r0, [r4, #0]
 8006b12:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8006b16:	f6a0 1098 	subw	r0, r0, #2456	; 0x998
 8006b1a:	6001      	str	r1, [r0, #0]
 8006b1c:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006b20:	f6a1 119c 	subw	r1, r1, #2460	; 0x99c
 8006b24:	ed81 0a00 	vstr	s0, [r1]
 8006b28:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006b2c:	f5a1 611a 	sub.w	r1, r1, #2464	; 0x9a0
 8006b30:	600a      	str	r2, [r1, #0]
 8006b32:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8006b36:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8006b3a:	6013      	str	r3, [r2, #0]
	char datatosend[2048] = { 0 };
 8006b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8006b40:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f005 fb1d 	bl	800c190 <memset>
	char tempData[400];
	sprintf(tempData,
 8006b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8006b5a:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	f7f9 fcfa 	bl	8000558 <__aeabi_f2d>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	f107 0018 	add.w	r0, r7, #24
 8006b6c:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 8006b70:	9102      	str	r1, [sp, #8]
 8006b72:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006b76:	f6a1 11a4 	subw	r1, r1, #2468	; 0x9a4
 8006b7a:	6809      	ldr	r1, [r1, #0]
 8006b7c:	9101      	str	r1, [sp, #4]
 8006b7e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006b82:	f5a1 611a 	sub.w	r1, r1, #2464	; 0x9a0
 8006b86:	6809      	ldr	r1, [r1, #0]
 8006b88:	9100      	str	r1, [sp, #0]
 8006b8a:	4919      	ldr	r1, [pc, #100]	; (8006bf0 <Server_Handle+0xf0>)
 8006b8c:	f006 f8cc 	bl	800cd28 <siprintf>
//		strcat(datatosend, tempData);
//		strcat(datatosend, Terminate);
//		Server_Send(datatosend, Link_ID);
//	}

	sprintf(datatosend, Basic_inclusion);
 8006b90:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <Server_Handle+0xf4>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f006 f8c4 	bl	800cd28 <siprintf>
	strcat(datatosend, tempData);
 8006ba0:	f107 0218 	add.w	r2, r7, #24
 8006ba4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f006 f91f 	bl	800cdee <strcat>
	strcat(datatosend, REFRESH);
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <Server_Handle+0xf8>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f006 f917 	bl	800cdee <strcat>
	strcat(datatosend, Terminate);
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <Server_Handle+0xfc>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f006 f90f 	bl	800cdee <strcat>
	Server_Send(datatosend, Link_ID);
 8006bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8006bd4:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8006bd8:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8006bdc:	6819      	ldr	r1, [r3, #0]
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7ff ff3e 	bl	8006a60 <Server_Send>

}
 8006be4:	bf00      	nop
 8006be6:	f607 17ac 	addw	r7, r7, #2476	; 0x9ac
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd90      	pop	{r4, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	0800fc30 	.word	0x0800fc30
 8006bf4:	20000060 	.word	0x20000060
 8006bf8:	20000064 	.word	0x20000064
 8006bfc:	20000068 	.word	0x20000068

08006c00 <Server_Start>:

uint8_t Server_Start(float temp, int HR, int SpO2, int ECG) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b098      	sub	sp, #96	; 0x60
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	ed87 0a03 	vstr	s0, [r7, #12]
 8006c0a:	60b8      	str	r0, [r7, #8]
 8006c0c:	6079      	str	r1, [r7, #4]
 8006c0e:	603a      	str	r2, [r7, #0]
	char buftocopyinto[64] = { 0 };
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	223c      	movs	r2, #60	; 0x3c
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f005 fab7 	bl	800c190 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)))
 8006c22:	bf00      	nop
 8006c24:	f107 0217 	add.w	r2, r7, #23
 8006c28:	4b34      	ldr	r3, [pc, #208]	; (8006cfc <Server_Start+0xfc>)
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4834      	ldr	r0, [pc, #208]	; (8006d00 <Server_Start+0x100>)
 8006c2e:	f001 ff71 	bl	8008b14 <Get_after>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f5      	beq.n	8006c24 <Server_Start+0x24>
		;
	Link_ID -= 48;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	3b30      	subs	r3, #48	; 0x30
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	75fb      	strb	r3, [r7, #23]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)))
 8006c40:	bf00      	nop
 8006c42:	f107 0318 	add.w	r3, r7, #24
 8006c46:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <Server_Start+0xfc>)
 8006c48:	4619      	mov	r1, r3
 8006c4a:	482e      	ldr	r0, [pc, #184]	; (8006d04 <Server_Start+0x104>)
 8006c4c:	f001 ffa8 	bl	8008ba0 <Copy_upto>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f5      	beq.n	8006c42 <Server_Start+0x42>
		;
	if (Look_for("/ledon", buftocopyinto) == 1) {
 8006c56:	f107 0318 	add.w	r3, r7, #24
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	482a      	ldr	r0, [pc, #168]	; (8006d08 <Server_Start+0x108>)
 8006c5e:	f001 fd82 	bl	8008766 <Look_for>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d110      	bne.n	8006c8a <Server_Start+0x8a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2120      	movs	r1, #32
 8006c6c:	4827      	ldr	r0, [pc, #156]	; (8006d0c <Server_Start+0x10c>)
 8006c6e:	f7fc fa4f 	bl	8003110 <HAL_GPIO_WritePin>
		Server_Handle("/ledon", Link_ID, temp, HR, SpO2, ECG);
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	4619      	mov	r1, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006c82:	4821      	ldr	r0, [pc, #132]	; (8006d08 <Server_Start+0x108>)
 8006c84:	f7ff ff3c 	bl	8006b00 <Server_Handle>
 8006c88:	e032      	b.n	8006cf0 <Server_Start+0xf0>
	}

	else if (Look_for("/ledoff", buftocopyinto) == 1) {
 8006c8a:	f107 0318 	add.w	r3, r7, #24
 8006c8e:	4619      	mov	r1, r3
 8006c90:	481f      	ldr	r0, [pc, #124]	; (8006d10 <Server_Start+0x110>)
 8006c92:	f001 fd68 	bl	8008766 <Look_for>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d110      	bne.n	8006cbe <Server_Start+0xbe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	481a      	ldr	r0, [pc, #104]	; (8006d0c <Server_Start+0x10c>)
 8006ca2:	f7fc fa35 	bl	8003110 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff", Link_ID, temp, HR, SpO2, ECG);
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	ed97 0a03 	vldr	s0, [r7, #12]
 8006cb6:	4816      	ldr	r0, [pc, #88]	; (8006d10 <Server_Start+0x110>)
 8006cb8:	f7ff ff22 	bl	8006b00 <Server_Handle>
 8006cbc:	e018      	b.n	8006cf0 <Server_Start+0xf0>
	}

	else if (Look_for("/favicon.ico", buftocopyinto) == 1)
 8006cbe:	f107 0318 	add.w	r3, r7, #24
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4813      	ldr	r0, [pc, #76]	; (8006d14 <Server_Start+0x114>)
 8006cc6:	f001 fd4e 	bl	8008766 <Look_for>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d00f      	beq.n	8006cf0 <Server_Start+0xf0>
		;

	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2120      	movs	r1, #32
 8006cd4:	480d      	ldr	r0, [pc, #52]	; (8006d0c <Server_Start+0x10c>)
 8006cd6:	f7fc fa1b 	bl	8003110 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID, temp, HR, SpO2, ECG);
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	ed97 0a03 	vldr	s0, [r7, #12]
 8006cea:	480b      	ldr	r0, [pc, #44]	; (8006d18 <Server_Start+0x118>)
 8006cec:	f7ff ff08 	bl	8006b00 <Server_Handle>
	}
	return 1;
 8006cf0:	2301      	movs	r3, #1
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3758      	adds	r7, #88	; 0x58
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200005f4 	.word	0x200005f4
 8006d00:	0800fc8c 	.word	0x0800fc8c
 8006d04:	0800fc94 	.word	0x0800fc94
 8006d08:	0800fca0 	.word	0x0800fca0
 8006d0c:	40020000 	.word	0x40020000
 8006d10:	0800fca8 	.word	0x0800fca8
 8006d14:	0800fcb0 	.word	0x0800fcb0
 8006d18:	0800fcc0 	.word	0x0800fcc0

08006d1c <HMS_bgdisplay>:
int graph_x = graph_x0;
int graph_y = 0;
int graph_y_prevVal = 0;
int graph_refresh_x = graph_x0;

void HMS_bgdisplay(void) {
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b08b      	sub	sp, #44	; 0x2c
 8006d20:	af08      	add	r7, sp, #32

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 8006d22:	2305      	movs	r3, #5
 8006d24:	80fb      	strh	r3, [r7, #6]
 8006d26:	e019      	b.n	8006d5c <HMS_bgdisplay+0x40>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 8006d28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006d2c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b21a      	sxth	r2, r3
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	b21b      	sxth	r3, r3
 8006d4c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006d50:	9400      	str	r4, [sp, #0]
 8006d52:	f002 fc06 	bl	8009562 <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	80fb      	strh	r3, [r7, #6]
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e2      	bne.n	8006d28 <HMS_bgdisplay+0xc>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 8006d62:	2305      	movs	r3, #5
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d6a:	22f0      	movs	r2, #240	; 0xf0
 8006d6c:	216a      	movs	r1, #106	; 0x6a
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f002 f902 	bl	8008f78 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 8006d74:	2305      	movs	r3, #5
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d7c:	22f0      	movs	r2, #240	; 0xf0
 8006d7e:	21d4      	movs	r1, #212	; 0xd4
 8006d80:	2000      	movs	r0, #0
 8006d82:	f002 f8f9 	bl	8008f78 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 8006d86:	2302      	movs	r3, #2
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	9306      	str	r3, [sp, #24]
 8006d8e:	2302      	movs	r3, #2
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	2300      	movs	r3, #0
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006da0:	9302      	str	r3, [sp, #8]
 8006da2:	230a      	movs	r3, #10
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	2342      	movs	r3, #66	; 0x42
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	23c8      	movs	r3, #200	; 0xc8
 8006dac:	2214      	movs	r2, #20
 8006dae:	2114      	movs	r1, #20
 8006db0:	484b      	ldr	r0, [pc, #300]	; (8006ee0 <HMS_bgdisplay+0x1c4>)
 8006db2:	f002 f87d 	bl	8008eb0 <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 8006db6:	2002      	movs	r0, #2
 8006db8:	f003 fa92 	bl	800a2e0 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8006dbc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006dc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006dc4:	f003 faa2 	bl	800a30c <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 8006dc8:	2119      	movs	r1, #25
 8006dca:	2058      	movs	r0, #88	; 0x58
 8006dcc:	f003 fa70 	bl	800a2b0 <LCD_SetCursor>
	LCD_Printf("Health");
 8006dd0:	4844      	ldr	r0, [pc, #272]	; (8006ee4 <HMS_bgdisplay+0x1c8>)
 8006dd2:	f003 f985 	bl	800a0e0 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 8006dd6:	212d      	movs	r1, #45	; 0x2d
 8006dd8:	203f      	movs	r0, #63	; 0x3f
 8006dda:	f003 fa69 	bl	800a2b0 <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8006dde:	4842      	ldr	r0, [pc, #264]	; (8006ee8 <HMS_bgdisplay+0x1cc>)
 8006de0:	f003 f97e 	bl	800a0e0 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 8006de4:	2141      	movs	r1, #65	; 0x41
 8006de6:	2058      	movs	r0, #88	; 0x58
 8006de8:	f003 fa62 	bl	800a2b0 <LCD_SetCursor>
	LCD_Printf("System");
 8006dec:	483f      	ldr	r0, [pc, #252]	; (8006eec <HMS_bgdisplay+0x1d0>)
 8006dee:	f003 f977 	bl	800a0e0 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 8006df2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	2305      	movs	r3, #5
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	2319      	movs	r3, #25
 8006dfe:	22cd      	movs	r2, #205	; 0xcd
 8006e00:	2179      	movs	r1, #121	; 0x79
 8006e02:	200f      	movs	r0, #15
 8006e04:	f002 ffc8 	bl	8009d98 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 8006e08:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8006e0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e10:	f003 fa7c 	bl	800a30c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 8006e14:	217e      	movs	r1, #126	; 0x7e
 8006e16:	2014      	movs	r0, #20
 8006e18:	f003 fa4a 	bl	800a2b0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	f003 fa5f 	bl	800a2e0 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 8006e22:	4833      	ldr	r0, [pc, #204]	; (8006ef0 <HMS_bgdisplay+0x1d4>)
 8006e24:	f003 f95c 	bl	800a0e0 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 8006e28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	2305      	movs	r3, #5
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2319      	movs	r3, #25
 8006e34:	22cd      	movs	r2, #205	; 0xcd
 8006e36:	2197      	movs	r1, #151	; 0x97
 8006e38:	200f      	movs	r0, #15
 8006e3a:	f002 ffad 	bl	8009d98 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 8006e3e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8006e42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e46:	f003 fa61 	bl	800a30c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 8006e4a:	219c      	movs	r1, #156	; 0x9c
 8006e4c:	2014      	movs	r0, #20
 8006e4e:	f003 fa2f 	bl	800a2b0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8006e52:	2002      	movs	r0, #2
 8006e54:	f003 fa44 	bl	800a2e0 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 8006e58:	4826      	ldr	r0, [pc, #152]	; (8006ef4 <HMS_bgdisplay+0x1d8>)
 8006e5a:	f003 f941 	bl	800a0e0 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 8006e5e:	231f      	movs	r3, #31
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	2305      	movs	r3, #5
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2319      	movs	r3, #25
 8006e68:	22cd      	movs	r2, #205	; 0xcd
 8006e6a:	21b5      	movs	r1, #181	; 0xb5
 8006e6c:	200f      	movs	r0, #15
 8006e6e:	f002 ff93 	bl	8009d98 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 8006e72:	211f      	movs	r1, #31
 8006e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e78:	f003 fa48 	bl	800a30c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 8006e7c:	21ba      	movs	r1, #186	; 0xba
 8006e7e:	2014      	movs	r0, #20
 8006e80:	f003 fa16 	bl	800a2b0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8006e84:	2002      	movs	r0, #2
 8006e86:	f003 fa2b 	bl	800a2e0 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 8006e8a:	481b      	ldr	r0, [pc, #108]	; (8006ef8 <HMS_bgdisplay+0x1dc>)
 8006e8c:	f003 f928 	bl	800a0e0 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8006e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	2346      	movs	r3, #70	; 0x46
 8006e98:	22cd      	movs	r2, #205	; 0xcd
 8006e9a:	21e8      	movs	r1, #232	; 0xe8
 8006e9c:	2014      	movs	r0, #20
 8006e9e:	f002 fed3 	bl	8009c48 <LCD_FillRect>

	//===============================================================//

	for(int i = 4; i > 0; i--)
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	e004      	b.n	8006eb2 <HMS_bgdisplay+0x196>
		LCD_ECGAnimation();
 8006ea8:	f000 fab6 	bl	8007418 <LCD_ECGAnimation>
	for(int i = 4; i > 0; i--)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dcf7      	bgt.n	8006ea8 <HMS_bgdisplay+0x18c>

	LCD_SetTextColor(BLACK, WHITE);
 8006eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f003 fa25 	bl	800a30c <LCD_SetTextColor>
	LCD_SetCursor(180, 240);
 8006ec2:	21f0      	movs	r1, #240	; 0xf0
 8006ec4:	20b4      	movs	r0, #180	; 0xb4
 8006ec6:	f003 f9f3 	bl	800a2b0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8006eca:	2002      	movs	r0, #2
 8006ecc:	f003 fa08 	bl	800a2e0 <LCD_SetTextSize>
	LCD_Printf("ECG");
 8006ed0:	480a      	ldr	r0, [pc, #40]	; (8006efc <HMS_bgdisplay+0x1e0>)
 8006ed2:	f003 f905 	bl	800a0e0 <LCD_Printf>

}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd90      	pop	{r4, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	0800fcc4 	.word	0x0800fcc4
 8006ee4:	0800fcc8 	.word	0x0800fcc8
 8006ee8:	0800fcd0 	.word	0x0800fcd0
 8006eec:	0800fcdc 	.word	0x0800fcdc
 8006ef0:	0800fce4 	.word	0x0800fce4
 8006ef4:	0800fcf0 	.word	0x0800fcf0
 8006ef8:	0800fcf8 	.word	0x0800fcf8
 8006efc:	0800fd00 	.word	0x0800fd00

08006f00 <ecgPeak>:

void ecgPeak() {
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af02      	add	r7, sp, #8
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006f06:	4b9b      	ldr	r3, [pc, #620]	; (8007174 <ecgPeak+0x274>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	b218      	sxth	r0, r3
 8006f0c:	23f2      	movs	r3, #242	; 0xf2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3319      	adds	r3, #25
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	b219      	sxth	r1, r3
 8006f16:	4b97      	ldr	r3, [pc, #604]	; (8007174 <ecgPeak+0x274>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8006f22:	23f2      	movs	r3, #242	; 0xf2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3319      	adds	r3, #25
 8006f28:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8006f30:	9400      	str	r4, [sp, #0]
 8006f32:	f002 f9d9 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8006f36:	4b8f      	ldr	r3, [pc, #572]	; (8007174 <ecgPeak+0x274>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	b218      	sxth	r0, r3
 8006f3c:	23f2      	movs	r3, #242	; 0xf2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	331a      	adds	r3, #26
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	b219      	sxth	r1, r3
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <ecgPeak+0x274>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8006f52:	23f2      	movs	r3, #242	; 0xf2
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	331a      	adds	r3, #26
 8006f58:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8006f5a:	b21b      	sxth	r3, r3
 8006f5c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8006f60:	9400      	str	r4, [sp, #0]
 8006f62:	f002 f9c1 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8006f66:	4b83      	ldr	r3, [pc, #524]	; (8007174 <ecgPeak+0x274>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3302      	adds	r3, #2
 8006f6c:	4a81      	ldr	r2, [pc, #516]	; (8007174 <ecgPeak+0x274>)
 8006f6e:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006f70:	4b80      	ldr	r3, [pc, #512]	; (8007174 <ecgPeak+0x274>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	b218      	sxth	r0, r3
 8006f76:	23f2      	movs	r3, #242	; 0xf2
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3319      	adds	r3, #25
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	b219      	sxth	r1, r3
 8006f80:	4b7c      	ldr	r3, [pc, #496]	; (8007174 <ecgPeak+0x274>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3302      	adds	r3, #2
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8006f8c:	23f2      	movs	r3, #242	; 0xf2
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3319      	adds	r3, #25
 8006f92:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006f94:	b21b      	sxth	r3, r3
 8006f96:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8006f9a:	9400      	str	r4, [sp, #0]
 8006f9c:	f002 f9a4 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8006fa0:	4b74      	ldr	r3, [pc, #464]	; (8007174 <ecgPeak+0x274>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	b218      	sxth	r0, r3
 8006fa6:	23f2      	movs	r3, #242	; 0xf2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	331a      	adds	r3, #26
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	b219      	sxth	r1, r3
 8006fb0:	4b70      	ldr	r3, [pc, #448]	; (8007174 <ecgPeak+0x274>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3302      	adds	r3, #2
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8006fbc:	23f2      	movs	r3, #242	; 0xf2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	331a      	adds	r3, #26
 8006fc2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8006fc4:	b21b      	sxth	r3, r3
 8006fc6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8006fca:	9400      	str	r4, [sp, #0]
 8006fcc:	f002 f98c 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8006fd0:	4b68      	ldr	r3, [pc, #416]	; (8007174 <ecgPeak+0x274>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	4a67      	ldr	r2, [pc, #412]	; (8007174 <ecgPeak+0x274>)
 8006fd8:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006fda:	4b66      	ldr	r3, [pc, #408]	; (8007174 <ecgPeak+0x274>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	b218      	sxth	r0, r3
 8006fe0:	23f2      	movs	r3, #242	; 0xf2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3319      	adds	r3, #25
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	b219      	sxth	r1, r3
 8006fea:	4b62      	ldr	r3, [pc, #392]	; (8007174 <ecgPeak+0x274>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8006ff6:	23f2      	movs	r3, #242	; 0xf2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3319      	adds	r3, #25
 8006ffc:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8006ffe:	b21b      	sxth	r3, r3
 8007000:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007004:	9400      	str	r4, [sp, #0]
 8007006:	f002 f96f 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800700a:	4b5a      	ldr	r3, [pc, #360]	; (8007174 <ecgPeak+0x274>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	b218      	sxth	r0, r3
 8007010:	23f2      	movs	r3, #242	; 0xf2
 8007012:	b29b      	uxth	r3, r3
 8007014:	331a      	adds	r3, #26
 8007016:	b29b      	uxth	r3, r3
 8007018:	b219      	sxth	r1, r3
 800701a:	4b56      	ldr	r3, [pc, #344]	; (8007174 <ecgPeak+0x274>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	3302      	adds	r3, #2
 8007022:	b29b      	uxth	r3, r3
 8007024:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8007026:	23f2      	movs	r3, #242	; 0xf2
 8007028:	b29b      	uxth	r3, r3
 800702a:	331a      	adds	r3, #26
 800702c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800702e:	b21b      	sxth	r3, r3
 8007030:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007034:	9400      	str	r4, [sp, #0]
 8007036:	f002 f957 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 800703a:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <ecgPeak+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3302      	adds	r3, #2
 8007040:	4a4c      	ldr	r2, [pc, #304]	; (8007174 <ecgPeak+0x274>)
 8007042:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007044:	4b4b      	ldr	r3, [pc, #300]	; (8007174 <ecgPeak+0x274>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	b218      	sxth	r0, r3
 800704a:	23f2      	movs	r3, #242	; 0xf2
 800704c:	b29b      	uxth	r3, r3
 800704e:	3319      	adds	r3, #25
 8007050:	b29b      	uxth	r3, r3
 8007052:	b219      	sxth	r1, r3
 8007054:	4b47      	ldr	r3, [pc, #284]	; (8007174 <ecgPeak+0x274>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	3302      	adds	r3, #2
 800705c:	b29b      	uxth	r3, r3
 800705e:	b21a      	sxth	r2, r3
			graph_y0 + 40, RED);
 8007060:	23f2      	movs	r3, #242	; 0xf2
 8007062:	b29b      	uxth	r3, r3
 8007064:	3328      	adds	r3, #40	; 0x28
 8007066:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007068:	b21b      	sxth	r3, r3
 800706a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800706e:	9400      	str	r4, [sp, #0]
 8007070:	f002 f93a 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007074:	4b3f      	ldr	r3, [pc, #252]	; (8007174 <ecgPeak+0x274>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	b218      	sxth	r0, r3
 800707a:	23f2      	movs	r3, #242	; 0xf2
 800707c:	b29b      	uxth	r3, r3
 800707e:	331a      	adds	r3, #26
 8007080:	b29b      	uxth	r3, r3
 8007082:	b219      	sxth	r1, r3
 8007084:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <ecgPeak+0x274>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	3302      	adds	r3, #2
 800708c:	b29b      	uxth	r3, r3
 800708e:	b21a      	sxth	r2, r3
			graph_y0 + 41, RED);
 8007090:	23f2      	movs	r3, #242	; 0xf2
 8007092:	b29b      	uxth	r3, r3
 8007094:	3329      	adds	r3, #41	; 0x29
 8007096:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007098:	b21b      	sxth	r3, r3
 800709a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800709e:	9400      	str	r4, [sp, #0]
 80070a0:	f002 f922 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80070a4:	4b33      	ldr	r3, [pc, #204]	; (8007174 <ecgPeak+0x274>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3302      	adds	r3, #2
 80070aa:	4a32      	ldr	r2, [pc, #200]	; (8007174 <ecgPeak+0x274>)
 80070ac:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 40, graph_x + graphRefreshRate_peak,
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <ecgPeak+0x274>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b218      	sxth	r0, r3
 80070b4:	23f2      	movs	r3, #242	; 0xf2
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3328      	adds	r3, #40	; 0x28
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	b219      	sxth	r1, r3
 80070be:	4b2d      	ldr	r3, [pc, #180]	; (8007174 <ecgPeak+0x274>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3302      	adds	r3, #2
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	b21a      	sxth	r2, r3
 80070ca:	23f2      	movs	r3, #242	; 0xf2
 80070cc:	b21b      	sxth	r3, r3
 80070ce:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80070d2:	9400      	str	r4, [sp, #0]
 80070d4:	f002 f908 	bl	80092e8 <LCD_DrawLine>
			graph_y0, RED);
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 80070d8:	4b26      	ldr	r3, [pc, #152]	; (8007174 <ecgPeak+0x274>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	b218      	sxth	r0, r3
 80070de:	23f2      	movs	r3, #242	; 0xf2
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3329      	adds	r3, #41	; 0x29
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	b219      	sxth	r1, r3
 80070e8:	4b22      	ldr	r3, [pc, #136]	; (8007174 <ecgPeak+0x274>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3302      	adds	r3, #2
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b21a      	sxth	r2, r3
			graph_y0 + 1, RED);
 80070f4:	23f2      	movs	r3, #242	; 0xf2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3301      	adds	r3, #1
 80070fa:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 80070fc:	b21b      	sxth	r3, r3
 80070fe:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007102:	9400      	str	r4, [sp, #0]
 8007104:	f002 f8f0 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <ecgPeak+0x274>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3302      	adds	r3, #2
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <ecgPeak+0x274>)
 8007110:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <ecgPeak+0x274>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	b218      	sxth	r0, r3
 8007118:	23f2      	movs	r3, #242	; 0xf2
 800711a:	b219      	sxth	r1, r3
 800711c:	4b15      	ldr	r3, [pc, #84]	; (8007174 <ecgPeak+0x274>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	3302      	adds	r3, #2
 8007124:	b29b      	uxth	r3, r3
 8007126:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007128:	23f2      	movs	r3, #242	; 0xf2
 800712a:	b29b      	uxth	r3, r3
 800712c:	3319      	adds	r3, #25
 800712e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8007130:	b21b      	sxth	r3, r3
 8007132:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007136:	9400      	str	r4, [sp, #0]
 8007138:	f002 f8d6 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <ecgPeak+0x274>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	b218      	sxth	r0, r3
 8007142:	23f2      	movs	r3, #242	; 0xf2
 8007144:	b29b      	uxth	r3, r3
 8007146:	3301      	adds	r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	b219      	sxth	r1, r3
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <ecgPeak+0x274>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	3302      	adds	r3, #2
 8007154:	b29b      	uxth	r3, r3
 8007156:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8007158:	23f2      	movs	r3, #242	; 0xf2
 800715a:	b29b      	uxth	r3, r3
 800715c:	331a      	adds	r3, #26
 800715e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 8007160:	b21b      	sxth	r3, r3
 8007162:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007166:	9400      	str	r4, [sp, #0]
 8007168:	f002 f8be 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <ecgPeak+0x274>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3302      	adds	r3, #2
 8007172:	e001      	b.n	8007178 <ecgPeak+0x278>
 8007174:	2000006c 	.word	0x2000006c
 8007178:	4a4f      	ldr	r2, [pc, #316]	; (80072b8 <ecgPeak+0x3b8>)
 800717a:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800717c:	4b4e      	ldr	r3, [pc, #312]	; (80072b8 <ecgPeak+0x3b8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	b218      	sxth	r0, r3
 8007182:	23f2      	movs	r3, #242	; 0xf2
 8007184:	b29b      	uxth	r3, r3
 8007186:	3319      	adds	r3, #25
 8007188:	b29b      	uxth	r3, r3
 800718a:	b219      	sxth	r1, r3
 800718c:	4b4a      	ldr	r3, [pc, #296]	; (80072b8 <ecgPeak+0x3b8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	3302      	adds	r3, #2
 8007194:	b29b      	uxth	r3, r3
 8007196:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007198:	23f2      	movs	r3, #242	; 0xf2
 800719a:	b29b      	uxth	r3, r3
 800719c:	3319      	adds	r3, #25
 800719e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80071a6:	9400      	str	r4, [sp, #0]
 80071a8:	f002 f89e 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80071ac:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <ecgPeak+0x3b8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	b218      	sxth	r0, r3
 80071b2:	23f2      	movs	r3, #242	; 0xf2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	331a      	adds	r3, #26
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	b219      	sxth	r1, r3
 80071bc:	4b3e      	ldr	r3, [pc, #248]	; (80072b8 <ecgPeak+0x3b8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3302      	adds	r3, #2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80071c8:	23f2      	movs	r3, #242	; 0xf2
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	331a      	adds	r3, #26
 80071ce:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80071d6:	9400      	str	r4, [sp, #0]
 80071d8:	f002 f886 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80071dc:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <ecgPeak+0x3b8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3302      	adds	r3, #2
 80071e2:	4a35      	ldr	r2, [pc, #212]	; (80072b8 <ecgPeak+0x3b8>)
 80071e4:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80071e6:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <ecgPeak+0x3b8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	b218      	sxth	r0, r3
 80071ec:	23f2      	movs	r3, #242	; 0xf2
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3319      	adds	r3, #25
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	b219      	sxth	r1, r3
 80071f6:	4b30      	ldr	r3, [pc, #192]	; (80072b8 <ecgPeak+0x3b8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3302      	adds	r3, #2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007202:	23f2      	movs	r3, #242	; 0xf2
 8007204:	b29b      	uxth	r3, r3
 8007206:	3319      	adds	r3, #25
 8007208:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800720a:	b21b      	sxth	r3, r3
 800720c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007210:	9400      	str	r4, [sp, #0]
 8007212:	f002 f869 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007216:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <ecgPeak+0x3b8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	b218      	sxth	r0, r3
 800721c:	23f2      	movs	r3, #242	; 0xf2
 800721e:	b29b      	uxth	r3, r3
 8007220:	331a      	adds	r3, #26
 8007222:	b29b      	uxth	r3, r3
 8007224:	b219      	sxth	r1, r3
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <ecgPeak+0x3b8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	3302      	adds	r3, #2
 800722e:	b29b      	uxth	r3, r3
 8007230:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8007232:	23f2      	movs	r3, #242	; 0xf2
 8007234:	b29b      	uxth	r3, r3
 8007236:	331a      	adds	r3, #26
 8007238:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800723a:	b21b      	sxth	r3, r3
 800723c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007240:	9400      	str	r4, [sp, #0]
 8007242:	f002 f851 	bl	80092e8 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <ecgPeak+0x3b8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3302      	adds	r3, #2
 800724c:	4a1a      	ldr	r2, [pc, #104]	; (80072b8 <ecgPeak+0x3b8>)
 800724e:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007250:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <ecgPeak+0x3b8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b218      	sxth	r0, r3
 8007256:	23f2      	movs	r3, #242	; 0xf2
 8007258:	b29b      	uxth	r3, r3
 800725a:	3319      	adds	r3, #25
 800725c:	b29b      	uxth	r3, r3
 800725e:	b219      	sxth	r1, r3
 8007260:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <ecgPeak+0x3b8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	3302      	adds	r3, #2
 8007268:	b29b      	uxth	r3, r3
 800726a:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 800726c:	23f2      	movs	r3, #242	; 0xf2
 800726e:	b29b      	uxth	r3, r3
 8007270:	3319      	adds	r3, #25
 8007272:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007274:	b21b      	sxth	r3, r3
 8007276:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800727a:	9400      	str	r4, [sp, #0]
 800727c:	f002 f834 	bl	80092e8 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007280:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <ecgPeak+0x3b8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	b218      	sxth	r0, r3
 8007286:	23f2      	movs	r3, #242	; 0xf2
 8007288:	b29b      	uxth	r3, r3
 800728a:	331a      	adds	r3, #26
 800728c:	b29b      	uxth	r3, r3
 800728e:	b219      	sxth	r1, r3
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <ecgPeak+0x3b8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	3302      	adds	r3, #2
 8007298:	b29b      	uxth	r3, r3
 800729a:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 800729c:	23f2      	movs	r3, #242	; 0xf2
 800729e:	b29b      	uxth	r3, r3
 80072a0:	331a      	adds	r3, #26
 80072a2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80072a4:	b21b      	sxth	r3, r3
 80072a6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80072aa:	9400      	str	r4, [sp, #0]
 80072ac:	f002 f81c 	bl	80092e8 <LCD_DrawLine>
}
 80072b0:	bf00      	nop
 80072b2:	3704      	adds	r7, #4
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd90      	pop	{r4, r7, pc}
 80072b8:	2000006c 	.word	0x2000006c

080072bc <ecgLine>:

void ecgLine() {
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b085      	sub	sp, #20
 80072c0:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; i++) {
 80072c2:	2300      	movs	r3, #0
 80072c4:	71fb      	strb	r3, [r7, #7]
 80072c6:	e09c      	b.n	8007402 <ecgLine+0x146>
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80072c8:	4b52      	ldr	r3, [pc, #328]	; (8007414 <ecgLine+0x158>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	b218      	sxth	r0, r3
 80072ce:	23f2      	movs	r3, #242	; 0xf2
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3319      	adds	r3, #25
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	b219      	sxth	r1, r3
 80072d8:	4b4e      	ldr	r3, [pc, #312]	; (8007414 <ecgLine+0x158>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3302      	adds	r3, #2
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 80072e4:	23f2      	movs	r3, #242	; 0xf2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3319      	adds	r3, #25
 80072ea:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80072f2:	9400      	str	r4, [sp, #0]
 80072f4:	f001 fff8 	bl	80092e8 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80072f8:	4b46      	ldr	r3, [pc, #280]	; (8007414 <ecgLine+0x158>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	b218      	sxth	r0, r3
 80072fe:	23f2      	movs	r3, #242	; 0xf2
 8007300:	b29b      	uxth	r3, r3
 8007302:	331a      	adds	r3, #26
 8007304:	b29b      	uxth	r3, r3
 8007306:	b219      	sxth	r1, r3
 8007308:	4b42      	ldr	r3, [pc, #264]	; (8007414 <ecgLine+0x158>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	3302      	adds	r3, #2
 8007310:	b29b      	uxth	r3, r3
 8007312:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8007314:	23f2      	movs	r3, #242	; 0xf2
 8007316:	b29b      	uxth	r3, r3
 8007318:	331a      	adds	r3, #26
 800731a:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800731c:	b21b      	sxth	r3, r3
 800731e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007322:	9400      	str	r4, [sp, #0]
 8007324:	f001 ffe0 	bl	80092e8 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8007328:	4b3a      	ldr	r3, [pc, #232]	; (8007414 <ecgLine+0x158>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3302      	adds	r3, #2
 800732e:	4a39      	ldr	r2, [pc, #228]	; (8007414 <ecgLine+0x158>)
 8007330:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007332:	4b38      	ldr	r3, [pc, #224]	; (8007414 <ecgLine+0x158>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	b218      	sxth	r0, r3
 8007338:	23f2      	movs	r3, #242	; 0xf2
 800733a:	b29b      	uxth	r3, r3
 800733c:	3319      	adds	r3, #25
 800733e:	b29b      	uxth	r3, r3
 8007340:	b219      	sxth	r1, r3
 8007342:	4b34      	ldr	r3, [pc, #208]	; (8007414 <ecgLine+0x158>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	3302      	adds	r3, #2
 800734a:	b29b      	uxth	r3, r3
 800734c:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 800734e:	23f2      	movs	r3, #242	; 0xf2
 8007350:	b29b      	uxth	r3, r3
 8007352:	3319      	adds	r3, #25
 8007354:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007356:	b21b      	sxth	r3, r3
 8007358:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800735c:	9400      	str	r4, [sp, #0]
 800735e:	f001 ffc3 	bl	80092e8 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007362:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <ecgLine+0x158>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	b218      	sxth	r0, r3
 8007368:	23f2      	movs	r3, #242	; 0xf2
 800736a:	b29b      	uxth	r3, r3
 800736c:	331a      	adds	r3, #26
 800736e:	b29b      	uxth	r3, r3
 8007370:	b219      	sxth	r1, r3
 8007372:	4b28      	ldr	r3, [pc, #160]	; (8007414 <ecgLine+0x158>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	3302      	adds	r3, #2
 800737a:	b29b      	uxth	r3, r3
 800737c:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 800737e:	23f2      	movs	r3, #242	; 0xf2
 8007380:	b29b      	uxth	r3, r3
 8007382:	331a      	adds	r3, #26
 8007384:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007386:	b21b      	sxth	r3, r3
 8007388:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800738c:	9400      	str	r4, [sp, #0]
 800738e:	f001 ffab 	bl	80092e8 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <ecgLine+0x158>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3302      	adds	r3, #2
 8007398:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <ecgLine+0x158>)
 800739a:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <ecgLine+0x158>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	b218      	sxth	r0, r3
 80073a2:	23f2      	movs	r3, #242	; 0xf2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3319      	adds	r3, #25
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	b219      	sxth	r1, r3
 80073ac:	4b19      	ldr	r3, [pc, #100]	; (8007414 <ecgLine+0x158>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3302      	adds	r3, #2
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 80073b8:	23f2      	movs	r3, #242	; 0xf2
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3319      	adds	r3, #25
 80073be:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80073c6:	9400      	str	r4, [sp, #0]
 80073c8:	f001 ff8e 	bl	80092e8 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <ecgLine+0x158>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b218      	sxth	r0, r3
 80073d2:	23f2      	movs	r3, #242	; 0xf2
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	331a      	adds	r3, #26
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b219      	sxth	r1, r3
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <ecgLine+0x158>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3302      	adds	r3, #2
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 80073e8:	23f2      	movs	r3, #242	; 0xf2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	331a      	adds	r3, #26
 80073ee:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80073f6:	9400      	str	r4, [sp, #0]
 80073f8:	f001 ff76 	bl	80092e8 <LCD_DrawLine>
	for (uint8_t i = 0; i < 3; i++) {
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	3301      	adds	r3, #1
 8007400:	71fb      	strb	r3, [r7, #7]
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f67f af5f 	bls.w	80072c8 <ecgLine+0xc>
	}
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}
 8007414:	2000006c 	.word	0x2000006c

08007418 <LCD_ECGAnimation>:

void LCD_ECGAnimation() {
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af02      	add	r7, sp, #8
	ecgLine();
 800741e:	f7ff ff4d 	bl	80072bc <ecgLine>

	int a = graph_x;
 8007422:	4b10      	ldr	r3, [pc, #64]	; (8007464 <LCD_ECGAnimation+0x4c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	607b      	str	r3, [r7, #4]
	if (a + graphRefreshRate_peak >= graph_x2 - 25) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	1c9a      	adds	r2, r3, #2
 800742c:	23af      	movs	r3, #175	; 0xaf
 800742e:	3b19      	subs	r3, #25
 8007430:	429a      	cmp	r2, r3
 8007432:	db0c      	blt.n	800744e <LCD_ECGAnimation+0x36>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 80, 70, WHITE);
 8007434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	2346      	movs	r3, #70	; 0x46
 800743c:	22a0      	movs	r2, #160	; 0xa0
 800743e:	21e8      	movs	r1, #232	; 0xe8
 8007440:	2014      	movs	r0, #20
 8007442:	f002 fc01 	bl	8009c48 <LCD_FillRect>
		graph_x = graph_x0;
 8007446:	221e      	movs	r2, #30
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <LCD_ECGAnimation+0x4c>)
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e004      	b.n	8007458 <LCD_ECGAnimation+0x40>
	} else {
		graph_x += graphRefreshRate_peak;
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <LCD_ECGAnimation+0x4c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3302      	adds	r3, #2
 8007454:	4a03      	ldr	r2, [pc, #12]	; (8007464 <LCD_ECGAnimation+0x4c>)
 8007456:	6013      	str	r3, [r2, #0]
	}

	ecgPeak();
 8007458:	f7ff fd52 	bl	8006f00 <ecgPeak>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	2000006c 	.word	0x2000006c

08007468 <max30100_init>:
		max30100_mode_t mode, max30100_sampling_rate_t sampling_rate,
		max30100_pulse_width_t pulse_width, max30100_current_t ir_current,
		max30100_current_t start_red_current, uint8_t mean_filter_size,
		uint8_t pulse_bpm_sample_size,
		bool high_res_mode,
		bool debug) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	460b      	mov	r3, r1
 8007478:	71fb      	strb	r3, [r7, #7]
 800747a:	4613      	mov	r3, r2
 800747c:	71bb      	strb	r3, [r7, #6]
	this->_ui2c = hi2c;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	601a      	str	r2, [r3, #0]
	if (HAL_I2C_IsDeviceReady(this->_ui2c, MAX30100_DEVICE, 2, 100) != HAL_OK) {
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	2364      	movs	r3, #100	; 0x64
 800748a:	2202      	movs	r2, #2
 800748c:	21ae      	movs	r1, #174	; 0xae
 800748e:	f7fc faf1 	bl	8003a74 <HAL_I2C_IsDeviceReady>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <max30100_init+0x34>
			return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0f2      	b.n	8007682 <max30100_init+0x21a>
		}

	this->acceptable_intense_diff = MAX30100_DEFAULT_ACCEPTABLE_INTENSITY_DIFF;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a7b      	ldr	r2, [pc, #492]	; (800768c <max30100_init+0x224>)
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24
	this->red_current_adj_ms = MAX30100_DEFAULT_RED_LED_CURRENT_ADJUSTMENT_MS;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80074a8:	629a      	str	r2, [r3, #40]	; 0x28
	this->reset_spo2_pulse_n = MAX30100_DEFAULT_RESET_SPO2_EVERY_N_PULSES;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->dc_alpha = MAX30100_DEFAULT_ALPHA;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a76      	ldr	r2, [pc, #472]	; (8007690 <max30100_init+0x228>)
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
	this->pulse_min_threshold = MAX30100_DEFAULT_PULSE_MIN_THRESHOLD;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2264      	movs	r2, #100	; 0x64
 80074bc:	869a      	strh	r2, [r3, #52]	; 0x34
	this->pulse_max_threshold = MAX30100_DEFAULT_PULSE_MAX_THRESHOLD;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80074c4:	86da      	strh	r2, [r3, #54]	; 0x36

	this->mean_filter_size = mean_filter_size;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80074cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	this->pulse_bpm_sample_size = pulse_bpm_sample_size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80074d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	this->debug = debug;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074e0:	711a      	strb	r2, [r3, #4]
	this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	731a      	strb	r2, [r3, #12]

	this->mean_diff_ir.values = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	615a      	str	r2, [r3, #20]
	this->mean_diff_ir.values = malloc(sizeof(float) * mean_filter_size);
 80074f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f004 fe32 	bl	800c164 <malloc>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = malloc(sizeof(float) * pulse_bpm_sample_size);
 8007508:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4618      	mov	r0, r3
 8007510:	f004 fe28 	bl	800c164 <malloc>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	615a      	str	r2, [r3, #20]

	if (!(this->values_bpm) || !(this->mean_diff_ir.values))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <max30100_init+0xc4>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <max30100_init+0xc8>
		return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0a8      	b.n	8007682 <max30100_init+0x21a>

	HAL_StatusTypeDef ret = max30100_set_mode(this, mode);
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	4619      	mov	r1, r3
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fcd5 	bl	8007ee4 <max30100_set_mode>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <max30100_init+0xe0>
		return ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	e09c      	b.n	8007682 <max30100_init+0x21a>

	ret = max30100_set_sampling_rate(this, sampling_rate);
 8007548:	79bb      	ldrb	r3, [r7, #6]
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fd63 	bl	8008018 <max30100_set_sampling_rate>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <max30100_init+0xf8>
		return ret;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	e090      	b.n	8007682 <max30100_init+0x21a>
	ret = max30100_set_pulse_width(this, pulse_width);
 8007560:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007564:	4619      	mov	r1, r3
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fd7f 	bl	800806a <max30100_set_pulse_width>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <max30100_init+0x112>
		return ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	e083      	b.n	8007682 <max30100_init+0x21a>

	this->red_current = (uint8_t) start_red_current;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007580:	715a      	strb	r2, [r3, #5]
	this->last_red_current_check = 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	609a      	str	r2, [r3, #8]

	this->ir_current = ir_current;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800758e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	ret = max30100_set_led_current(this, this->red_current, ir_current);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	795b      	ldrb	r3, [r3, #5]
 8007596:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fd8c 	bl	80080ba <max30100_set_led_current>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <max30100_init+0x148>
		return ret;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	e068      	b.n	8007682 <max30100_init+0x21a>
	ret = max30100_set_high_res(this, high_res_mode);
 80075b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80075b4:	4619      	mov	r1, r3
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fcfe 	bl	8007fb8 <max30100_set_high_res>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <max30100_init+0x162>
		return ret;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	e05b      	b.n	8007682 <max30100_init+0x21a>

	this->dc_filter_ir.w = 0;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40
	this->dc_filter_ir.result = 0;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	645a      	str	r2, [r3, #68]	; 0x44

	this->dc_filter_red.w = 0;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	649a      	str	r2, [r3, #72]	; 0x48
	this->dc_filter_red.result = 0;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	64da      	str	r2, [r3, #76]	; 0x4c

	this->lpb_filter_ir.v[0] = 0;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	651a      	str	r2, [r3, #80]	; 0x50
	this->lpb_filter_ir.v[1] = 0;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
	this->lpb_filter_ir.result = 0;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	659a      	str	r2, [r3, #88]	; 0x58

	memset(this->mean_diff_ir.values, 0, sizeof(float) * mean_filter_size);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007606:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	461a      	mov	r2, r3
 800760e:	2100      	movs	r1, #0
 8007610:	f004 fdbe 	bl	800c190 <memset>
	this->mean_diff_ir.index = 0;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	this->mean_diff_ir.sum = 0;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	665a      	str	r2, [r3, #100]	; 0x64
	this->mean_diff_ir.count = 0;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	memset(this->values_bpm, 0, sizeof(float) * pulse_bpm_sample_size);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6958      	ldr	r0, [r3, #20]
 8007630:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	461a      	mov	r2, r3
 8007638:	2100      	movs	r1, #0
 800763a:	f004 fda9 	bl	800c190 <memset>
	this->values_bpm_sum = 0;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	619a      	str	r2, [r3, #24]
	this->values_bpm_count = 0;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	771a      	strb	r2, [r3, #28]
	this->bpm_index = 0;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	775a      	strb	r2, [r3, #29]

	this->ir_ac_sq_sum = 0;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	66da      	str	r2, [r3, #108]	; 0x6c
	this->red_ac_sq_sum = 0;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	671a      	str	r2, [r3, #112]	; 0x70
	this->samples_recorded = 0;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	this->pulses_detected = 0;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	this->current_spO2 = 0;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	679a      	str	r2, [r3, #120]	; 0x78

	this->last_beat_threshold = 0;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	621a      	str	r2, [r3, #32]
	return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	00017318 	.word	0x00017318
 8007690:	3f733333 	.word	0x3f733333

08007694 <max30100_update>:

HAL_StatusTypeDef max30100_update(max30100_config_t *this,
		max30100_data_t *data) {
 8007694:	b5b0      	push	{r4, r5, r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
	data->pulse_detected = false;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
	data->heart_bpm = 0.0;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = 0.0;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = 0.0;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	60da      	str	r2, [r3, #12]
	data->red_dc_value = 0.0;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	611a      	str	r2, [r3, #16]
	data->spO2 = this->current_spO2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	615a      	str	r2, [r3, #20]
	data->last_beat_threshold = 0;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = 0.0;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = 0.0;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	61da      	str	r2, [r3, #28]

	max30100_fifo_t raw_data;
	HAL_StatusTypeDef ret = max30100_read_fifo(this, &raw_data);
 80076e2:	f107 0308 	add.w	r3, r7, #8
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fd00 	bl	80080ee <max30100_read_fifo>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]
//=================================================
//	print("IR: %d, Red: %d\n", raw_data.raw_ir, raw_data.raw_red);
//=================================================
	if (ret != HAL_OK)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <max30100_update+0x68>
		return ret;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	e14f      	b.n	800799c <max30100_update+0x308>

	this->dc_filter_ir = max30100_dc_removal((float) raw_data.raw_ir,
 80076fc:	893b      	ldrh	r3, [r7, #8]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007712:	687c      	ldr	r4, [r7, #4]
 8007714:	eeb0 1a66 	vmov.f32	s2, s13
 8007718:	eef0 0a47 	vmov.f32	s1, s14
 800771c:	eeb0 0a67 	vmov.f32	s0, s15
 8007720:	f000 fd11 	bl	8008146 <max30100_dc_removal>
 8007724:	eeb0 7a40 	vmov.f32	s14, s0
 8007728:	eef0 7a60 	vmov.f32	s15, s1
 800772c:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8007730:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
			this->dc_filter_ir.w, this->dc_alpha);
	this->dc_filter_red = max30100_dc_removal((float) raw_data.raw_red,
 8007734:	897b      	ldrh	r3, [r7, #10]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800774a:	687c      	ldr	r4, [r7, #4]
 800774c:	eeb0 1a66 	vmov.f32	s2, s13
 8007750:	eef0 0a47 	vmov.f32	s1, s14
 8007754:	eeb0 0a67 	vmov.f32	s0, s15
 8007758:	f000 fcf5 	bl	8008146 <max30100_dc_removal>
 800775c:	eeb0 7a40 	vmov.f32	s14, s0
 8007760:	eef0 7a60 	vmov.f32	s15, s1
 8007764:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007768:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
			this->dc_filter_red.w, this->dc_alpha);

	float mean_diff_res_ir = max30100_mean_diff(this,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007772:	eeb0 0a67 	vmov.f32	s0, s15
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fd66 	bl	8008248 <max30100_mean_diff>
 800777c:	ed87 0a04 	vstr	s0, [r7, #16]
			this->dc_filter_ir.result);
	//=================================================
//	print("IR mean difference: %f\n", mean_diff_res_ir);
	//=================================================

	max30100_lpb_filter(this, mean_diff_res_ir/*-dcFilterIR.result*/);
 8007780:	ed97 0a04 	vldr	s0, [r7, #16]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fd17 	bl	80081b8 <max30100_lpb_filter>

	//=================================================
//	print("lpb_filter_ir: %f\n", this->lpb_filter_ir.result);
	//=================================================

	this->ir_ac_sq_sum += this->dc_filter_ir.result * this->dc_filter_ir.result;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800779c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->red_ac_sq_sum += this->dc_filter_red.result * this->dc_filter_red.result;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80077bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	this->samples_recorded++;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80077d0:	3301      	adds	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	if (max30100_detect_pulse(this, this->lpb_filter_ir.result) && this->samples_recorded) {
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80077e0:	eeb0 0a67 	vmov.f32	s0, s15
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8e3 	bl	80079b0 <max30100_detect_pulse>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80a4 	beq.w	800793a <max30100_update+0x2a6>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 809e 	beq.w	800793a <max30100_update+0x2a6>
		data->pulse_detected = true;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2201      	movs	r2, #1
 8007802:	701a      	strb	r2, [r3, #0]
		this->pulses_detected++;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800780a:	3301      	adds	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007828:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800782c:	ee16 0a90 	vmov	r0, s13
 8007830:	f7f8 fe92 	bl	8000558 <__aeabi_f2d>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	ec43 2b10 	vmov	d0, r2, r3
 800783c:	f007 fb96 	bl	800ef6c <sqrt>
 8007840:	eeb0 7a40 	vmov.f32	s14, s0
 8007844:	eef0 7a60 	vmov.f32	s15, s1
 8007848:	eeb0 0a47 	vmov.f32	s0, s14
 800784c:	eef0 0a67 	vmov.f32	s1, s15
 8007850:	f007 fb4e 	bl	800eef0 <log>
 8007854:	ec55 4b10 	vmov	r4, r5, d0
				/ log(sqrt(this->ir_ac_sq_sum / (float) this->samples_recorded));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007870:	ee16 0a90 	vmov	r0, s13
 8007874:	f7f8 fe70 	bl	8000558 <__aeabi_f2d>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	ec43 2b10 	vmov	d0, r2, r3
 8007880:	f007 fb74 	bl	800ef6c <sqrt>
 8007884:	eeb0 7a40 	vmov.f32	s14, s0
 8007888:	eef0 7a60 	vmov.f32	s15, s1
 800788c:	eeb0 0a47 	vmov.f32	s0, s14
 8007890:	eef0 0a67 	vmov.f32	s1, s15
 8007894:	f007 fb2c 	bl	800eef0 <log>
 8007898:	ec53 2b10 	vmov	r2, r3, d0
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 ffdc 	bl	800085c <__aeabi_ddiv>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 80078a8:	4610      	mov	r0, r2
 80078aa:	4619      	mov	r1, r3
 80078ac:	f7f9 f984 	bl	8000bb8 <__aeabi_d2f>
 80078b0:	4603      	mov	r3, r0
 80078b2:	60fb      	str	r3, [r7, #12]

		if (this->debug)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	791b      	ldrb	r3, [r3, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <max30100_update+0x23c>
			print("RMS Ratio: %f\n", ratio_rms);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7f8 fe4b 	bl	8000558 <__aeabi_f2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	ec43 2b10 	vmov	d0, r2, r3
 80078ca:	4836      	ldr	r0, [pc, #216]	; (80079a4 <max30100_update+0x310>)
 80078cc:	f7fe ffa2 	bl	8006814 <print>

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation.
		//It is probably far from correct, requires proper empircal calibration.
		this->current_spO2 = 110.0 - 16.0 * ratio_rms;
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7f8 fe41 	bl	8000558 <__aeabi_f2d>
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	4b33      	ldr	r3, [pc, #204]	; (80079a8 <max30100_update+0x314>)
 80078dc:	f7f8 fe94 	bl	8000608 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	f04f 0000 	mov.w	r0, #0
 80078e8:	4930      	ldr	r1, [pc, #192]	; (80079ac <max30100_update+0x318>)
 80078ea:	f7f8 fcd5 	bl	8000298 <__aeabi_dsub>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7f9 f95f 	bl	8000bb8 <__aeabi_d2f>
 80078fa:	4602      	mov	r2, r0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	679a      	str	r2, [r3, #120]	; 0x78
		data->spO2 = this->current_spO2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	615a      	str	r2, [r3, #20]

		if (!(this->pulses_detected % this->reset_spo2_pulse_n)) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007914:	fb93 f1f2 	sdiv	r1, r3, r2
 8007918:	fb01 f202 	mul.w	r2, r1, r2
 800791c:	1a9b      	subs	r3, r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <max30100_update+0x2a6>
			this->ir_ac_sq_sum = 0;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	66da      	str	r2, [r3, #108]	; 0x6c
			this->red_ac_sq_sum = 0;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	671a      	str	r2, [r3, #112]	; 0x70
			this->samples_recorded = 0;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		}
	}

	ret = max30100_balance_intensities(this, this->dc_filter_red.w,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007946:	eef0 0a47 	vmov.f32	s1, s14
 800794a:	eeb0 0a67 	vmov.f32	s0, s15
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f9e8 	bl	8007d24 <max30100_balance_intensities>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
			this->dc_filter_ir.w);
	if (ret != HAL_OK)
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <max30100_update+0x2ce>
		return ret;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	e01c      	b.n	800799c <max30100_update+0x308>

	data->heart_bpm = this->current_bpm;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = this->lpb_filter_ir.result;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = this->dc_filter_ir.w;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	60da      	str	r2, [r3, #12]
	data->red_dc_value = this->dc_filter_red.w;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	611a      	str	r2, [r3, #16]
	data->last_beat_threshold = this->last_beat_threshold;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1a      	ldr	r2, [r3, #32]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = this->dc_filter_ir.result;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = this->dc_filter_red.result;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bdb0      	pop	{r4, r5, r7, pc}
 80079a4:	0800fd04 	.word	0x0800fd04
 80079a8:	40300000 	.word	0x40300000
 80079ac:	405b8000 	.word	0x405b8000

080079b0 <max30100_detect_pulse>:

bool max30100_detect_pulse(max30100_config_t *this, float sensor_value) {
 80079b0:	b5b0      	push	{r4, r5, r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	ed87 0a00 	vstr	s0, [r7]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t current_beat = 0;
	static uint32_t last_beat = 0;

	if (sensor_value > this->pulse_max_threshold) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c8:	ed97 7a00 	vldr	s14, [r7]
 80079cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	dd14      	ble.n	8007a00 <max30100_detect_pulse+0x50>
		this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	731a      	strb	r2, [r3, #12]
		prev_sensor_value = 0;
 80079dc:	4baa      	ldr	r3, [pc, #680]	; (8007c88 <max30100_detect_pulse+0x2d8>)
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
		last_beat = 0;
 80079e4:	4ba9      	ldr	r3, [pc, #676]	; (8007c8c <max30100_detect_pulse+0x2dc>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
		current_beat = 0;
 80079ea:	4ba9      	ldr	r3, [pc, #676]	; (8007c90 <max30100_detect_pulse+0x2e0>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
		values_went_down = 0;
 80079f0:	4ba8      	ldr	r3, [pc, #672]	; (8007c94 <max30100_detect_pulse+0x2e4>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
		this->last_beat_threshold = 0;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	621a      	str	r2, [r3, #32]
		return false;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e189      	b.n	8007d14 <max30100_detect_pulse+0x364>
	}

	switch (this->current_pulse_detector_state) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	f000 815f 	beq.w	8007cc8 <max30100_detect_pulse+0x318>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	f300 817e 	bgt.w	8007d0c <max30100_detect_pulse+0x35c>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <max30100_detect_pulse+0x6a>
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d015      	beq.n	8007a44 <max30100_detect_pulse+0x94>
 8007a18:	e178      	b.n	8007d0c <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_IDLE:
		if (sensor_value >= this->pulse_min_threshold) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a26:	ed97 7a00 	vldr	s14, [r7]
 8007a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	da00      	bge.n	8007a36 <max30100_detect_pulse+0x86>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
			values_went_down = 0;
		}
		break;
 8007a34:	e16a      	b.n	8007d0c <max30100_detect_pulse+0x35c>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	731a      	strb	r2, [r3, #12]
			values_went_down = 0;
 8007a3c:	4b95      	ldr	r3, [pc, #596]	; (8007c94 <max30100_detect_pulse+0x2e4>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]
		break;
 8007a42:	e163      	b.n	8007d0c <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_TRACE_UP:
		if (sensor_value > prev_sensor_value) {
 8007a44:	4b90      	ldr	r3, [pc, #576]	; (8007c88 <max30100_detect_pulse+0x2d8>)
 8007a46:	edd3 7a00 	vldr	s15, [r3]
 8007a4a:	ed97 7a00 	vldr	s14, [r7]
 8007a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a56:	dd0d      	ble.n	8007a74 <max30100_detect_pulse+0xc4>
			current_beat = HAL_GetTick();
 8007a58:	f7fa fba0 	bl	800219c <HAL_GetTick>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4a8c      	ldr	r2, [pc, #560]	; (8007c90 <max30100_detect_pulse+0x2e0>)
 8007a60:	6013      	str	r3, [r2, #0]
			this->last_beat_threshold = sensor_value;
 8007a62:	edd7 7a00 	vldr	s15, [r7]
 8007a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6a:	ee17 2a90 	vmov	r2, s15
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]
				print("AVg. BPM: %f\n", this->current_bpm);
			}

			return true;
		}
		break;
 8007a72:	e14b      	b.n	8007d0c <max30100_detect_pulse+0x35c>
			if (this->debug) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	791b      	ldrb	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <max30100_detect_pulse+0xf2>
				print("Peak reached: %f %f\n", sensor_value, prev_sensor_value);
 8007a7c:	6838      	ldr	r0, [r7, #0]
 8007a7e:	f7f8 fd6b 	bl	8000558 <__aeabi_f2d>
 8007a82:	4604      	mov	r4, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	4b80      	ldr	r3, [pc, #512]	; (8007c88 <max30100_detect_pulse+0x2d8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f8 fd64 	bl	8000558 <__aeabi_f2d>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	ec43 2b11 	vmov	d1, r2, r3
 8007a98:	ec45 4b10 	vmov	d0, r4, r5
 8007a9c:	487e      	ldr	r0, [pc, #504]	; (8007c98 <max30100_detect_pulse+0x2e8>)
 8007a9e:	f7fe feb9 	bl	8006814 <print>
			uint32_t beat_duration = current_beat - last_beat;
 8007aa2:	4b7b      	ldr	r3, [pc, #492]	; (8007c90 <max30100_detect_pulse+0x2e0>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b79      	ldr	r3, [pc, #484]	; (8007c8c <max30100_detect_pulse+0x2dc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	60fb      	str	r3, [r7, #12]
			last_beat = current_beat;
 8007aae:	4b78      	ldr	r3, [pc, #480]	; (8007c90 <max30100_detect_pulse+0x2e0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a76      	ldr	r2, [pc, #472]	; (8007c8c <max30100_detect_pulse+0x2dc>)
 8007ab4:	6013      	str	r3, [r2, #0]
			float raw_bpm = 0;
 8007ab6:	f04f 0300 	mov.w	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
			if (beat_duration)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <max30100_detect_pulse+0x128>
				raw_bpm = 60000.0 / (float) beat_duration;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007acc:	eddf 6a73 	vldr	s13, [pc, #460]	; 8007c9c <max30100_detect_pulse+0x2ec>
 8007ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad4:	edc7 7a05 	vstr	s15, [r7, #20]
			if (this->debug) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <max30100_detect_pulse+0x14c>
				print("Beat duration: %u\n", beat_duration);
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	486f      	ldr	r0, [pc, #444]	; (8007ca0 <max30100_detect_pulse+0x2f0>)
 8007ae4:	f7fe fe96 	bl	8006814 <print>
				print("Raw BPM: %f\n", raw_bpm);
 8007ae8:	6978      	ldr	r0, [r7, #20]
 8007aea:	f7f8 fd35 	bl	8000558 <__aeabi_f2d>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	ec43 2b10 	vmov	d0, r2, r3
 8007af6:	486b      	ldr	r0, [pc, #428]	; (8007ca4 <max30100_detect_pulse+0x2f4>)
 8007af8:	f7fe fe8c 	bl	8006814 <print>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_DOWN;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	731a      	strb	r2, [r3, #12]
			if (beat_duration > 2500) { // 2.5 seconds
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d91a      	bls.n	8007b42 <max30100_detect_pulse+0x192>
				memset(this->values_bpm, 0,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6958      	ldr	r0, [r3, #20]
						sizeof(float) * this->pulse_bpm_sample_size);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				memset(this->values_bpm, 0,
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	f004 fb38 	bl	800c190 <memset>
				this->values_bpm_sum = 0;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	619a      	str	r2, [r3, #24]
				this->values_bpm_count = 0;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	771a      	strb	r2, [r3, #28]
				this->bpm_index = 0;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	775a      	strb	r2, [r3, #29]
				if (this->debug)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <max30100_detect_pulse+0x192>
					print("Moving avg. reseted\n");
 8007b3c:	485a      	ldr	r0, [pc, #360]	; (8007ca8 <max30100_detect_pulse+0x2f8>)
 8007b3e:	f7fe fe69 	bl	8006814 <print>
			if (raw_bpm < 50 || raw_bpm > 220) {
 8007b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b46:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8007cac <max30100_detect_pulse+0x2fc>
 8007b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	d408      	bmi.n	8007b66 <max30100_detect_pulse+0x1b6>
 8007b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b58:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007cb0 <max30100_detect_pulse+0x300>
 8007b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	dd08      	ble.n	8007b78 <max30100_detect_pulse+0x1c8>
				if (this->debug)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <max30100_detect_pulse+0x1c4>
					print("BPM out of bounds. Not adding to Moving Avg.\n");
 8007b6e:	4851      	ldr	r0, [pc, #324]	; (8007cb4 <max30100_detect_pulse+0x304>)
 8007b70:	f7fe fe50 	bl	8006814 <print>
				return false;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e0cd      	b.n	8007d14 <max30100_detect_pulse+0x364>
			this->values_bpm_sum -= this->values_bpm[this->bpm_index];
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	ed93 7a06 	vldr	s14, [r3, #24]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7f5b      	ldrb	r3, [r3, #29]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	edd3 7a00 	vldr	s15, [r3]
 8007b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	edc3 7a06 	vstr	s15, [r3, #24]
			this->values_bpm[this->bpm_index] = raw_bpm;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7f5b      	ldrb	r3, [r3, #29]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	601a      	str	r2, [r3, #0]
			this->values_bpm_sum += this->values_bpm[this->bpm_index++];
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7f5b      	ldrb	r3, [r3, #29]
 8007bb0:	1c59      	adds	r1, r3, #1
 8007bb2:	b2c8      	uxtb	r0, r1
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	7748      	strb	r0, [r1, #29]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	ed93 7a00 	vldr	s14, [r3]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8007bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	edc3 7a06 	vstr	s15, [r3, #24]
			this->bpm_index %= this->pulse_bpm_sample_size;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7f5b      	ldrb	r3, [r3, #29]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8007bda:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bde:	fb01 f202 	mul.w	r2, r1, r2
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	775a      	strb	r2, [r3, #29]
			if (this->values_bpm_count < this->pulse_bpm_sample_size)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7f1a      	ldrb	r2, [r3, #28]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d205      	bcs.n	8007c04 <max30100_detect_pulse+0x254>
				this->values_bpm_count++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7f1b      	ldrb	r3, [r3, #28]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	771a      	strb	r2, [r3, #28]
			this->current_bpm = this->values_bpm_sum / this->values_bpm_count;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	edd3 6a06 	vldr	s13, [r3, #24]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7f1b      	ldrb	r3, [r3, #28]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	edc3 7a04 	vstr	s15, [r3, #16]
			if (this->debug) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	791b      	ldrb	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02d      	beq.n	8007c84 <max30100_detect_pulse+0x2d4>
				print("CurrentMoving Avg: ");
 8007c28:	4823      	ldr	r0, [pc, #140]	; (8007cb8 <max30100_detect_pulse+0x308>)
 8007c2a:	f7fe fdf3 	bl	8006814 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	e012      	b.n	8007c5a <max30100_detect_pulse+0x2aa>
					print("%f ", this->values_bpm[i]);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695a      	ldr	r2, [r3, #20]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f8 fc89 	bl	8000558 <__aeabi_f2d>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	ec43 2b10 	vmov	d0, r2, r3
 8007c4e:	481b      	ldr	r0, [pc, #108]	; (8007cbc <max30100_detect_pulse+0x30c>)
 8007c50:	f7fe fde0 	bl	8006814 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	3301      	adds	r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7f1b      	ldrb	r3, [r3, #28]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	dbe6      	blt.n	8007c34 <max30100_detect_pulse+0x284>
				print(" \n");
 8007c66:	4816      	ldr	r0, [pc, #88]	; (8007cc0 <max30100_detect_pulse+0x310>)
 8007c68:	f7fe fdd4 	bl	8006814 <print>
				print("AVg. BPM: %f\n", this->current_bpm);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7f8 fc71 	bl	8000558 <__aeabi_f2d>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	ec43 2b10 	vmov	d0, r2, r3
 8007c7e:	4811      	ldr	r0, [pc, #68]	; (8007cc4 <max30100_detect_pulse+0x314>)
 8007c80:	f7fe fdc8 	bl	8006814 <print>
			return true;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e045      	b.n	8007d14 <max30100_detect_pulse+0x364>
 8007c88:	2000086c 	.word	0x2000086c
 8007c8c:	20000870 	.word	0x20000870
 8007c90:	20000874 	.word	0x20000874
 8007c94:	20000878 	.word	0x20000878
 8007c98:	0800fd14 	.word	0x0800fd14
 8007c9c:	476a6000 	.word	0x476a6000
 8007ca0:	0800fd2c 	.word	0x0800fd2c
 8007ca4:	0800fd40 	.word	0x0800fd40
 8007ca8:	0800fd50 	.word	0x0800fd50
 8007cac:	42480000 	.word	0x42480000
 8007cb0:	435c0000 	.word	0x435c0000
 8007cb4:	0800fd68 	.word	0x0800fd68
 8007cb8:	0800fd98 	.word	0x0800fd98
 8007cbc:	0800fdac 	.word	0x0800fdac
 8007cc0:	0800fdb0 	.word	0x0800fdb0
 8007cc4:	0800fdb4 	.word	0x0800fdb4
	case MAX30100_PULSE_TRACE_DOWN:
		if (sensor_value < prev_sensor_value)
 8007cc8:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <max30100_detect_pulse+0x36c>)
 8007cca:	edd3 7a00 	vldr	s15, [r3]
 8007cce:	ed97 7a00 	vldr	s14, [r7]
 8007cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	d505      	bpl.n	8007ce8 <max30100_detect_pulse+0x338>
			values_went_down++;
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <max30100_detect_pulse+0x370>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <max30100_detect_pulse+0x370>)
 8007ce6:	701a      	strb	r2, [r3, #0]

		if (sensor_value < this->pulse_min_threshold)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf4:	ed97 7a00 	vldr	s14, [r7]
 8007cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d00:	d400      	bmi.n	8007d04 <max30100_detect_pulse+0x354>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;

		break;
 8007d02:	e002      	b.n	8007d0a <max30100_detect_pulse+0x35a>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	731a      	strb	r2, [r3, #12]
		break;
 8007d0a:	bf00      	nop
	}

	prev_sensor_value = sensor_value;
 8007d0c:	4a03      	ldr	r2, [pc, #12]	; (8007d1c <max30100_detect_pulse+0x36c>)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6013      	str	r3, [r2, #0]
	return false;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d1c:	2000086c 	.word	0x2000086c
 8007d20:	20000878 	.word	0x20000878

08007d24 <max30100_balance_intensities>:

HAL_StatusTypeDef max30100_balance_intensities(max30100_config_t *this,
		float red_dc, float ir_dc) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007d30:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 8007d34:	f7fa fa32 	bl	800219c <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	1ad2      	subs	r2, r2, r3
			>= this->red_current_adj_ms) {
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d36b      	bcc.n	8007e20 <max30100_balance_intensities+0xfc>
		//print("%f\n", red_dc - ir_dc);
		if (ir_dc - red_dc > this->acceptable_intense_diff
 8007d48:	ed97 7a01 	vldr	s14, [r7, #4]
 8007d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	dd21      	ble.n	8007dae <max30100_balance_intensities+0x8a>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	795b      	ldrb	r3, [r3, #5]
 8007d6e:	2b0e      	cmp	r3, #14
 8007d70:	d81d      	bhi.n	8007dae <max30100_balance_intensities+0x8a>
			this->red_current++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	795b      	ldrb	r3, [r3, #5]
 8007d76:	3301      	adds	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f995 	bl	80080ba <max30100_set_led_current>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]
			if (ret != HAL_OK)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <max30100_balance_intensities+0x7a>
				return ret;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	e041      	b.n	8007e22 <max30100_balance_intensities+0xfe>
			if (this->debug)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d036      	beq.n	8007e14 <max30100_balance_intensities+0xf0>
				print("RED LED Current +\n");
 8007da6:	4821      	ldr	r0, [pc, #132]	; (8007e2c <max30100_balance_intensities+0x108>)
 8007da8:	f7fe fd34 	bl	8006814 <print>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 8007dac:	e032      	b.n	8007e14 <max30100_balance_intensities+0xf0>

		} else if (red_dc - ir_dc > this->acceptable_intense_diff
 8007dae:	ed97 7a02 	vldr	s14, [r7, #8]
 8007db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8007db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dce:	dd22      	ble.n	8007e16 <max30100_balance_intensities+0xf2>
				&& this->red_current > 0) {
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	795b      	ldrb	r3, [r3, #5]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01e      	beq.n	8007e16 <max30100_balance_intensities+0xf2>
			this->red_current--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	795b      	ldrb	r3, [r3, #5]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007dee:	461a      	mov	r2, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f962 	bl	80080ba <max30100_set_led_current>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75bb      	strb	r3, [r7, #22]
			if (ret != HAL_OK)
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <max30100_balance_intensities+0xe0>
				return ret;
 8007e00:	7dbb      	ldrb	r3, [r7, #22]
 8007e02:	e00e      	b.n	8007e22 <max30100_balance_intensities+0xfe>
			if (this->debug)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	791b      	ldrb	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <max30100_balance_intensities+0xf2>
				print("RED LED Current -\n");
 8007e0c:	4808      	ldr	r0, [pc, #32]	; (8007e30 <max30100_balance_intensities+0x10c>)
 8007e0e:	f7fe fd01 	bl	8006814 <print>
 8007e12:	e000      	b.n	8007e16 <max30100_balance_intensities+0xf2>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 8007e14:	bf00      	nop
		}

		this->last_red_current_check = (uint32_t) (HAL_GetTick());
 8007e16:	f7fa f9c1 	bl	800219c <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	609a      	str	r2, [r3, #8]

	}
	return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	0800fdc4 	.word	0x0800fdc4
 8007e30:	0800fdd8 	.word	0x0800fdd8

08007e34 <max30100_write_register>:

// Writes val to address register on device
HAL_StatusTypeDef max30100_write_register(max30100_config_t *this,
		uint8_t address, uint8_t val) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
 8007e40:	4613      	mov	r3, r2
 8007e42:	70bb      	strb	r3, [r7, #2]
	// start transmission to device
//	uint8_t *pVal = &val;
//	return HAL_I2C_Mem_Write(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, pVal, 1, 10);

	uint8_t pVal[2] = {address, val};
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	733b      	strb	r3, [r7, #12]
 8007e48:	78bb      	ldrb	r3, [r7, #2]
 8007e4a:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(this->_ui2c, MAX30100_DEVICE, pVal, 2, 100);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	f107 020c 	add.w	r2, r7, #12
 8007e54:	2364      	movs	r3, #100	; 0x64
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2302      	movs	r3, #2
 8007e5a:	21ae      	movs	r1, #174	; 0xae
 8007e5c:	f7fb fae6 	bl	800342c <HAL_I2C_Master_Transmit>
 8007e60:	4603      	mov	r3, r0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <max30100_read_register>:

HAL_StatusTypeDef max30100_read_register(max30100_config_t *this,
		uint8_t address, uint8_t *reg) {
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af04      	add	r7, sp, #16
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	460b      	mov	r3, r1
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	72fb      	strb	r3, [r7, #11]
//	return I2C_MasterByteRead(this->_ui2c, MAX30100_DEVICE, address, reg,
//			100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, 1, 100);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	2364      	movs	r3, #100	; 0x64
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	2301      	movs	r3, #1
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	21ae      	movs	r1, #174	; 0xae
 8007e90:	f7fb fbca 	bl	8003628 <HAL_I2C_Mem_Read>
 8007e94:	4603      	mov	r3, r0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <max30100_read_from>:

// Reads num bytes starting from address register on device in to _buff array
HAL_StatusTypeDef max30100_read_from(max30100_config_t *this, uint8_t address,
		uint8_t *reg, uint8_t size) {
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af04      	add	r7, sp, #16
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	460b      	mov	r3, r1
 8007eac:	72fb      	strb	r3, [r7, #11]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	72bb      	strb	r3, [r7, #10]
	if (!size)
 8007eb2:	7abb      	ldrb	r3, [r7, #10]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <max30100_read_from+0x1e>
		return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e00f      	b.n	8007edc <max30100_read_from+0x3e>

//	return I2C_MasterMultiRead(this->_ui2c, MAX30100_DEVICE, address, size,
//			reg, 100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, size, 100);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	7abb      	ldrb	r3, [r7, #10]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	9102      	str	r1, [sp, #8]
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	21ae      	movs	r1, #174	; 0xae
 8007ed6:	f7fb fba7 	bl	8003628 <HAL_I2C_Mem_Read>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <max30100_set_mode>:

HAL_StatusTypeDef max30100_set_mode(max30100_config_t *this,
		max30100_mode_t mode) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
	uint8_t current_mode_reg;
	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8007ef0:	f107 030e 	add.w	r3, r7, #14
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2106      	movs	r1, #6
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ffb6 	bl	8007e6a <max30100_read_register>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <max30100_set_mode+0x28>
		return ret;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	e00f      	b.n	8007f2c <max30100_set_mode+0x48>
	return max30100_write_register(this, MAX30100_MODE_CONF,
			(current_mode_reg & 0xF8) | mode);
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	f023 0307 	bic.w	r3, r3, #7
 8007f14:	b25a      	sxtb	r2, r3
 8007f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_MODE_CONF,
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	2106      	movs	r1, #6
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff ff85 	bl	8007e34 <max30100_write_register>
 8007f2a:	4603      	mov	r3, r0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <max30100_shutdown>:

HAL_StatusTypeDef max30100_shutdown(max30100_config_t *this) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8007f3c:	f107 030e 	add.w	r3, r7, #14
 8007f40:	461a      	mov	r2, r3
 8007f42:	2106      	movs	r1, #6
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ff90 	bl	8007e6a <max30100_read_register>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <max30100_shutdown+0x24>
		return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	e009      	b.n	8007f6c <max30100_shutdown+0x38>
	return max30100_write_register(this, MAX30100_MODE_CONF,
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	2106      	movs	r1, #6
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff65 	bl	8007e34 <max30100_write_register>
 8007f6a:	4603      	mov	r3, r0
			(current_mode_reg) | MAX30100_MODE_SHDN);
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <max30100_resume>:

HAL_StatusTypeDef max30100_resume(max30100_config_t *this) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8007f7c:	f107 030e 	add.w	r3, r7, #14
 8007f80:	461a      	mov	r2, r3
 8007f82:	2106      	movs	r1, #6
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff70 	bl	8007e6a <max30100_read_register>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <max30100_resume+0x24>
		return ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	e00b      	b.n	8007fb0 <max30100_resume+0x3c>
	current_mode_reg &= ~MAX30100_MODE_SHDN;
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	73bb      	strb	r3, [r7, #14]
	return max30100_write_register(this, MAX30100_MODE_CONF,
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2106      	movs	r1, #6
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff43 	bl	8007e34 <max30100_write_register>
 8007fae:	4603      	mov	r3, r0
			(current_mode_reg));
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <max30100_set_high_res>:

HAL_StatusTypeDef max30100_set_high_res(max30100_config_t *this, bool enabled) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
	uint8_t previous;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8007fc4:	f107 030e 	add.w	r3, r7, #14
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2107      	movs	r1, #7
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff ff4c 	bl	8007e6a <max30100_read_register>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
			&previous);
	if (ret != HAL_OK)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <max30100_set_high_res+0x28>
		return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	e017      	b.n	8008010 <max30100_set_high_res+0x58>
	if (enabled) {
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <max30100_set_high_res+0x44>
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	2107      	movs	r1, #7
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff ff1e 	bl	8007e34 <max30100_write_register>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	e009      	b.n	8008010 <max30100_set_high_res+0x58>
				previous | MAX30100_SPO2_HI_RES_EN);
	} else {
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	2107      	movs	r1, #7
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff13 	bl	8007e34 <max30100_write_register>
 800800e:	4603      	mov	r3, r0
				previous & ~MAX30100_SPO2_HI_RES_EN);
	}
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <max30100_set_sampling_rate>:

HAL_StatusTypeDef max30100_set_sampling_rate(max30100_config_t *this,
		max30100_sampling_rate_t rate) {
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8008024:	f107 030e 	add.w	r3, r7, #14
 8008028:	461a      	mov	r2, r3
 800802a:	2107      	movs	r1, #7
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ff1c 	bl	8007e6a <max30100_read_register>
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <max30100_set_sampling_rate+0x28>
		return ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	e010      	b.n	8008062 <max30100_set_sampling_rate+0x4a>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xE3) | (rate << 2));
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	b25b      	sxtb	r3, r3
 8008044:	f023 031c 	bic.w	r3, r3, #28
 8008048:	b25a      	sxtb	r2, r3
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	b25b      	sxtb	r3, r3
 8008050:	4313      	orrs	r3, r2
 8008052:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	2107      	movs	r1, #7
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff feea 	bl	8007e34 <max30100_write_register>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <max30100_set_pulse_width>:

HAL_StatusTypeDef max30100_set_pulse_width(max30100_config_t *this,
		max30100_pulse_width_t pw) {
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8008076:	f107 030e 	add.w	r3, r7, #14
 800807a:	461a      	mov	r2, r3
 800807c:	2107      	movs	r1, #7
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff fef3 	bl	8007e6a <max30100_read_register>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <max30100_set_pulse_width+0x28>
		return ret;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	e00f      	b.n	80080b2 <max30100_set_pulse_width+0x48>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xFC) | pw);
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	b25b      	sxtb	r3, r3
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	b25a      	sxtb	r2, r3
 800809c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	2107      	movs	r1, #7
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fec2 	bl	8007e34 <max30100_write_register>
 80080b0:	4603      	mov	r3, r0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <max30100_set_led_current>:

HAL_StatusTypeDef max30100_set_led_current(max30100_config_t *this,
		max30100_current_t red_current, max30100_current_t ir_current) {
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
 80080c6:	4613      	mov	r3, r2
 80080c8:	70bb      	strb	r3, [r7, #2]
	//Tratar erros
	return max30100_write_register(this, MAX30100_LED_CONF,
			(red_current << 4) | ir_current);
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	b25a      	sxtb	r2, r3
 80080d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_LED_CONF,
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	2109      	movs	r1, #9
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fea8 	bl	8007e34 <max30100_write_register>
 80080e4:	4603      	mov	r3, r0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <max30100_read_fifo>:
	*temperature = (float) temp + temp_fraction;
	return HAL_OK;
}

HAL_StatusTypeDef max30100_read_fifo(max30100_config_t *this,
		max30100_fifo_t *fifo) {
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4];
	//Testar erros
	HAL_StatusTypeDef ret = max30100_read_from(this, MAX30100_FIFO_DATA, buffer,
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	2304      	movs	r3, #4
 80080fe:	2105      	movs	r1, #5
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fecc 	bl	8007e9e <max30100_read_from>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
			4);
	if (ret != HAL_OK)
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <max30100_read_fifo+0x26>
		return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	e014      	b.n	800813e <max30100_read_fifo+0x50>
	fifo->raw_ir = ((uint16_t) buffer[0] << 8) | buffer[1];
 8008114:	7a3b      	ldrb	r3, [r7, #8]
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	b21a      	sxth	r2, r3
 800811a:	7a7b      	ldrb	r3, [r7, #9]
 800811c:	b21b      	sxth	r3, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	b21b      	sxth	r3, r3
 8008122:	b29a      	uxth	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	801a      	strh	r2, [r3, #0]
	fifo->raw_red = ((uint16_t) buffer[2] << 8) | buffer[3];
 8008128:	7abb      	ldrb	r3, [r7, #10]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	b21a      	sxth	r2, r3
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	b21b      	sxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b21b      	sxth	r3, r3
 8008136:	b29a      	uxth	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	805a      	strh	r2, [r3, #2]

	return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <max30100_dc_removal>:

max30100_dc_filter_t max30100_dc_removal(float x, float prev_w, float alpha) {
 8008146:	b480      	push	{r7}
 8008148:	b08b      	sub	sp, #44	; 0x2c
 800814a:	af00      	add	r7, sp, #0
 800814c:	ed87 0a05 	vstr	s0, [r7, #20]
 8008150:	edc7 0a04 	vstr	s1, [r7, #16]
 8008154:	ed87 1a03 	vstr	s2, [r7, #12]
	max30100_dc_filter_t filtered = { };
 8008158:	f107 0318 	add.w	r3, r7, #24
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	605a      	str	r2, [r3, #4]
	filtered.w = x + alpha * prev_w;
 8008162:	ed97 7a03 	vldr	s14, [r7, #12]
 8008166:	edd7 7a04 	vldr	s15, [r7, #16]
 800816a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800816e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008176:	edc7 7a06 	vstr	s15, [r7, #24]
	filtered.result = filtered.w - prev_w;
 800817a:	ed97 7a06 	vldr	s14, [r7, #24]
 800817e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008186:	edc7 7a07 	vstr	s15, [r7, #28]

	return filtered;
 800818a:	f107 0320 	add.w	r3, r7, #32
 800818e:	f107 0218 	add.w	r2, r7, #24
 8008192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008196:	e883 0003 	stmia.w	r3, {r0, r1}
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	ee07 2a10 	vmov	s14, r2
 80081a2:	ee07 3a90 	vmov	s15, r3
}
 80081a6:	eeb0 0a47 	vmov.f32	s0, s14
 80081aa:	eef0 0a67 	vmov.f32	s1, s15
 80081ae:	372c      	adds	r7, #44	; 0x2c
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <max30100_lpb_filter>:

void max30100_lpb_filter(max30100_config_t *this, float x) {
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	ed87 0a00 	vstr	s0, [r7]
	this->lpb_filter_ir.v[0] = this->lpb_filter_ir.v[1];
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	651a      	str	r2, [r3, #80]	; 0x50

	//Fs = 100Hz and Fc = 10Hz
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 80081cc:	6838      	ldr	r0, [r7, #0]
 80081ce:	f7f8 f9c3 	bl	8000558 <__aeabi_f2d>
 80081d2:	a319      	add	r3, pc, #100	; (adr r3, 8008238 <max30100_lpb_filter+0x80>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 fa16 	bl	8000608 <__aeabi_dmul>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	461d      	mov	r5, r3
			+ (0.50952544949442879485 * this->lpb_filter_ir.v[0]);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7f8 f9b5 	bl	8000558 <__aeabi_f2d>
 80081ee:	a314      	add	r3, pc, #80	; (adr r3, 8008240 <max30100_lpb_filter+0x88>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f8 fa08 	bl	8000608 <__aeabi_dmul>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 f84c 	bl	800029c <__adddf3>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4610      	mov	r0, r2
 800820a:	4619      	mov	r1, r3
 800820c:	f7f8 fcd4 	bl	8000bb8 <__aeabi_d2f>
 8008210:	4602      	mov	r2, r0
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	655a      	str	r2, [r3, #84]	; 0x54
	//Fs = 100Hz and Fc = 4Hz
	//this->lpb_filter_ir.v[1] = (1.367287359973195227e-1 * x)
	//                   + (0.72654252800536101020 * this->lpb_filter_ir.v[0]);
	//Very precise butterworth filter

	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
			+ this->lpb_filter_ir.v[1];
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008222:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bdb0      	pop	{r4, r5, r7, pc}
 8008234:	f3af 8000 	nop.w
 8008238:	5e7c4548 	.word	0x5e7c4548
 800823c:	3fcf63ef 	.word	0x3fcf63ef
 8008240:	50c1dd5c 	.word	0x50c1dd5c
 8008244:	3fe04e08 	.word	0x3fe04e08

08008248 <max30100_mean_diff>:

float max30100_mean_diff(max30100_config_t *this, float M) {
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	ed87 0a00 	vstr	s0, [r7]
	float avg = 0;
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]

	this->mean_diff_ir.sum -=
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
			this->mean_diff_ir.values[this->mean_diff_ir.index];
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	edd3 7a00 	vldr	s15, [r3]
	this->mean_diff_ir.sum -=
 8008272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	this->mean_diff_ir.values[this->mean_diff_ir.index] = M;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
	this->mean_diff_ir.sum +=
			this->mean_diff_ir.values[this->mean_diff_ir.index++];
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008298:	1c59      	adds	r1, r3, #1
 800829a:	b2c8      	uxtb	r0, r1
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	ed93 7a00 	vldr	s14, [r3]
	this->mean_diff_ir.sum +=
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80082b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	this->mean_diff_ir.index = this->mean_diff_ir.index
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
			% this->mean_filter_size;
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
	this->mean_diff_ir.index = this->mean_diff_ir.index
 80082c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082ca:	fb01 f202 	mul.w	r2, r1, r2
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (this->mean_diff_ir.count < this->mean_filter_size)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d207      	bcs.n	80082f8 <max30100_mean_diff+0xb0>
		this->mean_diff_ir.count++;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80082ee:	3301      	adds	r3, #1
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	avg = this->mean_diff_ir.sum / this->mean_diff_ir.count;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800830c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008310:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg - M;
 8008314:	ed97 7a03 	vldr	s14, [r7, #12]
 8008318:	edd7 7a00 	vldr	s15, [r7]
 800831c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8008320:	eeb0 0a67 	vmov.f32	s0, s15
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af04      	add	r7, sp, #16
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	b29a      	uxth	r2, r3
 8008340:	2364      	movs	r3, #100	; 0x64
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	2303      	movs	r3, #3
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2301      	movs	r3, #1
 8008350:	21b4      	movs	r1, #180	; 0xb4
 8008352:	480b      	ldr	r0, [pc, #44]	; (8008380 <mlx90614_read16+0x50>)
 8008354:	f7fb f968 	bl	8003628 <HAL_I2C_Mem_Read>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <mlx90614_read16+0x32>
    return false;
 800835e:	2300      	movs	r3, #0
 8008360:	e009      	b.n	8008376 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 8008362:	7b3b      	ldrb	r3, [r7, #12]
 8008364:	b21a      	sxth	r2, r3
 8008366:	7b7b      	ldrb	r3, [r7, #13]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	b21b      	sxth	r3, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	b21a      	sxth	r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	801a      	strh	r2, [r3, #0]
  return true;
 8008374:	2301      	movs	r3, #1
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	2000055c 	.word	0x2000055c

08008384 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 800838e:	4b21      	ldr	r3, [pc, #132]	; (8008414 <mlx90614_calcTemperature+0x90>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d108      	bne.n	80083a8 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 8008396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80083a6:	e02b      	b.n	8008400 <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 80083a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008418 <mlx90614_calcTemperature+0x94>
 80083b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083bc:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <mlx90614_calcTemperature+0x90>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d01b      	beq.n	8008400 <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 80083c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80083cc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800841c <mlx90614_calcTemperature+0x98>
 80083d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083d4:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 80083d8:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <mlx90614_calcTemperature+0x90>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d10f      	bne.n	8008400 <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 80083e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80083e4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80083e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083ec:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80083f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008420 <mlx90614_calcTemperature+0x9c>
 80083f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083fc:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	ee07 3a90 	vmov	s15, r3
}
 8008406:	eeb0 0a67 	vmov.f32	s0, s15
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2000087c 	.word	0x2000087c
 8008418:	3ca3d70a 	.word	0x3ca3d70a
 800841c:	43889333 	.word	0x43889333
 8008420:	42000000 	.word	0x42000000

08008424 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 8008428:	2234      	movs	r2, #52	; 0x34
 800842a:	2100      	movs	r1, #0
 800842c:	4821      	ldr	r0, [pc, #132]	; (80084b4 <mlx90614_init+0x90>)
 800842e:	f003 feaf 	bl	800c190 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 8008432:	4b20      	ldr	r3, [pc, #128]	; (80084b4 <mlx90614_init+0x90>)
 8008434:	2202      	movs	r2, #2
 8008436:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 8008438:	2364      	movs	r3, #100	; 0x64
 800843a:	2201      	movs	r2, #1
 800843c:	21b4      	movs	r1, #180	; 0xb4
 800843e:	481e      	ldr	r0, [pc, #120]	; (80084b8 <mlx90614_init+0x94>)
 8008440:	f7fb fb18 	bl	8003a74 <HAL_I2C_IsDeviceReady>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <mlx90614_init+0x2a>
    return false;
 800844a:	2300      	movs	r3, #0
 800844c:	e030      	b.n	80084b0 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 800844e:	491b      	ldr	r1, [pc, #108]	; (80084bc <mlx90614_init+0x98>)
 8008450:	2025      	movs	r0, #37	; 0x25
 8008452:	f7ff ff6d 	bl	8008330 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 8008456:	2000      	movs	r0, #0
 8008458:	f000 f832 	bl	80084c0 <mlx90614_readID>
 800845c:	4603      	mov	r3, r0
 800845e:	f083 0301 	eor.w	r3, r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <mlx90614_init+0x48>
    return false;
 8008468:	2300      	movs	r3, #0
 800846a:	e021      	b.n	80084b0 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 800846c:	2000      	movs	r0, #0
 800846e:	f000 f861 	bl	8008534 <mlx90614_getEmissivity>
 8008472:	4603      	mov	r3, r0
 8008474:	f083 0301 	eor.w	r3, r3, #1
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <mlx90614_init+0x5e>
    return false;
 800847e:	2300      	movs	r3, #0
 8008480:	e016      	b.n	80084b0 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 8008482:	2000      	movs	r0, #0
 8008484:	f000 f890 	bl	80085a8 <mlx90614_getMax>
 8008488:	4603      	mov	r3, r0
 800848a:	f083 0301 	eor.w	r3, r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <mlx90614_init+0x74>
    return false;
 8008494:	2300      	movs	r3, #0
 8008496:	e00b      	b.n	80084b0 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8008498:	2000      	movs	r0, #0
 800849a:	f000 f8a9 	bl	80085f0 <mlx90614_getMin>
 800849e:	4603      	mov	r3, r0
 80084a0:	f083 0301 	eor.w	r3, r3, #1
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <mlx90614_init+0x8a>
    return false;
 80084aa:	2300      	movs	r3, #0
 80084ac:	e000      	b.n	80084b0 <mlx90614_init+0x8c>

  return true;
 80084ae:	2301      	movs	r3, #1
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	2000087c 	.word	0x2000087c
 80084b8:	2000055c 	.word	0x2000055c
 80084bc:	200008ac 	.word	0x200008ac

080084c0 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e028      	b.n	8008520 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	333c      	adds	r3, #60	; 0x3c
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f107 020a 	add.w	r2, r7, #10
 80084de:	4611      	mov	r1, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff ff25 	bl	8008330 <mlx90614_read16>
 80084e6:	4603      	mov	r3, r0
 80084e8:	f083 0301 	eor.w	r3, r3, #1
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <mlx90614_readID+0x36>
			return false;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e018      	b.n	8008528 <mlx90614_readID+0x68>
    if(id != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d006      	beq.n	800850a <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008508:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 800850a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800850e:	b299      	uxth	r1, r3
 8008510:	4a07      	ldr	r2, [pc, #28]	; (8008530 <mlx90614_readID+0x70>)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3314      	adds	r3, #20
 8008516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b03      	cmp	r3, #3
 8008524:	ddd3      	ble.n	80084ce <mlx90614_readID+0xe>
	}
	return true;
 8008526:	2301      	movs	r3, #1
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2000087c 	.word	0x2000087c

08008534 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 800853c:	4917      	ldr	r1, [pc, #92]	; (800859c <mlx90614_getEmissivity+0x68>)
 800853e:	2024      	movs	r0, #36	; 0x24
 8008540:	f7ff fef6 	bl	8008330 <mlx90614_read16>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d022      	beq.n	8008590 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <mlx90614_getEmissivity+0x6c>)
 800854c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008550:	b29b      	uxth	r3, r3
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800855a:	eddf 6a12 	vldr	s13, [pc, #72]	; 80085a4 <mlx90614_getEmissivity+0x70>
 800855e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <mlx90614_getEmissivity+0x6c>)
 8008564:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00e      	beq.n	800858c <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <mlx90614_getEmissivity+0x6c>)
 8008570:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008574:	b29b      	uxth	r3, r3
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800857e:	eddf 6a09 	vldr	s13, [pc, #36]	; 80085a4 <mlx90614_getEmissivity+0x70>
 8008582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	2000087e 	.word	0x2000087e
 80085a0:	2000087c 	.word	0x2000087c
 80085a4:	477fff00 	.word	0x477fff00

080085a8 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 80085b0:	490d      	ldr	r1, [pc, #52]	; (80085e8 <mlx90614_getMax+0x40>)
 80085b2:	2020      	movs	r0, #32
 80085b4:	f7ff febc 	bl	8008330 <mlx90614_read16>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00e      	beq.n	80085dc <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 80085c4:	4b09      	ldr	r3, [pc, #36]	; (80085ec <mlx90614_getMax+0x44>)
 80085c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <mlx90614_getMax+0x36>
	}
	return false;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000886 	.word	0x20000886
 80085ec:	2000087c 	.word	0x2000087c

080085f0 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 80085f8:	490d      	ldr	r1, [pc, #52]	; (8008630 <mlx90614_getMin+0x40>)
 80085fa:	2021      	movs	r0, #33	; 0x21
 80085fc:	f7ff fe98 	bl	8008330 <mlx90614_read16>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 800860c:	4b09      	ldr	r3, [pc, #36]	; (8008634 <mlx90614_getMin+0x44>)
 800860e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <mlx90614_getMin+0x36>
	}
	return false;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000888 	.word	0x20000888
 8008634:	2000087c 	.word	0x2000087c

08008638 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 8008640:	4911      	ldr	r1, [pc, #68]	; (8008688 <mlx90614_getObject1+0x50>)
 8008642:	2007      	movs	r0, #7
 8008644:	f7ff fe74 	bl	8008330 <mlx90614_read16>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <mlx90614_getObject1+0x54>)
 8008650:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da01      	bge.n	800865c <mlx90614_getObject1+0x24>
			return false;
 8008658:	2300      	movs	r3, #0
 800865a:	e010      	b.n	800867e <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <mlx90614_getObject1+0x54>)
 8008664:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fe8b 	bl	8008384 <mlx90614_calcTemperature>
 800866e:	eef0 7a40 	vmov.f32	s15, s0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <mlx90614_getObject1+0x46>
	}
	return false;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000882 	.word	0x20000882
 800868c:	2000087c 	.word	0x2000087c

08008690 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8008694:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <Ringbuf_init+0x68>)
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <Ringbuf_init+0x6c>)
 8008698:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <Ringbuf_init+0x70>)
 800869c:	4a19      	ldr	r2, [pc, #100]	; (8008704 <Ringbuf_init+0x74>)
 800869e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80086a0:	4b19      	ldr	r3, [pc, #100]	; (8008708 <Ringbuf_init+0x78>)
 80086a2:	4a1a      	ldr	r2, [pc, #104]	; (800870c <Ringbuf_init+0x7c>)
 80086a4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <Ringbuf_init+0x80>)
 80086a8:	4a1a      	ldr	r2, [pc, #104]	; (8008714 <Ringbuf_init+0x84>)
 80086aa:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80086ac:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <Ringbuf_init+0x88>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <Ringbuf_init+0x88>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80086bc:	4b17      	ldr	r3, [pc, #92]	; (800871c <Ringbuf_init+0x8c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <Ringbuf_init+0x8c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80086cc:	4b12      	ldr	r3, [pc, #72]	; (8008718 <Ringbuf_init+0x88>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <Ringbuf_init+0x88>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0220 	orr.w	r2, r2, #32
 80086da:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <Ringbuf_init+0x8c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	4b0e      	ldr	r3, [pc, #56]	; (800871c <Ringbuf_init+0x8c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0220 	orr.w	r2, r2, #32
 80086ea:	60da      	str	r2, [r3, #12]
}
 80086ec:	bf00      	nop
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	200010d0 	.word	0x200010d0
 80086fc:	200008b0 	.word	0x200008b0
 8008700:	200010d4 	.word	0x200010d4
 8008704:	20000ab8 	.word	0x20000ab8
 8008708:	200010d8 	.word	0x200010d8
 800870c:	20000cc0 	.word	0x20000cc0
 8008710:	200010dc 	.word	0x200010dc
 8008714:	20000ec8 	.word	0x20000ec8
 8008718:	200005f4 	.word	0x200005f4
 800871c:	200005b0 	.word	0x200005b0

08008720 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008732:	3301      	adds	r3, #1
 8008734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008738:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d009      	beq.n	800875a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	79f9      	ldrb	r1, [r7, #7]
 8008750:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7f7 fd35 	bl	80001e0 <strlen>
 8008776:	4603      	mov	r3, r0
 8008778:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 800877a:	6838      	ldr	r0, [r7, #0]
 800877c:	f7f7 fd30 	bl	80001e0 <strlen>
 8008780:	4603      	mov	r3, r0
 8008782:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 800878c:	e002      	b.n	8008794 <Look_for+0x2e>
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	440b      	add	r3, r1
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d1f2      	bne.n	800878e <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	440b      	add	r3, r1
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d111      	bne.n	80087e0 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 80087bc:	e005      	b.n	80087ca <Look_for+0x64>
	{
		so_far++;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	3301      	adds	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
		indx++;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3301      	adds	r3, #1
 80087c8:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	440b      	add	r3, r1
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d0ef      	beq.n	80087be <Look_for+0x58>
 80087de:	e008      	b.n	80087f2 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	dbcf      	blt.n	800878c <Look_for+0x26>
 80087ec:	f04f 33ff 	mov.w	r3, #4294967295
 80087f0:	e007      	b.n	8008802 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d101      	bne.n	80087fe <Look_for+0x98>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e001      	b.n	8008802 <Look_for+0x9c>
	else return -1;
 80087fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <Uart_flush+0x54>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10c      	bne.n	8008836 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 800881c:	4b11      	ldr	r3, [pc, #68]	; (8008864 <Uart_flush+0x58>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f003 fcb2 	bl	800c190 <memset>
		_rx_buffer1->head = 0;
 800882c:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <Uart_flush+0x58>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2200      	movs	r2, #0
 8008832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a0b      	ldr	r2, [pc, #44]	; (8008868 <Uart_flush+0x5c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d10c      	bne.n	8008858 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <Uart_flush+0x60>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f003 fca1 	bl	800c190 <memset>
		_rx_buffer2->head = 0;
 800884e:	4b07      	ldr	r3, [pc, #28]	; (800886c <Uart_flush+0x60>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200005f4 	.word	0x200005f4
 8008864:	200010d0 	.word	0x200010d0
 8008868:	200005b0 	.word	0x200005b0
 800886c:	200010d8 	.word	0x200010d8

08008870 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a1c      	ldr	r2, [pc, #112]	; (80088ec <Uart_peek+0x7c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d114      	bne.n	80088aa <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <Uart_peek+0x80>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008888:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <Uart_peek+0x80>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008890:	429a      	cmp	r2, r3
 8008892:	d102      	bne.n	800889a <Uart_peek+0x2a>
		  {
		    return -1;
 8008894:	f04f 33ff 	mov.w	r3, #4294967295
 8008898:	e022      	b.n	80088e0 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <Uart_peek+0x80>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <Uart_peek+0x80>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088a6:	5cd3      	ldrb	r3, [r2, r3]
 80088a8:	e01a      	b.n	80088e0 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a11      	ldr	r2, [pc, #68]	; (80088f4 <Uart_peek+0x84>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d114      	bne.n	80088dc <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <Uart_peek+0x88>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80088ba:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <Uart_peek+0x88>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d102      	bne.n	80088cc <Uart_peek+0x5c>
		  {
		    return -1;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ca:	e009      	b.n	80088e0 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <Uart_peek+0x88>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <Uart_peek+0x88>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088d8:	5cd3      	ldrb	r3, [r2, r3]
 80088da:	e001      	b.n	80088e0 <Uart_peek+0x70>
		  }
	}

	return -1;
 80088dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	200005f4 	.word	0x200005f4
 80088f0:	200010d0 	.word	0x200010d0
 80088f4:	200005b0 	.word	0x200005b0
 80088f8:	200010d8 	.word	0x200010d8

080088fc <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a29      	ldr	r2, [pc, #164]	; (80089ac <Uart_read+0xb0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d121      	bne.n	8008950 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800890c:	4b28      	ldr	r3, [pc, #160]	; (80089b0 <Uart_read+0xb4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008914:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <Uart_read+0xb4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800891c:	429a      	cmp	r2, r3
 800891e:	d102      	bne.n	8008926 <Uart_read+0x2a>
		  {
		    return -1;
 8008920:	f04f 33ff 	mov.w	r3, #4294967295
 8008924:	e03c      	b.n	80089a0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8008926:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <Uart_read+0xb4>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <Uart_read+0xb4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008932:	5cd3      	ldrb	r3, [r2, r3]
 8008934:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8008936:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <Uart_read+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <Uart_read+0xb4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008948:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	e027      	b.n	80089a0 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <Uart_read+0xb8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d121      	bne.n	800899c <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <Uart_read+0xbc>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008960:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <Uart_read+0xbc>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008968:	429a      	cmp	r2, r3
 800896a:	d102      	bne.n	8008972 <Uart_read+0x76>
		  {
		    return -1;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
 8008970:	e016      	b.n	80089a0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <Uart_read+0xbc>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <Uart_read+0xbc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800897e:	5cd3      	ldrb	r3, [r2, r3]
 8008980:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <Uart_read+0xbc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <Uart_read+0xbc>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	e001      	b.n	80089a0 <Uart_read+0xa4>
		  }
	}

	else return -1;
 800899c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	200005f4 	.word	0x200005f4
 80089b0:	200010d0 	.word	0x200010d0
 80089b4:	200005b0 	.word	0x200005b0
 80089b8:	200010d8 	.word	0x200010d8

080089bc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	db54      	blt.n	8008a76 <Uart_write+0xba>
	{
		if (uart == device_uart){
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	4a2d      	ldr	r2, [pc, #180]	; (8008a84 <Uart_write+0xc8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d126      	bne.n	8008a22 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80089d4:	4b2c      	ldr	r3, [pc, #176]	; (8008a88 <Uart_write+0xcc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089dc:	3301      	adds	r3, #1
 80089de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e2:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80089e4:	bf00      	nop
 80089e6:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <Uart_write+0xcc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d0f8      	beq.n	80089e6 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <Uart_write+0xcc>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	4b23      	ldr	r3, [pc, #140]	; (8008a88 <Uart_write+0xcc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	b2c9      	uxtb	r1, r1
 8008a04:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8008a06:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <Uart_write+0xcc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8008a10:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <Uart_write+0xc8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <Uart_write+0xc8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a1e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8008a20:	e029      	b.n	8008a76 <Uart_write+0xba>
		else if (uart == pc_uart){
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	4a19      	ldr	r2, [pc, #100]	; (8008a8c <Uart_write+0xd0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d125      	bne.n	8008a76 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <Uart_write+0xd4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a32:	3301      	adds	r3, #1
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8008a3a:	bf00      	nop
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <Uart_write+0xd4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d0f8      	beq.n	8008a3c <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8008a4a:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <Uart_write+0xd4>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <Uart_write+0xd4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	b2c9      	uxtb	r1, r1
 8008a5a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <Uart_write+0xd4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <Uart_write+0xd0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <Uart_write+0xd0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a74:	60da      	str	r2, [r3, #12]
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	200005f4 	.word	0x200005f4
 8008a88:	200010d4 	.word	0x200010d4
 8008a8c:	200005b0 	.word	0x200005b0
 8008a90:	200010dc 	.word	0x200010dc

08008a94 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <IsDataAvailable+0x70>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d111      	bne.n	8008ac8 <IsDataAvailable+0x34>
 8008aa4:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <IsDataAvailable+0x74>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	4b16      	ldr	r3, [pc, #88]	; (8008b08 <IsDataAvailable+0x74>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac6:	e017      	b.n	8008af8 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <IsDataAvailable+0x78>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d111      	bne.n	8008af4 <IsDataAvailable+0x60>
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <IsDataAvailable+0x7c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <IsDataAvailable+0x7c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af2:	e001      	b.n	8008af8 <IsDataAvailable+0x64>
	return -1;
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	200005f4 	.word	0x200005f4
 8008b08:	200010d0 	.word	0x200010d0
 8008b0c:	200005b0 	.word	0x200005b0
 8008b10:	200010d8 	.word	0x200010d8

08008b14 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8008b24:	bf00      	nop
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f8b7 	bl	8008c9c <Wait_for>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d1f8      	bne.n	8008b26 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e012      	b.n	8008b60 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8008b3a:	bf00      	nop
 8008b3c:	6838      	ldr	r0, [r7, #0]
 8008b3e:	f7ff ffa9 	bl	8008a94 <IsDataAvailable>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0f9      	beq.n	8008b3c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8008b48:	6838      	ldr	r0, [r7, #0]
 8008b4a:	f7ff fed7 	bl	80088fc <Uart_read>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	b2ca      	uxtb	r2, r1
 8008b58:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dbe8      	blt.n	8008b3a <Get_after+0x26>
	}
	return 1;
 8008b68:	2301      	movs	r3, #1
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8008b7c:	e007      	b.n	8008b8e <Uart_sendstring+0x1c>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ff17 	bl	80089bc <Uart_write>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f3      	bne.n	8008b7e <Uart_sendstring+0xc>
}
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7f7 fb15 	bl	80001e0 <strlen>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8008bbe:	bf00      	nop
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ff67 	bl	8008a94 <IsDataAvailable>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f9      	beq.n	8008bc0 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8008bcc:	e01f      	b.n	8008c0e <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8008bce:	4b32      	ldr	r3, [pc, #200]	; (8008c98 <Copy_upto+0xf8>)
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	4b31      	ldr	r3, [pc, #196]	; (8008c98 <Copy_upto+0xf8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	68b8      	ldr	r0, [r7, #8]
 8008bde:	4403      	add	r3, r0
 8008be0:	5c8a      	ldrb	r2, [r1, r2]
 8008be2:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8008be4:	4b2c      	ldr	r3, [pc, #176]	; (8008c98 <Copy_upto+0xf8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	4b2a      	ldr	r3, [pc, #168]	; (8008c98 <Copy_upto+0xf8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8008c00:	bf00      	nop
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ff46 	bl	8008a94 <IsDataAvailable>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f9      	beq.n	8008c02 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fe2e 	bl	8008870 <Uart_peek>
 8008c14:	4601      	mov	r1, r0
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	d1d5      	bne.n	8008bce <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8008c22:	e01b      	b.n	8008c5c <Copy_upto+0xbc>
	{
		so_far++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fe66 	bl	80088fc <Uart_read>
 8008c30:	4601      	mov	r1, r0
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	61ba      	str	r2, [r7, #24]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	b2ca      	uxtb	r2, r1
 8008c40:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d101      	bne.n	8008c4e <Copy_upto+0xae>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e01f      	b.n	8008c8e <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8008c4e:	bf00      	nop
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ff1f 	bl	8008a94 <IsDataAvailable>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0f9      	beq.n	8008c50 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fe07 	bl	8008870 <Uart_peek>
 8008c62:	4601      	mov	r1, r0
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	d0d9      	beq.n	8008c24 <Copy_upto+0x84>
	}

	if (so_far != len)
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d002      	beq.n	8008c7e <Copy_upto+0xde>
	{
		so_far = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
		goto again;
 8008c7c:	e79f      	b.n	8008bbe <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d101      	bne.n	8008c8a <Copy_upto+0xea>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e001      	b.n	8008c8e <Copy_upto+0xee>
	else return -1;
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295

}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200010d0 	.word	0x200010d0

08008c9c <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7f7 fa98 	bl	80001e0 <strlen>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8008cb4:	bf00      	nop
 8008cb6:	6838      	ldr	r0, [r7, #0]
 8008cb8:	f7ff feec 	bl	8008a94 <IsDataAvailable>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0f9      	beq.n	8008cb6 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8008cc2:	6838      	ldr	r0, [r7, #0]
 8008cc4:	f7ff fdd4 	bl	8008870 <Uart_peek>
 8008cc8:	4601      	mov	r1, r0
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	d01e      	beq.n	8008d14 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8008cd6:	4b1e      	ldr	r3, [pc, #120]	; (8008d50 <Wait_for+0xb4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <Wait_for+0xb4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8008cec:	e7e2      	b.n	8008cb4 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8008cf4:	6838      	ldr	r0, [r7, #0]
 8008cf6:	f7ff fe01 	bl	80088fc <Uart_read>
		if (so_far == len) return 1;
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d101      	bne.n	8008d06 <Wait_for+0x6a>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e01f      	b.n	8008d46 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8008d06:	bf00      	nop
 8008d08:	6838      	ldr	r0, [r7, #0]
 8008d0a:	f7ff fec3 	bl	8008a94 <IsDataAvailable>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0f9      	beq.n	8008d08 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8008d14:	6838      	ldr	r0, [r7, #0]
 8008d16:	f7ff fdab 	bl	8008870 <Uart_peek>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4299      	cmp	r1, r3
 8008d26:	d0e2      	beq.n	8008cee <Wait_for+0x52>
	}

	if (so_far != len)
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d002      	beq.n	8008d36 <Wait_for+0x9a>
	{
		so_far = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8008d34:	e7be      	b.n	8008cb4 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d101      	bne.n	8008d42 <Wait_for+0xa6>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e001      	b.n	8008d46 <Wait_for+0xaa>
	else return -1;
 8008d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200010d0 	.word	0x200010d0

08008d54 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d026      	beq.n	8008dc4 <Uart_isr+0x70>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d021      	beq.n	8008dc4 <Uart_isr+0x70>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a40      	ldr	r2, [pc, #256]	; (8008e94 <Uart_isr+0x140>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d107      	bne.n	8008da6 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8008d96:	4b40      	ldr	r3, [pc, #256]	; (8008e98 <Uart_isr+0x144>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fcbe 	bl	8008720 <store_char>
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
           	print("In PC UART IT\n\r");
        }

        return;
 8008da4:	e070      	b.n	8008e88 <Uart_isr+0x134>
        else if (huart == pc_uart)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a3c      	ldr	r2, [pc, #240]	; (8008e9c <Uart_isr+0x148>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d16c      	bne.n	8008e88 <Uart_isr+0x134>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8008dae:	4b3c      	ldr	r3, [pc, #240]	; (8008ea0 <Uart_isr+0x14c>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fcb2 	bl	8008720 <store_char>
           	print("In PC UART IT\n\r");
 8008dbc:	4839      	ldr	r0, [pc, #228]	; (8008ea4 <Uart_isr+0x150>)
 8008dbe:	f7fd fd29 	bl	8006814 <print>
        return;
 8008dc2:	e061      	b.n	8008e88 <Uart_isr+0x134>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d05f      	beq.n	8008e8e <Uart_isr+0x13a>
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d05a      	beq.n	8008e8e <Uart_isr+0x13a>
    {
    	if (huart == device_uart){
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <Uart_isr+0x140>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d127      	bne.n	8008e30 <Uart_isr+0xdc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <Uart_isr+0x154>)
 8008de2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008de6:	4b30      	ldr	r3, [pc, #192]	; (8008ea8 <Uart_isr+0x154>)
 8008de8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d108      	bne.n	8008e02 <Uart_isr+0xae>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dfe:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8008e00:	e044      	b.n	8008e8c <Uart_isr+0x138>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8008e02:	4b29      	ldr	r3, [pc, #164]	; (8008ea8 <Uart_isr+0x154>)
 8008e04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e08:	4a27      	ldr	r2, [pc, #156]	; (8008ea8 <Uart_isr+0x154>)
 8008e0a:	5cd3      	ldrb	r3, [r2, r3]
 8008e0c:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8008e0e:	4b26      	ldr	r3, [pc, #152]	; (8008ea8 <Uart_isr+0x154>)
 8008e10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e14:	3301      	adds	r3, #1
 8008e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1a:	4a23      	ldr	r2, [pc, #140]	; (8008ea8 <Uart_isr+0x154>)
 8008e1c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	7b7a      	ldrb	r2, [r7, #13]
 8008e2c:	605a      	str	r2, [r3, #4]
    	return;
 8008e2e:	e02d      	b.n	8008e8c <Uart_isr+0x138>
    	else if (huart == pc_uart){
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a1a      	ldr	r2, [pc, #104]	; (8008e9c <Uart_isr+0x148>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d129      	bne.n	8008e8c <Uart_isr+0x138>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8008e38:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <Uart_isr+0x158>)
 8008e3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008e3e:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <Uart_isr+0x158>)
 8008e40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d108      	bne.n	8008e5a <Uart_isr+0x106>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e56:	60da      	str	r2, [r3, #12]
    	return;
 8008e58:	e018      	b.n	8008e8c <Uart_isr+0x138>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8008e5a:	4b14      	ldr	r3, [pc, #80]	; (8008eac <Uart_isr+0x158>)
 8008e5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e60:	4a12      	ldr	r2, [pc, #72]	; (8008eac <Uart_isr+0x158>)
 8008e62:	5cd3      	ldrb	r3, [r2, r3]
 8008e64:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8008e66:	4b11      	ldr	r3, [pc, #68]	; (8008eac <Uart_isr+0x158>)
 8008e68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	4a0e      	ldr	r2, [pc, #56]	; (8008eac <Uart_isr+0x158>)
 8008e74:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	7bba      	ldrb	r2, [r7, #14]
 8008e84:	605a      	str	r2, [r3, #4]
    	return;
 8008e86:	e001      	b.n	8008e8c <Uart_isr+0x138>
        return;
 8008e88:	bf00      	nop
 8008e8a:	e000      	b.n	8008e8e <Uart_isr+0x13a>
    	return;
 8008e8c:	bf00      	nop
    }
}
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	200005f4 	.word	0x200005f4
 8008e98:	200010d0 	.word	0x200010d0
 8008e9c:	200005b0 	.word	0x200005b0
 8008ea0:	200010d8 	.word	0x200010d8
 8008ea4:	0800fdf0 	.word	0x0800fdf0
 8008ea8:	20000ab8 	.word	0x20000ab8
 8008eac:	20000ec8 	.word	0x20000ec8

08008eb0 <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8008eb0:	b590      	push	{r4, r7, lr}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	4608      	mov	r0, r1
 8008eba:	4611      	mov	r1, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	817b      	strh	r3, [r7, #10]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	813b      	strh	r3, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 8008eca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d113      	bne.n	8008efa <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8008ed2:	897b      	ldrh	r3, [r7, #10]
 8008ed4:	3305      	adds	r3, #5
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	b218      	sxth	r0, r3
 8008eda:	893b      	ldrh	r3, [r7, #8]
 8008edc:	3305      	adds	r3, #5
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	b219      	sxth	r1, r3
 8008ee2:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008ee6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008eea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	f000 ff4f 	bl	8009d98 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8008efa:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008efe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f02:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8008f06:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8008f0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4623      	mov	r3, r4
 8008f16:	f000 ff3f 	bl	8009d98 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8008f1a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8008f1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f22:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8008f26:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8008f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	4623      	mov	r3, r4
 8008f38:	f000 fb54 	bl	80095e4 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8008f3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008f40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f42:	4413      	add	r3, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008f4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f4c:	4413      	add	r3, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f001 f9ae 	bl	800a2b0 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8008f54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 f9c1 	bl	800a2e0 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8008f5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 f9d1 	bl	800a30c <LCD_SetTextColor>
	LCD_Printf(c);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f001 f8b8 	bl	800a0e0 <LCD_Printf>

}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd90      	pop	{r4, r7, pc}

08008f78 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4623      	mov	r3, r4
 8008f88:	80fb      	strh	r3, [r7, #6]
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	80bb      	strh	r3, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	807b      	strh	r3, [r7, #2]
 8008f92:	4613      	mov	r3, r2
 8008f94:	803b      	strh	r3, [r7, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
 8008f9a:	e00f      	b.n	8008fbc <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	88bb      	ldrh	r3, [r7, #4]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	b219      	sxth	r1, r3
 8008fa8:	883b      	ldrh	r3, [r7, #0]
 8008faa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008fae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008fb2:	f000 fa3b 	bl	800942c <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	7bfa      	ldrb	r2, [r7, #15]
 8008fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	dbea      	blt.n	8008f9c <LCD_DrawHBorder+0x24>
	}

}
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd90      	pop	{r4, r7, pc}

08008fd0 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	t *= 20;
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8008fe4:	e003      	b.n	8008fee <delay+0x1e>
		__asm("nop");
 8008fe6:	bf00      	nop
	for (; t > 0; t--) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1f8      	bne.n	8008fe6 <delay+0x16>
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	gpio_clk_en(PORTB);
 800900a:	4832      	ldr	r0, [pc, #200]	; (80090d4 <GPIO_Init+0xd0>)
 800900c:	f7fd f848 	bl	80060a0 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009010:	2300      	movs	r3, #0
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	2300      	movs	r3, #0
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	2300      	movs	r3, #0
 800901a:	2201      	movs	r2, #1
 800901c:	2101      	movs	r1, #1
 800901e:	482e      	ldr	r0, [pc, #184]	; (80090d8 <GPIO_Init+0xd4>)
 8009020:	f7fd f884 	bl	800612c <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009024:	2300      	movs	r3, #0
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	2300      	movs	r3, #0
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2300      	movs	r3, #0
 800902e:	2201      	movs	r2, #1
 8009030:	2107      	movs	r1, #7
 8009032:	4829      	ldr	r0, [pc, #164]	; (80090d8 <GPIO_Init+0xd4>)
 8009034:	f7fd f87a 	bl	800612c <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009038:	2300      	movs	r3, #0
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	2300      	movs	r3, #0
 8009042:	2201      	movs	r2, #1
 8009044:	2100      	movs	r1, #0
 8009046:	4825      	ldr	r0, [pc, #148]	; (80090dc <GPIO_Init+0xd8>)
 8009048:	f7fd f870 	bl	800612c <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800904c:	2300      	movs	r3, #0
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	2201      	movs	r2, #1
 8009058:	2101      	movs	r1, #1
 800905a:	4820      	ldr	r0, [pc, #128]	; (80090dc <GPIO_Init+0xd8>)
 800905c:	f7fd f866 	bl	800612c <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009060:	2300      	movs	r3, #0
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2300      	movs	r3, #0
 800906a:	2201      	movs	r2, #1
 800906c:	2104      	movs	r1, #4
 800906e:	481b      	ldr	r0, [pc, #108]	; (80090dc <GPIO_Init+0xd8>)
 8009070:	f7fd f85c 	bl	800612c <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009074:	2300      	movs	r3, #0
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	2300      	movs	r3, #0
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2300      	movs	r3, #0
 800907e:	2201      	movs	r2, #1
 8009080:	2108      	movs	r1, #8
 8009082:	4816      	ldr	r0, [pc, #88]	; (80090dc <GPIO_Init+0xd8>)
 8009084:	f7fd f852 	bl	800612c <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009088:	2300      	movs	r3, #0
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	2300      	movs	r3, #0
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2300      	movs	r3, #0
 8009092:	2201      	movs	r2, #1
 8009094:	2109      	movs	r1, #9
 8009096:	4811      	ldr	r0, [pc, #68]	; (80090dc <GPIO_Init+0xd8>)
 8009098:	f7fd f848 	bl	800612c <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800909c:	2300      	movs	r3, #0
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	2201      	movs	r2, #1
 80090a8:	210a      	movs	r1, #10
 80090aa:	480c      	ldr	r0, [pc, #48]	; (80090dc <GPIO_Init+0xd8>)
 80090ac:	f7fd f83e 	bl	800612c <gpio_config>
//	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 80090b0:	f240 4339 	movw	r3, #1081	; 0x439
 80090b4:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090b6:	2301      	movs	r3, #1
 80090b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80090be:	2300      	movs	r3, #0
 80090c0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090c2:	1d3b      	adds	r3, r7, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4803      	ldr	r0, [pc, #12]	; (80090d4 <GPIO_Init+0xd0>)
 80090c8:	f7f9 fdba 	bl	8002c40 <HAL_GPIO_Init>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40020400 	.word	0x40020400
 80090d8:	40020800 	.word	0x40020800
 80090dc:	40020000 	.word	0x40020000

080090e0 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 80090e6:	4b2e      	ldr	r3, [pc, #184]	; (80091a0 <LCD_Begin+0xc0>)
 80090e8:	22f0      	movs	r2, #240	; 0xf0
 80090ea:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 80090ec:	4b2d      	ldr	r3, [pc, #180]	; (80091a4 <LCD_Begin+0xc4>)
 80090ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80090f2:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <LCD_Begin+0xc8>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 80090fa:	4b2c      	ldr	r3, [pc, #176]	; (80091ac <LCD_Begin+0xcc>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	4b2a      	ldr	r3, [pc, #168]	; (80091ac <LCD_Begin+0xcc>)
 8009102:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009106:	4b2a      	ldr	r3, [pc, #168]	; (80091b0 <LCD_Begin+0xd0>)
 8009108:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 800910a:	4b2a      	ldr	r3, [pc, #168]	; (80091b4 <LCD_Begin+0xd4>)
 800910c:	2204      	movs	r2, #4
 800910e:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8009110:	4b29      	ldr	r3, [pc, #164]	; (80091b8 <LCD_Begin+0xd8>)
 8009112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	4b27      	ldr	r3, [pc, #156]	; (80091b8 <LCD_Begin+0xd8>)
 800911a:	881a      	ldrh	r2, [r3, #0]
 800911c:	4b27      	ldr	r3, [pc, #156]	; (80091bc <LCD_Begin+0xdc>)
 800911e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <LCD_Begin+0xe0>)
 8009122:	2201      	movs	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 800912a:	f7ff ff6b 	bl	8009004 <GPIO_Init>

	LCD_Reset();
 800912e:	f001 f86b 	bl	800a208 <LCD_Reset>

	LCD_CS_LOW();
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	4823      	ldr	r0, [pc, #140]	; (80091c4 <LCD_Begin+0xe4>)
 8009138:	f7fd f8b3 	bl	80062a2 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 800913c:	e01d      	b.n	800917a <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	71fa      	strb	r2, [r7, #7]
 8009144:	461a      	mov	r2, r3
 8009146:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <LCD_Begin+0xe8>)
 8009148:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800914c:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	71fa      	strb	r2, [r7, #7]
 8009154:	461a      	mov	r2, r3
 8009156:	4b1c      	ldr	r3, [pc, #112]	; (80091c8 <LCD_Begin+0xe8>)
 8009158:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800915c:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 800915e:	88bb      	ldrh	r3, [r7, #4]
 8009160:	2bff      	cmp	r3, #255	; 0xff
 8009162:	d104      	bne.n	800916e <LCD_Begin+0x8e>
			delay(d);
 8009164:	887b      	ldrh	r3, [r7, #2]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ff32 	bl	8008fd0 <delay>
 800916c:	e005      	b.n	800917a <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 800916e:	887a      	ldrh	r2, [r7, #2]
 8009170:	88bb      	ldrh	r3, [r7, #4]
 8009172:	4611      	mov	r1, r2
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fa03 	bl	800a580 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	2b83      	cmp	r3, #131	; 0x83
 800917e:	d9de      	bls.n	800913e <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8009180:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <LCD_Begin+0xc8>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f001 f8d9 	bl	800a33c <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 800918a:	f240 133f 	movw	r3, #319	; 0x13f
 800918e:	22ef      	movs	r2, #239	; 0xef
 8009190:	2100      	movs	r1, #0
 8009192:	2000      	movs	r0, #0
 8009194:	f001 f908 	bl	800a3a8 <LCD_SetAddrWindow>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	200010e0 	.word	0x200010e0
 80091a4:	200010e2 	.word	0x200010e2
 80091a8:	200010ed 	.word	0x200010ed
 80091ac:	200010e4 	.word	0x200010e4
 80091b0:	200010e6 	.word	0x200010e6
 80091b4:	200010ec 	.word	0x200010ec
 80091b8:	200010ea 	.word	0x200010ea
 80091bc:	200010e8 	.word	0x200010e8
 80091c0:	200010ee 	.word	0x200010ee
 80091c4:	40020400 	.word	0x40020400
 80091c8:	080100a0 	.word	0x080100a0

080091cc <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	71fb      	strb	r3, [r7, #7]
 80091d6:	460b      	mov	r3, r1
 80091d8:	71bb      	strb	r3, [r7, #6]
 80091da:	4613      	mov	r3, r2
 80091dc:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	b21b      	sxth	r3, r3
 80091e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091e8:	f023 0307 	bic.w	r3, r3, #7
 80091ec:	b21a      	sxth	r2, r3
 80091ee:	79bb      	ldrb	r3, [r7, #6]
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	b21b      	sxth	r3, r3
 80091f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80091f8:	b21b      	sxth	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b21a      	sxth	r2, r3
 80091fe:	797b      	ldrb	r3, [r7, #5]
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	b2db      	uxtb	r3, r3
 8009204:	b21b      	sxth	r3, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	b21b      	sxth	r3, r3
 800920a:	b29b      	uxth	r3, r3
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	80fb      	strh	r3, [r7, #6]
 8009222:	460b      	mov	r3, r1
 8009224:	80bb      	strh	r3, [r7, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 800922a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800922e:	2b00      	cmp	r3, #0
 8009230:	db52      	blt.n	80092d8 <LCD_DrawPixel+0xc0>
 8009232:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	db4e      	blt.n	80092d8 <LCD_DrawPixel+0xc0>
 800923a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800923e:	2bef      	cmp	r3, #239	; 0xef
 8009240:	dc4a      	bgt.n	80092d8 <LCD_DrawPixel+0xc0>
 8009242:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009246:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800924a:	da45      	bge.n	80092d8 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	4823      	ldr	r0, [pc, #140]	; (80092e0 <LCD_DrawPixel+0xc8>)
 8009252:	f7fd f826 	bl	80062a2 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8009256:	4b23      	ldr	r3, [pc, #140]	; (80092e4 <LCD_DrawPixel+0xcc>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b03      	cmp	r3, #3
 800925c:	d01c      	beq.n	8009298 <LCD_DrawPixel+0x80>
 800925e:	2b03      	cmp	r3, #3
 8009260:	dc25      	bgt.n	80092ae <LCD_DrawPixel+0x96>
 8009262:	2b01      	cmp	r3, #1
 8009264:	d002      	beq.n	800926c <LCD_DrawPixel+0x54>
 8009266:	2b02      	cmp	r3, #2
 8009268:	d00a      	beq.n	8009280 <LCD_DrawPixel+0x68>
 800926a:	e020      	b.n	80092ae <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8009270:	88bb      	ldrh	r3, [r7, #4]
 8009272:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009276:	b29b      	uxth	r3, r3
 8009278:	80fb      	strh	r3, [r7, #6]
		y = t;
 800927a:	89fb      	ldrh	r3, [r7, #14]
 800927c:	80bb      	strh	r3, [r7, #4]
		break;
 800927e:	e016      	b.n	80092ae <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009286:	b29b      	uxth	r3, r3
 8009288:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 800928a:	88bb      	ldrh	r3, [r7, #4]
 800928c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009290:	3301      	adds	r3, #1
 8009292:	b29b      	uxth	r3, r3
 8009294:	80bb      	strh	r3, [r7, #4]
		break;
 8009296:	e00a      	b.n	80092ae <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	81fb      	strh	r3, [r7, #14]
		x = y;
 800929c:	88bb      	ldrh	r3, [r7, #4]
 800929e:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 80092a0:	89fb      	ldrh	r3, [r7, #14]
 80092a2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80092a6:	3301      	adds	r3, #1
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	80bb      	strh	r3, [r7, #4]
		break;
 80092ac:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	4619      	mov	r1, r3
 80092b2:	2020      	movs	r0, #32
 80092b4:	f001 f964 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80092b8:	88bb      	ldrh	r3, [r7, #4]
 80092ba:	4619      	mov	r1, r3
 80092bc:	2021      	movs	r0, #33	; 0x21
 80092be:	f001 f95f 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	4619      	mov	r1, r3
 80092c6:	2022      	movs	r0, #34	; 0x22
 80092c8:	f001 f95a 	bl	800a580 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 80092cc:	2201      	movs	r2, #1
 80092ce:	2100      	movs	r1, #0
 80092d0:	4803      	ldr	r0, [pc, #12]	; (80092e0 <LCD_DrawPixel+0xc8>)
 80092d2:	f7fc ffe6 	bl	80062a2 <gpio_write>
 80092d6:	e000      	b.n	80092da <LCD_DrawPixel+0xc2>
		return;
 80092d8:	bf00      	nop
}
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40020400 	.word	0x40020400
 80092e4:	200010ed 	.word	0x200010ed

080092e8 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 80092e8:	b590      	push	{r4, r7, lr}
 80092ea:	b089      	sub	sp, #36	; 0x24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	4623      	mov	r3, r4
 80092f8:	80fb      	strh	r3, [r7, #6]
 80092fa:	4603      	mov	r3, r0
 80092fc:	80bb      	strh	r3, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	807b      	strh	r3, [r7, #2]
 8009302:	4613      	mov	r3, r2
 8009304:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8009306:	f9b7 2000 	ldrsh.w	r2, [r7]
 800930a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009314:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009318:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800931c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009320:	1acb      	subs	r3, r1, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfb8      	it	lt
 8009326:	425b      	neglt	r3, r3
 8009328:	429a      	cmp	r2, r3
 800932a:	bfcc      	ite	gt
 800932c:	2301      	movgt	r3, #1
 800932e:	2300      	movle	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8009334:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <LCD_DrawLine+0x6c>
		swap(x1, y1);
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	833b      	strh	r3, [r7, #24]
 8009340:	88bb      	ldrh	r3, [r7, #4]
 8009342:	80fb      	strh	r3, [r7, #6]
 8009344:	8b3b      	ldrh	r3, [r7, #24]
 8009346:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8009348:	887b      	ldrh	r3, [r7, #2]
 800934a:	82fb      	strh	r3, [r7, #22]
 800934c:	883b      	ldrh	r3, [r7, #0]
 800934e:	807b      	strh	r3, [r7, #2]
 8009350:	8afb      	ldrh	r3, [r7, #22]
 8009352:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 8009354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009358:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800935c:	429a      	cmp	r2, r3
 800935e:	dd0b      	ble.n	8009378 <LCD_DrawLine+0x90>
		swap(x1, x2);
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	82bb      	strh	r3, [r7, #20]
 8009364:	887b      	ldrh	r3, [r7, #2]
 8009366:	80fb      	strh	r3, [r7, #6]
 8009368:	8abb      	ldrh	r3, [r7, #20]
 800936a:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 800936c:	88bb      	ldrh	r3, [r7, #4]
 800936e:	827b      	strh	r3, [r7, #18]
 8009370:	883b      	ldrh	r3, [r7, #0]
 8009372:	80bb      	strh	r3, [r7, #4]
 8009374:	8a7b      	ldrh	r3, [r7, #18]
 8009376:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8009378:	887a      	ldrh	r2, [r7, #2]
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	b29b      	uxth	r3, r3
 8009380:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8009382:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfb8      	it	lt
 8009390:	425b      	neglt	r3, r3
 8009392:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8009394:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009398:	0fda      	lsrs	r2, r3, #31
 800939a:	4413      	add	r3, r2
 800939c:	105b      	asrs	r3, r3, #1
 800939e:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 80093a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80093a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	da02      	bge.n	80093b2 <LCD_DrawLine+0xca>
		ystep = 1;
 80093ac:	2301      	movs	r3, #1
 80093ae:	83bb      	strh	r3, [r7, #28]
 80093b0:	e031      	b.n	8009416 <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 80093b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093b6:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 80093b8:	e02d      	b.n	8009416 <LCD_DrawLine+0x12e>
		if (steep) {
 80093ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 80093c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80093c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80093c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff ff23 	bl	8009218 <LCD_DrawPixel>
 80093d2:	e007      	b.n	80093e4 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 80093d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80093d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80093da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff ff1a 	bl	8009218 <LCD_DrawPixel>
		}
		err -= dy;
 80093e4:	8bfa      	ldrh	r2, [r7, #30]
 80093e6:	89fb      	ldrh	r3, [r7, #14]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80093ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da09      	bge.n	800940a <LCD_DrawLine+0x122>
			y1 += ystep;
 80093f6:	88ba      	ldrh	r2, [r7, #4]
 80093f8:	8bbb      	ldrh	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8009400:	8bfa      	ldrh	r2, [r7, #30]
 8009402:	8a3b      	ldrh	r3, [r7, #16]
 8009404:	4413      	add	r3, r2
 8009406:	b29b      	uxth	r3, r3
 8009408:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 800940a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800940e:	b29b      	uxth	r3, r3
 8009410:	3301      	adds	r3, #1
 8009412:	b29b      	uxth	r3, r3
 8009414:	80fb      	strh	r3, [r7, #6]
 8009416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800941a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800941e:	429a      	cmp	r2, r3
 8009420:	ddcb      	ble.n	80093ba <LCD_DrawLine+0xd2>
		}
	}
}
 8009422:	bf00      	nop
 8009424:	bf00      	nop
 8009426:	3724      	adds	r7, #36	; 0x24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd90      	pop	{r4, r7, pc}

0800942c <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	4623      	mov	r3, r4
 800943c:	80fb      	strh	r3, [r7, #6]
 800943e:	4603      	mov	r3, r0
 8009440:	80bb      	strh	r3, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	807b      	strh	r3, [r7, #2]
 8009446:	4613      	mov	r3, r2
 8009448:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 800944a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd5a      	ble.n	8009508 <LCD_DrawFastHLine+0xdc>
 8009452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db56      	blt.n	8009508 <LCD_DrawFastHLine+0xdc>
 800945a:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <LCD_DrawFastHLine+0xe4>)
 800945c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009460:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009464:	429a      	cmp	r2, r3
 8009466:	da4f      	bge.n	8009508 <LCD_DrawFastHLine+0xdc>
 8009468:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <LCD_DrawFastHLine+0xe8>)
 800946a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800946e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009472:	429a      	cmp	r2, r3
 8009474:	da48      	bge.n	8009508 <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	887b      	ldrh	r3, [r7, #2]
 800947a:	4413      	add	r3, r2
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8009482:	81fb      	strh	r3, [r7, #14]
 8009484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009488:	2b00      	cmp	r3, #0
 800948a:	db3d      	blt.n	8009508 <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 800948c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009490:	2b00      	cmp	r3, #0
 8009492:	da06      	bge.n	80094a2 <LCD_DrawFastHLine+0x76>
		length += x;
 8009494:	887a      	ldrh	r2, [r7, #2]
 8009496:	88fb      	ldrh	r3, [r7, #6]
 8009498:	4413      	add	r3, r2
 800949a:	b29b      	uxth	r3, r3
 800949c:	807b      	strh	r3, [r7, #2]
		x = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <LCD_DrawFastHLine+0xe8>)
 80094a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	db0d      	blt.n	80094cc <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 80094b0:	4b18      	ldr	r3, [pc, #96]	; (8009514 <LCD_DrawFastHLine+0xe8>)
 80094b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 80094be:	89fa      	ldrh	r2, [r7, #14]
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3301      	adds	r3, #1
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 80094cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80094d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80094d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80094d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094dc:	f000 ff64 	bl	800a3a8 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 80094e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80094e4:	883b      	ldrh	r3, [r7, #0]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fcbb 	bl	8009e64 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <LCD_DrawFastHLine+0xe8>)
 80094f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <LCD_DrawFastHLine+0xe4>)
 80094f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	2100      	movs	r1, #0
 8009500:	2000      	movs	r0, #0
 8009502:	f000 ff51 	bl	800a3a8 <LCD_SetAddrWindow>
 8009506:	e000      	b.n	800950a <LCD_DrawFastHLine+0xde>
		return;
 8009508:	bf00      	nop

}
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	bd90      	pop	{r4, r7, pc}
 8009510:	200010e2 	.word	0x200010e2
 8009514:	200010e0 	.word	0x200010e0

08009518 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8009518:	b590      	push	{r4, r7, lr}
 800951a:	b085      	sub	sp, #20
 800951c:	af02      	add	r7, sp, #8
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	4611      	mov	r1, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4623      	mov	r3, r4
 8009528:	80fb      	strh	r3, [r7, #6]
 800952a:	4603      	mov	r3, r0
 800952c:	80bb      	strh	r3, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	807b      	strh	r3, [r7, #2]
 8009532:	4613      	mov	r3, r2
 8009534:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 8009536:	88ba      	ldrh	r2, [r7, #4]
 8009538:	887b      	ldrh	r3, [r7, #2]
 800953a:	4413      	add	r3, r2
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	b29b      	uxth	r3, r3
 8009542:	b21c      	sxth	r4, r3
 8009544:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009548:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800954c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009550:	883b      	ldrh	r3, [r7, #0]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4623      	mov	r3, r4
 8009556:	f7ff fec7 	bl	80092e8 <LCD_DrawLine>
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}

08009562 <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8009562:	b590      	push	{r4, r7, lr}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	4604      	mov	r4, r0
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	461a      	mov	r2, r3
 8009570:	4623      	mov	r3, r4
 8009572:	80fb      	strh	r3, [r7, #6]
 8009574:	4603      	mov	r3, r0
 8009576:	80bb      	strh	r3, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	807b      	strh	r3, [r7, #2]
 800957c:	4613      	mov	r3, r2
 800957e:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 8009580:	8b3b      	ldrh	r3, [r7, #24]
 8009582:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009586:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800958a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800958e:	f7ff ff4d 	bl	800942c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 8009592:	88ba      	ldrh	r2, [r7, #4]
 8009594:	883b      	ldrh	r3, [r7, #0]
 8009596:	4413      	add	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29b      	uxth	r3, r3
 800959e:	b219      	sxth	r1, r3
 80095a0:	8b3b      	ldrh	r3, [r7, #24]
 80095a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80095a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80095aa:	f7ff ff3f 	bl	800942c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 80095ae:	8b3b      	ldrh	r3, [r7, #24]
 80095b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80095b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80095b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80095bc:	f7ff ffac 	bl	8009518 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 80095c0:	88fa      	ldrh	r2, [r7, #6]
 80095c2:	887b      	ldrh	r3, [r7, #2]
 80095c4:	4413      	add	r3, r2
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	b218      	sxth	r0, r3
 80095ce:	8b3b      	ldrh	r3, [r7, #24]
 80095d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80095d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80095d8:	f7ff ff9e 	bl	8009518 <LCD_DrawFastVLine>
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd90      	pop	{r4, r7, pc}

080095e4 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80095e4:	b590      	push	{r4, r7, lr}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4623      	mov	r3, r4
 80095f4:	80fb      	strh	r3, [r7, #6]
 80095f6:	4603      	mov	r3, r0
 80095f8:	80bb      	strh	r3, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	807b      	strh	r3, [r7, #2]
 80095fe:	4613      	mov	r3, r2
 8009600:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	8b3b      	ldrh	r3, [r7, #24]
 8009606:	4413      	add	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	b218      	sxth	r0, r3
 800960c:	887a      	ldrh	r2, [r7, #2]
 800960e:	8b3b      	ldrh	r3, [r7, #24]
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	b29b      	uxth	r3, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	b29b      	uxth	r3, r3
 8009618:	b21a      	sxth	r2, r3
 800961a:	8bbb      	ldrh	r3, [r7, #28]
 800961c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009620:	f7ff ff04 	bl	800942c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8009624:	88fa      	ldrh	r2, [r7, #6]
 8009626:	8b3b      	ldrh	r3, [r7, #24]
 8009628:	4413      	add	r3, r2
 800962a:	b29b      	uxth	r3, r3
 800962c:	b218      	sxth	r0, r3
 800962e:	88ba      	ldrh	r2, [r7, #4]
 8009630:	883b      	ldrh	r3, [r7, #0]
 8009632:	4413      	add	r3, r2
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	b29b      	uxth	r3, r3
 800963a:	b219      	sxth	r1, r3
 800963c:	887a      	ldrh	r2, [r7, #2]
 800963e:	8b3b      	ldrh	r3, [r7, #24]
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	b29b      	uxth	r3, r3
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	b29b      	uxth	r3, r3
 8009648:	b21a      	sxth	r2, r3
 800964a:	8bbb      	ldrh	r3, [r7, #28]
 800964c:	f7ff feee 	bl	800942c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 8009650:	88ba      	ldrh	r2, [r7, #4]
 8009652:	8b3b      	ldrh	r3, [r7, #24]
 8009654:	4413      	add	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	b219      	sxth	r1, r3
 800965a:	883a      	ldrh	r2, [r7, #0]
 800965c:	8b3b      	ldrh	r3, [r7, #24]
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	b29b      	uxth	r3, r3
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	b29b      	uxth	r3, r3
 8009666:	b21a      	sxth	r2, r3
 8009668:	8bbb      	ldrh	r3, [r7, #28]
 800966a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800966e:	f7ff ff53 	bl	8009518 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	887b      	ldrh	r3, [r7, #2]
 8009676:	4413      	add	r3, r2
 8009678:	b29b      	uxth	r3, r3
 800967a:	3b01      	subs	r3, #1
 800967c:	b29b      	uxth	r3, r3
 800967e:	b218      	sxth	r0, r3
 8009680:	88ba      	ldrh	r2, [r7, #4]
 8009682:	8b3b      	ldrh	r3, [r7, #24]
 8009684:	4413      	add	r3, r2
 8009686:	b29b      	uxth	r3, r3
 8009688:	b219      	sxth	r1, r3
 800968a:	883a      	ldrh	r2, [r7, #0]
 800968c:	8b3b      	ldrh	r3, [r7, #24]
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	b29b      	uxth	r3, r3
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	b29b      	uxth	r3, r3
 8009696:	b21a      	sxth	r2, r3
 8009698:	8bbb      	ldrh	r3, [r7, #28]
 800969a:	f7ff ff3d 	bl	8009518 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 800969e:	88fa      	ldrh	r2, [r7, #6]
 80096a0:	8b3b      	ldrh	r3, [r7, #24]
 80096a2:	4413      	add	r3, r2
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	b218      	sxth	r0, r3
 80096a8:	88ba      	ldrh	r2, [r7, #4]
 80096aa:	8b3b      	ldrh	r3, [r7, #24]
 80096ac:	4413      	add	r3, r2
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	b219      	sxth	r1, r3
 80096b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80096b6:	8bbb      	ldrh	r3, [r7, #28]
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	2301      	movs	r3, #1
 80096bc:	f000 f84b 	bl	8009756 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80096c0:	88fa      	ldrh	r2, [r7, #6]
 80096c2:	887b      	ldrh	r3, [r7, #2]
 80096c4:	4413      	add	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	8b3b      	ldrh	r3, [r7, #24]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	b218      	sxth	r0, r3
 80096d4:	88ba      	ldrh	r2, [r7, #4]
 80096d6:	8b3b      	ldrh	r3, [r7, #24]
 80096d8:	4413      	add	r3, r2
 80096da:	b29b      	uxth	r3, r3
 80096dc:	b219      	sxth	r1, r3
 80096de:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80096e2:	8bbb      	ldrh	r3, [r7, #28]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	2302      	movs	r3, #2
 80096e8:	f000 f835 	bl	8009756 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80096ec:	88fa      	ldrh	r2, [r7, #6]
 80096ee:	887b      	ldrh	r3, [r7, #2]
 80096f0:	4413      	add	r3, r2
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	8b3b      	ldrh	r3, [r7, #24]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	b218      	sxth	r0, r3
 8009700:	88ba      	ldrh	r2, [r7, #4]
 8009702:	883b      	ldrh	r3, [r7, #0]
 8009704:	4413      	add	r3, r2
 8009706:	b29a      	uxth	r2, r3
 8009708:	8b3b      	ldrh	r3, [r7, #24]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	b29b      	uxth	r3, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	b29b      	uxth	r3, r3
 8009712:	b219      	sxth	r1, r3
 8009714:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009718:	8bbb      	ldrh	r3, [r7, #28]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2304      	movs	r3, #4
 800971e:	f000 f81a 	bl	8009756 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	8b3b      	ldrh	r3, [r7, #24]
 8009726:	4413      	add	r3, r2
 8009728:	b29b      	uxth	r3, r3
 800972a:	b218      	sxth	r0, r3
 800972c:	88ba      	ldrh	r2, [r7, #4]
 800972e:	883b      	ldrh	r3, [r7, #0]
 8009730:	4413      	add	r3, r2
 8009732:	b29a      	uxth	r2, r3
 8009734:	8b3b      	ldrh	r3, [r7, #24]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29b      	uxth	r3, r3
 800973e:	b219      	sxth	r1, r3
 8009740:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009744:	8bbb      	ldrh	r3, [r7, #28]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	2308      	movs	r3, #8
 800974a:	f000 f804 	bl	8009756 <LCD_DrawCircleHelper>
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}

08009756 <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 8009756:	b590      	push	{r4, r7, lr}
 8009758:	b087      	sub	sp, #28
 800975a:	af00      	add	r7, sp, #0
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	461a      	mov	r2, r3
 8009764:	4623      	mov	r3, r4
 8009766:	80fb      	strh	r3, [r7, #6]
 8009768:	4603      	mov	r3, r0
 800976a:	80bb      	strh	r3, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	807b      	strh	r3, [r7, #2]
 8009770:	4613      	mov	r3, r2
 8009772:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8009774:	887b      	ldrh	r3, [r7, #2]
 8009776:	f1c3 0301 	rsb	r3, r3, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800977e:	2301      	movs	r3, #1
 8009780:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8009782:	887b      	ldrh	r3, [r7, #2]
 8009784:	461a      	mov	r2, r3
 8009786:	03d2      	lsls	r2, r2, #15
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	b29b      	uxth	r3, r3
 800978e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8009794:	887b      	ldrh	r3, [r7, #2]
 8009796:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8009798:	e0a5      	b.n	80098e6 <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 800979a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db0e      	blt.n	80097c0 <LCD_DrawCircleHelper+0x6a>
			y--;
 80097a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80097ae:	8a7b      	ldrh	r3, [r7, #18]
 80097b0:	3302      	adds	r3, #2
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80097b6:	8afa      	ldrh	r2, [r7, #22]
 80097b8:	8a7b      	ldrh	r3, [r7, #18]
 80097ba:	4413      	add	r3, r2
 80097bc:	b29b      	uxth	r3, r3
 80097be:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80097c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3301      	adds	r3, #1
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80097cc:	8abb      	ldrh	r3, [r7, #20]
 80097ce:	3302      	adds	r3, #2
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80097d4:	8afa      	ldrh	r2, [r7, #22]
 80097d6:	8abb      	ldrh	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	b29b      	uxth	r3, r3
 80097dc:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 80097de:	787b      	ldrb	r3, [r7, #1]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01b      	beq.n	8009820 <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 80097e8:	88fa      	ldrh	r2, [r7, #6]
 80097ea:	8a3b      	ldrh	r3, [r7, #16]
 80097ec:	4413      	add	r3, r2
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	b218      	sxth	r0, r3
 80097f2:	88ba      	ldrh	r2, [r7, #4]
 80097f4:	89fb      	ldrh	r3, [r7, #14]
 80097f6:	4413      	add	r3, r2
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	b21b      	sxth	r3, r3
 80097fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80097fe:	4619      	mov	r1, r3
 8009800:	f7ff fd0a 	bl	8009218 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	4413      	add	r3, r2
 800980a:	b29b      	uxth	r3, r3
 800980c:	b218      	sxth	r0, r3
 800980e:	88ba      	ldrh	r2, [r7, #4]
 8009810:	8a3b      	ldrh	r3, [r7, #16]
 8009812:	4413      	add	r3, r2
 8009814:	b29b      	uxth	r3, r3
 8009816:	b21b      	sxth	r3, r3
 8009818:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800981a:	4619      	mov	r1, r3
 800981c:	f7ff fcfc 	bl	8009218 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8009820:	787b      	ldrb	r3, [r7, #1]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d01b      	beq.n	8009862 <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 800982a:	88fa      	ldrh	r2, [r7, #6]
 800982c:	8a3b      	ldrh	r3, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	b29b      	uxth	r3, r3
 8009832:	b218      	sxth	r0, r3
 8009834:	88ba      	ldrh	r2, [r7, #4]
 8009836:	89fb      	ldrh	r3, [r7, #14]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	b29b      	uxth	r3, r3
 800983c:	b21b      	sxth	r3, r3
 800983e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009840:	4619      	mov	r1, r3
 8009842:	f7ff fce9 	bl	8009218 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 8009846:	88fa      	ldrh	r2, [r7, #6]
 8009848:	89fb      	ldrh	r3, [r7, #14]
 800984a:	4413      	add	r3, r2
 800984c:	b29b      	uxth	r3, r3
 800984e:	b218      	sxth	r0, r3
 8009850:	88ba      	ldrh	r2, [r7, #4]
 8009852:	8a3b      	ldrh	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	b29b      	uxth	r3, r3
 8009858:	b21b      	sxth	r3, r3
 800985a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800985c:	4619      	mov	r1, r3
 800985e:	f7ff fcdb 	bl	8009218 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 8009862:	787b      	ldrb	r3, [r7, #1]
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01b      	beq.n	80098a4 <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	89fb      	ldrh	r3, [r7, #14]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	b29b      	uxth	r3, r3
 8009874:	b218      	sxth	r0, r3
 8009876:	88ba      	ldrh	r2, [r7, #4]
 8009878:	8a3b      	ldrh	r3, [r7, #16]
 800987a:	4413      	add	r3, r2
 800987c:	b29b      	uxth	r3, r3
 800987e:	b21b      	sxth	r3, r3
 8009880:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009882:	4619      	mov	r1, r3
 8009884:	f7ff fcc8 	bl	8009218 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 8009888:	88fa      	ldrh	r2, [r7, #6]
 800988a:	8a3b      	ldrh	r3, [r7, #16]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	b29b      	uxth	r3, r3
 8009890:	b218      	sxth	r0, r3
 8009892:	88ba      	ldrh	r2, [r7, #4]
 8009894:	89fb      	ldrh	r3, [r7, #14]
 8009896:	4413      	add	r3, r2
 8009898:	b29b      	uxth	r3, r3
 800989a:	b21b      	sxth	r3, r3
 800989c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800989e:	4619      	mov	r1, r3
 80098a0:	f7ff fcba 	bl	8009218 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 80098a4:	787b      	ldrb	r3, [r7, #1]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01b      	beq.n	80098e6 <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	89fb      	ldrh	r3, [r7, #14]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	b218      	sxth	r0, r3
 80098b8:	88ba      	ldrh	r2, [r7, #4]
 80098ba:	8a3b      	ldrh	r3, [r7, #16]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7ff fca7 	bl	8009218 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	8a3b      	ldrh	r3, [r7, #16]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	b218      	sxth	r0, r3
 80098d4:	88ba      	ldrh	r2, [r7, #4]
 80098d6:	89fb      	ldrh	r3, [r7, #14]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	b29b      	uxth	r3, r3
 80098dc:	b21b      	sxth	r3, r3
 80098de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7ff fc99 	bl	8009218 <LCD_DrawPixel>
	while (x < y) {
 80098e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80098ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	f6ff af53 	blt.w	800979a <LCD_DrawCircleHelper+0x44>
		}
	}
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd90      	pop	{r4, r7, pc}
	...

08009900 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	af02      	add	r7, sp, #8
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	461a      	mov	r2, r3
 800990e:	4623      	mov	r3, r4
 8009910:	80fb      	strh	r3, [r7, #6]
 8009912:	4603      	mov	r3, r0
 8009914:	80bb      	strh	r3, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
 800991a:	4613      	mov	r3, r2
 800991c:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 800991e:	4b6e      	ldr	r3, [pc, #440]	; (8009ad8 <LCD_DrawChar+0x1d8>)
 8009920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009924:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009928:	429a      	cmp	r2, r3
 800992a:	f280 80d0 	bge.w	8009ace <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 800992e:	4b6b      	ldr	r3, [pc, #428]	; (8009adc <LCD_DrawChar+0x1dc>)
 8009930:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8009934:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	f280 80c8 	bge.w	8009ace <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 800993e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009942:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009946:	4613      	mov	r3, r2
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	4413      	add	r3, r2
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 8009950:	2b00      	cmp	r3, #0
 8009952:	f340 80bc 	ble.w	8009ace <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 8009956:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800995a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 8009962:	2b00      	cmp	r3, #0
 8009964:	f340 80b3 	ble.w	8009ace <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]
 800996c:	e0a9      	b.n	8009ac2 <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 800996e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009972:	2b05      	cmp	r3, #5
 8009974:	d102      	bne.n	800997c <LCD_DrawChar+0x7c>
			line = 0x0;
 8009976:	2300      	movs	r3, #0
 8009978:	73bb      	strb	r3, [r7, #14]
 800997a:	e09c      	b.n	8009ab6 <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	441a      	add	r2, r3
 8009984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009988:	4413      	add	r3, r2
 800998a:	4a55      	ldr	r2, [pc, #340]	; (8009ae0 <LCD_DrawChar+0x1e0>)
 800998c:	5cd3      	ldrb	r3, [r2, r3]
 800998e:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8009990:	2300      	movs	r3, #0
 8009992:	737b      	strb	r3, [r7, #13]
 8009994:	e08a      	b.n	8009aac <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d03c      	beq.n	8009a1a <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 80099a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d112      	bne.n	80099ce <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 80099a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	4413      	add	r3, r2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	b218      	sxth	r0, r3
 80099b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	88bb      	ldrh	r3, [r7, #4]
 80099be:	4413      	add	r3, r2
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	b21b      	sxth	r3, r3
 80099c4:	883a      	ldrh	r2, [r7, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	f7ff fc26 	bl	8009218 <LCD_DrawPixel>
 80099cc:	e065      	b.n	8009a9a <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80099ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099d8:	b29b      	uxth	r3, r3
 80099da:	fb12 f303 	smulbb	r3, r2, r3
 80099de:	b29a      	uxth	r2, r3
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	4413      	add	r3, r2
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	b218      	sxth	r0, r3
 80099e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	fb12 f303 	smulbb	r3, r2, r3
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	88bb      	ldrh	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	b219      	sxth	r1, r3
 8009a02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a06:	b21a      	sxth	r2, r3
 8009a08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a0c:	b21c      	sxth	r4, r3
 8009a0e:	883b      	ldrh	r3, [r7, #0]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4623      	mov	r3, r4
 8009a14:	f000 f918 	bl	8009c48 <LCD_FillRect>
 8009a18:	e03f      	b.n	8009a9a <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8009a1a:	8c3a      	ldrh	r2, [r7, #32]
 8009a1c:	883b      	ldrh	r3, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d03b      	beq.n	8009a9a <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 8009a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d112      	bne.n	8009a50 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 8009a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	88fb      	ldrh	r3, [r7, #6]
 8009a32:	4413      	add	r3, r2
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	b218      	sxth	r0, r3
 8009a38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	88bb      	ldrh	r3, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	b21b      	sxth	r3, r3
 8009a46:	8c3a      	ldrh	r2, [r7, #32]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f7ff fbe5 	bl	8009218 <LCD_DrawPixel>
 8009a4e:	e024      	b.n	8009a9a <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8009a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	fb12 f303 	smulbb	r3, r2, r3
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	4413      	add	r3, r2
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	b218      	sxth	r0, r3
 8009a6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	fb12 f303 	smulbb	r3, r2, r3
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	88bb      	ldrh	r3, [r7, #4]
 8009a7e:	4413      	add	r3, r2
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	b219      	sxth	r1, r3
 8009a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a88:	b21a      	sxth	r2, r3
 8009a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a8e:	b21c      	sxth	r4, r3
 8009a90:	8c3b      	ldrh	r3, [r7, #32]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4623      	mov	r3, r4
 8009a96:	f000 f8d7 	bl	8009c48 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	085b      	lsrs	r3, r3, #1
 8009a9e:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8009aa0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	737b      	strb	r3, [r7, #13]
 8009aac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009ab0:	2b07      	cmp	r3, #7
 8009ab2:	f77f af70 	ble.w	8009996 <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 8009ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	3301      	adds	r3, #1
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	73fb      	strb	r3, [r7, #15]
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	f77f af51 	ble.w	800996e <LCD_DrawChar+0x6e>
 8009acc:	e000      	b.n	8009ad0 <LCD_DrawChar+0x1d0>
		return;
 8009ace:	bf00      	nop
			}
		}
	}
}
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200010e0 	.word	0x200010e0
 8009adc:	200010e2 	.word	0x200010e2
 8009ae0:	0800fe20 	.word	0x0800fe20

08009ae4 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8009ae4:	b590      	push	{r4, r7, lr}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	461a      	mov	r2, r3
 8009af2:	4623      	mov	r3, r4
 8009af4:	80fb      	strh	r3, [r7, #6]
 8009af6:	4603      	mov	r3, r0
 8009af8:	80bb      	strh	r3, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	807b      	strh	r3, [r7, #2]
 8009afe:	4613      	mov	r3, r2
 8009b00:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8009b02:	887b      	ldrh	r3, [r7, #2]
 8009b04:	f1c3 0301 	rsb	r3, r3, #1
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8009b10:	887b      	ldrh	r3, [r7, #2]
 8009b12:	461a      	mov	r2, r3
 8009b14:	03d2      	lsls	r2, r2, #15
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8009b22:	887b      	ldrh	r3, [r7, #2]
 8009b24:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8009b26:	e083      	b.n	8009c30 <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 8009b28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	db0e      	blt.n	8009b4e <LCD_FillCircleHelper+0x6a>
			y--;
 8009b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8009b3c:	8a7b      	ldrh	r3, [r7, #18]
 8009b3e:	3302      	adds	r3, #2
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8009b44:	8afa      	ldrh	r2, [r7, #22]
 8009b46:	8a7b      	ldrh	r3, [r7, #18]
 8009b48:	4413      	add	r3, r2
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8009b4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3301      	adds	r3, #1
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8009b5a:	8abb      	ldrh	r3, [r7, #20]
 8009b5c:	3302      	adds	r3, #2
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8009b62:	8afa      	ldrh	r2, [r7, #22]
 8009b64:	8abb      	ldrh	r3, [r7, #20]
 8009b66:	4413      	add	r3, r2
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8009b6c:	787b      	ldrb	r3, [r7, #1]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d02b      	beq.n	8009bce <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8009b76:	88fa      	ldrh	r2, [r7, #6]
 8009b78:	8a3b      	ldrh	r3, [r7, #16]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	b218      	sxth	r0, r3
 8009b80:	88ba      	ldrh	r2, [r7, #4]
 8009b82:	89fb      	ldrh	r3, [r7, #14]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	b219      	sxth	r1, r3
 8009b8a:	89fb      	ldrh	r3, [r7, #14]
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b92:	4413      	add	r3, r2
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3301      	adds	r3, #1
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	b21a      	sxth	r2, r3
 8009b9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b9e:	f7ff fcbb 	bl	8009518 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	89fb      	ldrh	r3, [r7, #14]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	b218      	sxth	r0, r3
 8009bac:	88ba      	ldrh	r2, [r7, #4]
 8009bae:	8a3b      	ldrh	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	b219      	sxth	r1, r3
 8009bb6:	8a3b      	ldrh	r3, [r7, #16]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bbe:	4413      	add	r3, r2
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	b21a      	sxth	r2, r3
 8009bc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bca:	f7ff fca5 	bl	8009518 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8009bce:	787b      	ldrb	r3, [r7, #1]
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d02b      	beq.n	8009c30 <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8009bd8:	88fa      	ldrh	r2, [r7, #6]
 8009bda:	8a3b      	ldrh	r3, [r7, #16]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	b218      	sxth	r0, r3
 8009be2:	88ba      	ldrh	r2, [r7, #4]
 8009be4:	89fb      	ldrh	r3, [r7, #14]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	b219      	sxth	r1, r3
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bf4:	4413      	add	r3, r2
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	b21a      	sxth	r2, r3
 8009bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c00:	f7ff fc8a 	bl	8009518 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	89fb      	ldrh	r3, [r7, #14]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	b218      	sxth	r0, r3
 8009c0e:	88ba      	ldrh	r2, [r7, #4]
 8009c10:	8a3b      	ldrh	r3, [r7, #16]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	b219      	sxth	r1, r3
 8009c18:	8a3b      	ldrh	r3, [r7, #16]
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c20:	4413      	add	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	3301      	adds	r3, #1
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	b21a      	sxth	r2, r3
 8009c2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c2c:	f7ff fc74 	bl	8009518 <LCD_DrawFastVLine>
	while (x < y) {
 8009c30:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	f6ff af75 	blt.w	8009b28 <LCD_FillCircleHelper+0x44>
		}
	}
}
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd90      	pop	{r4, r7, pc}

08009c48 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	461a      	mov	r2, r3
 8009c56:	4623      	mov	r3, r4
 8009c58:	80fb      	strh	r3, [r7, #6]
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	80bb      	strh	r3, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	807b      	strh	r3, [r7, #2]
 8009c62:	4613      	mov	r3, r2
 8009c64:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8009c66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f340 808b 	ble.w	8009d86 <LCD_FillRect+0x13e>
 8009c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f340 8086 	ble.w	8009d86 <LCD_FillRect+0x13e>
 8009c7a:	4b45      	ldr	r3, [pc, #276]	; (8009d90 <LCD_FillRect+0x148>)
 8009c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	da7e      	bge.n	8009d86 <LCD_FillRect+0x13e>
 8009c88:	4b42      	ldr	r3, [pc, #264]	; (8009d94 <LCD_FillRect+0x14c>)
 8009c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	da77      	bge.n	8009d86 <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	81fb      	strh	r3, [r7, #14]
 8009ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	db6c      	blt.n	8009d86 <LCD_FillRect+0x13e>
 8009cac:	88ba      	ldrh	r2, [r7, #4]
 8009cae:	883b      	ldrh	r3, [r7, #0]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	81bb      	strh	r3, [r7, #12]
 8009cba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db61      	blt.n	8009d86 <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8009cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da06      	bge.n	8009cd8 <LCD_FillRect+0x90>
		w += x;
 8009cca:	887a      	ldrh	r2, [r7, #2]
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	4413      	add	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	807b      	strh	r3, [r7, #2]
		x = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8009cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da06      	bge.n	8009cee <LCD_FillRect+0xa6>
		h += y1;
 8009ce0:	883a      	ldrh	r2, [r7, #0]
 8009ce2:	88bb      	ldrh	r3, [r7, #4]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8009cee:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <LCD_FillRect+0x148>)
 8009cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	db0d      	blt.n	8009d18 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8009cfc:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <LCD_FillRect+0x148>)
 8009cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8009d0a:	89fa      	ldrh	r2, [r7, #14]
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3301      	adds	r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8009d18:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <LCD_FillRect+0x14c>)
 8009d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	db0d      	blt.n	8009d42 <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 8009d26:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <LCD_FillRect+0x14c>)
 8009d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8009d34:	89ba      	ldrh	r2, [r7, #12]
 8009d36:	88bb      	ldrh	r3, [r7, #4]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8009d42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009d46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009d4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009d4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009d52:	f000 fb29 	bl	800a3a8 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8009d56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009d5e:	fb03 f202 	mul.w	r2, r3, r2
 8009d62:	8c3b      	ldrh	r3, [r7, #32]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f87c 	bl	8009e64 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8009d6c:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <LCD_FillRect+0x148>)
 8009d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d72:	1e5a      	subs	r2, r3, #1
 8009d74:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <LCD_FillRect+0x14c>)
 8009d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f000 fb12 	bl	800a3a8 <LCD_SetAddrWindow>
 8009d84:	e000      	b.n	8009d88 <LCD_FillRect+0x140>
		return;
 8009d86:	bf00      	nop
}
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd90      	pop	{r4, r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	200010e0 	.word	0x200010e0
 8009d94:	200010e2 	.word	0x200010e2

08009d98 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	4623      	mov	r3, r4
 8009da8:	80fb      	strh	r3, [r7, #6]
 8009daa:	4603      	mov	r3, r0
 8009dac:	80bb      	strh	r3, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	807b      	strh	r3, [r7, #2]
 8009db2:	4613      	mov	r3, r2
 8009db4:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8009db6:	88fa      	ldrh	r2, [r7, #6]
 8009db8:	8b3b      	ldrh	r3, [r7, #24]
 8009dba:	4413      	add	r3, r2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	b218      	sxth	r0, r3
 8009dc0:	887a      	ldrh	r2, [r7, #2]
 8009dc2:	8b3b      	ldrh	r3, [r7, #24]
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	b21a      	sxth	r2, r3
 8009dce:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009dd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009dd6:	8bbb      	ldrh	r3, [r7, #28]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	4623      	mov	r3, r4
 8009ddc:	f7ff ff34 	bl	8009c48 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8009de0:	88fa      	ldrh	r2, [r7, #6]
 8009de2:	887b      	ldrh	r3, [r7, #2]
 8009de4:	4413      	add	r3, r2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	8b3b      	ldrh	r3, [r7, #24]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	b218      	sxth	r0, r3
 8009df4:	88ba      	ldrh	r2, [r7, #4]
 8009df6:	8b3b      	ldrh	r3, [r7, #24]
 8009df8:	4413      	add	r3, r2
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	b219      	sxth	r1, r3
 8009dfe:	883a      	ldrh	r2, [r7, #0]
 8009e00:	8b3b      	ldrh	r3, [r7, #24]
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	b21b      	sxth	r3, r3
 8009e10:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8009e14:	8bba      	ldrh	r2, [r7, #28]
 8009e16:	9201      	str	r2, [sp, #4]
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	f7ff fe61 	bl	8009ae4 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	8b3b      	ldrh	r3, [r7, #24]
 8009e26:	4413      	add	r3, r2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	b218      	sxth	r0, r3
 8009e2c:	88ba      	ldrh	r2, [r7, #4]
 8009e2e:	8b3b      	ldrh	r3, [r7, #24]
 8009e30:	4413      	add	r3, r2
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	b219      	sxth	r1, r3
 8009e36:	883a      	ldrh	r2, [r7, #0]
 8009e38:	8b3b      	ldrh	r3, [r7, #24]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	3b01      	subs	r3, #1
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	b21b      	sxth	r3, r3
 8009e48:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8009e4c:	8bba      	ldrh	r2, [r7, #28]
 8009e4e:	9201      	str	r2, [sp, #4]
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	2302      	movs	r3, #2
 8009e54:	4622      	mov	r2, r4
 8009e56:	f7ff fe45 	bl	8009ae4 <LCD_FillCircleHelper>
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd90      	pop	{r4, r7, pc}
	...

08009e64 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	6039      	str	r1, [r7, #0]
 8009e6e:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	0a1b      	lsrs	r3, r3, #8
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	733b      	strb	r3, [r7, #12]
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4895      	ldr	r0, [pc, #596]	; (800a0d8 <LCD_Flood+0x274>)
 8009e82:	f7fc fa0e 	bl	80062a2 <gpio_write>
	LCD_CD_LOW();
 8009e86:	2200      	movs	r2, #0
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4894      	ldr	r0, [pc, #592]	; (800a0dc <LCD_Flood+0x278>)
 8009e8c:	f7fc fa09 	bl	80062a2 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8009e90:	2000      	movs	r0, #0
 8009e92:	f000 fb19 	bl	800a4c8 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8009e96:	2022      	movs	r0, #34	; 0x22
 8009e98:	f000 fb16 	bl	800a4c8 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	2104      	movs	r1, #4
 8009ea0:	488e      	ldr	r0, [pc, #568]	; (800a0dc <LCD_Flood+0x278>)
 8009ea2:	f7fc f9fe 	bl	80062a2 <gpio_write>
	LCD_Write8(hi);
 8009ea6:	7b3b      	ldrb	r3, [r7, #12]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fb0d 	bl	800a4c8 <LCD_Write8>
	LCD_Write8(lo);
 8009eae:	7afb      	ldrb	r3, [r7, #11]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 fb09 	bl	800a4c8 <LCD_Write8>
	len--;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	099b      	lsrs	r3, r3, #6
 8009ec0:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8009ec2:	7b3a      	ldrb	r2, [r7, #12]
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	f040 80e4 	bne.w	800a094 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8009ecc:	e088      	b.n	8009fe0 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8009ece:	2310      	movs	r3, #16
 8009ed0:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	4881      	ldr	r0, [pc, #516]	; (800a0dc <LCD_Flood+0x278>)
 8009ed8:	f7fc f9e3 	bl	80062a2 <gpio_write>
 8009edc:	2001      	movs	r0, #1
 8009ede:	f7ff f877 	bl	8008fd0 <delay>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	487d      	ldr	r0, [pc, #500]	; (800a0dc <LCD_Flood+0x278>)
 8009ee8:	f7fc f9db 	bl	80062a2 <gpio_write>
 8009eec:	2001      	movs	r0, #1
 8009eee:	f7ff f86f 	bl	8008fd0 <delay>
				LCD_WR_STROBE();
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	4879      	ldr	r0, [pc, #484]	; (800a0dc <LCD_Flood+0x278>)
 8009ef8:	f7fc f9d3 	bl	80062a2 <gpio_write>
 8009efc:	2001      	movs	r0, #1
 8009efe:	f7ff f867 	bl	8008fd0 <delay>
 8009f02:	2201      	movs	r2, #1
 8009f04:	2101      	movs	r1, #1
 8009f06:	4875      	ldr	r0, [pc, #468]	; (800a0dc <LCD_Flood+0x278>)
 8009f08:	f7fc f9cb 	bl	80062a2 <gpio_write>
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7ff f85f 	bl	8008fd0 <delay>
				LCD_WR_STROBE();
 8009f12:	2200      	movs	r2, #0
 8009f14:	2101      	movs	r1, #1
 8009f16:	4871      	ldr	r0, [pc, #452]	; (800a0dc <LCD_Flood+0x278>)
 8009f18:	f7fc f9c3 	bl	80062a2 <gpio_write>
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	f7ff f857 	bl	8008fd0 <delay>
 8009f22:	2201      	movs	r2, #1
 8009f24:	2101      	movs	r1, #1
 8009f26:	486d      	ldr	r0, [pc, #436]	; (800a0dc <LCD_Flood+0x278>)
 8009f28:	f7fc f9bb 	bl	80062a2 <gpio_write>
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f7ff f84f 	bl	8008fd0 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8009f32:	2200      	movs	r2, #0
 8009f34:	2101      	movs	r1, #1
 8009f36:	4869      	ldr	r0, [pc, #420]	; (800a0dc <LCD_Flood+0x278>)
 8009f38:	f7fc f9b3 	bl	80062a2 <gpio_write>
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	f7ff f847 	bl	8008fd0 <delay>
 8009f42:	2201      	movs	r2, #1
 8009f44:	2101      	movs	r1, #1
 8009f46:	4865      	ldr	r0, [pc, #404]	; (800a0dc <LCD_Flood+0x278>)
 8009f48:	f7fc f9ab 	bl	80062a2 <gpio_write>
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7ff f83f 	bl	8008fd0 <delay>
				LCD_WR_STROBE();
 8009f52:	2200      	movs	r2, #0
 8009f54:	2101      	movs	r1, #1
 8009f56:	4861      	ldr	r0, [pc, #388]	; (800a0dc <LCD_Flood+0x278>)
 8009f58:	f7fc f9a3 	bl	80062a2 <gpio_write>
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f7ff f837 	bl	8008fd0 <delay>
 8009f62:	2201      	movs	r2, #1
 8009f64:	2101      	movs	r1, #1
 8009f66:	485d      	ldr	r0, [pc, #372]	; (800a0dc <LCD_Flood+0x278>)
 8009f68:	f7fc f99b 	bl	80062a2 <gpio_write>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f7ff f82f 	bl	8008fd0 <delay>
				LCD_WR_STROBE();
 8009f72:	2200      	movs	r2, #0
 8009f74:	2101      	movs	r1, #1
 8009f76:	4859      	ldr	r0, [pc, #356]	; (800a0dc <LCD_Flood+0x278>)
 8009f78:	f7fc f993 	bl	80062a2 <gpio_write>
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	f7ff f827 	bl	8008fd0 <delay>
 8009f82:	2201      	movs	r2, #1
 8009f84:	2101      	movs	r1, #1
 8009f86:	4855      	ldr	r0, [pc, #340]	; (800a0dc <LCD_Flood+0x278>)
 8009f88:	f7fc f98b 	bl	80062a2 <gpio_write>
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f7ff f81f 	bl	8008fd0 <delay>
				LCD_WR_STROBE();
 8009f92:	2200      	movs	r2, #0
 8009f94:	2101      	movs	r1, #1
 8009f96:	4851      	ldr	r0, [pc, #324]	; (800a0dc <LCD_Flood+0x278>)
 8009f98:	f7fc f983 	bl	80062a2 <gpio_write>
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f7ff f817 	bl	8008fd0 <delay>
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	484d      	ldr	r0, [pc, #308]	; (800a0dc <LCD_Flood+0x278>)
 8009fa8:	f7fc f97b 	bl	80062a2 <gpio_write>
 8009fac:	2001      	movs	r0, #1
 8009fae:	f7ff f80f 	bl	8008fd0 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4849      	ldr	r0, [pc, #292]	; (800a0dc <LCD_Flood+0x278>)
 8009fb8:	f7fc f973 	bl	80062a2 <gpio_write>
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7ff f807 	bl	8008fd0 <delay>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4845      	ldr	r0, [pc, #276]	; (800a0dc <LCD_Flood+0x278>)
 8009fc8:	f7fc f96b 	bl	80062a2 <gpio_write>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f7fe ffff 	bl	8008fd0 <delay>
			} while (--i);
 8009fd2:	7b7b      	ldrb	r3, [r7, #13]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	737b      	strb	r3, [r7, #13]
 8009fd8:	7b7b      	ldrb	r3, [r7, #13]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f47f af79 	bne.w	8009ed2 <LCD_Flood+0x6e>
		while (blocks--) {
 8009fe0:	89fb      	ldrh	r3, [r7, #14]
 8009fe2:	1e5a      	subs	r2, r3, #1
 8009fe4:	81fa      	strh	r2, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f47f af71 	bne.w	8009ece <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ff4:	737b      	strb	r3, [r7, #13]
 8009ff6:	e01f      	b.n	800a038 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4837      	ldr	r0, [pc, #220]	; (800a0dc <LCD_Flood+0x278>)
 8009ffe:	f7fc f950 	bl	80062a2 <gpio_write>
 800a002:	2001      	movs	r0, #1
 800a004:	f7fe ffe4 	bl	8008fd0 <delay>
 800a008:	2201      	movs	r2, #1
 800a00a:	2101      	movs	r1, #1
 800a00c:	4833      	ldr	r0, [pc, #204]	; (800a0dc <LCD_Flood+0x278>)
 800a00e:	f7fc f948 	bl	80062a2 <gpio_write>
 800a012:	2001      	movs	r0, #1
 800a014:	f7fe ffdc 	bl	8008fd0 <delay>
			LCD_WR_STROBE();
 800a018:	2200      	movs	r2, #0
 800a01a:	2101      	movs	r1, #1
 800a01c:	482f      	ldr	r0, [pc, #188]	; (800a0dc <LCD_Flood+0x278>)
 800a01e:	f7fc f940 	bl	80062a2 <gpio_write>
 800a022:	2001      	movs	r0, #1
 800a024:	f7fe ffd4 	bl	8008fd0 <delay>
 800a028:	2201      	movs	r2, #1
 800a02a:	2101      	movs	r1, #1
 800a02c:	482b      	ldr	r0, [pc, #172]	; (800a0dc <LCD_Flood+0x278>)
 800a02e:	f7fc f938 	bl	80062a2 <gpio_write>
 800a032:	2001      	movs	r0, #1
 800a034:	f7fe ffcc 	bl	8008fd0 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 800a038:	7b7b      	ldrb	r3, [r7, #13]
 800a03a:	1e5a      	subs	r2, r3, #1
 800a03c:	737a      	strb	r2, [r7, #13]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1da      	bne.n	8009ff8 <LCD_Flood+0x194>
 800a042:	e03f      	b.n	800a0c4 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 800a044:	2310      	movs	r3, #16
 800a046:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 800a048:	7b3b      	ldrb	r3, [r7, #12]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fa3c 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(lo);
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 fa38 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(hi);
 800a058:	7b3b      	ldrb	r3, [r7, #12]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 fa34 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(lo);
 800a060:	7afb      	ldrb	r3, [r7, #11]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fa30 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(hi);
 800a068:	7b3b      	ldrb	r3, [r7, #12]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fa2c 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(lo);
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fa28 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(hi);
 800a078:	7b3b      	ldrb	r3, [r7, #12]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fa24 	bl	800a4c8 <LCD_Write8>
				LCD_Write8(lo);
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fa20 	bl	800a4c8 <LCD_Write8>
			} while (--i);
 800a088:	7b7b      	ldrb	r3, [r7, #13]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	737b      	strb	r3, [r7, #13]
 800a08e:	7b7b      	ldrb	r3, [r7, #13]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1d9      	bne.n	800a048 <LCD_Flood+0x1e4>
		while (blocks--) {
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	1e5a      	subs	r2, r3, #1
 800a098:	81fa      	strh	r2, [r7, #14]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1d2      	bne.n	800a044 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0a6:	737b      	strb	r3, [r7, #13]
 800a0a8:	e007      	b.n	800a0ba <LCD_Flood+0x256>
			LCD_Write8(hi);
 800a0aa:	7b3b      	ldrb	r3, [r7, #12]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fa0b 	bl	800a4c8 <LCD_Write8>
			LCD_Write8(lo);
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 fa07 	bl	800a4c8 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 800a0ba:	7b7b      	ldrb	r3, [r7, #13]
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	737a      	strb	r2, [r7, #13]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f2      	bne.n	800a0aa <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4803      	ldr	r0, [pc, #12]	; (800a0d8 <LCD_Flood+0x274>)
 800a0ca:	f7fc f8ea 	bl	80062a2 <gpio_write>
}
 800a0ce:	bf00      	nop
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	40020400 	.word	0x40020400
 800a0dc:	40020000 	.word	0x40020000

0800a0e0 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 800a0e0:	b40f      	push	{r0, r1, r2, r3}
 800a0e2:	b5b0      	push	{r4, r5, r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 800a0e8:	f107 031c 	add.w	r3, r7, #28
 800a0ec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	69b9      	ldr	r1, [r7, #24]
 800a0f2:	483d      	ldr	r0, [pc, #244]	; (800a1e8 <LCD_Printf+0x108>)
 800a0f4:	f002 feda 	bl	800ceac <vsiprintf>
	va_end(lst);

	p = buf;
 800a0f8:	4b3b      	ldr	r3, [pc, #236]	; (800a1e8 <LCD_Printf+0x108>)
 800a0fa:	607b      	str	r3, [r7, #4]
	while (*p) {
 800a0fc:	e068      	b.n	800a1d0 <LCD_Printf+0xf0>
		if (*p == '\n') {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b0a      	cmp	r3, #10
 800a104:	d111      	bne.n	800a12a <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 800a106:	4b39      	ldr	r3, [pc, #228]	; (800a1ec <LCD_Printf+0x10c>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	b29a      	uxth	r2, r3
 800a110:	4b37      	ldr	r3, [pc, #220]	; (800a1f0 <LCD_Printf+0x110>)
 800a112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4413      	add	r3, r2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	b21a      	sxth	r2, r3
 800a11e:	4b34      	ldr	r3, [pc, #208]	; (800a1f0 <LCD_Printf+0x110>)
 800a120:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 800a122:	4b34      	ldr	r3, [pc, #208]	; (800a1f4 <LCD_Printf+0x114>)
 800a124:	2200      	movs	r2, #0
 800a126:	801a      	strh	r2, [r3, #0]
 800a128:	e04f      	b.n	800a1ca <LCD_Printf+0xea>
		} else if (*p == '\r') {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b0d      	cmp	r3, #13
 800a130:	d04b      	beq.n	800a1ca <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 800a132:	4b30      	ldr	r3, [pc, #192]	; (800a1f4 <LCD_Printf+0x114>)
 800a134:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a138:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <LCD_Printf+0x110>)
 800a13a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	781c      	ldrb	r4, [r3, #0]
 800a142:	4b2d      	ldr	r3, [pc, #180]	; (800a1f8 <LCD_Printf+0x118>)
 800a144:	881d      	ldrh	r5, [r3, #0]
 800a146:	4b2d      	ldr	r3, [pc, #180]	; (800a1fc <LCD_Printf+0x11c>)
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	4a28      	ldr	r2, [pc, #160]	; (800a1ec <LCD_Printf+0x10c>)
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	9201      	str	r2, [sp, #4]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	462b      	mov	r3, r5
 800a154:	4622      	mov	r2, r4
 800a156:	f7ff fbd3 	bl	8009900 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <LCD_Printf+0x10c>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	0052      	lsls	r2, r2, #1
 800a164:	4413      	add	r3, r2
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	b29a      	uxth	r2, r3
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <LCD_Printf+0x114>)
 800a16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a170:	b29b      	uxth	r3, r3
 800a172:	4413      	add	r3, r2
 800a174:	b29b      	uxth	r3, r3
 800a176:	b21a      	sxth	r2, r3
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <LCD_Printf+0x114>)
 800a17a:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 800a17c:	4b20      	ldr	r3, [pc, #128]	; (800a200 <LCD_Printf+0x120>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d022      	beq.n	800a1ca <LCD_Printf+0xea>
 800a184:	4b1b      	ldr	r3, [pc, #108]	; (800a1f4 <LCD_Printf+0x114>)
 800a186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a18a:	4619      	mov	r1, r3
 800a18c:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <LCD_Printf+0x124>)
 800a18e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a192:	4618      	mov	r0, r3
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <LCD_Printf+0x10c>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	4613      	mov	r3, r2
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4403      	add	r3, r0
 800a1a4:	4299      	cmp	r1, r3
 800a1a6:	dd10      	ble.n	800a1ca <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 800a1a8:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <LCD_Printf+0x10c>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <LCD_Printf+0x110>)
 800a1b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	b21a      	sxth	r2, r3
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <LCD_Printf+0x110>)
 800a1c2:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 800a1c4:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <LCD_Printf+0x114>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	607b      	str	r3, [r7, #4]
	while (*p) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d192      	bne.n	800a0fe <LCD_Printf+0x1e>
	}
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a1e4:	b004      	add	sp, #16
 800a1e6:	4770      	bx	lr
 800a1e8:	200010f0 	.word	0x200010f0
 800a1ec:	200010ec 	.word	0x200010ec
 800a1f0:	200010e6 	.word	0x200010e6
 800a1f4:	200010e4 	.word	0x200010e4
 800a1f8:	200010e8 	.word	0x200010e8
 800a1fc:	200010ea 	.word	0x200010ea
 800a200:	200010ee 	.word	0x200010ee
 800a204:	200010e0 	.word	0x200010e0

0800a208 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 800a20e:	2201      	movs	r2, #1
 800a210:	2100      	movs	r1, #0
 800a212:	4824      	ldr	r0, [pc, #144]	; (800a2a4 <LCD_Reset+0x9c>)
 800a214:	f7fc f845 	bl	80062a2 <gpio_write>
	LCD_WR_HIGH();
 800a218:	2201      	movs	r2, #1
 800a21a:	2101      	movs	r1, #1
 800a21c:	4822      	ldr	r0, [pc, #136]	; (800a2a8 <LCD_Reset+0xa0>)
 800a21e:	f7fc f840 	bl	80062a2 <gpio_write>
	LCD_RD_HIGH();
 800a222:	2201      	movs	r2, #1
 800a224:	2100      	movs	r1, #0
 800a226:	4820      	ldr	r0, [pc, #128]	; (800a2a8 <LCD_Reset+0xa0>)
 800a228:	f7fc f83b 	bl	80062a2 <gpio_write>

	LCD_RST_LOW();
 800a22c:	2200      	movs	r2, #0
 800a22e:	2101      	movs	r1, #1
 800a230:	481e      	ldr	r0, [pc, #120]	; (800a2ac <LCD_Reset+0xa4>)
 800a232:	f7fc f836 	bl	80062a2 <gpio_write>
	delay(100);
 800a236:	2064      	movs	r0, #100	; 0x64
 800a238:	f7fe feca 	bl	8008fd0 <delay>
	LCD_RST_HIGH();
 800a23c:	2201      	movs	r2, #1
 800a23e:	2101      	movs	r1, #1
 800a240:	481a      	ldr	r0, [pc, #104]	; (800a2ac <LCD_Reset+0xa4>)
 800a242:	f7fc f82e 	bl	80062a2 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 800a246:	2200      	movs	r2, #0
 800a248:	2100      	movs	r1, #0
 800a24a:	4816      	ldr	r0, [pc, #88]	; (800a2a4 <LCD_Reset+0x9c>)
 800a24c:	f7fc f829 	bl	80062a2 <gpio_write>

	LCD_CD_LOW();
 800a250:	2200      	movs	r2, #0
 800a252:	2104      	movs	r1, #4
 800a254:	4814      	ldr	r0, [pc, #80]	; (800a2a8 <LCD_Reset+0xa0>)
 800a256:	f7fc f824 	bl	80062a2 <gpio_write>
	LCD_Write8(0x00);
 800a25a:	2000      	movs	r0, #0
 800a25c:	f000 f934 	bl	800a4c8 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 800a260:	2300      	movs	r3, #0
 800a262:	71fb      	strb	r3, [r7, #7]
 800a264:	e012      	b.n	800a28c <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 800a266:	2200      	movs	r2, #0
 800a268:	2101      	movs	r1, #1
 800a26a:	480f      	ldr	r0, [pc, #60]	; (800a2a8 <LCD_Reset+0xa0>)
 800a26c:	f7fc f819 	bl	80062a2 <gpio_write>
 800a270:	2001      	movs	r0, #1
 800a272:	f7fe fead 	bl	8008fd0 <delay>
 800a276:	2201      	movs	r2, #1
 800a278:	2101      	movs	r1, #1
 800a27a:	480b      	ldr	r0, [pc, #44]	; (800a2a8 <LCD_Reset+0xa0>)
 800a27c:	f7fc f811 	bl	80062a2 <gpio_write>
 800a280:	2001      	movs	r0, #1
 800a282:	f7fe fea5 	bl	8008fd0 <delay>
	for (uint8_t i = 0; i < 3; i++)
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	3301      	adds	r3, #1
 800a28a:	71fb      	strb	r3, [r7, #7]
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d9e9      	bls.n	800a266 <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 800a292:	2201      	movs	r2, #1
 800a294:	2100      	movs	r1, #0
 800a296:	4803      	ldr	r0, [pc, #12]	; (800a2a4 <LCD_Reset+0x9c>)
 800a298:	f7fc f803 	bl	80062a2 <gpio_write>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	40020400 	.word	0x40020400
 800a2a8:	40020000 	.word	0x40020000
 800a2ac:	40020800 	.word	0x40020800

0800a2b0 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	b21a      	sxth	r2, r3
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <LCD_SetCursor+0x28>)
 800a2c0:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	b21a      	sxth	r2, r3
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <LCD_SetCursor+0x2c>)
 800a2c8:	801a      	strh	r2, [r3, #0]
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	200010e4 	.word	0x200010e4
 800a2dc:	200010e6 	.word	0x200010e6

0800a2e0 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <LCD_SetTextSize+0x14>
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	e000      	b.n	800a2f6 <LCD_SetTextSize+0x16>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4a04      	ldr	r2, [pc, #16]	; (800a308 <LCD_SetTextSize+0x28>)
 800a2f8:	7013      	strb	r3, [r2, #0]
}
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	200010ec 	.word	0x200010ec

0800a30c <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	460a      	mov	r2, r1
 800a316:	80fb      	strh	r3, [r7, #6]
 800a318:	4613      	mov	r3, r2
 800a31a:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 800a31c:	4a05      	ldr	r2, [pc, #20]	; (800a334 <LCD_SetTextColor+0x28>)
 800a31e:	88fb      	ldrh	r3, [r7, #6]
 800a320:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800a322:	4a05      	ldr	r2, [pc, #20]	; (800a338 <LCD_SetTextColor+0x2c>)
 800a324:	88bb      	ldrh	r3, [r7, #4]
 800a326:	8013      	strh	r3, [r2, #0]
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	200010e8 	.word	0x200010e8
 800a338:	200010ea 	.word	0x200010ea

0800a33c <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	f003 0303 	and.w	r3, r3, #3
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <LCD_SetRotation+0x60>)
 800a350:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800a352:	4b12      	ldr	r3, [pc, #72]	; (800a39c <LCD_SetRotation+0x60>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d81a      	bhi.n	800a390 <LCD_SetRotation+0x54>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <LCD_SetRotation+0x24>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a371 	.word	0x0800a371
 800a364:	0800a381 	.word	0x0800a381
 800a368:	0800a371 	.word	0x0800a371
 800a36c:	0800a381 	.word	0x0800a381
	case 0:
	case 2:
		m_width = TFTWIDTH;
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <LCD_SetRotation+0x64>)
 800a372:	22f0      	movs	r2, #240	; 0xf0
 800a374:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <LCD_SetRotation+0x68>)
 800a378:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a37c:	801a      	strh	r2, [r3, #0]
		break;
 800a37e:	e007      	b.n	800a390 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <LCD_SetRotation+0x64>)
 800a382:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a386:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <LCD_SetRotation+0x68>)
 800a38a:	22f0      	movs	r2, #240	; 0xf0
 800a38c:	801a      	strh	r2, [r3, #0]
		break;
 800a38e:	bf00      	nop
	}
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	200010ed 	.word	0x200010ed
 800a3a0:	200010e0 	.word	0x200010e0
 800a3a4:	200010e2 	.word	0x200010e2

0800a3a8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
 800a3b4:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4841      	ldr	r0, [pc, #260]	; (800a4c0 <LCD_SetAddrWindow+0x118>)
 800a3bc:	f7fb ff71 	bl	80062a2 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 800a3c0:	4b40      	ldr	r3, [pc, #256]	; (800a4c4 <LCD_SetAddrWindow+0x11c>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d038      	beq.n	800a43a <LCD_SetAddrWindow+0x92>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	dc03      	bgt.n	800a3d4 <LCD_SetAddrWindow+0x2c>
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d006      	beq.n	800a3de <LCD_SetAddrWindow+0x36>
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d017      	beq.n	800a404 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	61fb      	str	r3, [r7, #28]
		y = y1;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	61bb      	str	r3, [r7, #24]
		break;
 800a3dc:	e042      	b.n	800a464 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	617b      	str	r3, [r7, #20]
		y1 = x1;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800a3ec:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800a3f8:	607b      	str	r3, [r7, #4]
		x = x2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	61fb      	str	r3, [r7, #28]
		y = y1;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	61bb      	str	r3, [r7, #24]
		break;
 800a402:	e02f      	b.n	800a464 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800a40e:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800a416:	607b      	str	r3, [r7, #4]
		t = y1;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800a422:	3301      	adds	r3, #1
 800a424:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800a42c:	3301      	adds	r3, #1
 800a42e:	603b      	str	r3, [r7, #0]
		x = x2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	61fb      	str	r3, [r7, #28]
		y = y2;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	61bb      	str	r3, [r7, #24]
		break;
 800a438:	e014      	b.n	800a464 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	617b      	str	r3, [r7, #20]
		x1 = y1;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800a448:	3301      	adds	r3, #1
 800a44a:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800a456:	3301      	adds	r3, #1
 800a458:	603b      	str	r3, [r7, #0]
		x = x1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	61fb      	str	r3, [r7, #28]
		y = y2;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	61bb      	str	r3, [r7, #24]
		break;
 800a462:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	b29b      	uxth	r3, r3
 800a468:	4619      	mov	r1, r3
 800a46a:	2050      	movs	r0, #80	; 0x50
 800a46c:	f000 f888 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	b29b      	uxth	r3, r3
 800a474:	4619      	mov	r1, r3
 800a476:	2051      	movs	r0, #81	; 0x51
 800a478:	f000 f882 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4619      	mov	r1, r3
 800a482:	2052      	movs	r0, #82	; 0x52
 800a484:	f000 f87c 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4619      	mov	r1, r3
 800a48e:	2053      	movs	r0, #83	; 0x53
 800a490:	f000 f876 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	b29b      	uxth	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	2020      	movs	r0, #32
 800a49c:	f000 f870 	bl	800a580 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	2021      	movs	r0, #33	; 0x21
 800a4a8:	f000 f86a 	bl	800a580 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <LCD_SetAddrWindow+0x118>)
 800a4b2:	f7fb fef6 	bl	80062a2 <gpio_write>
}
 800a4b6:	bf00      	nop
 800a4b8:	3720      	adds	r7, #32
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	40020400 	.word	0x40020400
 800a4c4:	200010ed 	.word	0x200010ed

0800a4c8 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800a4d2:	4b28      	ldr	r3, [pc, #160]	; (800a574 <LCD_Write8+0xac>)
 800a4d4:	695a      	ldr	r2, [r3, #20]
 800a4d6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4da:	4013      	ands	r3, r2
 800a4dc:	79fa      	ldrb	r2, [r7, #7]
 800a4de:	0252      	lsls	r2, r2, #9
 800a4e0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800a4e4:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	021b      	lsls	r3, r3, #8
 800a4ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800a4f8:	491e      	ldr	r1, [pc, #120]	; (800a574 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800a4fa:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800a4fc:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800a4fe:	4b1e      	ldr	r3, [pc, #120]	; (800a578 <LCD_Write8+0xb0>)
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 800a506:	4013      	ands	r3, r2
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	f002 0208 	and.w	r2, r2, #8
 800a50e:	431a      	orrs	r2, r3
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	105b      	asrs	r3, r3, #1
 800a51e:	f003 0310 	and.w	r3, r3, #16
 800a522:	431a      	orrs	r2, r3
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800a52c:	4912      	ldr	r1, [pc, #72]	; (800a578 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800a52e:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800a530:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <LCD_Write8+0xb4>)
 800a534:	695a      	ldr	r2, [r3, #20]
 800a536:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800a53a:	4013      	ands	r3, r2
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	0192      	lsls	r2, r2, #6
 800a540:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a544:	490d      	ldr	r1, [pc, #52]	; (800a57c <LCD_Write8+0xb4>)
 800a546:	4313      	orrs	r3, r2
 800a548:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 800a54a:	2200      	movs	r2, #0
 800a54c:	2101      	movs	r1, #1
 800a54e:	4809      	ldr	r0, [pc, #36]	; (800a574 <LCD_Write8+0xac>)
 800a550:	f7fb fea7 	bl	80062a2 <gpio_write>
 800a554:	2001      	movs	r0, #1
 800a556:	f7fe fd3b 	bl	8008fd0 <delay>
 800a55a:	2201      	movs	r2, #1
 800a55c:	2101      	movs	r1, #1
 800a55e:	4805      	ldr	r0, [pc, #20]	; (800a574 <LCD_Write8+0xac>)
 800a560:	f7fb fe9f 	bl	80062a2 <gpio_write>
 800a564:	2001      	movs	r0, #1
 800a566:	f7fe fd33 	bl	8008fd0 <delay>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	40020000 	.word	0x40020000
 800a578:	40020400 	.word	0x40020400
 800a57c:	40020800 	.word	0x40020800

0800a580 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	460a      	mov	r2, r1
 800a58a:	80fb      	strh	r3, [r7, #6]
 800a58c:	4613      	mov	r3, r2
 800a58e:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	0a1b      	lsrs	r3, r3, #8
 800a594:	b29b      	uxth	r3, r3
 800a596:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 800a59c:	2200      	movs	r2, #0
 800a59e:	2104      	movs	r1, #4
 800a5a0:	4810      	ldr	r0, [pc, #64]	; (800a5e4 <LCD_WriteRegister16+0x64>)
 800a5a2:	f7fb fe7e 	bl	80062a2 <gpio_write>
	LCD_Write8(hi);
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff ff8d 	bl	800a4c8 <LCD_Write8>
	LCD_Write8(lo);
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff ff89 	bl	800a4c8 <LCD_Write8>
	hi = (d) >> 8;
 800a5b6:	88bb      	ldrh	r3, [r7, #4]
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 800a5be:	88bb      	ldrh	r3, [r7, #4]
 800a5c0:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	4807      	ldr	r0, [pc, #28]	; (800a5e4 <LCD_WriteRegister16+0x64>)
 800a5c8:	f7fb fe6b 	bl	80062a2 <gpio_write>
	LCD_Write8(hi);
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff ff7a 	bl	800a4c8 <LCD_Write8>
	LCD_Write8(lo);
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff ff76 	bl	800a4c8 <LCD_Write8>
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	40020000 	.word	0x40020000

0800a5e8 <temp2color>:
void printstr(uint8_t *str) {
	while (*str)
		write(*str++);
}

uint16_t temp2color(int degree, int lo, int hi) {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	b298      	uxth	r0, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	2300      	movs	r3, #0
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	23ff      	movs	r3, #255	; 0xff
 800a606:	f7fb fd27 	bl	8006058 <map>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]
	g = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	b298      	uxth	r0, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	b299      	uxth	r1, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	23ff      	movs	r3, #255	; 0xff
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	f7fb fd18 	bl	8006058 <map>
 800a628:	4603      	mov	r3, r0
 800a62a:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 800a62c:	7d7a      	ldrb	r2, [r7, #21]
 800a62e:	7db9      	ldrb	r1, [r7, #22]
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fdca 	bl	80091cc <LCD_Color565>
 800a638:	4603      	mov	r3, r0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 800a642:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a644:	b087      	sub	sp, #28
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
 800a64e:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	e01e      	b.n	800a694 <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	3301      	adds	r3, #1
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	b21c      	sxth	r4, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	b29a      	uxth	r2, r3
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	b29b      	uxth	r3, r3
 800a668:	4413      	add	r3, r2
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	b21d      	sxth	r5, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b02      	subs	r3, #2
 800a674:	b29b      	uxth	r3, r3
 800a676:	b21e      	sxth	r6, r3
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	2100      	movs	r1, #0
 800a67c:	6978      	ldr	r0, [r7, #20]
 800a67e:	f7ff ffb3 	bl	800a5e8 <temp2color>
 800a682:	4603      	mov	r3, r0
 800a684:	4632      	mov	r2, r6
 800a686:	4629      	mov	r1, r5
 800a688:	4620      	mov	r0, r4
 800a68a:	f7fe fecf 	bl	800942c <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	3301      	adds	r3, #1
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	3b01      	subs	r3, #1
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	dbdb      	blt.n	800a656 <colorgradient+0x14>
	}
}
 800a69e:	bf00      	nop
 800a6a0:	bf00      	nop
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6ba:	2b84      	cmp	r3, #132	; 0x84
 800a6bc:	d005      	beq.n	800a6ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3303      	adds	r3, #3
 800a6c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a6dc:	f000 fc58 	bl	800af90 <vTaskStartScheduler>
  
  return osOK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e8:	b089      	sub	sp, #36	; 0x24
 800a6ea:	af04      	add	r7, sp, #16
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d020      	beq.n	800a73a <osThreadCreate+0x54>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01c      	beq.n	800a73a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685c      	ldr	r4, [r3, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681d      	ldr	r5, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691e      	ldr	r6, [r3, #16]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff ffc8 	bl	800a6a8 <makeFreeRtosPriority>
 800a718:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a722:	9202      	str	r2, [sp, #8]
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	9100      	str	r1, [sp, #0]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	4632      	mov	r2, r6
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fa4f 	bl	800abd2 <xTaskCreateStatic>
 800a734:	4603      	mov	r3, r0
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	e01c      	b.n	800a774 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685c      	ldr	r4, [r3, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a746:	b29e      	uxth	r6, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff ffaa 	bl	800a6a8 <makeFreeRtosPriority>
 800a754:	4602      	mov	r2, r0
 800a756:	f107 030c 	add.w	r3, r7, #12
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	9200      	str	r2, [sp, #0]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	4632      	mov	r2, r6
 800a762:	4629      	mov	r1, r5
 800a764:	4620      	mov	r0, r4
 800a766:	f000 fa91 	bl	800ac8c <xTaskCreate>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a770:	2300      	movs	r3, #0
 800a772:	e000      	b.n	800a776 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a774:	68fb      	ldr	r3, [r7, #12]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a77e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <osDelay+0x16>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	e000      	b.n	800a796 <osDelay+0x18>
 800a794:	2301      	movs	r3, #1
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fbc6 	bl	800af28 <vTaskDelay>
  
  return osOK;
 800a79c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a7a6:	b590      	push	{r4, r7, lr}
 800a7a8:	b085      	sub	sp, #20
 800a7aa:	af02      	add	r7, sp, #8
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d011      	beq.n	800a7dc <osMessageCreate+0x36>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00d      	beq.n	800a7dc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6859      	ldr	r1, [r3, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	9400      	str	r4, [sp, #0]
 800a7d4:	f000 f92c 	bl	800aa30 <xQueueGenericCreateStatic>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	e008      	b.n	800a7ee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	f000 f99a 	bl	800ab20 <xQueueGenericCreate>
 800a7ec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd90      	pop	{r4, r7, pc}

0800a7f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f103 0208 	add.w	r2, r3, #8
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295
 800a80e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f103 0208 	add.w	r2, r3, #8
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f103 0208 	add.w	r2, r3, #8
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	689a      	ldr	r2, [r3, #8]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	601a      	str	r2, [r3, #0]
}
 800a88c:	bf00      	nop
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d103      	bne.n	800a8b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	e00c      	b.n	800a8d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e002      	b.n	800a8c6 <vListInsert+0x2e>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d2f6      	bcs.n	800a8c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	601a      	str	r2, [r3, #0]
}
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6892      	ldr	r2, [r2, #8]
 800a920:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6852      	ldr	r2, [r2, #4]
 800a92a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d103      	bne.n	800a93e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	1e5a      	subs	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
	...

0800a960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a98a:	f000 fffb 	bl	800b984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a99a:	fb01 f303 	mul.w	r3, r1, r3
 800a99e:	441a      	add	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	68f9      	ldr	r1, [r7, #12]
 800a9be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	22ff      	movs	r2, #255	; 0xff
 800a9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	22ff      	movs	r2, #255	; 0xff
 800a9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d114      	bne.n	800aa0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01a      	beq.n	800aa1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3310      	adds	r3, #16
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fcfd 	bl	800b3ec <xTaskRemoveFromEventList>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d012      	beq.n	800aa1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9f8:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <xQueueGenericReset+0xcc>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	e009      	b.n	800aa1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3310      	adds	r3, #16
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fef1 	bl	800a7f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3324      	adds	r3, #36	; 0x24
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff feec 	bl	800a7f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa1e:	f000 ffe1 	bl	800b9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa22:	2301      	movs	r3, #1
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	e000ed04 	.word	0xe000ed04

0800aa30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08e      	sub	sp, #56	; 0x38
 800aa34:	af02      	add	r7, sp, #8
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa56:	bf00      	nop
 800aa58:	e7fe      	b.n	800aa58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <xQueueGenericCreateStatic+0x52>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <xQueueGenericCreateStatic+0x56>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <xQueueGenericCreateStatic+0x58>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <xQueueGenericCreateStatic+0x7e>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <xQueueGenericCreateStatic+0x82>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <xQueueGenericCreateStatic+0x84>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	61fb      	str	r3, [r7, #28]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aace:	2348      	movs	r3, #72	; 0x48
 800aad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b48      	cmp	r3, #72	; 0x48
 800aad6:	d00a      	beq.n	800aaee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	61bb      	str	r3, [r7, #24]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00d      	beq.n	800ab16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 f83f 	bl	800ab94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3730      	adds	r7, #48	; 0x30
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08a      	sub	sp, #40	; 0x28
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	613b      	str	r3, [r7, #16]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	3348      	adds	r3, #72	; 0x48
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fff5 	bl	800bb48 <pvPortMalloc>
 800ab5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	3348      	adds	r3, #72	; 0x48
 800ab6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab78:	79fa      	ldrb	r2, [r7, #7]
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 f805 	bl	800ab94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3720      	adds	r7, #32
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	e002      	b.n	800abb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abc2:	2101      	movs	r1, #1
 800abc4:	69b8      	ldr	r0, [r7, #24]
 800abc6:	f7ff fecb 	bl	800a960 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b08e      	sub	sp, #56	; 0x38
 800abd6:	af04      	add	r7, sp, #16
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
 800abde:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <xTaskCreateStatic+0x2a>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	623b      	str	r3, [r7, #32]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	61fb      	str	r3, [r7, #28]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac18:	23b4      	movs	r3, #180	; 0xb4
 800ac1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2bb4      	cmp	r3, #180	; 0xb4
 800ac20:	d00a      	beq.n	800ac38 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	61bb      	str	r3, [r7, #24]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01e      	beq.n	800ac7e <xTaskCreateStatic+0xac>
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01b      	beq.n	800ac7e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	9302      	str	r3, [sp, #8]
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f851 	bl	800ad18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac78:	f000 f8ec 	bl	800ae54 <prvAddNewTaskToReadyList>
 800ac7c:	e001      	b.n	800ac82 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac82:	697b      	ldr	r3, [r7, #20]
	}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	; 0x30
 800ac90:	af04      	add	r7, sp, #16
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 ff51 	bl	800bb48 <pvPortMalloc>
 800aca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00e      	beq.n	800accc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acae:	20b4      	movs	r0, #180	; 0xb4
 800acb0:	f000 ff4a 	bl	800bb48 <pvPortMalloc>
 800acb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
 800acc2:	e005      	b.n	800acd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acc4:	6978      	ldr	r0, [r7, #20]
 800acc6:	f001 f80b 	bl	800bce0 <vPortFree>
 800acca:	e001      	b.n	800acd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d017      	beq.n	800ad06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	2300      	movs	r3, #0
 800ace2:	9303      	str	r3, [sp, #12]
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	9302      	str	r3, [sp, #8]
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f80f 	bl	800ad18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acfa:	69f8      	ldr	r0, [r7, #28]
 800acfc:	f000 f8aa 	bl	800ae54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad00:	2301      	movs	r3, #1
 800ad02:	61bb      	str	r3, [r7, #24]
 800ad04:	e002      	b.n	800ad0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad06:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad30:	3b01      	subs	r3, #1
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	f023 0307 	bic.w	r3, r3, #7
 800ad3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01f      	beq.n	800ada6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	e012      	b.n	800ad92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	4413      	add	r3, r2
 800ad72:	7819      	ldrb	r1, [r3, #0]
 800ad74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3334      	adds	r3, #52	; 0x34
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	61fb      	str	r3, [r7, #28]
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	2b0f      	cmp	r3, #15
 800ad96:	d9e9      	bls.n	800ad6c <prvInitialiseNewTask+0x54>
 800ad98:	e000      	b.n	800ad9c <prvInitialiseNewTask+0x84>
			{
				break;
 800ad9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ada4:	e003      	b.n	800adae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	2b06      	cmp	r3, #6
 800adb2:	d901      	bls.n	800adb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adb4:	2306      	movs	r3, #6
 800adb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	2200      	movs	r2, #0
 800adc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	3304      	adds	r3, #4
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff fd31 	bl	800a836 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	3318      	adds	r3, #24
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fd2c 	bl	800a836 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	f1c3 0207 	rsb	r2, r3, #7
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	334c      	adds	r3, #76	; 0x4c
 800ae08:	2260      	movs	r2, #96	; 0x60
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 f9bf 	bl	800c190 <memset>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	4a0c      	ldr	r2, [pc, #48]	; (800ae48 <prvInitialiseNewTask+0x130>)
 800ae16:	651a      	str	r2, [r3, #80]	; 0x50
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	4a0c      	ldr	r2, [pc, #48]	; (800ae4c <prvInitialiseNewTask+0x134>)
 800ae1c:	655a      	str	r2, [r3, #84]	; 0x54
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	4a0b      	ldr	r2, [pc, #44]	; (800ae50 <prvInitialiseNewTask+0x138>)
 800ae22:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	69b8      	ldr	r0, [r7, #24]
 800ae2a:	f000 fc81 	bl	800b730 <pxPortInitialiseStack>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae40:	bf00      	nop
 800ae42:	3720      	adds	r7, #32
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	080101c8 	.word	0x080101c8
 800ae4c:	080101e8 	.word	0x080101e8
 800ae50:	080101a8 	.word	0x080101a8

0800ae54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae5c:	f000 fd92 	bl	800b984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae60:	4b2a      	ldr	r3, [pc, #168]	; (800af0c <prvAddNewTaskToReadyList+0xb8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3301      	adds	r3, #1
 800ae66:	4a29      	ldr	r2, [pc, #164]	; (800af0c <prvAddNewTaskToReadyList+0xb8>)
 800ae68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae6a:	4b29      	ldr	r3, [pc, #164]	; (800af10 <prvAddNewTaskToReadyList+0xbc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae72:	4a27      	ldr	r2, [pc, #156]	; (800af10 <prvAddNewTaskToReadyList+0xbc>)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae78:	4b24      	ldr	r3, [pc, #144]	; (800af0c <prvAddNewTaskToReadyList+0xb8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d110      	bne.n	800aea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae80:	f000 fb2e 	bl	800b4e0 <prvInitialiseTaskLists>
 800ae84:	e00d      	b.n	800aea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae86:	4b23      	ldr	r3, [pc, #140]	; (800af14 <prvAddNewTaskToReadyList+0xc0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d109      	bne.n	800aea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae8e:	4b20      	ldr	r3, [pc, #128]	; (800af10 <prvAddNewTaskToReadyList+0xbc>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d802      	bhi.n	800aea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <prvAddNewTaskToReadyList+0xbc>)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aea2:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <prvAddNewTaskToReadyList+0xc4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3301      	adds	r3, #1
 800aea8:	4a1b      	ldr	r2, [pc, #108]	; (800af18 <prvAddNewTaskToReadyList+0xc4>)
 800aeaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	409a      	lsls	r2, r3
 800aeb4:	4b19      	ldr	r3, [pc, #100]	; (800af1c <prvAddNewTaskToReadyList+0xc8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	4a18      	ldr	r2, [pc, #96]	; (800af1c <prvAddNewTaskToReadyList+0xc8>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	4613      	mov	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4a15      	ldr	r2, [pc, #84]	; (800af20 <prvAddNewTaskToReadyList+0xcc>)
 800aecc:	441a      	add	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f7ff fcbb 	bl	800a850 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aeda:	f000 fd83 	bl	800b9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aede:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <prvAddNewTaskToReadyList+0xc0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00e      	beq.n	800af04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aee6:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <prvAddNewTaskToReadyList+0xbc>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d207      	bcs.n	800af04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aef4:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <prvAddNewTaskToReadyList+0xd0>)
 800aef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	200012f0 	.word	0x200012f0
 800af10:	200011f0 	.word	0x200011f0
 800af14:	200012fc 	.word	0x200012fc
 800af18:	2000130c 	.word	0x2000130c
 800af1c:	200012f8 	.word	0x200012f8
 800af20:	200011f4 	.word	0x200011f4
 800af24:	e000ed04 	.word	0xe000ed04

0800af28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d017      	beq.n	800af6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af3a:	4b13      	ldr	r3, [pc, #76]	; (800af88 <vTaskDelay+0x60>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <vTaskDelay+0x30>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60bb      	str	r3, [r7, #8]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af58:	f000 f884 	bl	800b064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af5c:	2100      	movs	r1, #0
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb80 	bl	800b664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af64:	f000 f88c 	bl	800b080 <xTaskResumeAll>
 800af68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d107      	bne.n	800af80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af70:	4b06      	ldr	r3, [pc, #24]	; (800af8c <vTaskDelay+0x64>)
 800af72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20001318 	.word	0x20001318
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af9e:	463a      	mov	r2, r7
 800afa0:	1d39      	adds	r1, r7, #4
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7f5 ffd8 	bl	8000f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	9202      	str	r2, [sp, #8]
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	460a      	mov	r2, r1
 800afbe:	4921      	ldr	r1, [pc, #132]	; (800b044 <vTaskStartScheduler+0xb4>)
 800afc0:	4821      	ldr	r0, [pc, #132]	; (800b048 <vTaskStartScheduler+0xb8>)
 800afc2:	f7ff fe06 	bl	800abd2 <xTaskCreateStatic>
 800afc6:	4603      	mov	r3, r0
 800afc8:	4a20      	ldr	r2, [pc, #128]	; (800b04c <vTaskStartScheduler+0xbc>)
 800afca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afcc:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <vTaskStartScheduler+0xbc>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afd4:	2301      	movs	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	e001      	b.n	800afde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d11b      	bne.n	800b01c <vTaskStartScheduler+0x8c>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	613b      	str	r3, [r7, #16]
}
 800aff6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aff8:	4b15      	ldr	r3, [pc, #84]	; (800b050 <vTaskStartScheduler+0xc0>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	334c      	adds	r3, #76	; 0x4c
 800affe:	4a15      	ldr	r2, [pc, #84]	; (800b054 <vTaskStartScheduler+0xc4>)
 800b000:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b002:	4b15      	ldr	r3, [pc, #84]	; (800b058 <vTaskStartScheduler+0xc8>)
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b00a:	4b14      	ldr	r3, [pc, #80]	; (800b05c <vTaskStartScheduler+0xcc>)
 800b00c:	2201      	movs	r2, #1
 800b00e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b010:	4b13      	ldr	r3, [pc, #76]	; (800b060 <vTaskStartScheduler+0xd0>)
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b016:	f000 fc13 	bl	800b840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b01a:	e00e      	b.n	800b03a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d10a      	bne.n	800b03a <vTaskStartScheduler+0xaa>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	60fb      	str	r3, [r7, #12]
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <vTaskStartScheduler+0xa8>
}
 800b03a:	bf00      	nop
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	0800fe00 	.word	0x0800fe00
 800b048:	0800b4b1 	.word	0x0800b4b1
 800b04c:	20001314 	.word	0x20001314
 800b050:	200011f0 	.word	0x200011f0
 800b054:	20000074 	.word	0x20000074
 800b058:	20001310 	.word	0x20001310
 800b05c:	200012fc 	.word	0x200012fc
 800b060:	200012f4 	.word	0x200012f4

0800b064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b068:	4b04      	ldr	r3, [pc, #16]	; (800b07c <vTaskSuspendAll+0x18>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	4a03      	ldr	r2, [pc, #12]	; (800b07c <vTaskSuspendAll+0x18>)
 800b070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b072:	bf00      	nop
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	20001318 	.word	0x20001318

0800b080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b08e:	4b41      	ldr	r3, [pc, #260]	; (800b194 <xTaskResumeAll+0x114>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <xTaskResumeAll+0x2c>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	603b      	str	r3, [r7, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0ac:	f000 fc6a 	bl	800b984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0b0:	4b38      	ldr	r3, [pc, #224]	; (800b194 <xTaskResumeAll+0x114>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	4a37      	ldr	r2, [pc, #220]	; (800b194 <xTaskResumeAll+0x114>)
 800b0b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ba:	4b36      	ldr	r3, [pc, #216]	; (800b194 <xTaskResumeAll+0x114>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d161      	bne.n	800b186 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0c2:	4b35      	ldr	r3, [pc, #212]	; (800b198 <xTaskResumeAll+0x118>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d05d      	beq.n	800b186 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ca:	e02e      	b.n	800b12a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0cc:	4b33      	ldr	r3, [pc, #204]	; (800b19c <xTaskResumeAll+0x11c>)
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3318      	adds	r3, #24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff fc16 	bl	800a90a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fc11 	bl	800a90a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	409a      	lsls	r2, r3
 800b0f0:	4b2b      	ldr	r3, [pc, #172]	; (800b1a0 <xTaskResumeAll+0x120>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	4a2a      	ldr	r2, [pc, #168]	; (800b1a0 <xTaskResumeAll+0x120>)
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4a27      	ldr	r2, [pc, #156]	; (800b1a4 <xTaskResumeAll+0x124>)
 800b108:	441a      	add	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3304      	adds	r3, #4
 800b10e:	4619      	mov	r1, r3
 800b110:	4610      	mov	r0, r2
 800b112:	f7ff fb9d 	bl	800a850 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	4b23      	ldr	r3, [pc, #140]	; (800b1a8 <xTaskResumeAll+0x128>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b120:	429a      	cmp	r2, r3
 800b122:	d302      	bcc.n	800b12a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b124:	4b21      	ldr	r3, [pc, #132]	; (800b1ac <xTaskResumeAll+0x12c>)
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b12a:	4b1c      	ldr	r3, [pc, #112]	; (800b19c <xTaskResumeAll+0x11c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1cc      	bne.n	800b0cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b138:	f000 fa74 	bl	800b624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b13c:	4b1c      	ldr	r3, [pc, #112]	; (800b1b0 <xTaskResumeAll+0x130>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b148:	f000 f836 	bl	800b1b8 <xTaskIncrementTick>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b152:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <xTaskResumeAll+0x12c>)
 800b154:	2201      	movs	r2, #1
 800b156:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1f1      	bne.n	800b148 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b164:	4b12      	ldr	r3, [pc, #72]	; (800b1b0 <xTaskResumeAll+0x130>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b16a:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <xTaskResumeAll+0x12c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d009      	beq.n	800b186 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b172:	2301      	movs	r3, #1
 800b174:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b176:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <xTaskResumeAll+0x134>)
 800b178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b186:	f000 fc2d 	bl	800b9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800b18a:	68bb      	ldr	r3, [r7, #8]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20001318 	.word	0x20001318
 800b198:	200012f0 	.word	0x200012f0
 800b19c:	200012b0 	.word	0x200012b0
 800b1a0:	200012f8 	.word	0x200012f8
 800b1a4:	200011f4 	.word	0x200011f4
 800b1a8:	200011f0 	.word	0x200011f0
 800b1ac:	20001304 	.word	0x20001304
 800b1b0:	20001300 	.word	0x20001300
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c2:	4b4e      	ldr	r3, [pc, #312]	; (800b2fc <xTaskIncrementTick+0x144>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 808e 	bne.w	800b2e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1cc:	4b4c      	ldr	r3, [pc, #304]	; (800b300 <xTaskIncrementTick+0x148>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1d4:	4a4a      	ldr	r2, [pc, #296]	; (800b300 <xTaskIncrementTick+0x148>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d120      	bne.n	800b222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e0:	4b48      	ldr	r3, [pc, #288]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xTaskIncrementTick+0x46>
 800b200:	4b40      	ldr	r3, [pc, #256]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	4b40      	ldr	r3, [pc, #256]	; (800b308 <xTaskIncrementTick+0x150>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3e      	ldr	r2, [pc, #248]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4a3e      	ldr	r2, [pc, #248]	; (800b308 <xTaskIncrementTick+0x150>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4b3d      	ldr	r3, [pc, #244]	; (800b30c <xTaskIncrementTick+0x154>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	4a3c      	ldr	r2, [pc, #240]	; (800b30c <xTaskIncrementTick+0x154>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f000 fa01 	bl	800b624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b222:	4b3b      	ldr	r3, [pc, #236]	; (800b310 <xTaskIncrementTick+0x158>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d348      	bcc.n	800b2be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22c:	4b35      	ldr	r3, [pc, #212]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	4b36      	ldr	r3, [pc, #216]	; (800b310 <xTaskIncrementTick+0x158>)
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	601a      	str	r2, [r3, #0]
					break;
 800b23e:	e03e      	b.n	800b2be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b30      	ldr	r3, [pc, #192]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d203      	bcs.n	800b260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b258:	4a2d      	ldr	r2, [pc, #180]	; (800b310 <xTaskIncrementTick+0x158>)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b25e:	e02e      	b.n	800b2be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fb50 	bl	800a90a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3318      	adds	r3, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fb47 	bl	800a90a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	2201      	movs	r2, #1
 800b282:	409a      	lsls	r2, r3
 800b284:	4b23      	ldr	r3, [pc, #140]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4313      	orrs	r3, r2
 800b28a:	4a22      	ldr	r2, [pc, #136]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4a1f      	ldr	r2, [pc, #124]	; (800b318 <xTaskIncrementTick+0x160>)
 800b29c:	441a      	add	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7ff fad3 	bl	800a850 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ae:	4b1b      	ldr	r3, [pc, #108]	; (800b31c <xTaskIncrementTick+0x164>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d3b9      	bcc.n	800b22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2bc:	e7b6      	b.n	800b22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2be:	4b17      	ldr	r3, [pc, #92]	; (800b31c <xTaskIncrementTick+0x164>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4914      	ldr	r1, [pc, #80]	; (800b318 <xTaskIncrementTick+0x160>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d901      	bls.n	800b2da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2da:	4b11      	ldr	r3, [pc, #68]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e004      	b.n	800b2f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2e8:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <xTaskIncrementTick+0x16c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	4a0d      	ldr	r2, [pc, #52]	; (800b324 <xTaskIncrementTick+0x16c>)
 800b2f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2f2:	697b      	ldr	r3, [r7, #20]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20001318 	.word	0x20001318
 800b300:	200012f4 	.word	0x200012f4
 800b304:	200012a8 	.word	0x200012a8
 800b308:	200012ac 	.word	0x200012ac
 800b30c:	20001308 	.word	0x20001308
 800b310:	20001310 	.word	0x20001310
 800b314:	200012f8 	.word	0x200012f8
 800b318:	200011f4 	.word	0x200011f4
 800b31c:	200011f0 	.word	0x200011f0
 800b320:	20001304 	.word	0x20001304
 800b324:	20001300 	.word	0x20001300

0800b328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b32e:	4b29      	ldr	r3, [pc, #164]	; (800b3d4 <vTaskSwitchContext+0xac>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b336:	4b28      	ldr	r3, [pc, #160]	; (800b3d8 <vTaskSwitchContext+0xb0>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b33c:	e044      	b.n	800b3c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b33e:	4b26      	ldr	r3, [pc, #152]	; (800b3d8 <vTaskSwitchContext+0xb0>)
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b344:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <vTaskSwitchContext+0xb4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	fab3 f383 	clz	r3, r3
 800b350:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	f1c3 031f 	rsb	r3, r3, #31
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	4921      	ldr	r1, [pc, #132]	; (800b3e0 <vTaskSwitchContext+0xb8>)
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	607b      	str	r3, [r7, #4]
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <vTaskSwitchContext+0x5a>
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	4613      	mov	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4a14      	ldr	r2, [pc, #80]	; (800b3e0 <vTaskSwitchContext+0xb8>)
 800b390:	4413      	add	r3, r2
 800b392:	613b      	str	r3, [r7, #16]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	605a      	str	r2, [r3, #4]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d104      	bne.n	800b3b4 <vTaskSwitchContext+0x8c>
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	605a      	str	r2, [r3, #4]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	4a0a      	ldr	r2, [pc, #40]	; (800b3e4 <vTaskSwitchContext+0xbc>)
 800b3bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <vTaskSwitchContext+0xbc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	334c      	adds	r3, #76	; 0x4c
 800b3c4:	4a08      	ldr	r2, [pc, #32]	; (800b3e8 <vTaskSwitchContext+0xc0>)
 800b3c6:	6013      	str	r3, [r2, #0]
}
 800b3c8:	bf00      	nop
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20001318 	.word	0x20001318
 800b3d8:	20001304 	.word	0x20001304
 800b3dc:	200012f8 	.word	0x200012f8
 800b3e0:	200011f4 	.word	0x200011f4
 800b3e4:	200011f0 	.word	0x200011f0
 800b3e8:	20000074 	.word	0x20000074

0800b3ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	60fb      	str	r3, [r7, #12]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	3318      	adds	r3, #24
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fa74 	bl	800a90a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <xTaskRemoveFromEventList+0xac>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d11c      	bne.n	800b464 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fa6b 	bl	800a90a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	2201      	movs	r2, #1
 800b43a:	409a      	lsls	r2, r3
 800b43c:	4b17      	ldr	r3, [pc, #92]	; (800b49c <xTaskRemoveFromEventList+0xb0>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4313      	orrs	r3, r2
 800b442:	4a16      	ldr	r2, [pc, #88]	; (800b49c <xTaskRemoveFromEventList+0xb0>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4a13      	ldr	r2, [pc, #76]	; (800b4a0 <xTaskRemoveFromEventList+0xb4>)
 800b454:	441a      	add	r2, r3
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	3304      	adds	r3, #4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f7ff f9f7 	bl	800a850 <vListInsertEnd>
 800b462:	e005      	b.n	800b470 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3318      	adds	r3, #24
 800b468:	4619      	mov	r1, r3
 800b46a:	480e      	ldr	r0, [pc, #56]	; (800b4a4 <xTaskRemoveFromEventList+0xb8>)
 800b46c:	f7ff f9f0 	bl	800a850 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <xTaskRemoveFromEventList+0xbc>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d905      	bls.n	800b48a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b47e:	2301      	movs	r3, #1
 800b480:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b482:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <xTaskRemoveFromEventList+0xc0>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e001      	b.n	800b48e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b48e:	697b      	ldr	r3, [r7, #20]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20001318 	.word	0x20001318
 800b49c:	200012f8 	.word	0x200012f8
 800b4a0:	200011f4 	.word	0x200011f4
 800b4a4:	200012b0 	.word	0x200012b0
 800b4a8:	200011f0 	.word	0x200011f0
 800b4ac:	20001304 	.word	0x20001304

0800b4b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4b8:	f000 f852 	bl	800b560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <prvIdleTask+0x28>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d9f9      	bls.n	800b4b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4c4:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <prvIdleTask+0x2c>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4d4:	e7f0      	b.n	800b4b8 <prvIdleTask+0x8>
 800b4d6:	bf00      	nop
 800b4d8:	200011f4 	.word	0x200011f4
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	607b      	str	r3, [r7, #4]
 800b4ea:	e00c      	b.n	800b506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4a12      	ldr	r2, [pc, #72]	; (800b540 <prvInitialiseTaskLists+0x60>)
 800b4f8:	4413      	add	r3, r2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff f97b 	bl	800a7f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3301      	adds	r3, #1
 800b504:	607b      	str	r3, [r7, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b06      	cmp	r3, #6
 800b50a:	d9ef      	bls.n	800b4ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b50c:	480d      	ldr	r0, [pc, #52]	; (800b544 <prvInitialiseTaskLists+0x64>)
 800b50e:	f7ff f972 	bl	800a7f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b512:	480d      	ldr	r0, [pc, #52]	; (800b548 <prvInitialiseTaskLists+0x68>)
 800b514:	f7ff f96f 	bl	800a7f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b518:	480c      	ldr	r0, [pc, #48]	; (800b54c <prvInitialiseTaskLists+0x6c>)
 800b51a:	f7ff f96c 	bl	800a7f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b51e:	480c      	ldr	r0, [pc, #48]	; (800b550 <prvInitialiseTaskLists+0x70>)
 800b520:	f7ff f969 	bl	800a7f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b524:	480b      	ldr	r0, [pc, #44]	; (800b554 <prvInitialiseTaskLists+0x74>)
 800b526:	f7ff f966 	bl	800a7f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b52a:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <prvInitialiseTaskLists+0x78>)
 800b52c:	4a05      	ldr	r2, [pc, #20]	; (800b544 <prvInitialiseTaskLists+0x64>)
 800b52e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b530:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <prvInitialiseTaskLists+0x7c>)
 800b532:	4a05      	ldr	r2, [pc, #20]	; (800b548 <prvInitialiseTaskLists+0x68>)
 800b534:	601a      	str	r2, [r3, #0]
}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	200011f4 	.word	0x200011f4
 800b544:	20001280 	.word	0x20001280
 800b548:	20001294 	.word	0x20001294
 800b54c:	200012b0 	.word	0x200012b0
 800b550:	200012c4 	.word	0x200012c4
 800b554:	200012dc 	.word	0x200012dc
 800b558:	200012a8 	.word	0x200012a8
 800b55c:	200012ac 	.word	0x200012ac

0800b560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b566:	e019      	b.n	800b59c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b568:	f000 fa0c 	bl	800b984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56c:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <prvCheckTasksWaitingTermination+0x50>)
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff f9c6 	bl	800a90a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <prvCheckTasksWaitingTermination+0x54>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3b01      	subs	r3, #1
 800b584:	4a0b      	ldr	r2, [pc, #44]	; (800b5b4 <prvCheckTasksWaitingTermination+0x54>)
 800b586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b588:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <prvCheckTasksWaitingTermination+0x58>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <prvCheckTasksWaitingTermination+0x58>)
 800b590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b592:	f000 fa27 	bl	800b9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f810 	bl	800b5bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <prvCheckTasksWaitingTermination+0x58>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1e1      	bne.n	800b568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	200012c4 	.word	0x200012c4
 800b5b4:	200012f0 	.word	0x200012f0
 800b5b8:	200012d8 	.word	0x200012d8

0800b5bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	334c      	adds	r3, #76	; 0x4c
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f001 fb41 	bl	800cc50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d108      	bne.n	800b5ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fb7f 	bl	800bce0 <vPortFree>
				vPortFree( pxTCB );
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fb7c 	bl	800bce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5e8:	e018      	b.n	800b61c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d103      	bne.n	800b5fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fb73 	bl	800bce0 <vPortFree>
	}
 800b5fa:	e00f      	b.n	800b61c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b602:	2b02      	cmp	r3, #2
 800b604:	d00a      	beq.n	800b61c <prvDeleteTCB+0x60>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	60fb      	str	r3, [r7, #12]
}
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <prvDeleteTCB+0x5e>
	}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b62a:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <prvResetNextTaskUnblockTime+0x38>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d104      	bne.n	800b63e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b634:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <prvResetNextTaskUnblockTime+0x3c>)
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b63c:	e008      	b.n	800b650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63e:	4b07      	ldr	r3, [pc, #28]	; (800b65c <prvResetNextTaskUnblockTime+0x38>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	4a04      	ldr	r2, [pc, #16]	; (800b660 <prvResetNextTaskUnblockTime+0x3c>)
 800b64e:	6013      	str	r3, [r2, #0]
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	200012a8 	.word	0x200012a8
 800b660:	20001310 	.word	0x20001310

0800b664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b66e:	4b29      	ldr	r3, [pc, #164]	; (800b714 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b674:	4b28      	ldr	r3, [pc, #160]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3304      	adds	r3, #4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff f945 	bl	800a90a <uxListRemove>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10b      	bne.n	800b69e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68c:	2201      	movs	r2, #1
 800b68e:	fa02 f303 	lsl.w	r3, r2, r3
 800b692:	43da      	mvns	r2, r3
 800b694:	4b21      	ldr	r3, [pc, #132]	; (800b71c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4013      	ands	r3, r2
 800b69a:	4a20      	ldr	r2, [pc, #128]	; (800b71c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b69c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d10a      	bne.n	800b6bc <prvAddCurrentTaskToDelayedList+0x58>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ac:	4b1a      	ldr	r3, [pc, #104]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	481a      	ldr	r0, [pc, #104]	; (800b720 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b6b6:	f7ff f8cb 	bl	800a850 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6ba:	e026      	b.n	800b70a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6c4:	4b14      	ldr	r3, [pc, #80]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d209      	bcs.n	800b6e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f7ff f8d9 	bl	800a898 <vListInsert>
}
 800b6e6:	e010      	b.n	800b70a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e8:	4b0f      	ldr	r3, [pc, #60]	; (800b728 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	f7ff f8cf 	bl	800a898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6fa:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	429a      	cmp	r2, r3
 800b702:	d202      	bcs.n	800b70a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b704:	4a09      	ldr	r2, [pc, #36]	; (800b72c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6013      	str	r3, [r2, #0]
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	200012f4 	.word	0x200012f4
 800b718:	200011f0 	.word	0x200011f0
 800b71c:	200012f8 	.word	0x200012f8
 800b720:	200012dc 	.word	0x200012dc
 800b724:	200012ac 	.word	0x200012ac
 800b728:	200012a8 	.word	0x200012a8
 800b72c:	20001310 	.word	0x20001310

0800b730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3b04      	subs	r3, #4
 800b740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f023 0201 	bic.w	r2, r3, #1
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3b04      	subs	r3, #4
 800b75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b760:	4a0c      	ldr	r2, [pc, #48]	; (800b794 <pxPortInitialiseStack+0x64>)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3b14      	subs	r3, #20
 800b76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3b04      	subs	r3, #4
 800b776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f06f 0202 	mvn.w	r2, #2
 800b77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3b20      	subs	r3, #32
 800b784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b786:	68fb      	ldr	r3, [r7, #12]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	0800b799 	.word	0x0800b799

0800b798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7a2:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <prvTaskExitError+0x54>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7aa:	d00a      	beq.n	800b7c2 <prvTaskExitError+0x2a>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvTaskExitError+0x28>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	60bb      	str	r3, [r7, #8]
}
 800b7d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7d6:	bf00      	nop
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0fc      	beq.n	800b7d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	20000070 	.word	0x20000070

0800b7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <pxCurrentTCBConst2>)
 800b7f2:	6819      	ldr	r1, [r3, #0]
 800b7f4:	6808      	ldr	r0, [r1, #0]
 800b7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fa:	f380 8809 	msr	PSP, r0
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f04f 0000 	mov.w	r0, #0
 800b806:	f380 8811 	msr	BASEPRI, r0
 800b80a:	4770      	bx	lr
 800b80c:	f3af 8000 	nop.w

0800b810 <pxCurrentTCBConst2>:
 800b810:	200011f0 	.word	0x200011f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop

0800b818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b818:	4808      	ldr	r0, [pc, #32]	; (800b83c <prvPortStartFirstTask+0x24>)
 800b81a:	6800      	ldr	r0, [r0, #0]
 800b81c:	6800      	ldr	r0, [r0, #0]
 800b81e:	f380 8808 	msr	MSP, r0
 800b822:	f04f 0000 	mov.w	r0, #0
 800b826:	f380 8814 	msr	CONTROL, r0
 800b82a:	b662      	cpsie	i
 800b82c:	b661      	cpsie	f
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	df00      	svc	0
 800b838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b83a:	bf00      	nop
 800b83c:	e000ed08 	.word	0xe000ed08

0800b840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b846:	4b46      	ldr	r3, [pc, #280]	; (800b960 <xPortStartScheduler+0x120>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a46      	ldr	r2, [pc, #280]	; (800b964 <xPortStartScheduler+0x124>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d10a      	bne.n	800b866 <xPortStartScheduler+0x26>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b866:	4b3e      	ldr	r3, [pc, #248]	; (800b960 <xPortStartScheduler+0x120>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a3f      	ldr	r2, [pc, #252]	; (800b968 <xPortStartScheduler+0x128>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d10a      	bne.n	800b886 <xPortStartScheduler+0x46>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b886:	4b39      	ldr	r3, [pc, #228]	; (800b96c <xPortStartScheduler+0x12c>)
 800b888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b31      	ldr	r3, [pc, #196]	; (800b970 <xPortStartScheduler+0x130>)
 800b8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8ae:	4b31      	ldr	r3, [pc, #196]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8b4:	e009      	b.n	800b8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4a2d      	ldr	r2, [pc, #180]	; (800b974 <xPortStartScheduler+0x134>)
 800b8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d2:	2b80      	cmp	r3, #128	; 0x80
 800b8d4:	d0ef      	beq.n	800b8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8d6:	4b27      	ldr	r3, [pc, #156]	; (800b974 <xPortStartScheduler+0x134>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f1c3 0307 	rsb	r3, r3, #7
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d00a      	beq.n	800b8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	60bb      	str	r3, [r7, #8]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	; (800b974 <xPortStartScheduler+0x134>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <xPortStartScheduler+0x134>)
 800b900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b902:	4b1c      	ldr	r3, [pc, #112]	; (800b974 <xPortStartScheduler+0x134>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <xPortStartScheduler+0x134>)
 800b90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	b2da      	uxtb	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <xPortStartScheduler+0x138>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <xPortStartScheduler+0x138>)
 800b91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <xPortStartScheduler+0x138>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <xPortStartScheduler+0x138>)
 800b928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b92e:	f000 f8dd 	bl	800baec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b932:	4b12      	ldr	r3, [pc, #72]	; (800b97c <xPortStartScheduler+0x13c>)
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b938:	f000 f8fc 	bl	800bb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <xPortStartScheduler+0x140>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a0f      	ldr	r2, [pc, #60]	; (800b980 <xPortStartScheduler+0x140>)
 800b942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b948:	f7ff ff66 	bl	800b818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b94c:	f7ff fcec 	bl	800b328 <vTaskSwitchContext>
	prvTaskExitError();
 800b950:	f7ff ff22 	bl	800b798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	e000ed00 	.word	0xe000ed00
 800b964:	410fc271 	.word	0x410fc271
 800b968:	410fc270 	.word	0x410fc270
 800b96c:	e000e400 	.word	0xe000e400
 800b970:	2000131c 	.word	0x2000131c
 800b974:	20001320 	.word	0x20001320
 800b978:	e000ed20 	.word	0xe000ed20
 800b97c:	20000070 	.word	0x20000070
 800b980:	e000ef34 	.word	0xe000ef34

0800b984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	607b      	str	r3, [r7, #4]
}
 800b99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d10f      	bne.n	800b9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <vPortEnterCritical+0x5c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	603b      	str	r3, [r7, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <vPortEnterCritical+0x4a>
	}
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	20000070 	.word	0x20000070
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9ea:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <vPortExitCritical+0x50>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <vPortExitCritical+0x24>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	607b      	str	r3, [r7, #4]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <vPortExitCritical+0x50>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	4a09      	ldr	r2, [pc, #36]	; (800ba34 <vPortExitCritical+0x50>)
 800ba10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <vPortExitCritical+0x50>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d105      	bne.n	800ba26 <vPortExitCritical+0x42>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20000070 	.word	0x20000070
	...

0800ba40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba40:	f3ef 8009 	mrs	r0, PSP
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <pxCurrentTCBConst>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f01e 0f10 	tst.w	lr, #16
 800ba50:	bf08      	it	eq
 800ba52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	6010      	str	r0, [r2, #0]
 800ba5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba64:	f380 8811 	msr	BASEPRI, r0
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f7ff fc5a 	bl	800b328 <vTaskSwitchContext>
 800ba74:	f04f 0000 	mov.w	r0, #0
 800ba78:	f380 8811 	msr	BASEPRI, r0
 800ba7c:	bc09      	pop	{r0, r3}
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	6808      	ldr	r0, [r1, #0]
 800ba82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba86:	f01e 0f10 	tst.w	lr, #16
 800ba8a:	bf08      	it	eq
 800ba8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba90:	f380 8809 	msr	PSP, r0
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w

0800baa0 <pxCurrentTCBConst>:
 800baa0:	200011f0 	.word	0x200011f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bac2:	f7ff fb79 	bl	800b1b8 <xTaskIncrementTick>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <SysTick_Handler+0x40>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
}
 800bade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baf0:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baf6:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <vPortSetupTimerInterrupt+0x38>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <vPortSetupTimerInterrupt+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <vPortSetupTimerInterrupt+0x40>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	099b      	lsrs	r3, r3, #6
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <vPortSetupTimerInterrupt+0x44>)
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb0e:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	e000e010 	.word	0xe000e010
 800bb24:	e000e018 	.word	0xe000e018
 800bb28:	20000014 	.word	0x20000014
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	e000e014 	.word	0xe000e014

0800bb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb44 <vPortEnableVFP+0x10>
 800bb38:	6801      	ldr	r1, [r0, #0]
 800bb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb3e:	6001      	str	r1, [r0, #0]
 800bb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb42:	bf00      	nop
 800bb44:	e000ed88 	.word	0xe000ed88

0800bb48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb50:	2300      	movs	r3, #0
 800bb52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb54:	f7ff fa86 	bl	800b064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb58:	4b5b      	ldr	r3, [pc, #364]	; (800bcc8 <pvPortMalloc+0x180>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb60:	f000 f920 	bl	800bda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb64:	4b59      	ldr	r3, [pc, #356]	; (800bccc <pvPortMalloc+0x184>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f040 8093 	bne.w	800bc98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01d      	beq.n	800bbb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bb78:	2208      	movs	r2, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d014      	beq.n	800bbb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f023 0307 	bic.w	r3, r3, #7
 800bb90:	3308      	adds	r3, #8
 800bb92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	617b      	str	r3, [r7, #20]
}
 800bbb0:	bf00      	nop
 800bbb2:	e7fe      	b.n	800bbb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d06e      	beq.n	800bc98 <pvPortMalloc+0x150>
 800bbba:	4b45      	ldr	r3, [pc, #276]	; (800bcd0 <pvPortMalloc+0x188>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d869      	bhi.n	800bc98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbc4:	4b43      	ldr	r3, [pc, #268]	; (800bcd4 <pvPortMalloc+0x18c>)
 800bbc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbc8:	4b42      	ldr	r3, [pc, #264]	; (800bcd4 <pvPortMalloc+0x18c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbce:	e004      	b.n	800bbda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d903      	bls.n	800bbec <pvPortMalloc+0xa4>
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f1      	bne.n	800bbd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbec:	4b36      	ldr	r3, [pc, #216]	; (800bcc8 <pvPortMalloc+0x180>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d050      	beq.n	800bc98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2208      	movs	r2, #8
 800bbfc:	4413      	add	r3, r2
 800bbfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	2308      	movs	r3, #8
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d91f      	bls.n	800bc58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <pvPortMalloc+0xf8>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	613b      	str	r3, [r7, #16]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc52:	69b8      	ldr	r0, [r7, #24]
 800bc54:	f000 f908 	bl	800be68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc58:	4b1d      	ldr	r3, [pc, #116]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	4a1b      	ldr	r2, [pc, #108]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc66:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <pvPortMalloc+0x190>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d203      	bcs.n	800bc7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc72:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a18      	ldr	r2, [pc, #96]	; (800bcd8 <pvPortMalloc+0x190>)
 800bc78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	4b13      	ldr	r3, [pc, #76]	; (800bccc <pvPortMalloc+0x184>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	431a      	orrs	r2, r3
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc8e:	4b13      	ldr	r3, [pc, #76]	; (800bcdc <pvPortMalloc+0x194>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a11      	ldr	r2, [pc, #68]	; (800bcdc <pvPortMalloc+0x194>)
 800bc96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc98:	f7ff f9f2 	bl	800b080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <pvPortMalloc+0x174>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <pvPortMalloc+0x172>
	return pvReturn;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3728      	adds	r7, #40	; 0x28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20004f2c 	.word	0x20004f2c
 800bccc:	20004f40 	.word	0x20004f40
 800bcd0:	20004f30 	.word	0x20004f30
 800bcd4:	20004f24 	.word	0x20004f24
 800bcd8:	20004f34 	.word	0x20004f34
 800bcdc:	20004f38 	.word	0x20004f38

0800bce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d04d      	beq.n	800bd8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcf2:	2308      	movs	r3, #8
 800bcf4:	425b      	negs	r3, r3
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	4b24      	ldr	r3, [pc, #144]	; (800bd98 <vPortFree+0xb8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <vPortFree+0x44>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00a      	beq.n	800bd42 <vPortFree+0x62>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60bb      	str	r3, [r7, #8]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <vPortFree+0xb8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01e      	beq.n	800bd8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11a      	bne.n	800bd8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <vPortFree+0xb8>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	43db      	mvns	r3, r3
 800bd62:	401a      	ands	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd68:	f7ff f97c 	bl	800b064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	4b0a      	ldr	r3, [pc, #40]	; (800bd9c <vPortFree+0xbc>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <vPortFree+0xbc>)
 800bd78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd7a:	6938      	ldr	r0, [r7, #16]
 800bd7c:	f000 f874 	bl	800be68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd80:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <vPortFree+0xc0>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3301      	adds	r3, #1
 800bd86:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <vPortFree+0xc0>)
 800bd88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd8a:	f7ff f979 	bl	800b080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd8e:	bf00      	nop
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20004f40 	.word	0x20004f40
 800bd9c:	20004f30 	.word	0x20004f30
 800bda0:	20004f3c 	.word	0x20004f3c

0800bda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bdae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdb0:	4b27      	ldr	r3, [pc, #156]	; (800be50 <prvHeapInit+0xac>)
 800bdb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f003 0307 	and.w	r3, r3, #7
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00c      	beq.n	800bdd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	4a1f      	ldr	r2, [pc, #124]	; (800be50 <prvHeapInit+0xac>)
 800bdd4:	4413      	add	r3, r2
 800bdd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bddc:	4a1d      	ldr	r2, [pc, #116]	; (800be54 <prvHeapInit+0xb0>)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bde2:	4b1c      	ldr	r3, [pc, #112]	; (800be54 <prvHeapInit+0xb0>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	4413      	add	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1a9b      	subs	r3, r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4a15      	ldr	r2, [pc, #84]	; (800be58 <prvHeapInit+0xb4>)
 800be04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be06:	4b14      	ldr	r3, [pc, #80]	; (800be58 <prvHeapInit+0xb4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2200      	movs	r2, #0
 800be0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be0e:	4b12      	ldr	r3, [pc, #72]	; (800be58 <prvHeapInit+0xb4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be24:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <prvHeapInit+0xb4>)
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	4a0a      	ldr	r2, [pc, #40]	; (800be5c <prvHeapInit+0xb8>)
 800be32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	4a09      	ldr	r2, [pc, #36]	; (800be60 <prvHeapInit+0xbc>)
 800be3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be3c:	4b09      	ldr	r3, [pc, #36]	; (800be64 <prvHeapInit+0xc0>)
 800be3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be42:	601a      	str	r2, [r3, #0]
}
 800be44:	bf00      	nop
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	20001324 	.word	0x20001324
 800be54:	20004f24 	.word	0x20004f24
 800be58:	20004f2c 	.word	0x20004f2c
 800be5c:	20004f34 	.word	0x20004f34
 800be60:	20004f30 	.word	0x20004f30
 800be64:	20004f40 	.word	0x20004f40

0800be68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be70:	4b28      	ldr	r3, [pc, #160]	; (800bf14 <prvInsertBlockIntoFreeList+0xac>)
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	e002      	b.n	800be7c <prvInsertBlockIntoFreeList+0x14>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	d8f7      	bhi.n	800be76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4413      	add	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d108      	bne.n	800beaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	441a      	add	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	441a      	add	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d118      	bne.n	800bef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <prvInsertBlockIntoFreeList+0xb0>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d00d      	beq.n	800bee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	441a      	add	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	e008      	b.n	800bef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <prvInsertBlockIntoFreeList+0xb0>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	e003      	b.n	800bef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	429a      	cmp	r2, r3
 800befe:	d002      	beq.n	800bf06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf06:	bf00      	nop
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20004f24 	.word	0x20004f24
 800bf18:	20004f2c 	.word	0x20004f2c

0800bf1c <__errno>:
 800bf1c:	4b01      	ldr	r3, [pc, #4]	; (800bf24 <__errno+0x8>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20000074 	.word	0x20000074

0800bf28 <std>:
 800bf28:	2300      	movs	r3, #0
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf36:	6083      	str	r3, [r0, #8]
 800bf38:	8181      	strh	r1, [r0, #12]
 800bf3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf3c:	81c2      	strh	r2, [r0, #14]
 800bf3e:	6183      	str	r3, [r0, #24]
 800bf40:	4619      	mov	r1, r3
 800bf42:	2208      	movs	r2, #8
 800bf44:	305c      	adds	r0, #92	; 0x5c
 800bf46:	f000 f923 	bl	800c190 <memset>
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <std+0x38>)
 800bf4c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf4e:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <std+0x3c>)
 800bf50:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <std+0x40>)
 800bf54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <std+0x44>)
 800bf58:	6224      	str	r4, [r4, #32]
 800bf5a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800cd69 	.word	0x0800cd69
 800bf64:	0800cd8b 	.word	0x0800cd8b
 800bf68:	0800cdc3 	.word	0x0800cdc3
 800bf6c:	0800cde7 	.word	0x0800cde7

0800bf70 <_cleanup_r>:
 800bf70:	4901      	ldr	r1, [pc, #4]	; (800bf78 <_cleanup_r+0x8>)
 800bf72:	f000 b8af 	b.w	800c0d4 <_fwalk_reent>
 800bf76:	bf00      	nop
 800bf78:	0800dd09 	.word	0x0800dd09

0800bf7c <__sfmoreglue>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	2268      	movs	r2, #104	; 0x68
 800bf80:	1e4d      	subs	r5, r1, #1
 800bf82:	4355      	muls	r5, r2
 800bf84:	460e      	mov	r6, r1
 800bf86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf8a:	f000 f975 	bl	800c278 <_malloc_r>
 800bf8e:	4604      	mov	r4, r0
 800bf90:	b140      	cbz	r0, 800bfa4 <__sfmoreglue+0x28>
 800bf92:	2100      	movs	r1, #0
 800bf94:	e9c0 1600 	strd	r1, r6, [r0]
 800bf98:	300c      	adds	r0, #12
 800bf9a:	60a0      	str	r0, [r4, #8]
 800bf9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfa0:	f000 f8f6 	bl	800c190 <memset>
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}

0800bfa8 <__sfp_lock_acquire>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__sfp_lock_acquire+0x8>)
 800bfaa:	f000 b8d8 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20004f45 	.word	0x20004f45

0800bfb4 <__sfp_lock_release>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__sfp_lock_release+0x8>)
 800bfb6:	f000 b8d3 	b.w	800c160 <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20004f45 	.word	0x20004f45

0800bfc0 <__sinit_lock_acquire>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__sinit_lock_acquire+0x8>)
 800bfc2:	f000 b8cc 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	20004f46 	.word	0x20004f46

0800bfcc <__sinit_lock_release>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	; (800bfd4 <__sinit_lock_release+0x8>)
 800bfce:	f000 b8c7 	b.w	800c160 <__retarget_lock_release_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	20004f46 	.word	0x20004f46

0800bfd8 <__sinit>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	f7ff fff0 	bl	800bfc0 <__sinit_lock_acquire>
 800bfe0:	69a3      	ldr	r3, [r4, #24]
 800bfe2:	b11b      	cbz	r3, 800bfec <__sinit+0x14>
 800bfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe8:	f7ff bff0 	b.w	800bfcc <__sinit_lock_release>
 800bfec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bff0:	6523      	str	r3, [r4, #80]	; 0x50
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <__sinit+0x68>)
 800bff4:	4a13      	ldr	r2, [pc, #76]	; (800c044 <__sinit+0x6c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	bf04      	itt	eq
 800bffe:	2301      	moveq	r3, #1
 800c000:	61a3      	streq	r3, [r4, #24]
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f820 	bl	800c048 <__sfp>
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 f81c 	bl	800c048 <__sfp>
 800c010:	60a0      	str	r0, [r4, #8]
 800c012:	4620      	mov	r0, r4
 800c014:	f000 f818 	bl	800c048 <__sfp>
 800c018:	2200      	movs	r2, #0
 800c01a:	60e0      	str	r0, [r4, #12]
 800c01c:	2104      	movs	r1, #4
 800c01e:	6860      	ldr	r0, [r4, #4]
 800c020:	f7ff ff82 	bl	800bf28 <std>
 800c024:	68a0      	ldr	r0, [r4, #8]
 800c026:	2201      	movs	r2, #1
 800c028:	2109      	movs	r1, #9
 800c02a:	f7ff ff7d 	bl	800bf28 <std>
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	2202      	movs	r2, #2
 800c032:	2112      	movs	r1, #18
 800c034:	f7ff ff78 	bl	800bf28 <std>
 800c038:	2301      	movs	r3, #1
 800c03a:	61a3      	str	r3, [r4, #24]
 800c03c:	e7d2      	b.n	800bfe4 <__sinit+0xc>
 800c03e:	bf00      	nop
 800c040:	08010208 	.word	0x08010208
 800c044:	0800bf71 	.word	0x0800bf71

0800c048 <__sfp>:
 800c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04a:	4607      	mov	r7, r0
 800c04c:	f7ff ffac 	bl	800bfa8 <__sfp_lock_acquire>
 800c050:	4b1e      	ldr	r3, [pc, #120]	; (800c0cc <__sfp+0x84>)
 800c052:	681e      	ldr	r6, [r3, #0]
 800c054:	69b3      	ldr	r3, [r6, #24]
 800c056:	b913      	cbnz	r3, 800c05e <__sfp+0x16>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ffbd 	bl	800bfd8 <__sinit>
 800c05e:	3648      	adds	r6, #72	; 0x48
 800c060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c064:	3b01      	subs	r3, #1
 800c066:	d503      	bpl.n	800c070 <__sfp+0x28>
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	b30b      	cbz	r3, 800c0b0 <__sfp+0x68>
 800c06c:	6836      	ldr	r6, [r6, #0]
 800c06e:	e7f7      	b.n	800c060 <__sfp+0x18>
 800c070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c074:	b9d5      	cbnz	r5, 800c0ac <__sfp+0x64>
 800c076:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <__sfp+0x88>)
 800c078:	60e3      	str	r3, [r4, #12]
 800c07a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c07e:	6665      	str	r5, [r4, #100]	; 0x64
 800c080:	f000 f86c 	bl	800c15c <__retarget_lock_init_recursive>
 800c084:	f7ff ff96 	bl	800bfb4 <__sfp_lock_release>
 800c088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c08c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c090:	6025      	str	r5, [r4, #0]
 800c092:	61a5      	str	r5, [r4, #24]
 800c094:	2208      	movs	r2, #8
 800c096:	4629      	mov	r1, r5
 800c098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c09c:	f000 f878 	bl	800c190 <memset>
 800c0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	3468      	adds	r4, #104	; 0x68
 800c0ae:	e7d9      	b.n	800c064 <__sfp+0x1c>
 800c0b0:	2104      	movs	r1, #4
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ff62 	bl	800bf7c <__sfmoreglue>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	6030      	str	r0, [r6, #0]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1d5      	bne.n	800c06c <__sfp+0x24>
 800c0c0:	f7ff ff78 	bl	800bfb4 <__sfp_lock_release>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	e7ee      	b.n	800c0a8 <__sfp+0x60>
 800c0ca:	bf00      	nop
 800c0cc:	08010208 	.word	0x08010208
 800c0d0:	ffff0001 	.word	0xffff0001

0800c0d4 <_fwalk_reent>:
 800c0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4606      	mov	r6, r0
 800c0da:	4688      	mov	r8, r1
 800c0dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0e0:	2700      	movs	r7, #0
 800c0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ea:	d505      	bpl.n	800c0f8 <_fwalk_reent+0x24>
 800c0ec:	6824      	ldr	r4, [r4, #0]
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	d1f7      	bne.n	800c0e2 <_fwalk_reent+0xe>
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f8:	89ab      	ldrh	r3, [r5, #12]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d907      	bls.n	800c10e <_fwalk_reent+0x3a>
 800c0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c102:	3301      	adds	r3, #1
 800c104:	d003      	beq.n	800c10e <_fwalk_reent+0x3a>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	47c0      	blx	r8
 800c10c:	4307      	orrs	r7, r0
 800c10e:	3568      	adds	r5, #104	; 0x68
 800c110:	e7e9      	b.n	800c0e6 <_fwalk_reent+0x12>
	...

0800c114 <__libc_init_array>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	4d0d      	ldr	r5, [pc, #52]	; (800c14c <__libc_init_array+0x38>)
 800c118:	4c0d      	ldr	r4, [pc, #52]	; (800c150 <__libc_init_array+0x3c>)
 800c11a:	1b64      	subs	r4, r4, r5
 800c11c:	10a4      	asrs	r4, r4, #2
 800c11e:	2600      	movs	r6, #0
 800c120:	42a6      	cmp	r6, r4
 800c122:	d109      	bne.n	800c138 <__libc_init_array+0x24>
 800c124:	4d0b      	ldr	r5, [pc, #44]	; (800c154 <__libc_init_array+0x40>)
 800c126:	4c0c      	ldr	r4, [pc, #48]	; (800c158 <__libc_init_array+0x44>)
 800c128:	f003 f9c2 	bl	800f4b0 <_init>
 800c12c:	1b64      	subs	r4, r4, r5
 800c12e:	10a4      	asrs	r4, r4, #2
 800c130:	2600      	movs	r6, #0
 800c132:	42a6      	cmp	r6, r4
 800c134:	d105      	bne.n	800c142 <__libc_init_array+0x2e>
 800c136:	bd70      	pop	{r4, r5, r6, pc}
 800c138:	f855 3b04 	ldr.w	r3, [r5], #4
 800c13c:	4798      	blx	r3
 800c13e:	3601      	adds	r6, #1
 800c140:	e7ee      	b.n	800c120 <__libc_init_array+0xc>
 800c142:	f855 3b04 	ldr.w	r3, [r5], #4
 800c146:	4798      	blx	r3
 800c148:	3601      	adds	r6, #1
 800c14a:	e7f2      	b.n	800c132 <__libc_init_array+0x1e>
 800c14c:	0801058c 	.word	0x0801058c
 800c150:	0801058c 	.word	0x0801058c
 800c154:	0801058c 	.word	0x0801058c
 800c158:	08010590 	.word	0x08010590

0800c15c <__retarget_lock_init_recursive>:
 800c15c:	4770      	bx	lr

0800c15e <__retarget_lock_acquire_recursive>:
 800c15e:	4770      	bx	lr

0800c160 <__retarget_lock_release_recursive>:
 800c160:	4770      	bx	lr
	...

0800c164 <malloc>:
 800c164:	4b02      	ldr	r3, [pc, #8]	; (800c170 <malloc+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f000 b885 	b.w	800c278 <_malloc_r>
 800c16e:	bf00      	nop
 800c170:	20000074 	.word	0x20000074

0800c174 <memcpy>:
 800c174:	440a      	add	r2, r1
 800c176:	4291      	cmp	r1, r2
 800c178:	f100 33ff 	add.w	r3, r0, #4294967295
 800c17c:	d100      	bne.n	800c180 <memcpy+0xc>
 800c17e:	4770      	bx	lr
 800c180:	b510      	push	{r4, lr}
 800c182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c18a:	4291      	cmp	r1, r2
 800c18c:	d1f9      	bne.n	800c182 <memcpy+0xe>
 800c18e:	bd10      	pop	{r4, pc}

0800c190 <memset>:
 800c190:	4402      	add	r2, r0
 800c192:	4603      	mov	r3, r0
 800c194:	4293      	cmp	r3, r2
 800c196:	d100      	bne.n	800c19a <memset+0xa>
 800c198:	4770      	bx	lr
 800c19a:	f803 1b01 	strb.w	r1, [r3], #1
 800c19e:	e7f9      	b.n	800c194 <memset+0x4>

0800c1a0 <_free_r>:
 800c1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1a2:	2900      	cmp	r1, #0
 800c1a4:	d044      	beq.n	800c230 <_free_r+0x90>
 800c1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1aa:	9001      	str	r0, [sp, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c1b2:	bfb8      	it	lt
 800c1b4:	18e4      	addlt	r4, r4, r3
 800c1b6:	f001 fdf9 	bl	800ddac <__malloc_lock>
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	; (800c234 <_free_r+0x94>)
 800c1bc:	9801      	ldr	r0, [sp, #4]
 800c1be:	6813      	ldr	r3, [r2, #0]
 800c1c0:	b933      	cbnz	r3, 800c1d0 <_free_r+0x30>
 800c1c2:	6063      	str	r3, [r4, #4]
 800c1c4:	6014      	str	r4, [r2, #0]
 800c1c6:	b003      	add	sp, #12
 800c1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1cc:	f001 bdf4 	b.w	800ddb8 <__malloc_unlock>
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d908      	bls.n	800c1e6 <_free_r+0x46>
 800c1d4:	6825      	ldr	r5, [r4, #0]
 800c1d6:	1961      	adds	r1, r4, r5
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf01      	itttt	eq
 800c1dc:	6819      	ldreq	r1, [r3, #0]
 800c1de:	685b      	ldreq	r3, [r3, #4]
 800c1e0:	1949      	addeq	r1, r1, r5
 800c1e2:	6021      	streq	r1, [r4, #0]
 800c1e4:	e7ed      	b.n	800c1c2 <_free_r+0x22>
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b10b      	cbz	r3, 800c1f0 <_free_r+0x50>
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	d9fa      	bls.n	800c1e6 <_free_r+0x46>
 800c1f0:	6811      	ldr	r1, [r2, #0]
 800c1f2:	1855      	adds	r5, r2, r1
 800c1f4:	42a5      	cmp	r5, r4
 800c1f6:	d10b      	bne.n	800c210 <_free_r+0x70>
 800c1f8:	6824      	ldr	r4, [r4, #0]
 800c1fa:	4421      	add	r1, r4
 800c1fc:	1854      	adds	r4, r2, r1
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	6011      	str	r1, [r2, #0]
 800c202:	d1e0      	bne.n	800c1c6 <_free_r+0x26>
 800c204:	681c      	ldr	r4, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	6053      	str	r3, [r2, #4]
 800c20a:	4421      	add	r1, r4
 800c20c:	6011      	str	r1, [r2, #0]
 800c20e:	e7da      	b.n	800c1c6 <_free_r+0x26>
 800c210:	d902      	bls.n	800c218 <_free_r+0x78>
 800c212:	230c      	movs	r3, #12
 800c214:	6003      	str	r3, [r0, #0]
 800c216:	e7d6      	b.n	800c1c6 <_free_r+0x26>
 800c218:	6825      	ldr	r5, [r4, #0]
 800c21a:	1961      	adds	r1, r4, r5
 800c21c:	428b      	cmp	r3, r1
 800c21e:	bf04      	itt	eq
 800c220:	6819      	ldreq	r1, [r3, #0]
 800c222:	685b      	ldreq	r3, [r3, #4]
 800c224:	6063      	str	r3, [r4, #4]
 800c226:	bf04      	itt	eq
 800c228:	1949      	addeq	r1, r1, r5
 800c22a:	6021      	streq	r1, [r4, #0]
 800c22c:	6054      	str	r4, [r2, #4]
 800c22e:	e7ca      	b.n	800c1c6 <_free_r+0x26>
 800c230:	b003      	add	sp, #12
 800c232:	bd30      	pop	{r4, r5, pc}
 800c234:	20004f48 	.word	0x20004f48

0800c238 <sbrk_aligned>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	4e0e      	ldr	r6, [pc, #56]	; (800c274 <sbrk_aligned+0x3c>)
 800c23c:	460c      	mov	r4, r1
 800c23e:	6831      	ldr	r1, [r6, #0]
 800c240:	4605      	mov	r5, r0
 800c242:	b911      	cbnz	r1, 800c24a <sbrk_aligned+0x12>
 800c244:	f000 fd60 	bl	800cd08 <_sbrk_r>
 800c248:	6030      	str	r0, [r6, #0]
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 fd5b 	bl	800cd08 <_sbrk_r>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	d00a      	beq.n	800c26c <sbrk_aligned+0x34>
 800c256:	1cc4      	adds	r4, r0, #3
 800c258:	f024 0403 	bic.w	r4, r4, #3
 800c25c:	42a0      	cmp	r0, r4
 800c25e:	d007      	beq.n	800c270 <sbrk_aligned+0x38>
 800c260:	1a21      	subs	r1, r4, r0
 800c262:	4628      	mov	r0, r5
 800c264:	f000 fd50 	bl	800cd08 <_sbrk_r>
 800c268:	3001      	adds	r0, #1
 800c26a:	d101      	bne.n	800c270 <sbrk_aligned+0x38>
 800c26c:	f04f 34ff 	mov.w	r4, #4294967295
 800c270:	4620      	mov	r0, r4
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	20004f4c 	.word	0x20004f4c

0800c278 <_malloc_r>:
 800c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27c:	1ccd      	adds	r5, r1, #3
 800c27e:	f025 0503 	bic.w	r5, r5, #3
 800c282:	3508      	adds	r5, #8
 800c284:	2d0c      	cmp	r5, #12
 800c286:	bf38      	it	cc
 800c288:	250c      	movcc	r5, #12
 800c28a:	2d00      	cmp	r5, #0
 800c28c:	4607      	mov	r7, r0
 800c28e:	db01      	blt.n	800c294 <_malloc_r+0x1c>
 800c290:	42a9      	cmp	r1, r5
 800c292:	d905      	bls.n	800c2a0 <_malloc_r+0x28>
 800c294:	230c      	movs	r3, #12
 800c296:	603b      	str	r3, [r7, #0]
 800c298:	2600      	movs	r6, #0
 800c29a:	4630      	mov	r0, r6
 800c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a0:	4e2e      	ldr	r6, [pc, #184]	; (800c35c <_malloc_r+0xe4>)
 800c2a2:	f001 fd83 	bl	800ddac <__malloc_lock>
 800c2a6:	6833      	ldr	r3, [r6, #0]
 800c2a8:	461c      	mov	r4, r3
 800c2aa:	bb34      	cbnz	r4, 800c2fa <_malloc_r+0x82>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7ff ffc2 	bl	800c238 <sbrk_aligned>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	d14d      	bne.n	800c356 <_malloc_r+0xde>
 800c2ba:	6834      	ldr	r4, [r6, #0]
 800c2bc:	4626      	mov	r6, r4
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	d140      	bne.n	800c344 <_malloc_r+0xcc>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	eb04 0803 	add.w	r8, r4, r3
 800c2cc:	f000 fd1c 	bl	800cd08 <_sbrk_r>
 800c2d0:	4580      	cmp	r8, r0
 800c2d2:	d13a      	bne.n	800c34a <_malloc_r+0xd2>
 800c2d4:	6821      	ldr	r1, [r4, #0]
 800c2d6:	3503      	adds	r5, #3
 800c2d8:	1a6d      	subs	r5, r5, r1
 800c2da:	f025 0503 	bic.w	r5, r5, #3
 800c2de:	3508      	adds	r5, #8
 800c2e0:	2d0c      	cmp	r5, #12
 800c2e2:	bf38      	it	cc
 800c2e4:	250c      	movcc	r5, #12
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff ffa5 	bl	800c238 <sbrk_aligned>
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d02b      	beq.n	800c34a <_malloc_r+0xd2>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	442b      	add	r3, r5
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	e00e      	b.n	800c318 <_malloc_r+0xa0>
 800c2fa:	6822      	ldr	r2, [r4, #0]
 800c2fc:	1b52      	subs	r2, r2, r5
 800c2fe:	d41e      	bmi.n	800c33e <_malloc_r+0xc6>
 800c300:	2a0b      	cmp	r2, #11
 800c302:	d916      	bls.n	800c332 <_malloc_r+0xba>
 800c304:	1961      	adds	r1, r4, r5
 800c306:	42a3      	cmp	r3, r4
 800c308:	6025      	str	r5, [r4, #0]
 800c30a:	bf18      	it	ne
 800c30c:	6059      	strne	r1, [r3, #4]
 800c30e:	6863      	ldr	r3, [r4, #4]
 800c310:	bf08      	it	eq
 800c312:	6031      	streq	r1, [r6, #0]
 800c314:	5162      	str	r2, [r4, r5]
 800c316:	604b      	str	r3, [r1, #4]
 800c318:	4638      	mov	r0, r7
 800c31a:	f104 060b 	add.w	r6, r4, #11
 800c31e:	f001 fd4b 	bl	800ddb8 <__malloc_unlock>
 800c322:	f026 0607 	bic.w	r6, r6, #7
 800c326:	1d23      	adds	r3, r4, #4
 800c328:	1af2      	subs	r2, r6, r3
 800c32a:	d0b6      	beq.n	800c29a <_malloc_r+0x22>
 800c32c:	1b9b      	subs	r3, r3, r6
 800c32e:	50a3      	str	r3, [r4, r2]
 800c330:	e7b3      	b.n	800c29a <_malloc_r+0x22>
 800c332:	6862      	ldr	r2, [r4, #4]
 800c334:	42a3      	cmp	r3, r4
 800c336:	bf0c      	ite	eq
 800c338:	6032      	streq	r2, [r6, #0]
 800c33a:	605a      	strne	r2, [r3, #4]
 800c33c:	e7ec      	b.n	800c318 <_malloc_r+0xa0>
 800c33e:	4623      	mov	r3, r4
 800c340:	6864      	ldr	r4, [r4, #4]
 800c342:	e7b2      	b.n	800c2aa <_malloc_r+0x32>
 800c344:	4634      	mov	r4, r6
 800c346:	6876      	ldr	r6, [r6, #4]
 800c348:	e7b9      	b.n	800c2be <_malloc_r+0x46>
 800c34a:	230c      	movs	r3, #12
 800c34c:	603b      	str	r3, [r7, #0]
 800c34e:	4638      	mov	r0, r7
 800c350:	f001 fd32 	bl	800ddb8 <__malloc_unlock>
 800c354:	e7a1      	b.n	800c29a <_malloc_r+0x22>
 800c356:	6025      	str	r5, [r4, #0]
 800c358:	e7de      	b.n	800c318 <_malloc_r+0xa0>
 800c35a:	bf00      	nop
 800c35c:	20004f48 	.word	0x20004f48

0800c360 <__cvt>:
 800c360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	ec55 4b10 	vmov	r4, r5, d0
 800c368:	2d00      	cmp	r5, #0
 800c36a:	460e      	mov	r6, r1
 800c36c:	4619      	mov	r1, r3
 800c36e:	462b      	mov	r3, r5
 800c370:	bfbb      	ittet	lt
 800c372:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c376:	461d      	movlt	r5, r3
 800c378:	2300      	movge	r3, #0
 800c37a:	232d      	movlt	r3, #45	; 0x2d
 800c37c:	700b      	strb	r3, [r1, #0]
 800c37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c380:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c384:	4691      	mov	r9, r2
 800c386:	f023 0820 	bic.w	r8, r3, #32
 800c38a:	bfbc      	itt	lt
 800c38c:	4622      	movlt	r2, r4
 800c38e:	4614      	movlt	r4, r2
 800c390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c394:	d005      	beq.n	800c3a2 <__cvt+0x42>
 800c396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c39a:	d100      	bne.n	800c39e <__cvt+0x3e>
 800c39c:	3601      	adds	r6, #1
 800c39e:	2102      	movs	r1, #2
 800c3a0:	e000      	b.n	800c3a4 <__cvt+0x44>
 800c3a2:	2103      	movs	r1, #3
 800c3a4:	ab03      	add	r3, sp, #12
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	ab02      	add	r3, sp, #8
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	ec45 4b10 	vmov	d0, r4, r5
 800c3b0:	4653      	mov	r3, sl
 800c3b2:	4632      	mov	r2, r6
 800c3b4:	f000 fe34 	bl	800d020 <_dtoa_r>
 800c3b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c3bc:	4607      	mov	r7, r0
 800c3be:	d102      	bne.n	800c3c6 <__cvt+0x66>
 800c3c0:	f019 0f01 	tst.w	r9, #1
 800c3c4:	d022      	beq.n	800c40c <__cvt+0xac>
 800c3c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3ca:	eb07 0906 	add.w	r9, r7, r6
 800c3ce:	d110      	bne.n	800c3f2 <__cvt+0x92>
 800c3d0:	783b      	ldrb	r3, [r7, #0]
 800c3d2:	2b30      	cmp	r3, #48	; 0x30
 800c3d4:	d10a      	bne.n	800c3ec <__cvt+0x8c>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f7f4 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3e2:	b918      	cbnz	r0, 800c3ec <__cvt+0x8c>
 800c3e4:	f1c6 0601 	rsb	r6, r6, #1
 800c3e8:	f8ca 6000 	str.w	r6, [sl]
 800c3ec:	f8da 3000 	ldr.w	r3, [sl]
 800c3f0:	4499      	add	r9, r3
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7f4 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3fe:	b108      	cbz	r0, 800c404 <__cvt+0xa4>
 800c400:	f8cd 900c 	str.w	r9, [sp, #12]
 800c404:	2230      	movs	r2, #48	; 0x30
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	454b      	cmp	r3, r9
 800c40a:	d307      	bcc.n	800c41c <__cvt+0xbc>
 800c40c:	9b03      	ldr	r3, [sp, #12]
 800c40e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c410:	1bdb      	subs	r3, r3, r7
 800c412:	4638      	mov	r0, r7
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	b004      	add	sp, #16
 800c418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41c:	1c59      	adds	r1, r3, #1
 800c41e:	9103      	str	r1, [sp, #12]
 800c420:	701a      	strb	r2, [r3, #0]
 800c422:	e7f0      	b.n	800c406 <__cvt+0xa6>

0800c424 <__exponent>:
 800c424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c426:	4603      	mov	r3, r0
 800c428:	2900      	cmp	r1, #0
 800c42a:	bfb8      	it	lt
 800c42c:	4249      	neglt	r1, r1
 800c42e:	f803 2b02 	strb.w	r2, [r3], #2
 800c432:	bfb4      	ite	lt
 800c434:	222d      	movlt	r2, #45	; 0x2d
 800c436:	222b      	movge	r2, #43	; 0x2b
 800c438:	2909      	cmp	r1, #9
 800c43a:	7042      	strb	r2, [r0, #1]
 800c43c:	dd2a      	ble.n	800c494 <__exponent+0x70>
 800c43e:	f10d 0407 	add.w	r4, sp, #7
 800c442:	46a4      	mov	ip, r4
 800c444:	270a      	movs	r7, #10
 800c446:	46a6      	mov	lr, r4
 800c448:	460a      	mov	r2, r1
 800c44a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c44e:	fb07 1516 	mls	r5, r7, r6, r1
 800c452:	3530      	adds	r5, #48	; 0x30
 800c454:	2a63      	cmp	r2, #99	; 0x63
 800c456:	f104 34ff 	add.w	r4, r4, #4294967295
 800c45a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c45e:	4631      	mov	r1, r6
 800c460:	dcf1      	bgt.n	800c446 <__exponent+0x22>
 800c462:	3130      	adds	r1, #48	; 0x30
 800c464:	f1ae 0502 	sub.w	r5, lr, #2
 800c468:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c46c:	1c44      	adds	r4, r0, #1
 800c46e:	4629      	mov	r1, r5
 800c470:	4561      	cmp	r1, ip
 800c472:	d30a      	bcc.n	800c48a <__exponent+0x66>
 800c474:	f10d 0209 	add.w	r2, sp, #9
 800c478:	eba2 020e 	sub.w	r2, r2, lr
 800c47c:	4565      	cmp	r5, ip
 800c47e:	bf88      	it	hi
 800c480:	2200      	movhi	r2, #0
 800c482:	4413      	add	r3, r2
 800c484:	1a18      	subs	r0, r3, r0
 800c486:	b003      	add	sp, #12
 800c488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c48e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c492:	e7ed      	b.n	800c470 <__exponent+0x4c>
 800c494:	2330      	movs	r3, #48	; 0x30
 800c496:	3130      	adds	r1, #48	; 0x30
 800c498:	7083      	strb	r3, [r0, #2]
 800c49a:	70c1      	strb	r1, [r0, #3]
 800c49c:	1d03      	adds	r3, r0, #4
 800c49e:	e7f1      	b.n	800c484 <__exponent+0x60>

0800c4a0 <_printf_float>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	ed2d 8b02 	vpush	{d8}
 800c4a8:	b08d      	sub	sp, #52	; 0x34
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c4b0:	4616      	mov	r6, r2
 800c4b2:	461f      	mov	r7, r3
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	f001 fc63 	bl	800dd80 <_localeconv_r>
 800c4ba:	f8d0 a000 	ldr.w	sl, [r0]
 800c4be:	4650      	mov	r0, sl
 800c4c0:	f7f3 fe8e 	bl	80001e0 <strlen>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c4d4:	3307      	adds	r3, #7
 800c4d6:	f023 0307 	bic.w	r3, r3, #7
 800c4da:	f103 0208 	add.w	r2, r3, #8
 800c4de:	f8c8 2000 	str.w	r2, [r8]
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c4ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4f2:	9307      	str	r3, [sp, #28]
 800c4f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4f8:	ee08 0a10 	vmov	s16, r0
 800c4fc:	4b9f      	ldr	r3, [pc, #636]	; (800c77c <_printf_float+0x2dc>)
 800c4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
 800c506:	f7f4 fb19 	bl	8000b3c <__aeabi_dcmpun>
 800c50a:	bb88      	cbnz	r0, 800c570 <_printf_float+0xd0>
 800c50c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c510:	4b9a      	ldr	r3, [pc, #616]	; (800c77c <_printf_float+0x2dc>)
 800c512:	f04f 32ff 	mov.w	r2, #4294967295
 800c516:	f7f4 faf3 	bl	8000b00 <__aeabi_dcmple>
 800c51a:	bb48      	cbnz	r0, 800c570 <_printf_float+0xd0>
 800c51c:	2200      	movs	r2, #0
 800c51e:	2300      	movs	r3, #0
 800c520:	4640      	mov	r0, r8
 800c522:	4649      	mov	r1, r9
 800c524:	f7f4 fae2 	bl	8000aec <__aeabi_dcmplt>
 800c528:	b110      	cbz	r0, 800c530 <_printf_float+0x90>
 800c52a:	232d      	movs	r3, #45	; 0x2d
 800c52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c530:	4b93      	ldr	r3, [pc, #588]	; (800c780 <_printf_float+0x2e0>)
 800c532:	4894      	ldr	r0, [pc, #592]	; (800c784 <_printf_float+0x2e4>)
 800c534:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c538:	bf94      	ite	ls
 800c53a:	4698      	movls	r8, r3
 800c53c:	4680      	movhi	r8, r0
 800c53e:	2303      	movs	r3, #3
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	f023 0204 	bic.w	r2, r3, #4
 800c548:	6022      	str	r2, [r4, #0]
 800c54a:	f04f 0900 	mov.w	r9, #0
 800c54e:	9700      	str	r7, [sp, #0]
 800c550:	4633      	mov	r3, r6
 800c552:	aa0b      	add	r2, sp, #44	; 0x2c
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f9d8 	bl	800c90c <_printf_common>
 800c55c:	3001      	adds	r0, #1
 800c55e:	f040 8090 	bne.w	800c682 <_printf_float+0x1e2>
 800c562:	f04f 30ff 	mov.w	r0, #4294967295
 800c566:	b00d      	add	sp, #52	; 0x34
 800c568:	ecbd 8b02 	vpop	{d8}
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c570:	4642      	mov	r2, r8
 800c572:	464b      	mov	r3, r9
 800c574:	4640      	mov	r0, r8
 800c576:	4649      	mov	r1, r9
 800c578:	f7f4 fae0 	bl	8000b3c <__aeabi_dcmpun>
 800c57c:	b140      	cbz	r0, 800c590 <_printf_float+0xf0>
 800c57e:	464b      	mov	r3, r9
 800c580:	2b00      	cmp	r3, #0
 800c582:	bfbc      	itt	lt
 800c584:	232d      	movlt	r3, #45	; 0x2d
 800c586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c58a:	487f      	ldr	r0, [pc, #508]	; (800c788 <_printf_float+0x2e8>)
 800c58c:	4b7f      	ldr	r3, [pc, #508]	; (800c78c <_printf_float+0x2ec>)
 800c58e:	e7d1      	b.n	800c534 <_printf_float+0x94>
 800c590:	6863      	ldr	r3, [r4, #4]
 800c592:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c596:	9206      	str	r2, [sp, #24]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	d13f      	bne.n	800c61c <_printf_float+0x17c>
 800c59c:	2306      	movs	r3, #6
 800c59e:	6063      	str	r3, [r4, #4]
 800c5a0:	9b05      	ldr	r3, [sp, #20]
 800c5a2:	6861      	ldr	r1, [r4, #4]
 800c5a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9303      	str	r3, [sp, #12]
 800c5ac:	ab0a      	add	r3, sp, #40	; 0x28
 800c5ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c5b2:	ab09      	add	r3, sp, #36	; 0x24
 800c5b4:	ec49 8b10 	vmov	d0, r8, r9
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	6022      	str	r2, [r4, #0]
 800c5bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f7ff fecd 	bl	800c360 <__cvt>
 800c5c6:	9b06      	ldr	r3, [sp, #24]
 800c5c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5ca:	2b47      	cmp	r3, #71	; 0x47
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	d108      	bne.n	800c5e2 <_printf_float+0x142>
 800c5d0:	1cc8      	adds	r0, r1, #3
 800c5d2:	db02      	blt.n	800c5da <_printf_float+0x13a>
 800c5d4:	6863      	ldr	r3, [r4, #4]
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	dd41      	ble.n	800c65e <_printf_float+0x1be>
 800c5da:	f1ab 0b02 	sub.w	fp, fp, #2
 800c5de:	fa5f fb8b 	uxtb.w	fp, fp
 800c5e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5e6:	d820      	bhi.n	800c62a <_printf_float+0x18a>
 800c5e8:	3901      	subs	r1, #1
 800c5ea:	465a      	mov	r2, fp
 800c5ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5f0:	9109      	str	r1, [sp, #36]	; 0x24
 800c5f2:	f7ff ff17 	bl	800c424 <__exponent>
 800c5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f8:	1813      	adds	r3, r2, r0
 800c5fa:	2a01      	cmp	r2, #1
 800c5fc:	4681      	mov	r9, r0
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	dc02      	bgt.n	800c608 <_printf_float+0x168>
 800c602:	6822      	ldr	r2, [r4, #0]
 800c604:	07d2      	lsls	r2, r2, #31
 800c606:	d501      	bpl.n	800c60c <_printf_float+0x16c>
 800c608:	3301      	adds	r3, #1
 800c60a:	6123      	str	r3, [r4, #16]
 800c60c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c610:	2b00      	cmp	r3, #0
 800c612:	d09c      	beq.n	800c54e <_printf_float+0xae>
 800c614:	232d      	movs	r3, #45	; 0x2d
 800c616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c61a:	e798      	b.n	800c54e <_printf_float+0xae>
 800c61c:	9a06      	ldr	r2, [sp, #24]
 800c61e:	2a47      	cmp	r2, #71	; 0x47
 800c620:	d1be      	bne.n	800c5a0 <_printf_float+0x100>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1bc      	bne.n	800c5a0 <_printf_float+0x100>
 800c626:	2301      	movs	r3, #1
 800c628:	e7b9      	b.n	800c59e <_printf_float+0xfe>
 800c62a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c62e:	d118      	bne.n	800c662 <_printf_float+0x1c2>
 800c630:	2900      	cmp	r1, #0
 800c632:	6863      	ldr	r3, [r4, #4]
 800c634:	dd0b      	ble.n	800c64e <_printf_float+0x1ae>
 800c636:	6121      	str	r1, [r4, #16]
 800c638:	b913      	cbnz	r3, 800c640 <_printf_float+0x1a0>
 800c63a:	6822      	ldr	r2, [r4, #0]
 800c63c:	07d0      	lsls	r0, r2, #31
 800c63e:	d502      	bpl.n	800c646 <_printf_float+0x1a6>
 800c640:	3301      	adds	r3, #1
 800c642:	440b      	add	r3, r1
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	65a1      	str	r1, [r4, #88]	; 0x58
 800c648:	f04f 0900 	mov.w	r9, #0
 800c64c:	e7de      	b.n	800c60c <_printf_float+0x16c>
 800c64e:	b913      	cbnz	r3, 800c656 <_printf_float+0x1b6>
 800c650:	6822      	ldr	r2, [r4, #0]
 800c652:	07d2      	lsls	r2, r2, #31
 800c654:	d501      	bpl.n	800c65a <_printf_float+0x1ba>
 800c656:	3302      	adds	r3, #2
 800c658:	e7f4      	b.n	800c644 <_printf_float+0x1a4>
 800c65a:	2301      	movs	r3, #1
 800c65c:	e7f2      	b.n	800c644 <_printf_float+0x1a4>
 800c65e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c664:	4299      	cmp	r1, r3
 800c666:	db05      	blt.n	800c674 <_printf_float+0x1d4>
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	6121      	str	r1, [r4, #16]
 800c66c:	07d8      	lsls	r0, r3, #31
 800c66e:	d5ea      	bpl.n	800c646 <_printf_float+0x1a6>
 800c670:	1c4b      	adds	r3, r1, #1
 800c672:	e7e7      	b.n	800c644 <_printf_float+0x1a4>
 800c674:	2900      	cmp	r1, #0
 800c676:	bfd4      	ite	le
 800c678:	f1c1 0202 	rsble	r2, r1, #2
 800c67c:	2201      	movgt	r2, #1
 800c67e:	4413      	add	r3, r2
 800c680:	e7e0      	b.n	800c644 <_printf_float+0x1a4>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	055a      	lsls	r2, r3, #21
 800c686:	d407      	bmi.n	800c698 <_printf_float+0x1f8>
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	4642      	mov	r2, r8
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	d12c      	bne.n	800c6f0 <_printf_float+0x250>
 800c696:	e764      	b.n	800c562 <_printf_float+0xc2>
 800c698:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c69c:	f240 80e0 	bls.w	800c860 <_printf_float+0x3c0>
 800c6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f7f4 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d034      	beq.n	800c71a <_printf_float+0x27a>
 800c6b0:	4a37      	ldr	r2, [pc, #220]	; (800c790 <_printf_float+0x2f0>)
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	47b8      	blx	r7
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	f43f af51 	beq.w	800c562 <_printf_float+0xc2>
 800c6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	db02      	blt.n	800c6ce <_printf_float+0x22e>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	07d8      	lsls	r0, r3, #31
 800c6cc:	d510      	bpl.n	800c6f0 <_printf_float+0x250>
 800c6ce:	ee18 3a10 	vmov	r3, s16
 800c6d2:	4652      	mov	r2, sl
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	47b8      	blx	r7
 800c6da:	3001      	adds	r0, #1
 800c6dc:	f43f af41 	beq.w	800c562 <_printf_float+0xc2>
 800c6e0:	f04f 0800 	mov.w	r8, #0
 800c6e4:	f104 091a 	add.w	r9, r4, #26
 800c6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	4543      	cmp	r3, r8
 800c6ee:	dc09      	bgt.n	800c704 <_printf_float+0x264>
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	079b      	lsls	r3, r3, #30
 800c6f4:	f100 8105 	bmi.w	800c902 <_printf_float+0x462>
 800c6f8:	68e0      	ldr	r0, [r4, #12]
 800c6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6fc:	4298      	cmp	r0, r3
 800c6fe:	bfb8      	it	lt
 800c700:	4618      	movlt	r0, r3
 800c702:	e730      	b.n	800c566 <_printf_float+0xc6>
 800c704:	2301      	movs	r3, #1
 800c706:	464a      	mov	r2, r9
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	f43f af27 	beq.w	800c562 <_printf_float+0xc2>
 800c714:	f108 0801 	add.w	r8, r8, #1
 800c718:	e7e6      	b.n	800c6e8 <_printf_float+0x248>
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dc39      	bgt.n	800c794 <_printf_float+0x2f4>
 800c720:	4a1b      	ldr	r2, [pc, #108]	; (800c790 <_printf_float+0x2f0>)
 800c722:	2301      	movs	r3, #1
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	f43f af19 	beq.w	800c562 <_printf_float+0xc2>
 800c730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c734:	4313      	orrs	r3, r2
 800c736:	d102      	bne.n	800c73e <_printf_float+0x29e>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	07d9      	lsls	r1, r3, #31
 800c73c:	d5d8      	bpl.n	800c6f0 <_printf_float+0x250>
 800c73e:	ee18 3a10 	vmov	r3, s16
 800c742:	4652      	mov	r2, sl
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	f43f af09 	beq.w	800c562 <_printf_float+0xc2>
 800c750:	f04f 0900 	mov.w	r9, #0
 800c754:	f104 0a1a 	add.w	sl, r4, #26
 800c758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75a:	425b      	negs	r3, r3
 800c75c:	454b      	cmp	r3, r9
 800c75e:	dc01      	bgt.n	800c764 <_printf_float+0x2c4>
 800c760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c762:	e792      	b.n	800c68a <_printf_float+0x1ea>
 800c764:	2301      	movs	r3, #1
 800c766:	4652      	mov	r2, sl
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f43f aef7 	beq.w	800c562 <_printf_float+0xc2>
 800c774:	f109 0901 	add.w	r9, r9, #1
 800c778:	e7ee      	b.n	800c758 <_printf_float+0x2b8>
 800c77a:	bf00      	nop
 800c77c:	7fefffff 	.word	0x7fefffff
 800c780:	0801020c 	.word	0x0801020c
 800c784:	08010210 	.word	0x08010210
 800c788:	08010218 	.word	0x08010218
 800c78c:	08010214 	.word	0x08010214
 800c790:	0801021c 	.word	0x0801021c
 800c794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c798:	429a      	cmp	r2, r3
 800c79a:	bfa8      	it	ge
 800c79c:	461a      	movge	r2, r3
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	4691      	mov	r9, r2
 800c7a2:	dc37      	bgt.n	800c814 <_printf_float+0x374>
 800c7a4:	f04f 0b00 	mov.w	fp, #0
 800c7a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ac:	f104 021a 	add.w	r2, r4, #26
 800c7b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7b2:	9305      	str	r3, [sp, #20]
 800c7b4:	eba3 0309 	sub.w	r3, r3, r9
 800c7b8:	455b      	cmp	r3, fp
 800c7ba:	dc33      	bgt.n	800c824 <_printf_float+0x384>
 800c7bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	db3b      	blt.n	800c83c <_printf_float+0x39c>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	07da      	lsls	r2, r3, #31
 800c7c8:	d438      	bmi.n	800c83c <_printf_float+0x39c>
 800c7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7cc:	9a05      	ldr	r2, [sp, #20]
 800c7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7d0:	1a9a      	subs	r2, r3, r2
 800c7d2:	eba3 0901 	sub.w	r9, r3, r1
 800c7d6:	4591      	cmp	r9, r2
 800c7d8:	bfa8      	it	ge
 800c7da:	4691      	movge	r9, r2
 800c7dc:	f1b9 0f00 	cmp.w	r9, #0
 800c7e0:	dc35      	bgt.n	800c84e <_printf_float+0x3ae>
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ea:	f104 0a1a 	add.w	sl, r4, #26
 800c7ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7f2:	1a9b      	subs	r3, r3, r2
 800c7f4:	eba3 0309 	sub.w	r3, r3, r9
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	f77f af79 	ble.w	800c6f0 <_printf_float+0x250>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4652      	mov	r2, sl
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	f43f aeaa 	beq.w	800c562 <_printf_float+0xc2>
 800c80e:	f108 0801 	add.w	r8, r8, #1
 800c812:	e7ec      	b.n	800c7ee <_printf_float+0x34e>
 800c814:	4613      	mov	r3, r2
 800c816:	4631      	mov	r1, r6
 800c818:	4642      	mov	r2, r8
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	d1c0      	bne.n	800c7a4 <_printf_float+0x304>
 800c822:	e69e      	b.n	800c562 <_printf_float+0xc2>
 800c824:	2301      	movs	r3, #1
 800c826:	4631      	mov	r1, r6
 800c828:	4628      	mov	r0, r5
 800c82a:	9205      	str	r2, [sp, #20]
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	f43f ae97 	beq.w	800c562 <_printf_float+0xc2>
 800c834:	9a05      	ldr	r2, [sp, #20]
 800c836:	f10b 0b01 	add.w	fp, fp, #1
 800c83a:	e7b9      	b.n	800c7b0 <_printf_float+0x310>
 800c83c:	ee18 3a10 	vmov	r3, s16
 800c840:	4652      	mov	r2, sl
 800c842:	4631      	mov	r1, r6
 800c844:	4628      	mov	r0, r5
 800c846:	47b8      	blx	r7
 800c848:	3001      	adds	r0, #1
 800c84a:	d1be      	bne.n	800c7ca <_printf_float+0x32a>
 800c84c:	e689      	b.n	800c562 <_printf_float+0xc2>
 800c84e:	9a05      	ldr	r2, [sp, #20]
 800c850:	464b      	mov	r3, r9
 800c852:	4442      	add	r2, r8
 800c854:	4631      	mov	r1, r6
 800c856:	4628      	mov	r0, r5
 800c858:	47b8      	blx	r7
 800c85a:	3001      	adds	r0, #1
 800c85c:	d1c1      	bne.n	800c7e2 <_printf_float+0x342>
 800c85e:	e680      	b.n	800c562 <_printf_float+0xc2>
 800c860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c862:	2a01      	cmp	r2, #1
 800c864:	dc01      	bgt.n	800c86a <_printf_float+0x3ca>
 800c866:	07db      	lsls	r3, r3, #31
 800c868:	d538      	bpl.n	800c8dc <_printf_float+0x43c>
 800c86a:	2301      	movs	r3, #1
 800c86c:	4642      	mov	r2, r8
 800c86e:	4631      	mov	r1, r6
 800c870:	4628      	mov	r0, r5
 800c872:	47b8      	blx	r7
 800c874:	3001      	adds	r0, #1
 800c876:	f43f ae74 	beq.w	800c562 <_printf_float+0xc2>
 800c87a:	ee18 3a10 	vmov	r3, s16
 800c87e:	4652      	mov	r2, sl
 800c880:	4631      	mov	r1, r6
 800c882:	4628      	mov	r0, r5
 800c884:	47b8      	blx	r7
 800c886:	3001      	adds	r0, #1
 800c888:	f43f ae6b 	beq.w	800c562 <_printf_float+0xc2>
 800c88c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	f7f4 f920 	bl	8000ad8 <__aeabi_dcmpeq>
 800c898:	b9d8      	cbnz	r0, 800c8d2 <_printf_float+0x432>
 800c89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89c:	f108 0201 	add.w	r2, r8, #1
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b8      	blx	r7
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d10e      	bne.n	800c8ca <_printf_float+0x42a>
 800c8ac:	e659      	b.n	800c562 <_printf_float+0xc2>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	4652      	mov	r2, sl
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b8      	blx	r7
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	f43f ae52 	beq.w	800c562 <_printf_float+0xc2>
 800c8be:	f108 0801 	add.w	r8, r8, #1
 800c8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	4543      	cmp	r3, r8
 800c8c8:	dcf1      	bgt.n	800c8ae <_printf_float+0x40e>
 800c8ca:	464b      	mov	r3, r9
 800c8cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8d0:	e6dc      	b.n	800c68c <_printf_float+0x1ec>
 800c8d2:	f04f 0800 	mov.w	r8, #0
 800c8d6:	f104 0a1a 	add.w	sl, r4, #26
 800c8da:	e7f2      	b.n	800c8c2 <_printf_float+0x422>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	4642      	mov	r2, r8
 800c8e0:	e7df      	b.n	800c8a2 <_printf_float+0x402>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	464a      	mov	r2, r9
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	47b8      	blx	r7
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	f43f ae38 	beq.w	800c562 <_printf_float+0xc2>
 800c8f2:	f108 0801 	add.w	r8, r8, #1
 800c8f6:	68e3      	ldr	r3, [r4, #12]
 800c8f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8fa:	1a5b      	subs	r3, r3, r1
 800c8fc:	4543      	cmp	r3, r8
 800c8fe:	dcf0      	bgt.n	800c8e2 <_printf_float+0x442>
 800c900:	e6fa      	b.n	800c6f8 <_printf_float+0x258>
 800c902:	f04f 0800 	mov.w	r8, #0
 800c906:	f104 0919 	add.w	r9, r4, #25
 800c90a:	e7f4      	b.n	800c8f6 <_printf_float+0x456>

0800c90c <_printf_common>:
 800c90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c910:	4616      	mov	r6, r2
 800c912:	4699      	mov	r9, r3
 800c914:	688a      	ldr	r2, [r1, #8]
 800c916:	690b      	ldr	r3, [r1, #16]
 800c918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	bfb8      	it	lt
 800c920:	4613      	movlt	r3, r2
 800c922:	6033      	str	r3, [r6, #0]
 800c924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c928:	4607      	mov	r7, r0
 800c92a:	460c      	mov	r4, r1
 800c92c:	b10a      	cbz	r2, 800c932 <_printf_common+0x26>
 800c92e:	3301      	adds	r3, #1
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	0699      	lsls	r1, r3, #26
 800c936:	bf42      	ittt	mi
 800c938:	6833      	ldrmi	r3, [r6, #0]
 800c93a:	3302      	addmi	r3, #2
 800c93c:	6033      	strmi	r3, [r6, #0]
 800c93e:	6825      	ldr	r5, [r4, #0]
 800c940:	f015 0506 	ands.w	r5, r5, #6
 800c944:	d106      	bne.n	800c954 <_printf_common+0x48>
 800c946:	f104 0a19 	add.w	sl, r4, #25
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	6832      	ldr	r2, [r6, #0]
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	42ab      	cmp	r3, r5
 800c952:	dc26      	bgt.n	800c9a2 <_printf_common+0x96>
 800c954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c958:	1e13      	subs	r3, r2, #0
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	bf18      	it	ne
 800c95e:	2301      	movne	r3, #1
 800c960:	0692      	lsls	r2, r2, #26
 800c962:	d42b      	bmi.n	800c9bc <_printf_common+0xb0>
 800c964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c968:	4649      	mov	r1, r9
 800c96a:	4638      	mov	r0, r7
 800c96c:	47c0      	blx	r8
 800c96e:	3001      	adds	r0, #1
 800c970:	d01e      	beq.n	800c9b0 <_printf_common+0xa4>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	68e5      	ldr	r5, [r4, #12]
 800c976:	6832      	ldr	r2, [r6, #0]
 800c978:	f003 0306 	and.w	r3, r3, #6
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	bf08      	it	eq
 800c980:	1aad      	subeq	r5, r5, r2
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	6922      	ldr	r2, [r4, #16]
 800c986:	bf0c      	ite	eq
 800c988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c98c:	2500      	movne	r5, #0
 800c98e:	4293      	cmp	r3, r2
 800c990:	bfc4      	itt	gt
 800c992:	1a9b      	subgt	r3, r3, r2
 800c994:	18ed      	addgt	r5, r5, r3
 800c996:	2600      	movs	r6, #0
 800c998:	341a      	adds	r4, #26
 800c99a:	42b5      	cmp	r5, r6
 800c99c:	d11a      	bne.n	800c9d4 <_printf_common+0xc8>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e008      	b.n	800c9b4 <_printf_common+0xa8>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	47c0      	blx	r8
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_printf_common+0xac>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	e7c6      	b.n	800c94a <_printf_common+0x3e>
 800c9bc:	18e1      	adds	r1, r4, r3
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	2030      	movs	r0, #48	; 0x30
 800c9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c6:	4422      	add	r2, r4
 800c9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9d0:	3302      	adds	r3, #2
 800c9d2:	e7c7      	b.n	800c964 <_printf_common+0x58>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4638      	mov	r0, r7
 800c9dc:	47c0      	blx	r8
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d0e6      	beq.n	800c9b0 <_printf_common+0xa4>
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7d9      	b.n	800c99a <_printf_common+0x8e>
	...

0800c9e8 <_printf_i>:
 800c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	7e0f      	ldrb	r7, [r1, #24]
 800c9ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9f0:	2f78      	cmp	r7, #120	; 0x78
 800c9f2:	4691      	mov	r9, r2
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	469a      	mov	sl, r3
 800c9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fe:	d807      	bhi.n	800ca10 <_printf_i+0x28>
 800ca00:	2f62      	cmp	r7, #98	; 0x62
 800ca02:	d80a      	bhi.n	800ca1a <_printf_i+0x32>
 800ca04:	2f00      	cmp	r7, #0
 800ca06:	f000 80d8 	beq.w	800cbba <_printf_i+0x1d2>
 800ca0a:	2f58      	cmp	r7, #88	; 0x58
 800ca0c:	f000 80a3 	beq.w	800cb56 <_printf_i+0x16e>
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca18:	e03a      	b.n	800ca90 <_printf_i+0xa8>
 800ca1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1e:	2b15      	cmp	r3, #21
 800ca20:	d8f6      	bhi.n	800ca10 <_printf_i+0x28>
 800ca22:	a101      	add	r1, pc, #4	; (adr r1, 800ca28 <_printf_i+0x40>)
 800ca24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca28:	0800ca81 	.word	0x0800ca81
 800ca2c:	0800ca95 	.word	0x0800ca95
 800ca30:	0800ca11 	.word	0x0800ca11
 800ca34:	0800ca11 	.word	0x0800ca11
 800ca38:	0800ca11 	.word	0x0800ca11
 800ca3c:	0800ca11 	.word	0x0800ca11
 800ca40:	0800ca95 	.word	0x0800ca95
 800ca44:	0800ca11 	.word	0x0800ca11
 800ca48:	0800ca11 	.word	0x0800ca11
 800ca4c:	0800ca11 	.word	0x0800ca11
 800ca50:	0800ca11 	.word	0x0800ca11
 800ca54:	0800cba1 	.word	0x0800cba1
 800ca58:	0800cac5 	.word	0x0800cac5
 800ca5c:	0800cb83 	.word	0x0800cb83
 800ca60:	0800ca11 	.word	0x0800ca11
 800ca64:	0800ca11 	.word	0x0800ca11
 800ca68:	0800cbc3 	.word	0x0800cbc3
 800ca6c:	0800ca11 	.word	0x0800ca11
 800ca70:	0800cac5 	.word	0x0800cac5
 800ca74:	0800ca11 	.word	0x0800ca11
 800ca78:	0800ca11 	.word	0x0800ca11
 800ca7c:	0800cb8b 	.word	0x0800cb8b
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	602a      	str	r2, [r5, #0]
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca90:	2301      	movs	r3, #1
 800ca92:	e0a3      	b.n	800cbdc <_printf_i+0x1f4>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	6829      	ldr	r1, [r5, #0]
 800ca98:	0606      	lsls	r6, r0, #24
 800ca9a:	f101 0304 	add.w	r3, r1, #4
 800ca9e:	d50a      	bpl.n	800cab6 <_printf_i+0xce>
 800caa0:	680e      	ldr	r6, [r1, #0]
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	2e00      	cmp	r6, #0
 800caa6:	da03      	bge.n	800cab0 <_printf_i+0xc8>
 800caa8:	232d      	movs	r3, #45	; 0x2d
 800caaa:	4276      	negs	r6, r6
 800caac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab0:	485e      	ldr	r0, [pc, #376]	; (800cc2c <_printf_i+0x244>)
 800cab2:	230a      	movs	r3, #10
 800cab4:	e019      	b.n	800caea <_printf_i+0x102>
 800cab6:	680e      	ldr	r6, [r1, #0]
 800cab8:	602b      	str	r3, [r5, #0]
 800caba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cabe:	bf18      	it	ne
 800cac0:	b236      	sxthne	r6, r6
 800cac2:	e7ef      	b.n	800caa4 <_printf_i+0xbc>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	6029      	str	r1, [r5, #0]
 800cacc:	0601      	lsls	r1, r0, #24
 800cace:	d501      	bpl.n	800cad4 <_printf_i+0xec>
 800cad0:	681e      	ldr	r6, [r3, #0]
 800cad2:	e002      	b.n	800cada <_printf_i+0xf2>
 800cad4:	0646      	lsls	r6, r0, #25
 800cad6:	d5fb      	bpl.n	800cad0 <_printf_i+0xe8>
 800cad8:	881e      	ldrh	r6, [r3, #0]
 800cada:	4854      	ldr	r0, [pc, #336]	; (800cc2c <_printf_i+0x244>)
 800cadc:	2f6f      	cmp	r7, #111	; 0x6f
 800cade:	bf0c      	ite	eq
 800cae0:	2308      	moveq	r3, #8
 800cae2:	230a      	movne	r3, #10
 800cae4:	2100      	movs	r1, #0
 800cae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caea:	6865      	ldr	r5, [r4, #4]
 800caec:	60a5      	str	r5, [r4, #8]
 800caee:	2d00      	cmp	r5, #0
 800caf0:	bfa2      	ittt	ge
 800caf2:	6821      	ldrge	r1, [r4, #0]
 800caf4:	f021 0104 	bicge.w	r1, r1, #4
 800caf8:	6021      	strge	r1, [r4, #0]
 800cafa:	b90e      	cbnz	r6, 800cb00 <_printf_i+0x118>
 800cafc:	2d00      	cmp	r5, #0
 800cafe:	d04d      	beq.n	800cb9c <_printf_i+0x1b4>
 800cb00:	4615      	mov	r5, r2
 800cb02:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb06:	fb03 6711 	mls	r7, r3, r1, r6
 800cb0a:	5dc7      	ldrb	r7, [r0, r7]
 800cb0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb10:	4637      	mov	r7, r6
 800cb12:	42bb      	cmp	r3, r7
 800cb14:	460e      	mov	r6, r1
 800cb16:	d9f4      	bls.n	800cb02 <_printf_i+0x11a>
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d10b      	bne.n	800cb34 <_printf_i+0x14c>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	07de      	lsls	r6, r3, #31
 800cb20:	d508      	bpl.n	800cb34 <_printf_i+0x14c>
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	6861      	ldr	r1, [r4, #4]
 800cb26:	4299      	cmp	r1, r3
 800cb28:	bfde      	ittt	le
 800cb2a:	2330      	movle	r3, #48	; 0x30
 800cb2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb34:	1b52      	subs	r2, r2, r5
 800cb36:	6122      	str	r2, [r4, #16]
 800cb38:	f8cd a000 	str.w	sl, [sp]
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	aa03      	add	r2, sp, #12
 800cb40:	4621      	mov	r1, r4
 800cb42:	4640      	mov	r0, r8
 800cb44:	f7ff fee2 	bl	800c90c <_printf_common>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	d14c      	bne.n	800cbe6 <_printf_i+0x1fe>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b004      	add	sp, #16
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	4835      	ldr	r0, [pc, #212]	; (800cc2c <_printf_i+0x244>)
 800cb58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb5c:	6829      	ldr	r1, [r5, #0]
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb64:	6029      	str	r1, [r5, #0]
 800cb66:	061d      	lsls	r5, r3, #24
 800cb68:	d514      	bpl.n	800cb94 <_printf_i+0x1ac>
 800cb6a:	07df      	lsls	r7, r3, #31
 800cb6c:	bf44      	itt	mi
 800cb6e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb72:	6023      	strmi	r3, [r4, #0]
 800cb74:	b91e      	cbnz	r6, 800cb7e <_printf_i+0x196>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	f023 0320 	bic.w	r3, r3, #32
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	2310      	movs	r3, #16
 800cb80:	e7b0      	b.n	800cae4 <_printf_i+0xfc>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	f043 0320 	orr.w	r3, r3, #32
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	2378      	movs	r3, #120	; 0x78
 800cb8c:	4828      	ldr	r0, [pc, #160]	; (800cc30 <_printf_i+0x248>)
 800cb8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb92:	e7e3      	b.n	800cb5c <_printf_i+0x174>
 800cb94:	0659      	lsls	r1, r3, #25
 800cb96:	bf48      	it	mi
 800cb98:	b2b6      	uxthmi	r6, r6
 800cb9a:	e7e6      	b.n	800cb6a <_printf_i+0x182>
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	e7bb      	b.n	800cb18 <_printf_i+0x130>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	6826      	ldr	r6, [r4, #0]
 800cba4:	6961      	ldr	r1, [r4, #20]
 800cba6:	1d18      	adds	r0, r3, #4
 800cba8:	6028      	str	r0, [r5, #0]
 800cbaa:	0635      	lsls	r5, r6, #24
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	d501      	bpl.n	800cbb4 <_printf_i+0x1cc>
 800cbb0:	6019      	str	r1, [r3, #0]
 800cbb2:	e002      	b.n	800cbba <_printf_i+0x1d2>
 800cbb4:	0670      	lsls	r0, r6, #25
 800cbb6:	d5fb      	bpl.n	800cbb0 <_printf_i+0x1c8>
 800cbb8:	8019      	strh	r1, [r3, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	4615      	mov	r5, r2
 800cbc0:	e7ba      	b.n	800cb38 <_printf_i+0x150>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	1d1a      	adds	r2, r3, #4
 800cbc6:	602a      	str	r2, [r5, #0]
 800cbc8:	681d      	ldr	r5, [r3, #0]
 800cbca:	6862      	ldr	r2, [r4, #4]
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f7f3 fb0e 	bl	80001f0 <memchr>
 800cbd4:	b108      	cbz	r0, 800cbda <_printf_i+0x1f2>
 800cbd6:	1b40      	subs	r0, r0, r5
 800cbd8:	6060      	str	r0, [r4, #4]
 800cbda:	6863      	ldr	r3, [r4, #4]
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe4:	e7a8      	b.n	800cb38 <_printf_i+0x150>
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	462a      	mov	r2, r5
 800cbea:	4649      	mov	r1, r9
 800cbec:	4640      	mov	r0, r8
 800cbee:	47d0      	blx	sl
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d0ab      	beq.n	800cb4c <_printf_i+0x164>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	079b      	lsls	r3, r3, #30
 800cbf8:	d413      	bmi.n	800cc22 <_printf_i+0x23a>
 800cbfa:	68e0      	ldr	r0, [r4, #12]
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	4298      	cmp	r0, r3
 800cc00:	bfb8      	it	lt
 800cc02:	4618      	movlt	r0, r3
 800cc04:	e7a4      	b.n	800cb50 <_printf_i+0x168>
 800cc06:	2301      	movs	r3, #1
 800cc08:	4632      	mov	r2, r6
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	47d0      	blx	sl
 800cc10:	3001      	adds	r0, #1
 800cc12:	d09b      	beq.n	800cb4c <_printf_i+0x164>
 800cc14:	3501      	adds	r5, #1
 800cc16:	68e3      	ldr	r3, [r4, #12]
 800cc18:	9903      	ldr	r1, [sp, #12]
 800cc1a:	1a5b      	subs	r3, r3, r1
 800cc1c:	42ab      	cmp	r3, r5
 800cc1e:	dcf2      	bgt.n	800cc06 <_printf_i+0x21e>
 800cc20:	e7eb      	b.n	800cbfa <_printf_i+0x212>
 800cc22:	2500      	movs	r5, #0
 800cc24:	f104 0619 	add.w	r6, r4, #25
 800cc28:	e7f5      	b.n	800cc16 <_printf_i+0x22e>
 800cc2a:	bf00      	nop
 800cc2c:	0801021e 	.word	0x0801021e
 800cc30:	0801022f 	.word	0x0801022f

0800cc34 <cleanup_glue>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	460c      	mov	r4, r1
 800cc38:	6809      	ldr	r1, [r1, #0]
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	b109      	cbz	r1, 800cc42 <cleanup_glue+0xe>
 800cc3e:	f7ff fff9 	bl	800cc34 <cleanup_glue>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc4a:	f7ff baa9 	b.w	800c1a0 <_free_r>
	...

0800cc50 <_reclaim_reent>:
 800cc50:	4b2c      	ldr	r3, [pc, #176]	; (800cd04 <_reclaim_reent+0xb4>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4283      	cmp	r3, r0
 800cc56:	b570      	push	{r4, r5, r6, lr}
 800cc58:	4604      	mov	r4, r0
 800cc5a:	d051      	beq.n	800cd00 <_reclaim_reent+0xb0>
 800cc5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cc5e:	b143      	cbz	r3, 800cc72 <_reclaim_reent+0x22>
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d14a      	bne.n	800ccfc <_reclaim_reent+0xac>
 800cc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc68:	6819      	ldr	r1, [r3, #0]
 800cc6a:	b111      	cbz	r1, 800cc72 <_reclaim_reent+0x22>
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7ff fa97 	bl	800c1a0 <_free_r>
 800cc72:	6961      	ldr	r1, [r4, #20]
 800cc74:	b111      	cbz	r1, 800cc7c <_reclaim_reent+0x2c>
 800cc76:	4620      	mov	r0, r4
 800cc78:	f7ff fa92 	bl	800c1a0 <_free_r>
 800cc7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc7e:	b111      	cbz	r1, 800cc86 <_reclaim_reent+0x36>
 800cc80:	4620      	mov	r0, r4
 800cc82:	f7ff fa8d 	bl	800c1a0 <_free_r>
 800cc86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc88:	b111      	cbz	r1, 800cc90 <_reclaim_reent+0x40>
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7ff fa88 	bl	800c1a0 <_free_r>
 800cc90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cc92:	b111      	cbz	r1, 800cc9a <_reclaim_reent+0x4a>
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7ff fa83 	bl	800c1a0 <_free_r>
 800cc9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cc9c:	b111      	cbz	r1, 800cca4 <_reclaim_reent+0x54>
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff fa7e 	bl	800c1a0 <_free_r>
 800cca4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cca6:	b111      	cbz	r1, 800ccae <_reclaim_reent+0x5e>
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f7ff fa79 	bl	800c1a0 <_free_r>
 800ccae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ccb0:	b111      	cbz	r1, 800ccb8 <_reclaim_reent+0x68>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7ff fa74 	bl	800c1a0 <_free_r>
 800ccb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccba:	b111      	cbz	r1, 800ccc2 <_reclaim_reent+0x72>
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f7ff fa6f 	bl	800c1a0 <_free_r>
 800ccc2:	69a3      	ldr	r3, [r4, #24]
 800ccc4:	b1e3      	cbz	r3, 800cd00 <_reclaim_reent+0xb0>
 800ccc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccc8:	4620      	mov	r0, r4
 800ccca:	4798      	blx	r3
 800cccc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ccce:	b1b9      	cbz	r1, 800cd00 <_reclaim_reent+0xb0>
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccd6:	f7ff bfad 	b.w	800cc34 <cleanup_glue>
 800ccda:	5949      	ldr	r1, [r1, r5]
 800ccdc:	b941      	cbnz	r1, 800ccf0 <_reclaim_reent+0xa0>
 800ccde:	3504      	adds	r5, #4
 800cce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce2:	2d80      	cmp	r5, #128	; 0x80
 800cce4:	68d9      	ldr	r1, [r3, #12]
 800cce6:	d1f8      	bne.n	800ccda <_reclaim_reent+0x8a>
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7ff fa59 	bl	800c1a0 <_free_r>
 800ccee:	e7ba      	b.n	800cc66 <_reclaim_reent+0x16>
 800ccf0:	680e      	ldr	r6, [r1, #0]
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7ff fa54 	bl	800c1a0 <_free_r>
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	e7ef      	b.n	800ccdc <_reclaim_reent+0x8c>
 800ccfc:	2500      	movs	r5, #0
 800ccfe:	e7ef      	b.n	800cce0 <_reclaim_reent+0x90>
 800cd00:	bd70      	pop	{r4, r5, r6, pc}
 800cd02:	bf00      	nop
 800cd04:	20000074 	.word	0x20000074

0800cd08 <_sbrk_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d06      	ldr	r5, [pc, #24]	; (800cd24 <_sbrk_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	602b      	str	r3, [r5, #0]
 800cd14:	f7f5 f99a 	bl	800204c <_sbrk>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_sbrk_r+0x1a>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_sbrk_r+0x1a>
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	20004f50 	.word	0x20004f50

0800cd28 <siprintf>:
 800cd28:	b40e      	push	{r1, r2, r3}
 800cd2a:	b500      	push	{lr}
 800cd2c:	b09c      	sub	sp, #112	; 0x70
 800cd2e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd30:	9002      	str	r0, [sp, #8]
 800cd32:	9006      	str	r0, [sp, #24]
 800cd34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd38:	4809      	ldr	r0, [pc, #36]	; (800cd60 <siprintf+0x38>)
 800cd3a:	9107      	str	r1, [sp, #28]
 800cd3c:	9104      	str	r1, [sp, #16]
 800cd3e:	4909      	ldr	r1, [pc, #36]	; (800cd64 <siprintf+0x3c>)
 800cd40:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd44:	9105      	str	r1, [sp, #20]
 800cd46:	6800      	ldr	r0, [r0, #0]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	a902      	add	r1, sp, #8
 800cd4c:	f001 fc30 	bl	800e5b0 <_svfiprintf_r>
 800cd50:	9b02      	ldr	r3, [sp, #8]
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
 800cd56:	b01c      	add	sp, #112	; 0x70
 800cd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd5c:	b003      	add	sp, #12
 800cd5e:	4770      	bx	lr
 800cd60:	20000074 	.word	0x20000074
 800cd64:	ffff0208 	.word	0xffff0208

0800cd68 <__sread>:
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd70:	f001 fd1e 	bl	800e7b0 <_read_r>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	bfab      	itete	ge
 800cd78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd7a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd7c:	181b      	addge	r3, r3, r0
 800cd7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd82:	bfac      	ite	ge
 800cd84:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd86:	81a3      	strhlt	r3, [r4, #12]
 800cd88:	bd10      	pop	{r4, pc}

0800cd8a <__swrite>:
 800cd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8e:	461f      	mov	r7, r3
 800cd90:	898b      	ldrh	r3, [r1, #12]
 800cd92:	05db      	lsls	r3, r3, #23
 800cd94:	4605      	mov	r5, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	4616      	mov	r6, r2
 800cd9a:	d505      	bpl.n	800cda8 <__swrite+0x1e>
 800cd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda0:	2302      	movs	r3, #2
 800cda2:	2200      	movs	r2, #0
 800cda4:	f000 fff0 	bl	800dd88 <_lseek_r>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	463b      	mov	r3, r7
 800cdb8:	4628      	mov	r0, r5
 800cdba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbe:	f000 b87f 	b.w	800cec0 <_write_r>

0800cdc2 <__sseek>:
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdca:	f000 ffdd 	bl	800dd88 <_lseek_r>
 800cdce:	1c43      	adds	r3, r0, #1
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	bf15      	itete	ne
 800cdd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdde:	81a3      	strheq	r3, [r4, #12]
 800cde0:	bf18      	it	ne
 800cde2:	81a3      	strhne	r3, [r4, #12]
 800cde4:	bd10      	pop	{r4, pc}

0800cde6 <__sclose>:
 800cde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdea:	f000 b87b 	b.w	800cee4 <_close_r>

0800cdee <strcat>:
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	7814      	ldrb	r4, [r2, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	3201      	adds	r2, #1
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	d1fa      	bne.n	800cdf2 <strcat+0x4>
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	d1f9      	bne.n	800cdfe <strcat+0x10>
 800ce0a:	bd10      	pop	{r4, pc}

0800ce0c <_vsniprintf_r>:
 800ce0c:	b530      	push	{r4, r5, lr}
 800ce0e:	4614      	mov	r4, r2
 800ce10:	2c00      	cmp	r4, #0
 800ce12:	b09b      	sub	sp, #108	; 0x6c
 800ce14:	4605      	mov	r5, r0
 800ce16:	461a      	mov	r2, r3
 800ce18:	da05      	bge.n	800ce26 <_vsniprintf_r+0x1a>
 800ce1a:	238b      	movs	r3, #139	; 0x8b
 800ce1c:	6003      	str	r3, [r0, #0]
 800ce1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce22:	b01b      	add	sp, #108	; 0x6c
 800ce24:	bd30      	pop	{r4, r5, pc}
 800ce26:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ce2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce2e:	bf14      	ite	ne
 800ce30:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce34:	4623      	moveq	r3, r4
 800ce36:	9302      	str	r3, [sp, #8]
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce3e:	9100      	str	r1, [sp, #0]
 800ce40:	9104      	str	r1, [sp, #16]
 800ce42:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce46:	4669      	mov	r1, sp
 800ce48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce4a:	f001 fbb1 	bl	800e5b0 <_svfiprintf_r>
 800ce4e:	1c43      	adds	r3, r0, #1
 800ce50:	bfbc      	itt	lt
 800ce52:	238b      	movlt	r3, #139	; 0x8b
 800ce54:	602b      	strlt	r3, [r5, #0]
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	d0e3      	beq.n	800ce22 <_vsniprintf_r+0x16>
 800ce5a:	9b00      	ldr	r3, [sp, #0]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	e7df      	b.n	800ce22 <_vsniprintf_r+0x16>
	...

0800ce64 <vsniprintf>:
 800ce64:	b507      	push	{r0, r1, r2, lr}
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	460a      	mov	r2, r1
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	4803      	ldr	r0, [pc, #12]	; (800ce7c <vsniprintf+0x18>)
 800ce70:	6800      	ldr	r0, [r0, #0]
 800ce72:	f7ff ffcb 	bl	800ce0c <_vsniprintf_r>
 800ce76:	b003      	add	sp, #12
 800ce78:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce7c:	20000074 	.word	0x20000074

0800ce80 <_vsiprintf_r>:
 800ce80:	b500      	push	{lr}
 800ce82:	b09b      	sub	sp, #108	; 0x6c
 800ce84:	9100      	str	r1, [sp, #0]
 800ce86:	9104      	str	r1, [sp, #16]
 800ce88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce8c:	9105      	str	r1, [sp, #20]
 800ce8e:	9102      	str	r1, [sp, #8]
 800ce90:	4905      	ldr	r1, [pc, #20]	; (800cea8 <_vsiprintf_r+0x28>)
 800ce92:	9103      	str	r1, [sp, #12]
 800ce94:	4669      	mov	r1, sp
 800ce96:	f001 fb8b 	bl	800e5b0 <_svfiprintf_r>
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	701a      	strb	r2, [r3, #0]
 800cea0:	b01b      	add	sp, #108	; 0x6c
 800cea2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea6:	bf00      	nop
 800cea8:	ffff0208 	.word	0xffff0208

0800ceac <vsiprintf>:
 800ceac:	4613      	mov	r3, r2
 800ceae:	460a      	mov	r2, r1
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	4802      	ldr	r0, [pc, #8]	; (800cebc <vsiprintf+0x10>)
 800ceb4:	6800      	ldr	r0, [r0, #0]
 800ceb6:	f7ff bfe3 	b.w	800ce80 <_vsiprintf_r>
 800ceba:	bf00      	nop
 800cebc:	20000074 	.word	0x20000074

0800cec0 <_write_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d07      	ldr	r5, [pc, #28]	; (800cee0 <_write_r+0x20>)
 800cec4:	4604      	mov	r4, r0
 800cec6:	4608      	mov	r0, r1
 800cec8:	4611      	mov	r1, r2
 800ceca:	2200      	movs	r2, #0
 800cecc:	602a      	str	r2, [r5, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	f7f5 f86b 	bl	8001faa <_write>
 800ced4:	1c43      	adds	r3, r0, #1
 800ced6:	d102      	bne.n	800cede <_write_r+0x1e>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	b103      	cbz	r3, 800cede <_write_r+0x1e>
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	bd38      	pop	{r3, r4, r5, pc}
 800cee0:	20004f50 	.word	0x20004f50

0800cee4 <_close_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	; (800cf00 <_close_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f5 f877 	bl	8001fe2 <_close>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_close_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_close_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20004f50 	.word	0x20004f50

0800cf04 <quorem>:
 800cf04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf08:	6903      	ldr	r3, [r0, #16]
 800cf0a:	690c      	ldr	r4, [r1, #16]
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	4607      	mov	r7, r0
 800cf10:	f2c0 8081 	blt.w	800d016 <quorem+0x112>
 800cf14:	3c01      	subs	r4, #1
 800cf16:	f101 0814 	add.w	r8, r1, #20
 800cf1a:	f100 0514 	add.w	r5, r0, #20
 800cf1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf38:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf3c:	d331      	bcc.n	800cfa2 <quorem+0x9e>
 800cf3e:	f04f 0e00 	mov.w	lr, #0
 800cf42:	4640      	mov	r0, r8
 800cf44:	46ac      	mov	ip, r5
 800cf46:	46f2      	mov	sl, lr
 800cf48:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf4c:	b293      	uxth	r3, r2
 800cf4e:	fb06 e303 	mla	r3, r6, r3, lr
 800cf52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	ebaa 0303 	sub.w	r3, sl, r3
 800cf5c:	f8dc a000 	ldr.w	sl, [ip]
 800cf60:	0c12      	lsrs	r2, r2, #16
 800cf62:	fa13 f38a 	uxtah	r3, r3, sl
 800cf66:	fb06 e202 	mla	r2, r6, r2, lr
 800cf6a:	9300      	str	r3, [sp, #0]
 800cf6c:	9b00      	ldr	r3, [sp, #0]
 800cf6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf72:	b292      	uxth	r2, r2
 800cf74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf80:	4581      	cmp	r9, r0
 800cf82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf86:	f84c 3b04 	str.w	r3, [ip], #4
 800cf8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf8e:	d2db      	bcs.n	800cf48 <quorem+0x44>
 800cf90:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf94:	b92b      	cbnz	r3, 800cfa2 <quorem+0x9e>
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	3b04      	subs	r3, #4
 800cf9a:	429d      	cmp	r5, r3
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	d32e      	bcc.n	800cffe <quorem+0xfa>
 800cfa0:	613c      	str	r4, [r7, #16]
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f001 f990 	bl	800e2c8 <__mcmp>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	db24      	blt.n	800cff6 <quorem+0xf2>
 800cfac:	3601      	adds	r6, #1
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f04f 0c00 	mov.w	ip, #0
 800cfb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfb8:	f8d0 e000 	ldr.w	lr, [r0]
 800cfbc:	b293      	uxth	r3, r2
 800cfbe:	ebac 0303 	sub.w	r3, ip, r3
 800cfc2:	0c12      	lsrs	r2, r2, #16
 800cfc4:	fa13 f38e 	uxtah	r3, r3, lr
 800cfc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfd6:	45c1      	cmp	r9, r8
 800cfd8:	f840 3b04 	str.w	r3, [r0], #4
 800cfdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfe0:	d2e8      	bcs.n	800cfb4 <quorem+0xb0>
 800cfe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfea:	b922      	cbnz	r2, 800cff6 <quorem+0xf2>
 800cfec:	3b04      	subs	r3, #4
 800cfee:	429d      	cmp	r5, r3
 800cff0:	461a      	mov	r2, r3
 800cff2:	d30a      	bcc.n	800d00a <quorem+0x106>
 800cff4:	613c      	str	r4, [r7, #16]
 800cff6:	4630      	mov	r0, r6
 800cff8:	b003      	add	sp, #12
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	6812      	ldr	r2, [r2, #0]
 800d000:	3b04      	subs	r3, #4
 800d002:	2a00      	cmp	r2, #0
 800d004:	d1cc      	bne.n	800cfa0 <quorem+0x9c>
 800d006:	3c01      	subs	r4, #1
 800d008:	e7c7      	b.n	800cf9a <quorem+0x96>
 800d00a:	6812      	ldr	r2, [r2, #0]
 800d00c:	3b04      	subs	r3, #4
 800d00e:	2a00      	cmp	r2, #0
 800d010:	d1f0      	bne.n	800cff4 <quorem+0xf0>
 800d012:	3c01      	subs	r4, #1
 800d014:	e7eb      	b.n	800cfee <quorem+0xea>
 800d016:	2000      	movs	r0, #0
 800d018:	e7ee      	b.n	800cff8 <quorem+0xf4>
 800d01a:	0000      	movs	r0, r0
 800d01c:	0000      	movs	r0, r0
	...

0800d020 <_dtoa_r>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	ed2d 8b04 	vpush	{d8-d9}
 800d028:	ec57 6b10 	vmov	r6, r7, d0
 800d02c:	b093      	sub	sp, #76	; 0x4c
 800d02e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d034:	9106      	str	r1, [sp, #24]
 800d036:	ee10 aa10 	vmov	sl, s0
 800d03a:	4604      	mov	r4, r0
 800d03c:	9209      	str	r2, [sp, #36]	; 0x24
 800d03e:	930c      	str	r3, [sp, #48]	; 0x30
 800d040:	46bb      	mov	fp, r7
 800d042:	b975      	cbnz	r5, 800d062 <_dtoa_r+0x42>
 800d044:	2010      	movs	r0, #16
 800d046:	f7ff f88d 	bl	800c164 <malloc>
 800d04a:	4602      	mov	r2, r0
 800d04c:	6260      	str	r0, [r4, #36]	; 0x24
 800d04e:	b920      	cbnz	r0, 800d05a <_dtoa_r+0x3a>
 800d050:	4ba7      	ldr	r3, [pc, #668]	; (800d2f0 <_dtoa_r+0x2d0>)
 800d052:	21ea      	movs	r1, #234	; 0xea
 800d054:	48a7      	ldr	r0, [pc, #668]	; (800d2f4 <_dtoa_r+0x2d4>)
 800d056:	f001 fbbd 	bl	800e7d4 <__assert_func>
 800d05a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d05e:	6005      	str	r5, [r0, #0]
 800d060:	60c5      	str	r5, [r0, #12]
 800d062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d064:	6819      	ldr	r1, [r3, #0]
 800d066:	b151      	cbz	r1, 800d07e <_dtoa_r+0x5e>
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	604a      	str	r2, [r1, #4]
 800d06c:	2301      	movs	r3, #1
 800d06e:	4093      	lsls	r3, r2
 800d070:	608b      	str	r3, [r1, #8]
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fee6 	bl	800de44 <_Bfree>
 800d078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d07a:	2200      	movs	r2, #0
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	1e3b      	subs	r3, r7, #0
 800d080:	bfaa      	itet	ge
 800d082:	2300      	movge	r3, #0
 800d084:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d088:	f8c8 3000 	strge.w	r3, [r8]
 800d08c:	4b9a      	ldr	r3, [pc, #616]	; (800d2f8 <_dtoa_r+0x2d8>)
 800d08e:	bfbc      	itt	lt
 800d090:	2201      	movlt	r2, #1
 800d092:	f8c8 2000 	strlt.w	r2, [r8]
 800d096:	ea33 030b 	bics.w	r3, r3, fp
 800d09a:	d11b      	bne.n	800d0d4 <_dtoa_r+0xb4>
 800d09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0a2:	6013      	str	r3, [r2, #0]
 800d0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0a8:	4333      	orrs	r3, r6
 800d0aa:	f000 8592 	beq.w	800dbd2 <_dtoa_r+0xbb2>
 800d0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0b0:	b963      	cbnz	r3, 800d0cc <_dtoa_r+0xac>
 800d0b2:	4b92      	ldr	r3, [pc, #584]	; (800d2fc <_dtoa_r+0x2dc>)
 800d0b4:	e022      	b.n	800d0fc <_dtoa_r+0xdc>
 800d0b6:	4b92      	ldr	r3, [pc, #584]	; (800d300 <_dtoa_r+0x2e0>)
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	3308      	adds	r3, #8
 800d0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	b013      	add	sp, #76	; 0x4c
 800d0c4:	ecbd 8b04 	vpop	{d8-d9}
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	4b8b      	ldr	r3, [pc, #556]	; (800d2fc <_dtoa_r+0x2dc>)
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	e7f3      	b.n	800d0bc <_dtoa_r+0x9c>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4650      	mov	r0, sl
 800d0da:	4659      	mov	r1, fp
 800d0dc:	f7f3 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0e0:	ec4b ab19 	vmov	d9, sl, fp
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	b158      	cbz	r0, 800d100 <_dtoa_r+0xe0>
 800d0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 856b 	beq.w	800dbcc <_dtoa_r+0xbac>
 800d0f6:	4883      	ldr	r0, [pc, #524]	; (800d304 <_dtoa_r+0x2e4>)
 800d0f8:	6018      	str	r0, [r3, #0]
 800d0fa:	1e43      	subs	r3, r0, #1
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	e7df      	b.n	800d0c0 <_dtoa_r+0xa0>
 800d100:	ec4b ab10 	vmov	d0, sl, fp
 800d104:	aa10      	add	r2, sp, #64	; 0x40
 800d106:	a911      	add	r1, sp, #68	; 0x44
 800d108:	4620      	mov	r0, r4
 800d10a:	f001 f983 	bl	800e414 <__d2b>
 800d10e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d112:	ee08 0a10 	vmov	s16, r0
 800d116:	2d00      	cmp	r5, #0
 800d118:	f000 8084 	beq.w	800d224 <_dtoa_r+0x204>
 800d11c:	ee19 3a90 	vmov	r3, s19
 800d120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d124:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d128:	4656      	mov	r6, sl
 800d12a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d12e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d132:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d136:	4b74      	ldr	r3, [pc, #464]	; (800d308 <_dtoa_r+0x2e8>)
 800d138:	2200      	movs	r2, #0
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 f8ab 	bl	8000298 <__aeabi_dsub>
 800d142:	a365      	add	r3, pc, #404	; (adr r3, 800d2d8 <_dtoa_r+0x2b8>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 fa5e 	bl	8000608 <__aeabi_dmul>
 800d14c:	a364      	add	r3, pc, #400	; (adr r3, 800d2e0 <_dtoa_r+0x2c0>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f8a3 	bl	800029c <__adddf3>
 800d156:	4606      	mov	r6, r0
 800d158:	4628      	mov	r0, r5
 800d15a:	460f      	mov	r7, r1
 800d15c:	f7f3 f9ea 	bl	8000534 <__aeabi_i2d>
 800d160:	a361      	add	r3, pc, #388	; (adr r3, 800d2e8 <_dtoa_r+0x2c8>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 fa4f 	bl	8000608 <__aeabi_dmul>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4630      	mov	r0, r6
 800d170:	4639      	mov	r1, r7
 800d172:	f7f3 f893 	bl	800029c <__adddf3>
 800d176:	4606      	mov	r6, r0
 800d178:	460f      	mov	r7, r1
 800d17a:	f7f3 fcf5 	bl	8000b68 <__aeabi_d2iz>
 800d17e:	2200      	movs	r2, #0
 800d180:	9000      	str	r0, [sp, #0]
 800d182:	2300      	movs	r3, #0
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fcb0 	bl	8000aec <__aeabi_dcmplt>
 800d18c:	b150      	cbz	r0, 800d1a4 <_dtoa_r+0x184>
 800d18e:	9800      	ldr	r0, [sp, #0]
 800d190:	f7f3 f9d0 	bl	8000534 <__aeabi_i2d>
 800d194:	4632      	mov	r2, r6
 800d196:	463b      	mov	r3, r7
 800d198:	f7f3 fc9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d19c:	b910      	cbnz	r0, 800d1a4 <_dtoa_r+0x184>
 800d19e:	9b00      	ldr	r3, [sp, #0]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	2b16      	cmp	r3, #22
 800d1a8:	d85a      	bhi.n	800d260 <_dtoa_r+0x240>
 800d1aa:	9a00      	ldr	r2, [sp, #0]
 800d1ac:	4b57      	ldr	r3, [pc, #348]	; (800d30c <_dtoa_r+0x2ec>)
 800d1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	ec51 0b19 	vmov	r0, r1, d9
 800d1ba:	f7f3 fc97 	bl	8000aec <__aeabi_dcmplt>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d050      	beq.n	800d264 <_dtoa_r+0x244>
 800d1c2:	9b00      	ldr	r3, [sp, #0]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1ce:	1b5d      	subs	r5, r3, r5
 800d1d0:	1e6b      	subs	r3, r5, #1
 800d1d2:	9305      	str	r3, [sp, #20]
 800d1d4:	bf45      	ittet	mi
 800d1d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d1da:	9304      	strmi	r3, [sp, #16]
 800d1dc:	2300      	movpl	r3, #0
 800d1de:	2300      	movmi	r3, #0
 800d1e0:	bf4c      	ite	mi
 800d1e2:	9305      	strmi	r3, [sp, #20]
 800d1e4:	9304      	strpl	r3, [sp, #16]
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	db3d      	blt.n	800d268 <_dtoa_r+0x248>
 800d1ec:	9b05      	ldr	r3, [sp, #20]
 800d1ee:	9a00      	ldr	r2, [sp, #0]
 800d1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d1f2:	4413      	add	r3, r2
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9307      	str	r3, [sp, #28]
 800d1fa:	9b06      	ldr	r3, [sp, #24]
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	f200 8089 	bhi.w	800d314 <_dtoa_r+0x2f4>
 800d202:	2b05      	cmp	r3, #5
 800d204:	bfc4      	itt	gt
 800d206:	3b04      	subgt	r3, #4
 800d208:	9306      	strgt	r3, [sp, #24]
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	f1a3 0302 	sub.w	r3, r3, #2
 800d210:	bfcc      	ite	gt
 800d212:	2500      	movgt	r5, #0
 800d214:	2501      	movle	r5, #1
 800d216:	2b03      	cmp	r3, #3
 800d218:	f200 8087 	bhi.w	800d32a <_dtoa_r+0x30a>
 800d21c:	e8df f003 	tbb	[pc, r3]
 800d220:	59383a2d 	.word	0x59383a2d
 800d224:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d228:	441d      	add	r5, r3
 800d22a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d22e:	2b20      	cmp	r3, #32
 800d230:	bfc1      	itttt	gt
 800d232:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d236:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d23a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d23e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d242:	bfda      	itte	le
 800d244:	f1c3 0320 	rsble	r3, r3, #32
 800d248:	fa06 f003 	lslle.w	r0, r6, r3
 800d24c:	4318      	orrgt	r0, r3
 800d24e:	f7f3 f961 	bl	8000514 <__aeabi_ui2d>
 800d252:	2301      	movs	r3, #1
 800d254:	4606      	mov	r6, r0
 800d256:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d25a:	3d01      	subs	r5, #1
 800d25c:	930e      	str	r3, [sp, #56]	; 0x38
 800d25e:	e76a      	b.n	800d136 <_dtoa_r+0x116>
 800d260:	2301      	movs	r3, #1
 800d262:	e7b2      	b.n	800d1ca <_dtoa_r+0x1aa>
 800d264:	900b      	str	r0, [sp, #44]	; 0x2c
 800d266:	e7b1      	b.n	800d1cc <_dtoa_r+0x1ac>
 800d268:	9b04      	ldr	r3, [sp, #16]
 800d26a:	9a00      	ldr	r2, [sp, #0]
 800d26c:	1a9b      	subs	r3, r3, r2
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	4253      	negs	r3, r2
 800d272:	9307      	str	r3, [sp, #28]
 800d274:	2300      	movs	r3, #0
 800d276:	930a      	str	r3, [sp, #40]	; 0x28
 800d278:	e7bf      	b.n	800d1fa <_dtoa_r+0x1da>
 800d27a:	2300      	movs	r3, #0
 800d27c:	9308      	str	r3, [sp, #32]
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc55      	bgt.n	800d330 <_dtoa_r+0x310>
 800d284:	2301      	movs	r3, #1
 800d286:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d28a:	461a      	mov	r2, r3
 800d28c:	9209      	str	r2, [sp, #36]	; 0x24
 800d28e:	e00c      	b.n	800d2aa <_dtoa_r+0x28a>
 800d290:	2301      	movs	r3, #1
 800d292:	e7f3      	b.n	800d27c <_dtoa_r+0x25c>
 800d294:	2300      	movs	r3, #0
 800d296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d298:	9308      	str	r3, [sp, #32]
 800d29a:	9b00      	ldr	r3, [sp, #0]
 800d29c:	4413      	add	r3, r2
 800d29e:	9302      	str	r3, [sp, #8]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	9303      	str	r3, [sp, #12]
 800d2a6:	bfb8      	it	lt
 800d2a8:	2301      	movlt	r3, #1
 800d2aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	6042      	str	r2, [r0, #4]
 800d2b0:	2204      	movs	r2, #4
 800d2b2:	f102 0614 	add.w	r6, r2, #20
 800d2b6:	429e      	cmp	r6, r3
 800d2b8:	6841      	ldr	r1, [r0, #4]
 800d2ba:	d93d      	bls.n	800d338 <_dtoa_r+0x318>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f000 fd81 	bl	800ddc4 <_Balloc>
 800d2c2:	9001      	str	r0, [sp, #4]
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d13b      	bne.n	800d340 <_dtoa_r+0x320>
 800d2c8:	4b11      	ldr	r3, [pc, #68]	; (800d310 <_dtoa_r+0x2f0>)
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d2d0:	e6c0      	b.n	800d054 <_dtoa_r+0x34>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e7df      	b.n	800d296 <_dtoa_r+0x276>
 800d2d6:	bf00      	nop
 800d2d8:	636f4361 	.word	0x636f4361
 800d2dc:	3fd287a7 	.word	0x3fd287a7
 800d2e0:	8b60c8b3 	.word	0x8b60c8b3
 800d2e4:	3fc68a28 	.word	0x3fc68a28
 800d2e8:	509f79fb 	.word	0x509f79fb
 800d2ec:	3fd34413 	.word	0x3fd34413
 800d2f0:	0801024d 	.word	0x0801024d
 800d2f4:	08010264 	.word	0x08010264
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	08010249 	.word	0x08010249
 800d300:	08010240 	.word	0x08010240
 800d304:	0801021d 	.word	0x0801021d
 800d308:	3ff80000 	.word	0x3ff80000
 800d30c:	08010358 	.word	0x08010358
 800d310:	080102bf 	.word	0x080102bf
 800d314:	2501      	movs	r5, #1
 800d316:	2300      	movs	r3, #0
 800d318:	9306      	str	r3, [sp, #24]
 800d31a:	9508      	str	r5, [sp, #32]
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d324:	2200      	movs	r2, #0
 800d326:	2312      	movs	r3, #18
 800d328:	e7b0      	b.n	800d28c <_dtoa_r+0x26c>
 800d32a:	2301      	movs	r3, #1
 800d32c:	9308      	str	r3, [sp, #32]
 800d32e:	e7f5      	b.n	800d31c <_dtoa_r+0x2fc>
 800d330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d332:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d336:	e7b8      	b.n	800d2aa <_dtoa_r+0x28a>
 800d338:	3101      	adds	r1, #1
 800d33a:	6041      	str	r1, [r0, #4]
 800d33c:	0052      	lsls	r2, r2, #1
 800d33e:	e7b8      	b.n	800d2b2 <_dtoa_r+0x292>
 800d340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d342:	9a01      	ldr	r2, [sp, #4]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	9b03      	ldr	r3, [sp, #12]
 800d348:	2b0e      	cmp	r3, #14
 800d34a:	f200 809d 	bhi.w	800d488 <_dtoa_r+0x468>
 800d34e:	2d00      	cmp	r5, #0
 800d350:	f000 809a 	beq.w	800d488 <_dtoa_r+0x468>
 800d354:	9b00      	ldr	r3, [sp, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	dd32      	ble.n	800d3c0 <_dtoa_r+0x3a0>
 800d35a:	4ab7      	ldr	r2, [pc, #732]	; (800d638 <_dtoa_r+0x618>)
 800d35c:	f003 030f 	and.w	r3, r3, #15
 800d360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d368:	9b00      	ldr	r3, [sp, #0]
 800d36a:	05d8      	lsls	r0, r3, #23
 800d36c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d370:	d516      	bpl.n	800d3a0 <_dtoa_r+0x380>
 800d372:	4bb2      	ldr	r3, [pc, #712]	; (800d63c <_dtoa_r+0x61c>)
 800d374:	ec51 0b19 	vmov	r0, r1, d9
 800d378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d37c:	f7f3 fa6e 	bl	800085c <__aeabi_ddiv>
 800d380:	f007 070f 	and.w	r7, r7, #15
 800d384:	4682      	mov	sl, r0
 800d386:	468b      	mov	fp, r1
 800d388:	2503      	movs	r5, #3
 800d38a:	4eac      	ldr	r6, [pc, #688]	; (800d63c <_dtoa_r+0x61c>)
 800d38c:	b957      	cbnz	r7, 800d3a4 <_dtoa_r+0x384>
 800d38e:	4642      	mov	r2, r8
 800d390:	464b      	mov	r3, r9
 800d392:	4650      	mov	r0, sl
 800d394:	4659      	mov	r1, fp
 800d396:	f7f3 fa61 	bl	800085c <__aeabi_ddiv>
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	e028      	b.n	800d3f2 <_dtoa_r+0x3d2>
 800d3a0:	2502      	movs	r5, #2
 800d3a2:	e7f2      	b.n	800d38a <_dtoa_r+0x36a>
 800d3a4:	07f9      	lsls	r1, r7, #31
 800d3a6:	d508      	bpl.n	800d3ba <_dtoa_r+0x39a>
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3b0:	f7f3 f92a 	bl	8000608 <__aeabi_dmul>
 800d3b4:	3501      	adds	r5, #1
 800d3b6:	4680      	mov	r8, r0
 800d3b8:	4689      	mov	r9, r1
 800d3ba:	107f      	asrs	r7, r7, #1
 800d3bc:	3608      	adds	r6, #8
 800d3be:	e7e5      	b.n	800d38c <_dtoa_r+0x36c>
 800d3c0:	f000 809b 	beq.w	800d4fa <_dtoa_r+0x4da>
 800d3c4:	9b00      	ldr	r3, [sp, #0]
 800d3c6:	4f9d      	ldr	r7, [pc, #628]	; (800d63c <_dtoa_r+0x61c>)
 800d3c8:	425e      	negs	r6, r3
 800d3ca:	4b9b      	ldr	r3, [pc, #620]	; (800d638 <_dtoa_r+0x618>)
 800d3cc:	f006 020f 	and.w	r2, r6, #15
 800d3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	ec51 0b19 	vmov	r0, r1, d9
 800d3dc:	f7f3 f914 	bl	8000608 <__aeabi_dmul>
 800d3e0:	1136      	asrs	r6, r6, #4
 800d3e2:	4682      	mov	sl, r0
 800d3e4:	468b      	mov	fp, r1
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2502      	movs	r5, #2
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	d17a      	bne.n	800d4e4 <_dtoa_r+0x4c4>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1d3      	bne.n	800d39a <_dtoa_r+0x37a>
 800d3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8082 	beq.w	800d4fe <_dtoa_r+0x4de>
 800d3fa:	4b91      	ldr	r3, [pc, #580]	; (800d640 <_dtoa_r+0x620>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4650      	mov	r0, sl
 800d400:	4659      	mov	r1, fp
 800d402:	f7f3 fb73 	bl	8000aec <__aeabi_dcmplt>
 800d406:	2800      	cmp	r0, #0
 800d408:	d079      	beq.n	800d4fe <_dtoa_r+0x4de>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d076      	beq.n	800d4fe <_dtoa_r+0x4de>
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	dd36      	ble.n	800d484 <_dtoa_r+0x464>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	4650      	mov	r0, sl
 800d41a:	4659      	mov	r1, fp
 800d41c:	1e5f      	subs	r7, r3, #1
 800d41e:	2200      	movs	r2, #0
 800d420:	4b88      	ldr	r3, [pc, #544]	; (800d644 <_dtoa_r+0x624>)
 800d422:	f7f3 f8f1 	bl	8000608 <__aeabi_dmul>
 800d426:	9e02      	ldr	r6, [sp, #8]
 800d428:	4682      	mov	sl, r0
 800d42a:	468b      	mov	fp, r1
 800d42c:	3501      	adds	r5, #1
 800d42e:	4628      	mov	r0, r5
 800d430:	f7f3 f880 	bl	8000534 <__aeabi_i2d>
 800d434:	4652      	mov	r2, sl
 800d436:	465b      	mov	r3, fp
 800d438:	f7f3 f8e6 	bl	8000608 <__aeabi_dmul>
 800d43c:	4b82      	ldr	r3, [pc, #520]	; (800d648 <_dtoa_r+0x628>)
 800d43e:	2200      	movs	r2, #0
 800d440:	f7f2 ff2c 	bl	800029c <__adddf3>
 800d444:	46d0      	mov	r8, sl
 800d446:	46d9      	mov	r9, fp
 800d448:	4682      	mov	sl, r0
 800d44a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d44e:	2e00      	cmp	r6, #0
 800d450:	d158      	bne.n	800d504 <_dtoa_r+0x4e4>
 800d452:	4b7e      	ldr	r3, [pc, #504]	; (800d64c <_dtoa_r+0x62c>)
 800d454:	2200      	movs	r2, #0
 800d456:	4640      	mov	r0, r8
 800d458:	4649      	mov	r1, r9
 800d45a:	f7f2 ff1d 	bl	8000298 <__aeabi_dsub>
 800d45e:	4652      	mov	r2, sl
 800d460:	465b      	mov	r3, fp
 800d462:	4680      	mov	r8, r0
 800d464:	4689      	mov	r9, r1
 800d466:	f7f3 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f040 8295 	bne.w	800d99a <_dtoa_r+0x97a>
 800d470:	4652      	mov	r2, sl
 800d472:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d476:	4640      	mov	r0, r8
 800d478:	4649      	mov	r1, r9
 800d47a:	f7f3 fb37 	bl	8000aec <__aeabi_dcmplt>
 800d47e:	2800      	cmp	r0, #0
 800d480:	f040 8289 	bne.w	800d996 <_dtoa_r+0x976>
 800d484:	ec5b ab19 	vmov	sl, fp, d9
 800d488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f2c0 8148 	blt.w	800d720 <_dtoa_r+0x700>
 800d490:	9a00      	ldr	r2, [sp, #0]
 800d492:	2a0e      	cmp	r2, #14
 800d494:	f300 8144 	bgt.w	800d720 <_dtoa_r+0x700>
 800d498:	4b67      	ldr	r3, [pc, #412]	; (800d638 <_dtoa_r+0x618>)
 800d49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f280 80d5 	bge.w	800d654 <_dtoa_r+0x634>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f300 80d1 	bgt.w	800d654 <_dtoa_r+0x634>
 800d4b2:	f040 826f 	bne.w	800d994 <_dtoa_r+0x974>
 800d4b6:	4b65      	ldr	r3, [pc, #404]	; (800d64c <_dtoa_r+0x62c>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4649      	mov	r1, r9
 800d4be:	f7f3 f8a3 	bl	8000608 <__aeabi_dmul>
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	f7f3 fb25 	bl	8000b14 <__aeabi_dcmpge>
 800d4ca:	9e03      	ldr	r6, [sp, #12]
 800d4cc:	4637      	mov	r7, r6
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f040 8245 	bne.w	800d95e <_dtoa_r+0x93e>
 800d4d4:	9d01      	ldr	r5, [sp, #4]
 800d4d6:	2331      	movs	r3, #49	; 0x31
 800d4d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d4dc:	9b00      	ldr	r3, [sp, #0]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	e240      	b.n	800d966 <_dtoa_r+0x946>
 800d4e4:	07f2      	lsls	r2, r6, #31
 800d4e6:	d505      	bpl.n	800d4f4 <_dtoa_r+0x4d4>
 800d4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ec:	f7f3 f88c 	bl	8000608 <__aeabi_dmul>
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	1076      	asrs	r6, r6, #1
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	e777      	b.n	800d3ea <_dtoa_r+0x3ca>
 800d4fa:	2502      	movs	r5, #2
 800d4fc:	e779      	b.n	800d3f2 <_dtoa_r+0x3d2>
 800d4fe:	9f00      	ldr	r7, [sp, #0]
 800d500:	9e03      	ldr	r6, [sp, #12]
 800d502:	e794      	b.n	800d42e <_dtoa_r+0x40e>
 800d504:	9901      	ldr	r1, [sp, #4]
 800d506:	4b4c      	ldr	r3, [pc, #304]	; (800d638 <_dtoa_r+0x618>)
 800d508:	4431      	add	r1, r6
 800d50a:	910d      	str	r1, [sp, #52]	; 0x34
 800d50c:	9908      	ldr	r1, [sp, #32]
 800d50e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d516:	2900      	cmp	r1, #0
 800d518:	d043      	beq.n	800d5a2 <_dtoa_r+0x582>
 800d51a:	494d      	ldr	r1, [pc, #308]	; (800d650 <_dtoa_r+0x630>)
 800d51c:	2000      	movs	r0, #0
 800d51e:	f7f3 f99d 	bl	800085c <__aeabi_ddiv>
 800d522:	4652      	mov	r2, sl
 800d524:	465b      	mov	r3, fp
 800d526:	f7f2 feb7 	bl	8000298 <__aeabi_dsub>
 800d52a:	9d01      	ldr	r5, [sp, #4]
 800d52c:	4682      	mov	sl, r0
 800d52e:	468b      	mov	fp, r1
 800d530:	4649      	mov	r1, r9
 800d532:	4640      	mov	r0, r8
 800d534:	f7f3 fb18 	bl	8000b68 <__aeabi_d2iz>
 800d538:	4606      	mov	r6, r0
 800d53a:	f7f2 fffb 	bl	8000534 <__aeabi_i2d>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4640      	mov	r0, r8
 800d544:	4649      	mov	r1, r9
 800d546:	f7f2 fea7 	bl	8000298 <__aeabi_dsub>
 800d54a:	3630      	adds	r6, #48	; 0x30
 800d54c:	f805 6b01 	strb.w	r6, [r5], #1
 800d550:	4652      	mov	r2, sl
 800d552:	465b      	mov	r3, fp
 800d554:	4680      	mov	r8, r0
 800d556:	4689      	mov	r9, r1
 800d558:	f7f3 fac8 	bl	8000aec <__aeabi_dcmplt>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d163      	bne.n	800d628 <_dtoa_r+0x608>
 800d560:	4642      	mov	r2, r8
 800d562:	464b      	mov	r3, r9
 800d564:	4936      	ldr	r1, [pc, #216]	; (800d640 <_dtoa_r+0x620>)
 800d566:	2000      	movs	r0, #0
 800d568:	f7f2 fe96 	bl	8000298 <__aeabi_dsub>
 800d56c:	4652      	mov	r2, sl
 800d56e:	465b      	mov	r3, fp
 800d570:	f7f3 fabc 	bl	8000aec <__aeabi_dcmplt>
 800d574:	2800      	cmp	r0, #0
 800d576:	f040 80b5 	bne.w	800d6e4 <_dtoa_r+0x6c4>
 800d57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d57c:	429d      	cmp	r5, r3
 800d57e:	d081      	beq.n	800d484 <_dtoa_r+0x464>
 800d580:	4b30      	ldr	r3, [pc, #192]	; (800d644 <_dtoa_r+0x624>)
 800d582:	2200      	movs	r2, #0
 800d584:	4650      	mov	r0, sl
 800d586:	4659      	mov	r1, fp
 800d588:	f7f3 f83e 	bl	8000608 <__aeabi_dmul>
 800d58c:	4b2d      	ldr	r3, [pc, #180]	; (800d644 <_dtoa_r+0x624>)
 800d58e:	4682      	mov	sl, r0
 800d590:	468b      	mov	fp, r1
 800d592:	4640      	mov	r0, r8
 800d594:	4649      	mov	r1, r9
 800d596:	2200      	movs	r2, #0
 800d598:	f7f3 f836 	bl	8000608 <__aeabi_dmul>
 800d59c:	4680      	mov	r8, r0
 800d59e:	4689      	mov	r9, r1
 800d5a0:	e7c6      	b.n	800d530 <_dtoa_r+0x510>
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	4659      	mov	r1, fp
 800d5a6:	f7f3 f82f 	bl	8000608 <__aeabi_dmul>
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ac:	9d01      	ldr	r5, [sp, #4]
 800d5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5b0:	4682      	mov	sl, r0
 800d5b2:	468b      	mov	fp, r1
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	f7f3 fad6 	bl	8000b68 <__aeabi_d2iz>
 800d5bc:	4606      	mov	r6, r0
 800d5be:	f7f2 ffb9 	bl	8000534 <__aeabi_i2d>
 800d5c2:	3630      	adds	r6, #48	; 0x30
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	f7f2 fe64 	bl	8000298 <__aeabi_dsub>
 800d5d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d5d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5d6:	429d      	cmp	r5, r3
 800d5d8:	4680      	mov	r8, r0
 800d5da:	4689      	mov	r9, r1
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	d124      	bne.n	800d62c <_dtoa_r+0x60c>
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <_dtoa_r+0x630>)
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	f7f2 fe58 	bl	800029c <__adddf3>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	f7f3 fa98 	bl	8000b28 <__aeabi_dcmpgt>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d173      	bne.n	800d6e4 <_dtoa_r+0x6c4>
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	465b      	mov	r3, fp
 800d600:	4913      	ldr	r1, [pc, #76]	; (800d650 <_dtoa_r+0x630>)
 800d602:	2000      	movs	r0, #0
 800d604:	f7f2 fe48 	bl	8000298 <__aeabi_dsub>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4640      	mov	r0, r8
 800d60e:	4649      	mov	r1, r9
 800d610:	f7f3 fa6c 	bl	8000aec <__aeabi_dcmplt>
 800d614:	2800      	cmp	r0, #0
 800d616:	f43f af35 	beq.w	800d484 <_dtoa_r+0x464>
 800d61a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d61c:	1e6b      	subs	r3, r5, #1
 800d61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d620:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d624:	2b30      	cmp	r3, #48	; 0x30
 800d626:	d0f8      	beq.n	800d61a <_dtoa_r+0x5fa>
 800d628:	9700      	str	r7, [sp, #0]
 800d62a:	e049      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <_dtoa_r+0x624>)
 800d62e:	f7f2 ffeb 	bl	8000608 <__aeabi_dmul>
 800d632:	4680      	mov	r8, r0
 800d634:	4689      	mov	r9, r1
 800d636:	e7bd      	b.n	800d5b4 <_dtoa_r+0x594>
 800d638:	08010358 	.word	0x08010358
 800d63c:	08010330 	.word	0x08010330
 800d640:	3ff00000 	.word	0x3ff00000
 800d644:	40240000 	.word	0x40240000
 800d648:	401c0000 	.word	0x401c0000
 800d64c:	40140000 	.word	0x40140000
 800d650:	3fe00000 	.word	0x3fe00000
 800d654:	9d01      	ldr	r5, [sp, #4]
 800d656:	4656      	mov	r6, sl
 800d658:	465f      	mov	r7, fp
 800d65a:	4642      	mov	r2, r8
 800d65c:	464b      	mov	r3, r9
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f3 f8fb 	bl	800085c <__aeabi_ddiv>
 800d666:	f7f3 fa7f 	bl	8000b68 <__aeabi_d2iz>
 800d66a:	4682      	mov	sl, r0
 800d66c:	f7f2 ff62 	bl	8000534 <__aeabi_i2d>
 800d670:	4642      	mov	r2, r8
 800d672:	464b      	mov	r3, r9
 800d674:	f7f2 ffc8 	bl	8000608 <__aeabi_dmul>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d684:	f7f2 fe08 	bl	8000298 <__aeabi_dsub>
 800d688:	f805 6b01 	strb.w	r6, [r5], #1
 800d68c:	9e01      	ldr	r6, [sp, #4]
 800d68e:	9f03      	ldr	r7, [sp, #12]
 800d690:	1bae      	subs	r6, r5, r6
 800d692:	42b7      	cmp	r7, r6
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	d135      	bne.n	800d706 <_dtoa_r+0x6e6>
 800d69a:	f7f2 fdff 	bl	800029c <__adddf3>
 800d69e:	4642      	mov	r2, r8
 800d6a0:	464b      	mov	r3, r9
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	f7f3 fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 800d6aa:	b9d0      	cbnz	r0, 800d6e2 <_dtoa_r+0x6c2>
 800d6ac:	4642      	mov	r2, r8
 800d6ae:	464b      	mov	r3, r9
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f3 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6b8:	b110      	cbz	r0, 800d6c0 <_dtoa_r+0x6a0>
 800d6ba:	f01a 0f01 	tst.w	sl, #1
 800d6be:	d110      	bne.n	800d6e2 <_dtoa_r+0x6c2>
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	ee18 1a10 	vmov	r1, s16
 800d6c6:	f000 fbbd 	bl	800de44 <_Bfree>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9800      	ldr	r0, [sp, #0]
 800d6ce:	702b      	strb	r3, [r5, #0]
 800d6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	6018      	str	r0, [r3, #0]
 800d6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f43f acf1 	beq.w	800d0c0 <_dtoa_r+0xa0>
 800d6de:	601d      	str	r5, [r3, #0]
 800d6e0:	e4ee      	b.n	800d0c0 <_dtoa_r+0xa0>
 800d6e2:	9f00      	ldr	r7, [sp, #0]
 800d6e4:	462b      	mov	r3, r5
 800d6e6:	461d      	mov	r5, r3
 800d6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ec:	2a39      	cmp	r2, #57	; 0x39
 800d6ee:	d106      	bne.n	800d6fe <_dtoa_r+0x6de>
 800d6f0:	9a01      	ldr	r2, [sp, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1f7      	bne.n	800d6e6 <_dtoa_r+0x6c6>
 800d6f6:	9901      	ldr	r1, [sp, #4]
 800d6f8:	2230      	movs	r2, #48	; 0x30
 800d6fa:	3701      	adds	r7, #1
 800d6fc:	700a      	strb	r2, [r1, #0]
 800d6fe:	781a      	ldrb	r2, [r3, #0]
 800d700:	3201      	adds	r2, #1
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e790      	b.n	800d628 <_dtoa_r+0x608>
 800d706:	4ba6      	ldr	r3, [pc, #664]	; (800d9a0 <_dtoa_r+0x980>)
 800d708:	2200      	movs	r2, #0
 800d70a:	f7f2 ff7d 	bl	8000608 <__aeabi_dmul>
 800d70e:	2200      	movs	r2, #0
 800d710:	2300      	movs	r3, #0
 800d712:	4606      	mov	r6, r0
 800d714:	460f      	mov	r7, r1
 800d716:	f7f3 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d09d      	beq.n	800d65a <_dtoa_r+0x63a>
 800d71e:	e7cf      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d720:	9a08      	ldr	r2, [sp, #32]
 800d722:	2a00      	cmp	r2, #0
 800d724:	f000 80d7 	beq.w	800d8d6 <_dtoa_r+0x8b6>
 800d728:	9a06      	ldr	r2, [sp, #24]
 800d72a:	2a01      	cmp	r2, #1
 800d72c:	f300 80ba 	bgt.w	800d8a4 <_dtoa_r+0x884>
 800d730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d732:	2a00      	cmp	r2, #0
 800d734:	f000 80b2 	beq.w	800d89c <_dtoa_r+0x87c>
 800d738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d73c:	9e07      	ldr	r6, [sp, #28]
 800d73e:	9d04      	ldr	r5, [sp, #16]
 800d740:	9a04      	ldr	r2, [sp, #16]
 800d742:	441a      	add	r2, r3
 800d744:	9204      	str	r2, [sp, #16]
 800d746:	9a05      	ldr	r2, [sp, #20]
 800d748:	2101      	movs	r1, #1
 800d74a:	441a      	add	r2, r3
 800d74c:	4620      	mov	r0, r4
 800d74e:	9205      	str	r2, [sp, #20]
 800d750:	f000 fc30 	bl	800dfb4 <__i2b>
 800d754:	4607      	mov	r7, r0
 800d756:	2d00      	cmp	r5, #0
 800d758:	dd0c      	ble.n	800d774 <_dtoa_r+0x754>
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd09      	ble.n	800d774 <_dtoa_r+0x754>
 800d760:	42ab      	cmp	r3, r5
 800d762:	9a04      	ldr	r2, [sp, #16]
 800d764:	bfa8      	it	ge
 800d766:	462b      	movge	r3, r5
 800d768:	1ad2      	subs	r2, r2, r3
 800d76a:	9204      	str	r2, [sp, #16]
 800d76c:	9a05      	ldr	r2, [sp, #20]
 800d76e:	1aed      	subs	r5, r5, r3
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	9b07      	ldr	r3, [sp, #28]
 800d776:	b31b      	cbz	r3, 800d7c0 <_dtoa_r+0x7a0>
 800d778:	9b08      	ldr	r3, [sp, #32]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 80af 	beq.w	800d8de <_dtoa_r+0x8be>
 800d780:	2e00      	cmp	r6, #0
 800d782:	dd13      	ble.n	800d7ac <_dtoa_r+0x78c>
 800d784:	4639      	mov	r1, r7
 800d786:	4632      	mov	r2, r6
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 fcd3 	bl	800e134 <__pow5mult>
 800d78e:	ee18 2a10 	vmov	r2, s16
 800d792:	4601      	mov	r1, r0
 800d794:	4607      	mov	r7, r0
 800d796:	4620      	mov	r0, r4
 800d798:	f000 fc22 	bl	800dfe0 <__multiply>
 800d79c:	ee18 1a10 	vmov	r1, s16
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 fb4e 	bl	800de44 <_Bfree>
 800d7a8:	ee08 8a10 	vmov	s16, r8
 800d7ac:	9b07      	ldr	r3, [sp, #28]
 800d7ae:	1b9a      	subs	r2, r3, r6
 800d7b0:	d006      	beq.n	800d7c0 <_dtoa_r+0x7a0>
 800d7b2:	ee18 1a10 	vmov	r1, s16
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f000 fcbc 	bl	800e134 <__pow5mult>
 800d7bc:	ee08 0a10 	vmov	s16, r0
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f000 fbf6 	bl	800dfb4 <__i2b>
 800d7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	4606      	mov	r6, r0
 800d7ce:	f340 8088 	ble.w	800d8e2 <_dtoa_r+0x8c2>
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 fcac 	bl	800e134 <__pow5mult>
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	f340 8081 	ble.w	800d8e8 <_dtoa_r+0x8c8>
 800d7e6:	f04f 0800 	mov.w	r8, #0
 800d7ea:	6933      	ldr	r3, [r6, #16]
 800d7ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7f0:	6918      	ldr	r0, [r3, #16]
 800d7f2:	f000 fb8f 	bl	800df14 <__hi0bits>
 800d7f6:	f1c0 0020 	rsb	r0, r0, #32
 800d7fa:	9b05      	ldr	r3, [sp, #20]
 800d7fc:	4418      	add	r0, r3
 800d7fe:	f010 001f 	ands.w	r0, r0, #31
 800d802:	f000 8092 	beq.w	800d92a <_dtoa_r+0x90a>
 800d806:	f1c0 0320 	rsb	r3, r0, #32
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	f340 808a 	ble.w	800d924 <_dtoa_r+0x904>
 800d810:	f1c0 001c 	rsb	r0, r0, #28
 800d814:	9b04      	ldr	r3, [sp, #16]
 800d816:	4403      	add	r3, r0
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	9b05      	ldr	r3, [sp, #20]
 800d81c:	4403      	add	r3, r0
 800d81e:	4405      	add	r5, r0
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	9b04      	ldr	r3, [sp, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	dd07      	ble.n	800d838 <_dtoa_r+0x818>
 800d828:	ee18 1a10 	vmov	r1, s16
 800d82c:	461a      	mov	r2, r3
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 fcda 	bl	800e1e8 <__lshift>
 800d834:	ee08 0a10 	vmov	s16, r0
 800d838:	9b05      	ldr	r3, [sp, #20]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dd05      	ble.n	800d84a <_dtoa_r+0x82a>
 800d83e:	4631      	mov	r1, r6
 800d840:	461a      	mov	r2, r3
 800d842:	4620      	mov	r0, r4
 800d844:	f000 fcd0 	bl	800e1e8 <__lshift>
 800d848:	4606      	mov	r6, r0
 800d84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d06e      	beq.n	800d92e <_dtoa_r+0x90e>
 800d850:	ee18 0a10 	vmov	r0, s16
 800d854:	4631      	mov	r1, r6
 800d856:	f000 fd37 	bl	800e2c8 <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	da67      	bge.n	800d92e <_dtoa_r+0x90e>
 800d85e:	9b00      	ldr	r3, [sp, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	ee18 1a10 	vmov	r1, s16
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	220a      	movs	r2, #10
 800d86a:	2300      	movs	r3, #0
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fb0b 	bl	800de88 <__multadd>
 800d872:	9b08      	ldr	r3, [sp, #32]
 800d874:	ee08 0a10 	vmov	s16, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 81b1 	beq.w	800dbe0 <_dtoa_r+0xbc0>
 800d87e:	2300      	movs	r3, #0
 800d880:	4639      	mov	r1, r7
 800d882:	220a      	movs	r2, #10
 800d884:	4620      	mov	r0, r4
 800d886:	f000 faff 	bl	800de88 <__multadd>
 800d88a:	9b02      	ldr	r3, [sp, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	4607      	mov	r7, r0
 800d890:	f300 808e 	bgt.w	800d9b0 <_dtoa_r+0x990>
 800d894:	9b06      	ldr	r3, [sp, #24]
 800d896:	2b02      	cmp	r3, #2
 800d898:	dc51      	bgt.n	800d93e <_dtoa_r+0x91e>
 800d89a:	e089      	b.n	800d9b0 <_dtoa_r+0x990>
 800d89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8a2:	e74b      	b.n	800d73c <_dtoa_r+0x71c>
 800d8a4:	9b03      	ldr	r3, [sp, #12]
 800d8a6:	1e5e      	subs	r6, r3, #1
 800d8a8:	9b07      	ldr	r3, [sp, #28]
 800d8aa:	42b3      	cmp	r3, r6
 800d8ac:	bfbf      	itttt	lt
 800d8ae:	9b07      	ldrlt	r3, [sp, #28]
 800d8b0:	9607      	strlt	r6, [sp, #28]
 800d8b2:	1af2      	sublt	r2, r6, r3
 800d8b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d8b6:	bfb6      	itet	lt
 800d8b8:	189b      	addlt	r3, r3, r2
 800d8ba:	1b9e      	subge	r6, r3, r6
 800d8bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	bfb8      	it	lt
 800d8c2:	2600      	movlt	r6, #0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfb7      	itett	lt
 800d8c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d8cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d8d0:	1a9d      	sublt	r5, r3, r2
 800d8d2:	2300      	movlt	r3, #0
 800d8d4:	e734      	b.n	800d740 <_dtoa_r+0x720>
 800d8d6:	9e07      	ldr	r6, [sp, #28]
 800d8d8:	9d04      	ldr	r5, [sp, #16]
 800d8da:	9f08      	ldr	r7, [sp, #32]
 800d8dc:	e73b      	b.n	800d756 <_dtoa_r+0x736>
 800d8de:	9a07      	ldr	r2, [sp, #28]
 800d8e0:	e767      	b.n	800d7b2 <_dtoa_r+0x792>
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	dc18      	bgt.n	800d91a <_dtoa_r+0x8fa>
 800d8e8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ec:	d115      	bne.n	800d91a <_dtoa_r+0x8fa>
 800d8ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8f2:	b993      	cbnz	r3, 800d91a <_dtoa_r+0x8fa>
 800d8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	051b      	lsls	r3, r3, #20
 800d8fc:	b183      	cbz	r3, 800d920 <_dtoa_r+0x900>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	3301      	adds	r3, #1
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	9b05      	ldr	r3, [sp, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	f04f 0801 	mov.w	r8, #1
 800d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d910:	2b00      	cmp	r3, #0
 800d912:	f47f af6a 	bne.w	800d7ea <_dtoa_r+0x7ca>
 800d916:	2001      	movs	r0, #1
 800d918:	e76f      	b.n	800d7fa <_dtoa_r+0x7da>
 800d91a:	f04f 0800 	mov.w	r8, #0
 800d91e:	e7f6      	b.n	800d90e <_dtoa_r+0x8ee>
 800d920:	4698      	mov	r8, r3
 800d922:	e7f4      	b.n	800d90e <_dtoa_r+0x8ee>
 800d924:	f43f af7d 	beq.w	800d822 <_dtoa_r+0x802>
 800d928:	4618      	mov	r0, r3
 800d92a:	301c      	adds	r0, #28
 800d92c:	e772      	b.n	800d814 <_dtoa_r+0x7f4>
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	dc37      	bgt.n	800d9a4 <_dtoa_r+0x984>
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	2b02      	cmp	r3, #2
 800d938:	dd34      	ble.n	800d9a4 <_dtoa_r+0x984>
 800d93a:	9b03      	ldr	r3, [sp, #12]
 800d93c:	9302      	str	r3, [sp, #8]
 800d93e:	9b02      	ldr	r3, [sp, #8]
 800d940:	b96b      	cbnz	r3, 800d95e <_dtoa_r+0x93e>
 800d942:	4631      	mov	r1, r6
 800d944:	2205      	movs	r2, #5
 800d946:	4620      	mov	r0, r4
 800d948:	f000 fa9e 	bl	800de88 <__multadd>
 800d94c:	4601      	mov	r1, r0
 800d94e:	4606      	mov	r6, r0
 800d950:	ee18 0a10 	vmov	r0, s16
 800d954:	f000 fcb8 	bl	800e2c8 <__mcmp>
 800d958:	2800      	cmp	r0, #0
 800d95a:	f73f adbb 	bgt.w	800d4d4 <_dtoa_r+0x4b4>
 800d95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d960:	9d01      	ldr	r5, [sp, #4]
 800d962:	43db      	mvns	r3, r3
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	f04f 0800 	mov.w	r8, #0
 800d96a:	4631      	mov	r1, r6
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 fa69 	bl	800de44 <_Bfree>
 800d972:	2f00      	cmp	r7, #0
 800d974:	f43f aea4 	beq.w	800d6c0 <_dtoa_r+0x6a0>
 800d978:	f1b8 0f00 	cmp.w	r8, #0
 800d97c:	d005      	beq.n	800d98a <_dtoa_r+0x96a>
 800d97e:	45b8      	cmp	r8, r7
 800d980:	d003      	beq.n	800d98a <_dtoa_r+0x96a>
 800d982:	4641      	mov	r1, r8
 800d984:	4620      	mov	r0, r4
 800d986:	f000 fa5d 	bl	800de44 <_Bfree>
 800d98a:	4639      	mov	r1, r7
 800d98c:	4620      	mov	r0, r4
 800d98e:	f000 fa59 	bl	800de44 <_Bfree>
 800d992:	e695      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d994:	2600      	movs	r6, #0
 800d996:	4637      	mov	r7, r6
 800d998:	e7e1      	b.n	800d95e <_dtoa_r+0x93e>
 800d99a:	9700      	str	r7, [sp, #0]
 800d99c:	4637      	mov	r7, r6
 800d99e:	e599      	b.n	800d4d4 <_dtoa_r+0x4b4>
 800d9a0:	40240000 	.word	0x40240000
 800d9a4:	9b08      	ldr	r3, [sp, #32]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80ca 	beq.w	800db40 <_dtoa_r+0xb20>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	2d00      	cmp	r5, #0
 800d9b2:	dd05      	ble.n	800d9c0 <_dtoa_r+0x9a0>
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	462a      	mov	r2, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f000 fc15 	bl	800e1e8 <__lshift>
 800d9be:	4607      	mov	r7, r0
 800d9c0:	f1b8 0f00 	cmp.w	r8, #0
 800d9c4:	d05b      	beq.n	800da7e <_dtoa_r+0xa5e>
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 f9fb 	bl	800ddc4 <_Balloc>
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	b928      	cbnz	r0, 800d9de <_dtoa_r+0x9be>
 800d9d2:	4b87      	ldr	r3, [pc, #540]	; (800dbf0 <_dtoa_r+0xbd0>)
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d9da:	f7ff bb3b 	b.w	800d054 <_dtoa_r+0x34>
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	3202      	adds	r2, #2
 800d9e2:	0092      	lsls	r2, r2, #2
 800d9e4:	f107 010c 	add.w	r1, r7, #12
 800d9e8:	300c      	adds	r0, #12
 800d9ea:	f7fe fbc3 	bl	800c174 <memcpy>
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 fbf8 	bl	800e1e8 <__lshift>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	f103 0901 	add.w	r9, r3, #1
 800d9fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800da02:	4413      	add	r3, r2
 800da04:	9305      	str	r3, [sp, #20]
 800da06:	f00a 0301 	and.w	r3, sl, #1
 800da0a:	46b8      	mov	r8, r7
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	4607      	mov	r7, r0
 800da10:	4631      	mov	r1, r6
 800da12:	ee18 0a10 	vmov	r0, s16
 800da16:	f7ff fa75 	bl	800cf04 <quorem>
 800da1a:	4641      	mov	r1, r8
 800da1c:	9002      	str	r0, [sp, #8]
 800da1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da22:	ee18 0a10 	vmov	r0, s16
 800da26:	f000 fc4f 	bl	800e2c8 <__mcmp>
 800da2a:	463a      	mov	r2, r7
 800da2c:	9003      	str	r0, [sp, #12]
 800da2e:	4631      	mov	r1, r6
 800da30:	4620      	mov	r0, r4
 800da32:	f000 fc65 	bl	800e300 <__mdiff>
 800da36:	68c2      	ldr	r2, [r0, #12]
 800da38:	f109 3bff 	add.w	fp, r9, #4294967295
 800da3c:	4605      	mov	r5, r0
 800da3e:	bb02      	cbnz	r2, 800da82 <_dtoa_r+0xa62>
 800da40:	4601      	mov	r1, r0
 800da42:	ee18 0a10 	vmov	r0, s16
 800da46:	f000 fc3f 	bl	800e2c8 <__mcmp>
 800da4a:	4602      	mov	r2, r0
 800da4c:	4629      	mov	r1, r5
 800da4e:	4620      	mov	r0, r4
 800da50:	9207      	str	r2, [sp, #28]
 800da52:	f000 f9f7 	bl	800de44 <_Bfree>
 800da56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800da5a:	ea43 0102 	orr.w	r1, r3, r2
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	430b      	orrs	r3, r1
 800da62:	464d      	mov	r5, r9
 800da64:	d10f      	bne.n	800da86 <_dtoa_r+0xa66>
 800da66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da6a:	d02a      	beq.n	800dac2 <_dtoa_r+0xaa2>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	dd02      	ble.n	800da78 <_dtoa_r+0xa58>
 800da72:	9b02      	ldr	r3, [sp, #8]
 800da74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800da78:	f88b a000 	strb.w	sl, [fp]
 800da7c:	e775      	b.n	800d96a <_dtoa_r+0x94a>
 800da7e:	4638      	mov	r0, r7
 800da80:	e7ba      	b.n	800d9f8 <_dtoa_r+0x9d8>
 800da82:	2201      	movs	r2, #1
 800da84:	e7e2      	b.n	800da4c <_dtoa_r+0xa2c>
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	db04      	blt.n	800da96 <_dtoa_r+0xa76>
 800da8c:	9906      	ldr	r1, [sp, #24]
 800da8e:	430b      	orrs	r3, r1
 800da90:	9904      	ldr	r1, [sp, #16]
 800da92:	430b      	orrs	r3, r1
 800da94:	d122      	bne.n	800dadc <_dtoa_r+0xabc>
 800da96:	2a00      	cmp	r2, #0
 800da98:	ddee      	ble.n	800da78 <_dtoa_r+0xa58>
 800da9a:	ee18 1a10 	vmov	r1, s16
 800da9e:	2201      	movs	r2, #1
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fba1 	bl	800e1e8 <__lshift>
 800daa6:	4631      	mov	r1, r6
 800daa8:	ee08 0a10 	vmov	s16, r0
 800daac:	f000 fc0c 	bl	800e2c8 <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	dc03      	bgt.n	800dabc <_dtoa_r+0xa9c>
 800dab4:	d1e0      	bne.n	800da78 <_dtoa_r+0xa58>
 800dab6:	f01a 0f01 	tst.w	sl, #1
 800daba:	d0dd      	beq.n	800da78 <_dtoa_r+0xa58>
 800dabc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dac0:	d1d7      	bne.n	800da72 <_dtoa_r+0xa52>
 800dac2:	2339      	movs	r3, #57	; 0x39
 800dac4:	f88b 3000 	strb.w	r3, [fp]
 800dac8:	462b      	mov	r3, r5
 800daca:	461d      	mov	r5, r3
 800dacc:	3b01      	subs	r3, #1
 800dace:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dad2:	2a39      	cmp	r2, #57	; 0x39
 800dad4:	d071      	beq.n	800dbba <_dtoa_r+0xb9a>
 800dad6:	3201      	adds	r2, #1
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	e746      	b.n	800d96a <_dtoa_r+0x94a>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	dd07      	ble.n	800daf0 <_dtoa_r+0xad0>
 800dae0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dae4:	d0ed      	beq.n	800dac2 <_dtoa_r+0xaa2>
 800dae6:	f10a 0301 	add.w	r3, sl, #1
 800daea:	f88b 3000 	strb.w	r3, [fp]
 800daee:	e73c      	b.n	800d96a <_dtoa_r+0x94a>
 800daf0:	9b05      	ldr	r3, [sp, #20]
 800daf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800daf6:	4599      	cmp	r9, r3
 800daf8:	d047      	beq.n	800db8a <_dtoa_r+0xb6a>
 800dafa:	ee18 1a10 	vmov	r1, s16
 800dafe:	2300      	movs	r3, #0
 800db00:	220a      	movs	r2, #10
 800db02:	4620      	mov	r0, r4
 800db04:	f000 f9c0 	bl	800de88 <__multadd>
 800db08:	45b8      	cmp	r8, r7
 800db0a:	ee08 0a10 	vmov	s16, r0
 800db0e:	f04f 0300 	mov.w	r3, #0
 800db12:	f04f 020a 	mov.w	r2, #10
 800db16:	4641      	mov	r1, r8
 800db18:	4620      	mov	r0, r4
 800db1a:	d106      	bne.n	800db2a <_dtoa_r+0xb0a>
 800db1c:	f000 f9b4 	bl	800de88 <__multadd>
 800db20:	4680      	mov	r8, r0
 800db22:	4607      	mov	r7, r0
 800db24:	f109 0901 	add.w	r9, r9, #1
 800db28:	e772      	b.n	800da10 <_dtoa_r+0x9f0>
 800db2a:	f000 f9ad 	bl	800de88 <__multadd>
 800db2e:	4639      	mov	r1, r7
 800db30:	4680      	mov	r8, r0
 800db32:	2300      	movs	r3, #0
 800db34:	220a      	movs	r2, #10
 800db36:	4620      	mov	r0, r4
 800db38:	f000 f9a6 	bl	800de88 <__multadd>
 800db3c:	4607      	mov	r7, r0
 800db3e:	e7f1      	b.n	800db24 <_dtoa_r+0xb04>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	9302      	str	r3, [sp, #8]
 800db44:	9d01      	ldr	r5, [sp, #4]
 800db46:	ee18 0a10 	vmov	r0, s16
 800db4a:	4631      	mov	r1, r6
 800db4c:	f7ff f9da 	bl	800cf04 <quorem>
 800db50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db54:	9b01      	ldr	r3, [sp, #4]
 800db56:	f805 ab01 	strb.w	sl, [r5], #1
 800db5a:	1aea      	subs	r2, r5, r3
 800db5c:	9b02      	ldr	r3, [sp, #8]
 800db5e:	4293      	cmp	r3, r2
 800db60:	dd09      	ble.n	800db76 <_dtoa_r+0xb56>
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	2300      	movs	r3, #0
 800db68:	220a      	movs	r2, #10
 800db6a:	4620      	mov	r0, r4
 800db6c:	f000 f98c 	bl	800de88 <__multadd>
 800db70:	ee08 0a10 	vmov	s16, r0
 800db74:	e7e7      	b.n	800db46 <_dtoa_r+0xb26>
 800db76:	9b02      	ldr	r3, [sp, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	bfc8      	it	gt
 800db7c:	461d      	movgt	r5, r3
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	bfd8      	it	le
 800db82:	2501      	movle	r5, #1
 800db84:	441d      	add	r5, r3
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	ee18 1a10 	vmov	r1, s16
 800db8e:	2201      	movs	r2, #1
 800db90:	4620      	mov	r0, r4
 800db92:	f000 fb29 	bl	800e1e8 <__lshift>
 800db96:	4631      	mov	r1, r6
 800db98:	ee08 0a10 	vmov	s16, r0
 800db9c:	f000 fb94 	bl	800e2c8 <__mcmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dc91      	bgt.n	800dac8 <_dtoa_r+0xaa8>
 800dba4:	d102      	bne.n	800dbac <_dtoa_r+0xb8c>
 800dba6:	f01a 0f01 	tst.w	sl, #1
 800dbaa:	d18d      	bne.n	800dac8 <_dtoa_r+0xaa8>
 800dbac:	462b      	mov	r3, r5
 800dbae:	461d      	mov	r5, r3
 800dbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb4:	2a30      	cmp	r2, #48	; 0x30
 800dbb6:	d0fa      	beq.n	800dbae <_dtoa_r+0xb8e>
 800dbb8:	e6d7      	b.n	800d96a <_dtoa_r+0x94a>
 800dbba:	9a01      	ldr	r2, [sp, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d184      	bne.n	800daca <_dtoa_r+0xaaa>
 800dbc0:	9b00      	ldr	r3, [sp, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	2331      	movs	r3, #49	; 0x31
 800dbc8:	7013      	strb	r3, [r2, #0]
 800dbca:	e6ce      	b.n	800d96a <_dtoa_r+0x94a>
 800dbcc:	4b09      	ldr	r3, [pc, #36]	; (800dbf4 <_dtoa_r+0xbd4>)
 800dbce:	f7ff ba95 	b.w	800d0fc <_dtoa_r+0xdc>
 800dbd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f47f aa6e 	bne.w	800d0b6 <_dtoa_r+0x96>
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <_dtoa_r+0xbd8>)
 800dbdc:	f7ff ba8e 	b.w	800d0fc <_dtoa_r+0xdc>
 800dbe0:	9b02      	ldr	r3, [sp, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dcae      	bgt.n	800db44 <_dtoa_r+0xb24>
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	f73f aea8 	bgt.w	800d93e <_dtoa_r+0x91e>
 800dbee:	e7a9      	b.n	800db44 <_dtoa_r+0xb24>
 800dbf0:	080102bf 	.word	0x080102bf
 800dbf4:	0801021c 	.word	0x0801021c
 800dbf8:	08010240 	.word	0x08010240

0800dbfc <__sflush_r>:
 800dbfc:	898a      	ldrh	r2, [r1, #12]
 800dbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4605      	mov	r5, r0
 800dc04:	0710      	lsls	r0, r2, #28
 800dc06:	460c      	mov	r4, r1
 800dc08:	d458      	bmi.n	800dcbc <__sflush_r+0xc0>
 800dc0a:	684b      	ldr	r3, [r1, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dc05      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc02      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d0f9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc28:	682f      	ldr	r7, [r5, #0]
 800dc2a:	602b      	str	r3, [r5, #0]
 800dc2c:	d032      	beq.n	800dc94 <__sflush_r+0x98>
 800dc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	075a      	lsls	r2, r3, #29
 800dc34:	d505      	bpl.n	800dc42 <__sflush_r+0x46>
 800dc36:	6863      	ldr	r3, [r4, #4]
 800dc38:	1ac0      	subs	r0, r0, r3
 800dc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc3c:	b10b      	cbz	r3, 800dc42 <__sflush_r+0x46>
 800dc3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc40:	1ac0      	subs	r0, r0, r3
 800dc42:	2300      	movs	r3, #0
 800dc44:	4602      	mov	r2, r0
 800dc46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc48:	6a21      	ldr	r1, [r4, #32]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b0      	blx	r6
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	d106      	bne.n	800dc62 <__sflush_r+0x66>
 800dc54:	6829      	ldr	r1, [r5, #0]
 800dc56:	291d      	cmp	r1, #29
 800dc58:	d82c      	bhi.n	800dcb4 <__sflush_r+0xb8>
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	; (800dd04 <__sflush_r+0x108>)
 800dc5c:	40ca      	lsrs	r2, r1
 800dc5e:	07d6      	lsls	r6, r2, #31
 800dc60:	d528      	bpl.n	800dcb4 <__sflush_r+0xb8>
 800dc62:	2200      	movs	r2, #0
 800dc64:	6062      	str	r2, [r4, #4]
 800dc66:	04d9      	lsls	r1, r3, #19
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	d504      	bpl.n	800dc78 <__sflush_r+0x7c>
 800dc6e:	1c42      	adds	r2, r0, #1
 800dc70:	d101      	bne.n	800dc76 <__sflush_r+0x7a>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b903      	cbnz	r3, 800dc78 <__sflush_r+0x7c>
 800dc76:	6560      	str	r0, [r4, #84]	; 0x54
 800dc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d0ca      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d002      	beq.n	800dc8e <__sflush_r+0x92>
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f7fe fa89 	bl	800c1a0 <_free_r>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	6360      	str	r0, [r4, #52]	; 0x34
 800dc92:	e7c1      	b.n	800dc18 <__sflush_r+0x1c>
 800dc94:	6a21      	ldr	r1, [r4, #32]
 800dc96:	2301      	movs	r3, #1
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	1c41      	adds	r1, r0, #1
 800dc9e:	d1c7      	bne.n	800dc30 <__sflush_r+0x34>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0c4      	beq.n	800dc30 <__sflush_r+0x34>
 800dca6:	2b1d      	cmp	r3, #29
 800dca8:	d001      	beq.n	800dcae <__sflush_r+0xb2>
 800dcaa:	2b16      	cmp	r3, #22
 800dcac:	d101      	bne.n	800dcb2 <__sflush_r+0xb6>
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	e7b1      	b.n	800dc16 <__sflush_r+0x1a>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	e7ad      	b.n	800dc18 <__sflush_r+0x1c>
 800dcbc:	690f      	ldr	r7, [r1, #16]
 800dcbe:	2f00      	cmp	r7, #0
 800dcc0:	d0a9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dcc2:	0793      	lsls	r3, r2, #30
 800dcc4:	680e      	ldr	r6, [r1, #0]
 800dcc6:	bf08      	it	eq
 800dcc8:	694b      	ldreq	r3, [r1, #20]
 800dcca:	600f      	str	r7, [r1, #0]
 800dccc:	bf18      	it	ne
 800dcce:	2300      	movne	r3, #0
 800dcd0:	eba6 0807 	sub.w	r8, r6, r7
 800dcd4:	608b      	str	r3, [r1, #8]
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	dd9c      	ble.n	800dc16 <__sflush_r+0x1a>
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dce0:	4643      	mov	r3, r8
 800dce2:	463a      	mov	r2, r7
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	2800      	cmp	r0, #0
 800dcea:	dc06      	bgt.n	800dcfa <__sflush_r+0xfe>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e78e      	b.n	800dc18 <__sflush_r+0x1c>
 800dcfa:	4407      	add	r7, r0
 800dcfc:	eba8 0800 	sub.w	r8, r8, r0
 800dd00:	e7e9      	b.n	800dcd6 <__sflush_r+0xda>
 800dd02:	bf00      	nop
 800dd04:	20400001 	.word	0x20400001

0800dd08 <_fflush_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b913      	cbnz	r3, 800dd18 <_fflush_r+0x10>
 800dd12:	2500      	movs	r5, #0
 800dd14:	4628      	mov	r0, r5
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	b118      	cbz	r0, 800dd22 <_fflush_r+0x1a>
 800dd1a:	6983      	ldr	r3, [r0, #24]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <_fflush_r+0x1a>
 800dd1e:	f7fe f95b 	bl	800bfd8 <__sinit>
 800dd22:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <_fflush_r+0x6c>)
 800dd24:	429c      	cmp	r4, r3
 800dd26:	d11b      	bne.n	800dd60 <_fflush_r+0x58>
 800dd28:	686c      	ldr	r4, [r5, #4]
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0ef      	beq.n	800dd12 <_fflush_r+0xa>
 800dd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd34:	07d0      	lsls	r0, r2, #31
 800dd36:	d404      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd38:	0599      	lsls	r1, r3, #22
 800dd3a:	d402      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3e:	f7fe fa0e 	bl	800c15e <__retarget_lock_acquire_recursive>
 800dd42:	4628      	mov	r0, r5
 800dd44:	4621      	mov	r1, r4
 800dd46:	f7ff ff59 	bl	800dbfc <__sflush_r>
 800dd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd4c:	07da      	lsls	r2, r3, #31
 800dd4e:	4605      	mov	r5, r0
 800dd50:	d4e0      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	059b      	lsls	r3, r3, #22
 800dd56:	d4dd      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5a:	f7fe fa01 	bl	800c160 <__retarget_lock_release_recursive>
 800dd5e:	e7d9      	b.n	800dd14 <_fflush_r+0xc>
 800dd60:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <_fflush_r+0x70>)
 800dd62:	429c      	cmp	r4, r3
 800dd64:	d101      	bne.n	800dd6a <_fflush_r+0x62>
 800dd66:	68ac      	ldr	r4, [r5, #8]
 800dd68:	e7df      	b.n	800dd2a <_fflush_r+0x22>
 800dd6a:	4b04      	ldr	r3, [pc, #16]	; (800dd7c <_fflush_r+0x74>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	bf08      	it	eq
 800dd70:	68ec      	ldreq	r4, [r5, #12]
 800dd72:	e7da      	b.n	800dd2a <_fflush_r+0x22>
 800dd74:	080101c8 	.word	0x080101c8
 800dd78:	080101e8 	.word	0x080101e8
 800dd7c:	080101a8 	.word	0x080101a8

0800dd80 <_localeconv_r>:
 800dd80:	4800      	ldr	r0, [pc, #0]	; (800dd84 <_localeconv_r+0x4>)
 800dd82:	4770      	bx	lr
 800dd84:	200001c8 	.word	0x200001c8

0800dd88 <_lseek_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d07      	ldr	r5, [pc, #28]	; (800dda8 <_lseek_r+0x20>)
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	4608      	mov	r0, r1
 800dd90:	4611      	mov	r1, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	602a      	str	r2, [r5, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	f7f4 f94a 	bl	8002030 <_lseek>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_lseek_r+0x1e>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_lseek_r+0x1e>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	20004f50 	.word	0x20004f50

0800ddac <__malloc_lock>:
 800ddac:	4801      	ldr	r0, [pc, #4]	; (800ddb4 <__malloc_lock+0x8>)
 800ddae:	f7fe b9d6 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	20004f44 	.word	0x20004f44

0800ddb8 <__malloc_unlock>:
 800ddb8:	4801      	ldr	r0, [pc, #4]	; (800ddc0 <__malloc_unlock+0x8>)
 800ddba:	f7fe b9d1 	b.w	800c160 <__retarget_lock_release_recursive>
 800ddbe:	bf00      	nop
 800ddc0:	20004f44 	.word	0x20004f44

0800ddc4 <_Balloc>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddc8:	4604      	mov	r4, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	b976      	cbnz	r6, 800ddec <_Balloc+0x28>
 800ddce:	2010      	movs	r0, #16
 800ddd0:	f7fe f9c8 	bl	800c164 <malloc>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	6260      	str	r0, [r4, #36]	; 0x24
 800ddd8:	b920      	cbnz	r0, 800dde4 <_Balloc+0x20>
 800ddda:	4b18      	ldr	r3, [pc, #96]	; (800de3c <_Balloc+0x78>)
 800dddc:	4818      	ldr	r0, [pc, #96]	; (800de40 <_Balloc+0x7c>)
 800ddde:	2166      	movs	r1, #102	; 0x66
 800dde0:	f000 fcf8 	bl	800e7d4 <__assert_func>
 800dde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dde8:	6006      	str	r6, [r0, #0]
 800ddea:	60c6      	str	r6, [r0, #12]
 800ddec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddee:	68f3      	ldr	r3, [r6, #12]
 800ddf0:	b183      	cbz	r3, 800de14 <_Balloc+0x50>
 800ddf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddfa:	b9b8      	cbnz	r0, 800de2c <_Balloc+0x68>
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	fa01 f605 	lsl.w	r6, r1, r5
 800de02:	1d72      	adds	r2, r6, #5
 800de04:	0092      	lsls	r2, r2, #2
 800de06:	4620      	mov	r0, r4
 800de08:	f000 fb60 	bl	800e4cc <_calloc_r>
 800de0c:	b160      	cbz	r0, 800de28 <_Balloc+0x64>
 800de0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de12:	e00e      	b.n	800de32 <_Balloc+0x6e>
 800de14:	2221      	movs	r2, #33	; 0x21
 800de16:	2104      	movs	r1, #4
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fb57 	bl	800e4cc <_calloc_r>
 800de1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de20:	60f0      	str	r0, [r6, #12]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1e4      	bne.n	800ddf2 <_Balloc+0x2e>
 800de28:	2000      	movs	r0, #0
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	6802      	ldr	r2, [r0, #0]
 800de2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de32:	2300      	movs	r3, #0
 800de34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de38:	e7f7      	b.n	800de2a <_Balloc+0x66>
 800de3a:	bf00      	nop
 800de3c:	0801024d 	.word	0x0801024d
 800de40:	080102d0 	.word	0x080102d0

0800de44 <_Bfree>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de48:	4605      	mov	r5, r0
 800de4a:	460c      	mov	r4, r1
 800de4c:	b976      	cbnz	r6, 800de6c <_Bfree+0x28>
 800de4e:	2010      	movs	r0, #16
 800de50:	f7fe f988 	bl	800c164 <malloc>
 800de54:	4602      	mov	r2, r0
 800de56:	6268      	str	r0, [r5, #36]	; 0x24
 800de58:	b920      	cbnz	r0, 800de64 <_Bfree+0x20>
 800de5a:	4b09      	ldr	r3, [pc, #36]	; (800de80 <_Bfree+0x3c>)
 800de5c:	4809      	ldr	r0, [pc, #36]	; (800de84 <_Bfree+0x40>)
 800de5e:	218a      	movs	r1, #138	; 0x8a
 800de60:	f000 fcb8 	bl	800e7d4 <__assert_func>
 800de64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de68:	6006      	str	r6, [r0, #0]
 800de6a:	60c6      	str	r6, [r0, #12]
 800de6c:	b13c      	cbz	r4, 800de7e <_Bfree+0x3a>
 800de6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de70:	6862      	ldr	r2, [r4, #4]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de78:	6021      	str	r1, [r4, #0]
 800de7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de7e:	bd70      	pop	{r4, r5, r6, pc}
 800de80:	0801024d 	.word	0x0801024d
 800de84:	080102d0 	.word	0x080102d0

0800de88 <__multadd>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	690d      	ldr	r5, [r1, #16]
 800de8e:	4607      	mov	r7, r0
 800de90:	460c      	mov	r4, r1
 800de92:	461e      	mov	r6, r3
 800de94:	f101 0c14 	add.w	ip, r1, #20
 800de98:	2000      	movs	r0, #0
 800de9a:	f8dc 3000 	ldr.w	r3, [ip]
 800de9e:	b299      	uxth	r1, r3
 800dea0:	fb02 6101 	mla	r1, r2, r1, r6
 800dea4:	0c1e      	lsrs	r6, r3, #16
 800dea6:	0c0b      	lsrs	r3, r1, #16
 800dea8:	fb02 3306 	mla	r3, r2, r6, r3
 800deac:	b289      	uxth	r1, r1
 800deae:	3001      	adds	r0, #1
 800deb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800deb4:	4285      	cmp	r5, r0
 800deb6:	f84c 1b04 	str.w	r1, [ip], #4
 800deba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800debe:	dcec      	bgt.n	800de9a <__multadd+0x12>
 800dec0:	b30e      	cbz	r6, 800df06 <__multadd+0x7e>
 800dec2:	68a3      	ldr	r3, [r4, #8]
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	dc19      	bgt.n	800defc <__multadd+0x74>
 800dec8:	6861      	ldr	r1, [r4, #4]
 800deca:	4638      	mov	r0, r7
 800decc:	3101      	adds	r1, #1
 800dece:	f7ff ff79 	bl	800ddc4 <_Balloc>
 800ded2:	4680      	mov	r8, r0
 800ded4:	b928      	cbnz	r0, 800dee2 <__multadd+0x5a>
 800ded6:	4602      	mov	r2, r0
 800ded8:	4b0c      	ldr	r3, [pc, #48]	; (800df0c <__multadd+0x84>)
 800deda:	480d      	ldr	r0, [pc, #52]	; (800df10 <__multadd+0x88>)
 800dedc:	21b5      	movs	r1, #181	; 0xb5
 800dede:	f000 fc79 	bl	800e7d4 <__assert_func>
 800dee2:	6922      	ldr	r2, [r4, #16]
 800dee4:	3202      	adds	r2, #2
 800dee6:	f104 010c 	add.w	r1, r4, #12
 800deea:	0092      	lsls	r2, r2, #2
 800deec:	300c      	adds	r0, #12
 800deee:	f7fe f941 	bl	800c174 <memcpy>
 800def2:	4621      	mov	r1, r4
 800def4:	4638      	mov	r0, r7
 800def6:	f7ff ffa5 	bl	800de44 <_Bfree>
 800defa:	4644      	mov	r4, r8
 800defc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df00:	3501      	adds	r5, #1
 800df02:	615e      	str	r6, [r3, #20]
 800df04:	6125      	str	r5, [r4, #16]
 800df06:	4620      	mov	r0, r4
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	080102bf 	.word	0x080102bf
 800df10:	080102d0 	.word	0x080102d0

0800df14 <__hi0bits>:
 800df14:	0c03      	lsrs	r3, r0, #16
 800df16:	041b      	lsls	r3, r3, #16
 800df18:	b9d3      	cbnz	r3, 800df50 <__hi0bits+0x3c>
 800df1a:	0400      	lsls	r0, r0, #16
 800df1c:	2310      	movs	r3, #16
 800df1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df22:	bf04      	itt	eq
 800df24:	0200      	lsleq	r0, r0, #8
 800df26:	3308      	addeq	r3, #8
 800df28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df2c:	bf04      	itt	eq
 800df2e:	0100      	lsleq	r0, r0, #4
 800df30:	3304      	addeq	r3, #4
 800df32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df36:	bf04      	itt	eq
 800df38:	0080      	lsleq	r0, r0, #2
 800df3a:	3302      	addeq	r3, #2
 800df3c:	2800      	cmp	r0, #0
 800df3e:	db05      	blt.n	800df4c <__hi0bits+0x38>
 800df40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df44:	f103 0301 	add.w	r3, r3, #1
 800df48:	bf08      	it	eq
 800df4a:	2320      	moveq	r3, #32
 800df4c:	4618      	mov	r0, r3
 800df4e:	4770      	bx	lr
 800df50:	2300      	movs	r3, #0
 800df52:	e7e4      	b.n	800df1e <__hi0bits+0xa>

0800df54 <__lo0bits>:
 800df54:	6803      	ldr	r3, [r0, #0]
 800df56:	f013 0207 	ands.w	r2, r3, #7
 800df5a:	4601      	mov	r1, r0
 800df5c:	d00b      	beq.n	800df76 <__lo0bits+0x22>
 800df5e:	07da      	lsls	r2, r3, #31
 800df60:	d423      	bmi.n	800dfaa <__lo0bits+0x56>
 800df62:	0798      	lsls	r0, r3, #30
 800df64:	bf49      	itett	mi
 800df66:	085b      	lsrmi	r3, r3, #1
 800df68:	089b      	lsrpl	r3, r3, #2
 800df6a:	2001      	movmi	r0, #1
 800df6c:	600b      	strmi	r3, [r1, #0]
 800df6e:	bf5c      	itt	pl
 800df70:	600b      	strpl	r3, [r1, #0]
 800df72:	2002      	movpl	r0, #2
 800df74:	4770      	bx	lr
 800df76:	b298      	uxth	r0, r3
 800df78:	b9a8      	cbnz	r0, 800dfa6 <__lo0bits+0x52>
 800df7a:	0c1b      	lsrs	r3, r3, #16
 800df7c:	2010      	movs	r0, #16
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	b90a      	cbnz	r2, 800df86 <__lo0bits+0x32>
 800df82:	3008      	adds	r0, #8
 800df84:	0a1b      	lsrs	r3, r3, #8
 800df86:	071a      	lsls	r2, r3, #28
 800df88:	bf04      	itt	eq
 800df8a:	091b      	lsreq	r3, r3, #4
 800df8c:	3004      	addeq	r0, #4
 800df8e:	079a      	lsls	r2, r3, #30
 800df90:	bf04      	itt	eq
 800df92:	089b      	lsreq	r3, r3, #2
 800df94:	3002      	addeq	r0, #2
 800df96:	07da      	lsls	r2, r3, #31
 800df98:	d403      	bmi.n	800dfa2 <__lo0bits+0x4e>
 800df9a:	085b      	lsrs	r3, r3, #1
 800df9c:	f100 0001 	add.w	r0, r0, #1
 800dfa0:	d005      	beq.n	800dfae <__lo0bits+0x5a>
 800dfa2:	600b      	str	r3, [r1, #0]
 800dfa4:	4770      	bx	lr
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	e7e9      	b.n	800df7e <__lo0bits+0x2a>
 800dfaa:	2000      	movs	r0, #0
 800dfac:	4770      	bx	lr
 800dfae:	2020      	movs	r0, #32
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <__i2b>:
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	2101      	movs	r1, #1
 800dfba:	f7ff ff03 	bl	800ddc4 <_Balloc>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	b928      	cbnz	r0, 800dfce <__i2b+0x1a>
 800dfc2:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <__i2b+0x24>)
 800dfc4:	4805      	ldr	r0, [pc, #20]	; (800dfdc <__i2b+0x28>)
 800dfc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dfca:	f000 fc03 	bl	800e7d4 <__assert_func>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	6144      	str	r4, [r0, #20]
 800dfd2:	6103      	str	r3, [r0, #16]
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	bf00      	nop
 800dfd8:	080102bf 	.word	0x080102bf
 800dfdc:	080102d0 	.word	0x080102d0

0800dfe0 <__multiply>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	4691      	mov	r9, r2
 800dfe6:	690a      	ldr	r2, [r1, #16]
 800dfe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	bfb8      	it	lt
 800dff0:	460b      	movlt	r3, r1
 800dff2:	460c      	mov	r4, r1
 800dff4:	bfbc      	itt	lt
 800dff6:	464c      	movlt	r4, r9
 800dff8:	4699      	movlt	r9, r3
 800dffa:	6927      	ldr	r7, [r4, #16]
 800dffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e000:	68a3      	ldr	r3, [r4, #8]
 800e002:	6861      	ldr	r1, [r4, #4]
 800e004:	eb07 060a 	add.w	r6, r7, sl
 800e008:	42b3      	cmp	r3, r6
 800e00a:	b085      	sub	sp, #20
 800e00c:	bfb8      	it	lt
 800e00e:	3101      	addlt	r1, #1
 800e010:	f7ff fed8 	bl	800ddc4 <_Balloc>
 800e014:	b930      	cbnz	r0, 800e024 <__multiply+0x44>
 800e016:	4602      	mov	r2, r0
 800e018:	4b44      	ldr	r3, [pc, #272]	; (800e12c <__multiply+0x14c>)
 800e01a:	4845      	ldr	r0, [pc, #276]	; (800e130 <__multiply+0x150>)
 800e01c:	f240 115d 	movw	r1, #349	; 0x15d
 800e020:	f000 fbd8 	bl	800e7d4 <__assert_func>
 800e024:	f100 0514 	add.w	r5, r0, #20
 800e028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e02c:	462b      	mov	r3, r5
 800e02e:	2200      	movs	r2, #0
 800e030:	4543      	cmp	r3, r8
 800e032:	d321      	bcc.n	800e078 <__multiply+0x98>
 800e034:	f104 0314 	add.w	r3, r4, #20
 800e038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e03c:	f109 0314 	add.w	r3, r9, #20
 800e040:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e044:	9202      	str	r2, [sp, #8]
 800e046:	1b3a      	subs	r2, r7, r4
 800e048:	3a15      	subs	r2, #21
 800e04a:	f022 0203 	bic.w	r2, r2, #3
 800e04e:	3204      	adds	r2, #4
 800e050:	f104 0115 	add.w	r1, r4, #21
 800e054:	428f      	cmp	r7, r1
 800e056:	bf38      	it	cc
 800e058:	2204      	movcc	r2, #4
 800e05a:	9201      	str	r2, [sp, #4]
 800e05c:	9a02      	ldr	r2, [sp, #8]
 800e05e:	9303      	str	r3, [sp, #12]
 800e060:	429a      	cmp	r2, r3
 800e062:	d80c      	bhi.n	800e07e <__multiply+0x9e>
 800e064:	2e00      	cmp	r6, #0
 800e066:	dd03      	ble.n	800e070 <__multiply+0x90>
 800e068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d05a      	beq.n	800e126 <__multiply+0x146>
 800e070:	6106      	str	r6, [r0, #16]
 800e072:	b005      	add	sp, #20
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	f843 2b04 	str.w	r2, [r3], #4
 800e07c:	e7d8      	b.n	800e030 <__multiply+0x50>
 800e07e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e082:	f1ba 0f00 	cmp.w	sl, #0
 800e086:	d024      	beq.n	800e0d2 <__multiply+0xf2>
 800e088:	f104 0e14 	add.w	lr, r4, #20
 800e08c:	46a9      	mov	r9, r5
 800e08e:	f04f 0c00 	mov.w	ip, #0
 800e092:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e096:	f8d9 1000 	ldr.w	r1, [r9]
 800e09a:	fa1f fb82 	uxth.w	fp, r2
 800e09e:	b289      	uxth	r1, r1
 800e0a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e0a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e0a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e0ac:	4461      	add	r1, ip
 800e0ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e0b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e0ba:	b289      	uxth	r1, r1
 800e0bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e0c0:	4577      	cmp	r7, lr
 800e0c2:	f849 1b04 	str.w	r1, [r9], #4
 800e0c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0ca:	d8e2      	bhi.n	800e092 <__multiply+0xb2>
 800e0cc:	9a01      	ldr	r2, [sp, #4]
 800e0ce:	f845 c002 	str.w	ip, [r5, r2]
 800e0d2:	9a03      	ldr	r2, [sp, #12]
 800e0d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	f1b9 0f00 	cmp.w	r9, #0
 800e0de:	d020      	beq.n	800e122 <__multiply+0x142>
 800e0e0:	6829      	ldr	r1, [r5, #0]
 800e0e2:	f104 0c14 	add.w	ip, r4, #20
 800e0e6:	46ae      	mov	lr, r5
 800e0e8:	f04f 0a00 	mov.w	sl, #0
 800e0ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e0f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e0f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e0f8:	4492      	add	sl, r2
 800e0fa:	b289      	uxth	r1, r1
 800e0fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e100:	f84e 1b04 	str.w	r1, [lr], #4
 800e104:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e108:	f8be 1000 	ldrh.w	r1, [lr]
 800e10c:	0c12      	lsrs	r2, r2, #16
 800e10e:	fb09 1102 	mla	r1, r9, r2, r1
 800e112:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e116:	4567      	cmp	r7, ip
 800e118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e11c:	d8e6      	bhi.n	800e0ec <__multiply+0x10c>
 800e11e:	9a01      	ldr	r2, [sp, #4]
 800e120:	50a9      	str	r1, [r5, r2]
 800e122:	3504      	adds	r5, #4
 800e124:	e79a      	b.n	800e05c <__multiply+0x7c>
 800e126:	3e01      	subs	r6, #1
 800e128:	e79c      	b.n	800e064 <__multiply+0x84>
 800e12a:	bf00      	nop
 800e12c:	080102bf 	.word	0x080102bf
 800e130:	080102d0 	.word	0x080102d0

0800e134 <__pow5mult>:
 800e134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e138:	4615      	mov	r5, r2
 800e13a:	f012 0203 	ands.w	r2, r2, #3
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
 800e142:	d007      	beq.n	800e154 <__pow5mult+0x20>
 800e144:	4c25      	ldr	r4, [pc, #148]	; (800e1dc <__pow5mult+0xa8>)
 800e146:	3a01      	subs	r2, #1
 800e148:	2300      	movs	r3, #0
 800e14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e14e:	f7ff fe9b 	bl	800de88 <__multadd>
 800e152:	4607      	mov	r7, r0
 800e154:	10ad      	asrs	r5, r5, #2
 800e156:	d03d      	beq.n	800e1d4 <__pow5mult+0xa0>
 800e158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e15a:	b97c      	cbnz	r4, 800e17c <__pow5mult+0x48>
 800e15c:	2010      	movs	r0, #16
 800e15e:	f7fe f801 	bl	800c164 <malloc>
 800e162:	4602      	mov	r2, r0
 800e164:	6270      	str	r0, [r6, #36]	; 0x24
 800e166:	b928      	cbnz	r0, 800e174 <__pow5mult+0x40>
 800e168:	4b1d      	ldr	r3, [pc, #116]	; (800e1e0 <__pow5mult+0xac>)
 800e16a:	481e      	ldr	r0, [pc, #120]	; (800e1e4 <__pow5mult+0xb0>)
 800e16c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e170:	f000 fb30 	bl	800e7d4 <__assert_func>
 800e174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e178:	6004      	str	r4, [r0, #0]
 800e17a:	60c4      	str	r4, [r0, #12]
 800e17c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e184:	b94c      	cbnz	r4, 800e19a <__pow5mult+0x66>
 800e186:	f240 2171 	movw	r1, #625	; 0x271
 800e18a:	4630      	mov	r0, r6
 800e18c:	f7ff ff12 	bl	800dfb4 <__i2b>
 800e190:	2300      	movs	r3, #0
 800e192:	f8c8 0008 	str.w	r0, [r8, #8]
 800e196:	4604      	mov	r4, r0
 800e198:	6003      	str	r3, [r0, #0]
 800e19a:	f04f 0900 	mov.w	r9, #0
 800e19e:	07eb      	lsls	r3, r5, #31
 800e1a0:	d50a      	bpl.n	800e1b8 <__pow5mult+0x84>
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7ff ff1a 	bl	800dfe0 <__multiply>
 800e1ac:	4639      	mov	r1, r7
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7ff fe47 	bl	800de44 <_Bfree>
 800e1b6:	4647      	mov	r7, r8
 800e1b8:	106d      	asrs	r5, r5, #1
 800e1ba:	d00b      	beq.n	800e1d4 <__pow5mult+0xa0>
 800e1bc:	6820      	ldr	r0, [r4, #0]
 800e1be:	b938      	cbnz	r0, 800e1d0 <__pow5mult+0x9c>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	f7ff ff0b 	bl	800dfe0 <__multiply>
 800e1ca:	6020      	str	r0, [r4, #0]
 800e1cc:	f8c0 9000 	str.w	r9, [r0]
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	e7e4      	b.n	800e19e <__pow5mult+0x6a>
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1da:	bf00      	nop
 800e1dc:	08010420 	.word	0x08010420
 800e1e0:	0801024d 	.word	0x0801024d
 800e1e4:	080102d0 	.word	0x080102d0

0800e1e8 <__lshift>:
 800e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	6849      	ldr	r1, [r1, #4]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1f6:	68a3      	ldr	r3, [r4, #8]
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	4691      	mov	r9, r2
 800e1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e200:	f108 0601 	add.w	r6, r8, #1
 800e204:	42b3      	cmp	r3, r6
 800e206:	db0b      	blt.n	800e220 <__lshift+0x38>
 800e208:	4638      	mov	r0, r7
 800e20a:	f7ff fddb 	bl	800ddc4 <_Balloc>
 800e20e:	4605      	mov	r5, r0
 800e210:	b948      	cbnz	r0, 800e226 <__lshift+0x3e>
 800e212:	4602      	mov	r2, r0
 800e214:	4b2a      	ldr	r3, [pc, #168]	; (800e2c0 <__lshift+0xd8>)
 800e216:	482b      	ldr	r0, [pc, #172]	; (800e2c4 <__lshift+0xdc>)
 800e218:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e21c:	f000 fada 	bl	800e7d4 <__assert_func>
 800e220:	3101      	adds	r1, #1
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	e7ee      	b.n	800e204 <__lshift+0x1c>
 800e226:	2300      	movs	r3, #0
 800e228:	f100 0114 	add.w	r1, r0, #20
 800e22c:	f100 0210 	add.w	r2, r0, #16
 800e230:	4618      	mov	r0, r3
 800e232:	4553      	cmp	r3, sl
 800e234:	db37      	blt.n	800e2a6 <__lshift+0xbe>
 800e236:	6920      	ldr	r0, [r4, #16]
 800e238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e23c:	f104 0314 	add.w	r3, r4, #20
 800e240:	f019 091f 	ands.w	r9, r9, #31
 800e244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e24c:	d02f      	beq.n	800e2ae <__lshift+0xc6>
 800e24e:	f1c9 0e20 	rsb	lr, r9, #32
 800e252:	468a      	mov	sl, r1
 800e254:	f04f 0c00 	mov.w	ip, #0
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	fa02 f209 	lsl.w	r2, r2, r9
 800e25e:	ea42 020c 	orr.w	r2, r2, ip
 800e262:	f84a 2b04 	str.w	r2, [sl], #4
 800e266:	f853 2b04 	ldr.w	r2, [r3], #4
 800e26a:	4298      	cmp	r0, r3
 800e26c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e270:	d8f2      	bhi.n	800e258 <__lshift+0x70>
 800e272:	1b03      	subs	r3, r0, r4
 800e274:	3b15      	subs	r3, #21
 800e276:	f023 0303 	bic.w	r3, r3, #3
 800e27a:	3304      	adds	r3, #4
 800e27c:	f104 0215 	add.w	r2, r4, #21
 800e280:	4290      	cmp	r0, r2
 800e282:	bf38      	it	cc
 800e284:	2304      	movcc	r3, #4
 800e286:	f841 c003 	str.w	ip, [r1, r3]
 800e28a:	f1bc 0f00 	cmp.w	ip, #0
 800e28e:	d001      	beq.n	800e294 <__lshift+0xac>
 800e290:	f108 0602 	add.w	r6, r8, #2
 800e294:	3e01      	subs	r6, #1
 800e296:	4638      	mov	r0, r7
 800e298:	612e      	str	r6, [r5, #16]
 800e29a:	4621      	mov	r1, r4
 800e29c:	f7ff fdd2 	bl	800de44 <_Bfree>
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	e7c1      	b.n	800e232 <__lshift+0x4a>
 800e2ae:	3904      	subs	r1, #4
 800e2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2b8:	4298      	cmp	r0, r3
 800e2ba:	d8f9      	bhi.n	800e2b0 <__lshift+0xc8>
 800e2bc:	e7ea      	b.n	800e294 <__lshift+0xac>
 800e2be:	bf00      	nop
 800e2c0:	080102bf 	.word	0x080102bf
 800e2c4:	080102d0 	.word	0x080102d0

0800e2c8 <__mcmp>:
 800e2c8:	b530      	push	{r4, r5, lr}
 800e2ca:	6902      	ldr	r2, [r0, #16]
 800e2cc:	690c      	ldr	r4, [r1, #16]
 800e2ce:	1b12      	subs	r2, r2, r4
 800e2d0:	d10e      	bne.n	800e2f0 <__mcmp+0x28>
 800e2d2:	f100 0314 	add.w	r3, r0, #20
 800e2d6:	3114      	adds	r1, #20
 800e2d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2e8:	42a5      	cmp	r5, r4
 800e2ea:	d003      	beq.n	800e2f4 <__mcmp+0x2c>
 800e2ec:	d305      	bcc.n	800e2fa <__mcmp+0x32>
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	bd30      	pop	{r4, r5, pc}
 800e2f4:	4283      	cmp	r3, r0
 800e2f6:	d3f3      	bcc.n	800e2e0 <__mcmp+0x18>
 800e2f8:	e7fa      	b.n	800e2f0 <__mcmp+0x28>
 800e2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e2fe:	e7f7      	b.n	800e2f0 <__mcmp+0x28>

0800e300 <__mdiff>:
 800e300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	460c      	mov	r4, r1
 800e306:	4606      	mov	r6, r0
 800e308:	4611      	mov	r1, r2
 800e30a:	4620      	mov	r0, r4
 800e30c:	4690      	mov	r8, r2
 800e30e:	f7ff ffdb 	bl	800e2c8 <__mcmp>
 800e312:	1e05      	subs	r5, r0, #0
 800e314:	d110      	bne.n	800e338 <__mdiff+0x38>
 800e316:	4629      	mov	r1, r5
 800e318:	4630      	mov	r0, r6
 800e31a:	f7ff fd53 	bl	800ddc4 <_Balloc>
 800e31e:	b930      	cbnz	r0, 800e32e <__mdiff+0x2e>
 800e320:	4b3a      	ldr	r3, [pc, #232]	; (800e40c <__mdiff+0x10c>)
 800e322:	4602      	mov	r2, r0
 800e324:	f240 2132 	movw	r1, #562	; 0x232
 800e328:	4839      	ldr	r0, [pc, #228]	; (800e410 <__mdiff+0x110>)
 800e32a:	f000 fa53 	bl	800e7d4 <__assert_func>
 800e32e:	2301      	movs	r3, #1
 800e330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	bfa4      	itt	ge
 800e33a:	4643      	movge	r3, r8
 800e33c:	46a0      	movge	r8, r4
 800e33e:	4630      	mov	r0, r6
 800e340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e344:	bfa6      	itte	ge
 800e346:	461c      	movge	r4, r3
 800e348:	2500      	movge	r5, #0
 800e34a:	2501      	movlt	r5, #1
 800e34c:	f7ff fd3a 	bl	800ddc4 <_Balloc>
 800e350:	b920      	cbnz	r0, 800e35c <__mdiff+0x5c>
 800e352:	4b2e      	ldr	r3, [pc, #184]	; (800e40c <__mdiff+0x10c>)
 800e354:	4602      	mov	r2, r0
 800e356:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e35a:	e7e5      	b.n	800e328 <__mdiff+0x28>
 800e35c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e360:	6926      	ldr	r6, [r4, #16]
 800e362:	60c5      	str	r5, [r0, #12]
 800e364:	f104 0914 	add.w	r9, r4, #20
 800e368:	f108 0514 	add.w	r5, r8, #20
 800e36c:	f100 0e14 	add.w	lr, r0, #20
 800e370:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e378:	f108 0210 	add.w	r2, r8, #16
 800e37c:	46f2      	mov	sl, lr
 800e37e:	2100      	movs	r1, #0
 800e380:	f859 3b04 	ldr.w	r3, [r9], #4
 800e384:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e388:	fa1f f883 	uxth.w	r8, r3
 800e38c:	fa11 f18b 	uxtah	r1, r1, fp
 800e390:	0c1b      	lsrs	r3, r3, #16
 800e392:	eba1 0808 	sub.w	r8, r1, r8
 800e396:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e39a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e39e:	fa1f f888 	uxth.w	r8, r8
 800e3a2:	1419      	asrs	r1, r3, #16
 800e3a4:	454e      	cmp	r6, r9
 800e3a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e3aa:	f84a 3b04 	str.w	r3, [sl], #4
 800e3ae:	d8e7      	bhi.n	800e380 <__mdiff+0x80>
 800e3b0:	1b33      	subs	r3, r6, r4
 800e3b2:	3b15      	subs	r3, #21
 800e3b4:	f023 0303 	bic.w	r3, r3, #3
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	3415      	adds	r4, #21
 800e3bc:	42a6      	cmp	r6, r4
 800e3be:	bf38      	it	cc
 800e3c0:	2304      	movcc	r3, #4
 800e3c2:	441d      	add	r5, r3
 800e3c4:	4473      	add	r3, lr
 800e3c6:	469e      	mov	lr, r3
 800e3c8:	462e      	mov	r6, r5
 800e3ca:	4566      	cmp	r6, ip
 800e3cc:	d30e      	bcc.n	800e3ec <__mdiff+0xec>
 800e3ce:	f10c 0203 	add.w	r2, ip, #3
 800e3d2:	1b52      	subs	r2, r2, r5
 800e3d4:	f022 0203 	bic.w	r2, r2, #3
 800e3d8:	3d03      	subs	r5, #3
 800e3da:	45ac      	cmp	ip, r5
 800e3dc:	bf38      	it	cc
 800e3de:	2200      	movcc	r2, #0
 800e3e0:	441a      	add	r2, r3
 800e3e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3e6:	b17b      	cbz	r3, 800e408 <__mdiff+0x108>
 800e3e8:	6107      	str	r7, [r0, #16]
 800e3ea:	e7a3      	b.n	800e334 <__mdiff+0x34>
 800e3ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800e3f0:	fa11 f288 	uxtah	r2, r1, r8
 800e3f4:	1414      	asrs	r4, r2, #16
 800e3f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3fa:	b292      	uxth	r2, r2
 800e3fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e400:	f84e 2b04 	str.w	r2, [lr], #4
 800e404:	1421      	asrs	r1, r4, #16
 800e406:	e7e0      	b.n	800e3ca <__mdiff+0xca>
 800e408:	3f01      	subs	r7, #1
 800e40a:	e7ea      	b.n	800e3e2 <__mdiff+0xe2>
 800e40c:	080102bf 	.word	0x080102bf
 800e410:	080102d0 	.word	0x080102d0

0800e414 <__d2b>:
 800e414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4689      	mov	r9, r1
 800e41a:	2101      	movs	r1, #1
 800e41c:	ec57 6b10 	vmov	r6, r7, d0
 800e420:	4690      	mov	r8, r2
 800e422:	f7ff fccf 	bl	800ddc4 <_Balloc>
 800e426:	4604      	mov	r4, r0
 800e428:	b930      	cbnz	r0, 800e438 <__d2b+0x24>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b25      	ldr	r3, [pc, #148]	; (800e4c4 <__d2b+0xb0>)
 800e42e:	4826      	ldr	r0, [pc, #152]	; (800e4c8 <__d2b+0xb4>)
 800e430:	f240 310a 	movw	r1, #778	; 0x30a
 800e434:	f000 f9ce 	bl	800e7d4 <__assert_func>
 800e438:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e43c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e440:	bb35      	cbnz	r5, 800e490 <__d2b+0x7c>
 800e442:	2e00      	cmp	r6, #0
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	d028      	beq.n	800e49a <__d2b+0x86>
 800e448:	4668      	mov	r0, sp
 800e44a:	9600      	str	r6, [sp, #0]
 800e44c:	f7ff fd82 	bl	800df54 <__lo0bits>
 800e450:	9900      	ldr	r1, [sp, #0]
 800e452:	b300      	cbz	r0, 800e496 <__d2b+0x82>
 800e454:	9a01      	ldr	r2, [sp, #4]
 800e456:	f1c0 0320 	rsb	r3, r0, #32
 800e45a:	fa02 f303 	lsl.w	r3, r2, r3
 800e45e:	430b      	orrs	r3, r1
 800e460:	40c2      	lsrs	r2, r0
 800e462:	6163      	str	r3, [r4, #20]
 800e464:	9201      	str	r2, [sp, #4]
 800e466:	9b01      	ldr	r3, [sp, #4]
 800e468:	61a3      	str	r3, [r4, #24]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	bf14      	ite	ne
 800e46e:	2202      	movne	r2, #2
 800e470:	2201      	moveq	r2, #1
 800e472:	6122      	str	r2, [r4, #16]
 800e474:	b1d5      	cbz	r5, 800e4ac <__d2b+0x98>
 800e476:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e47a:	4405      	add	r5, r0
 800e47c:	f8c9 5000 	str.w	r5, [r9]
 800e480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e484:	f8c8 0000 	str.w	r0, [r8]
 800e488:	4620      	mov	r0, r4
 800e48a:	b003      	add	sp, #12
 800e48c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e494:	e7d5      	b.n	800e442 <__d2b+0x2e>
 800e496:	6161      	str	r1, [r4, #20]
 800e498:	e7e5      	b.n	800e466 <__d2b+0x52>
 800e49a:	a801      	add	r0, sp, #4
 800e49c:	f7ff fd5a 	bl	800df54 <__lo0bits>
 800e4a0:	9b01      	ldr	r3, [sp, #4]
 800e4a2:	6163      	str	r3, [r4, #20]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	6122      	str	r2, [r4, #16]
 800e4a8:	3020      	adds	r0, #32
 800e4aa:	e7e3      	b.n	800e474 <__d2b+0x60>
 800e4ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e4b4:	f8c9 0000 	str.w	r0, [r9]
 800e4b8:	6918      	ldr	r0, [r3, #16]
 800e4ba:	f7ff fd2b 	bl	800df14 <__hi0bits>
 800e4be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e4c2:	e7df      	b.n	800e484 <__d2b+0x70>
 800e4c4:	080102bf 	.word	0x080102bf
 800e4c8:	080102d0 	.word	0x080102d0

0800e4cc <_calloc_r>:
 800e4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ce:	fba1 2402 	umull	r2, r4, r1, r2
 800e4d2:	b94c      	cbnz	r4, 800e4e8 <_calloc_r+0x1c>
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	9201      	str	r2, [sp, #4]
 800e4d8:	f7fd fece 	bl	800c278 <_malloc_r>
 800e4dc:	9a01      	ldr	r2, [sp, #4]
 800e4de:	4605      	mov	r5, r0
 800e4e0:	b930      	cbnz	r0, 800e4f0 <_calloc_r+0x24>
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	b003      	add	sp, #12
 800e4e6:	bd30      	pop	{r4, r5, pc}
 800e4e8:	220c      	movs	r2, #12
 800e4ea:	6002      	str	r2, [r0, #0]
 800e4ec:	2500      	movs	r5, #0
 800e4ee:	e7f8      	b.n	800e4e2 <_calloc_r+0x16>
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	f7fd fe4d 	bl	800c190 <memset>
 800e4f6:	e7f4      	b.n	800e4e2 <_calloc_r+0x16>

0800e4f8 <__ssputs_r>:
 800e4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4fc:	688e      	ldr	r6, [r1, #8]
 800e4fe:	429e      	cmp	r6, r3
 800e500:	4682      	mov	sl, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4690      	mov	r8, r2
 800e506:	461f      	mov	r7, r3
 800e508:	d838      	bhi.n	800e57c <__ssputs_r+0x84>
 800e50a:	898a      	ldrh	r2, [r1, #12]
 800e50c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e510:	d032      	beq.n	800e578 <__ssputs_r+0x80>
 800e512:	6825      	ldr	r5, [r4, #0]
 800e514:	6909      	ldr	r1, [r1, #16]
 800e516:	eba5 0901 	sub.w	r9, r5, r1
 800e51a:	6965      	ldr	r5, [r4, #20]
 800e51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e524:	3301      	adds	r3, #1
 800e526:	444b      	add	r3, r9
 800e528:	106d      	asrs	r5, r5, #1
 800e52a:	429d      	cmp	r5, r3
 800e52c:	bf38      	it	cc
 800e52e:	461d      	movcc	r5, r3
 800e530:	0553      	lsls	r3, r2, #21
 800e532:	d531      	bpl.n	800e598 <__ssputs_r+0xa0>
 800e534:	4629      	mov	r1, r5
 800e536:	f7fd fe9f 	bl	800c278 <_malloc_r>
 800e53a:	4606      	mov	r6, r0
 800e53c:	b950      	cbnz	r0, 800e554 <__ssputs_r+0x5c>
 800e53e:	230c      	movs	r3, #12
 800e540:	f8ca 3000 	str.w	r3, [sl]
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295
 800e550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e554:	6921      	ldr	r1, [r4, #16]
 800e556:	464a      	mov	r2, r9
 800e558:	f7fd fe0c 	bl	800c174 <memcpy>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	6126      	str	r6, [r4, #16]
 800e56a:	6165      	str	r5, [r4, #20]
 800e56c:	444e      	add	r6, r9
 800e56e:	eba5 0509 	sub.w	r5, r5, r9
 800e572:	6026      	str	r6, [r4, #0]
 800e574:	60a5      	str	r5, [r4, #8]
 800e576:	463e      	mov	r6, r7
 800e578:	42be      	cmp	r6, r7
 800e57a:	d900      	bls.n	800e57e <__ssputs_r+0x86>
 800e57c:	463e      	mov	r6, r7
 800e57e:	6820      	ldr	r0, [r4, #0]
 800e580:	4632      	mov	r2, r6
 800e582:	4641      	mov	r1, r8
 800e584:	f000 f968 	bl	800e858 <memmove>
 800e588:	68a3      	ldr	r3, [r4, #8]
 800e58a:	1b9b      	subs	r3, r3, r6
 800e58c:	60a3      	str	r3, [r4, #8]
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	4433      	add	r3, r6
 800e592:	6023      	str	r3, [r4, #0]
 800e594:	2000      	movs	r0, #0
 800e596:	e7db      	b.n	800e550 <__ssputs_r+0x58>
 800e598:	462a      	mov	r2, r5
 800e59a:	f000 f977 	bl	800e88c <_realloc_r>
 800e59e:	4606      	mov	r6, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d1e1      	bne.n	800e568 <__ssputs_r+0x70>
 800e5a4:	6921      	ldr	r1, [r4, #16]
 800e5a6:	4650      	mov	r0, sl
 800e5a8:	f7fd fdfa 	bl	800c1a0 <_free_r>
 800e5ac:	e7c7      	b.n	800e53e <__ssputs_r+0x46>
	...

0800e5b0 <_svfiprintf_r>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	4698      	mov	r8, r3
 800e5b6:	898b      	ldrh	r3, [r1, #12]
 800e5b8:	061b      	lsls	r3, r3, #24
 800e5ba:	b09d      	sub	sp, #116	; 0x74
 800e5bc:	4607      	mov	r7, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	d50e      	bpl.n	800e5e2 <_svfiprintf_r+0x32>
 800e5c4:	690b      	ldr	r3, [r1, #16]
 800e5c6:	b963      	cbnz	r3, 800e5e2 <_svfiprintf_r+0x32>
 800e5c8:	2140      	movs	r1, #64	; 0x40
 800e5ca:	f7fd fe55 	bl	800c278 <_malloc_r>
 800e5ce:	6028      	str	r0, [r5, #0]
 800e5d0:	6128      	str	r0, [r5, #16]
 800e5d2:	b920      	cbnz	r0, 800e5de <_svfiprintf_r+0x2e>
 800e5d4:	230c      	movs	r3, #12
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5dc:	e0d1      	b.n	800e782 <_svfiprintf_r+0x1d2>
 800e5de:	2340      	movs	r3, #64	; 0x40
 800e5e0:	616b      	str	r3, [r5, #20]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e6:	2320      	movs	r3, #32
 800e5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f0:	2330      	movs	r3, #48	; 0x30
 800e5f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e79c <_svfiprintf_r+0x1ec>
 800e5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5fa:	f04f 0901 	mov.w	r9, #1
 800e5fe:	4623      	mov	r3, r4
 800e600:	469a      	mov	sl, r3
 800e602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e606:	b10a      	cbz	r2, 800e60c <_svfiprintf_r+0x5c>
 800e608:	2a25      	cmp	r2, #37	; 0x25
 800e60a:	d1f9      	bne.n	800e600 <_svfiprintf_r+0x50>
 800e60c:	ebba 0b04 	subs.w	fp, sl, r4
 800e610:	d00b      	beq.n	800e62a <_svfiprintf_r+0x7a>
 800e612:	465b      	mov	r3, fp
 800e614:	4622      	mov	r2, r4
 800e616:	4629      	mov	r1, r5
 800e618:	4638      	mov	r0, r7
 800e61a:	f7ff ff6d 	bl	800e4f8 <__ssputs_r>
 800e61e:	3001      	adds	r0, #1
 800e620:	f000 80aa 	beq.w	800e778 <_svfiprintf_r+0x1c8>
 800e624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e626:	445a      	add	r2, fp
 800e628:	9209      	str	r2, [sp, #36]	; 0x24
 800e62a:	f89a 3000 	ldrb.w	r3, [sl]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 80a2 	beq.w	800e778 <_svfiprintf_r+0x1c8>
 800e634:	2300      	movs	r3, #0
 800e636:	f04f 32ff 	mov.w	r2, #4294967295
 800e63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e63e:	f10a 0a01 	add.w	sl, sl, #1
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	9307      	str	r3, [sp, #28]
 800e646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e64a:	931a      	str	r3, [sp, #104]	; 0x68
 800e64c:	4654      	mov	r4, sl
 800e64e:	2205      	movs	r2, #5
 800e650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e654:	4851      	ldr	r0, [pc, #324]	; (800e79c <_svfiprintf_r+0x1ec>)
 800e656:	f7f1 fdcb 	bl	80001f0 <memchr>
 800e65a:	9a04      	ldr	r2, [sp, #16]
 800e65c:	b9d8      	cbnz	r0, 800e696 <_svfiprintf_r+0xe6>
 800e65e:	06d0      	lsls	r0, r2, #27
 800e660:	bf44      	itt	mi
 800e662:	2320      	movmi	r3, #32
 800e664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e668:	0711      	lsls	r1, r2, #28
 800e66a:	bf44      	itt	mi
 800e66c:	232b      	movmi	r3, #43	; 0x2b
 800e66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e672:	f89a 3000 	ldrb.w	r3, [sl]
 800e676:	2b2a      	cmp	r3, #42	; 0x2a
 800e678:	d015      	beq.n	800e6a6 <_svfiprintf_r+0xf6>
 800e67a:	9a07      	ldr	r2, [sp, #28]
 800e67c:	4654      	mov	r4, sl
 800e67e:	2000      	movs	r0, #0
 800e680:	f04f 0c0a 	mov.w	ip, #10
 800e684:	4621      	mov	r1, r4
 800e686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e68a:	3b30      	subs	r3, #48	; 0x30
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	d94e      	bls.n	800e72e <_svfiprintf_r+0x17e>
 800e690:	b1b0      	cbz	r0, 800e6c0 <_svfiprintf_r+0x110>
 800e692:	9207      	str	r2, [sp, #28]
 800e694:	e014      	b.n	800e6c0 <_svfiprintf_r+0x110>
 800e696:	eba0 0308 	sub.w	r3, r0, r8
 800e69a:	fa09 f303 	lsl.w	r3, r9, r3
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	46a2      	mov	sl, r4
 800e6a4:	e7d2      	b.n	800e64c <_svfiprintf_r+0x9c>
 800e6a6:	9b03      	ldr	r3, [sp, #12]
 800e6a8:	1d19      	adds	r1, r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	9103      	str	r1, [sp, #12]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbb      	ittet	lt
 800e6b2:	425b      	neglt	r3, r3
 800e6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b8:	9307      	strge	r3, [sp, #28]
 800e6ba:	9307      	strlt	r3, [sp, #28]
 800e6bc:	bfb8      	it	lt
 800e6be:	9204      	strlt	r2, [sp, #16]
 800e6c0:	7823      	ldrb	r3, [r4, #0]
 800e6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800e6c4:	d10c      	bne.n	800e6e0 <_svfiprintf_r+0x130>
 800e6c6:	7863      	ldrb	r3, [r4, #1]
 800e6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ca:	d135      	bne.n	800e738 <_svfiprintf_r+0x188>
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	1d1a      	adds	r2, r3, #4
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	9203      	str	r2, [sp, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bfb8      	it	lt
 800e6d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6dc:	3402      	adds	r4, #2
 800e6de:	9305      	str	r3, [sp, #20]
 800e6e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7ac <_svfiprintf_r+0x1fc>
 800e6e4:	7821      	ldrb	r1, [r4, #0]
 800e6e6:	2203      	movs	r2, #3
 800e6e8:	4650      	mov	r0, sl
 800e6ea:	f7f1 fd81 	bl	80001f0 <memchr>
 800e6ee:	b140      	cbz	r0, 800e702 <_svfiprintf_r+0x152>
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	eba0 000a 	sub.w	r0, r0, sl
 800e6f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e6fa:	9b04      	ldr	r3, [sp, #16]
 800e6fc:	4303      	orrs	r3, r0
 800e6fe:	3401      	adds	r4, #1
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e706:	4826      	ldr	r0, [pc, #152]	; (800e7a0 <_svfiprintf_r+0x1f0>)
 800e708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e70c:	2206      	movs	r2, #6
 800e70e:	f7f1 fd6f 	bl	80001f0 <memchr>
 800e712:	2800      	cmp	r0, #0
 800e714:	d038      	beq.n	800e788 <_svfiprintf_r+0x1d8>
 800e716:	4b23      	ldr	r3, [pc, #140]	; (800e7a4 <_svfiprintf_r+0x1f4>)
 800e718:	bb1b      	cbnz	r3, 800e762 <_svfiprintf_r+0x1b2>
 800e71a:	9b03      	ldr	r3, [sp, #12]
 800e71c:	3307      	adds	r3, #7
 800e71e:	f023 0307 	bic.w	r3, r3, #7
 800e722:	3308      	adds	r3, #8
 800e724:	9303      	str	r3, [sp, #12]
 800e726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e728:	4433      	add	r3, r6
 800e72a:	9309      	str	r3, [sp, #36]	; 0x24
 800e72c:	e767      	b.n	800e5fe <_svfiprintf_r+0x4e>
 800e72e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e732:	460c      	mov	r4, r1
 800e734:	2001      	movs	r0, #1
 800e736:	e7a5      	b.n	800e684 <_svfiprintf_r+0xd4>
 800e738:	2300      	movs	r3, #0
 800e73a:	3401      	adds	r4, #1
 800e73c:	9305      	str	r3, [sp, #20]
 800e73e:	4619      	mov	r1, r3
 800e740:	f04f 0c0a 	mov.w	ip, #10
 800e744:	4620      	mov	r0, r4
 800e746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e74a:	3a30      	subs	r2, #48	; 0x30
 800e74c:	2a09      	cmp	r2, #9
 800e74e:	d903      	bls.n	800e758 <_svfiprintf_r+0x1a8>
 800e750:	2b00      	cmp	r3, #0
 800e752:	d0c5      	beq.n	800e6e0 <_svfiprintf_r+0x130>
 800e754:	9105      	str	r1, [sp, #20]
 800e756:	e7c3      	b.n	800e6e0 <_svfiprintf_r+0x130>
 800e758:	fb0c 2101 	mla	r1, ip, r1, r2
 800e75c:	4604      	mov	r4, r0
 800e75e:	2301      	movs	r3, #1
 800e760:	e7f0      	b.n	800e744 <_svfiprintf_r+0x194>
 800e762:	ab03      	add	r3, sp, #12
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	462a      	mov	r2, r5
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <_svfiprintf_r+0x1f8>)
 800e76a:	a904      	add	r1, sp, #16
 800e76c:	4638      	mov	r0, r7
 800e76e:	f7fd fe97 	bl	800c4a0 <_printf_float>
 800e772:	1c42      	adds	r2, r0, #1
 800e774:	4606      	mov	r6, r0
 800e776:	d1d6      	bne.n	800e726 <_svfiprintf_r+0x176>
 800e778:	89ab      	ldrh	r3, [r5, #12]
 800e77a:	065b      	lsls	r3, r3, #25
 800e77c:	f53f af2c 	bmi.w	800e5d8 <_svfiprintf_r+0x28>
 800e780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e782:	b01d      	add	sp, #116	; 0x74
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	ab03      	add	r3, sp, #12
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	462a      	mov	r2, r5
 800e78e:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <_svfiprintf_r+0x1f8>)
 800e790:	a904      	add	r1, sp, #16
 800e792:	4638      	mov	r0, r7
 800e794:	f7fe f928 	bl	800c9e8 <_printf_i>
 800e798:	e7eb      	b.n	800e772 <_svfiprintf_r+0x1c2>
 800e79a:	bf00      	nop
 800e79c:	0801042c 	.word	0x0801042c
 800e7a0:	08010436 	.word	0x08010436
 800e7a4:	0800c4a1 	.word	0x0800c4a1
 800e7a8:	0800e4f9 	.word	0x0800e4f9
 800e7ac:	08010432 	.word	0x08010432

0800e7b0 <_read_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4d07      	ldr	r5, [pc, #28]	; (800e7d0 <_read_r+0x20>)
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	4608      	mov	r0, r1
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	602a      	str	r2, [r5, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	f7f3 fbd6 	bl	8001f70 <_read>
 800e7c4:	1c43      	adds	r3, r0, #1
 800e7c6:	d102      	bne.n	800e7ce <_read_r+0x1e>
 800e7c8:	682b      	ldr	r3, [r5, #0]
 800e7ca:	b103      	cbz	r3, 800e7ce <_read_r+0x1e>
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	bd38      	pop	{r3, r4, r5, pc}
 800e7d0:	20004f50 	.word	0x20004f50

0800e7d4 <__assert_func>:
 800e7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7d6:	4614      	mov	r4, r2
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4b09      	ldr	r3, [pc, #36]	; (800e800 <__assert_func+0x2c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	68d8      	ldr	r0, [r3, #12]
 800e7e2:	b14c      	cbz	r4, 800e7f8 <__assert_func+0x24>
 800e7e4:	4b07      	ldr	r3, [pc, #28]	; (800e804 <__assert_func+0x30>)
 800e7e6:	9100      	str	r1, [sp, #0]
 800e7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7ec:	4906      	ldr	r1, [pc, #24]	; (800e808 <__assert_func+0x34>)
 800e7ee:	462b      	mov	r3, r5
 800e7f0:	f000 f80e 	bl	800e810 <fiprintf>
 800e7f4:	f000 faa0 	bl	800ed38 <abort>
 800e7f8:	4b04      	ldr	r3, [pc, #16]	; (800e80c <__assert_func+0x38>)
 800e7fa:	461c      	mov	r4, r3
 800e7fc:	e7f3      	b.n	800e7e6 <__assert_func+0x12>
 800e7fe:	bf00      	nop
 800e800:	20000074 	.word	0x20000074
 800e804:	0801043d 	.word	0x0801043d
 800e808:	0801044a 	.word	0x0801044a
 800e80c:	08010478 	.word	0x08010478

0800e810 <fiprintf>:
 800e810:	b40e      	push	{r1, r2, r3}
 800e812:	b503      	push	{r0, r1, lr}
 800e814:	4601      	mov	r1, r0
 800e816:	ab03      	add	r3, sp, #12
 800e818:	4805      	ldr	r0, [pc, #20]	; (800e830 <fiprintf+0x20>)
 800e81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e81e:	6800      	ldr	r0, [r0, #0]
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	f000 f88b 	bl	800e93c <_vfiprintf_r>
 800e826:	b002      	add	sp, #8
 800e828:	f85d eb04 	ldr.w	lr, [sp], #4
 800e82c:	b003      	add	sp, #12
 800e82e:	4770      	bx	lr
 800e830:	20000074 	.word	0x20000074

0800e834 <__ascii_mbtowc>:
 800e834:	b082      	sub	sp, #8
 800e836:	b901      	cbnz	r1, 800e83a <__ascii_mbtowc+0x6>
 800e838:	a901      	add	r1, sp, #4
 800e83a:	b142      	cbz	r2, 800e84e <__ascii_mbtowc+0x1a>
 800e83c:	b14b      	cbz	r3, 800e852 <__ascii_mbtowc+0x1e>
 800e83e:	7813      	ldrb	r3, [r2, #0]
 800e840:	600b      	str	r3, [r1, #0]
 800e842:	7812      	ldrb	r2, [r2, #0]
 800e844:	1e10      	subs	r0, r2, #0
 800e846:	bf18      	it	ne
 800e848:	2001      	movne	r0, #1
 800e84a:	b002      	add	sp, #8
 800e84c:	4770      	bx	lr
 800e84e:	4610      	mov	r0, r2
 800e850:	e7fb      	b.n	800e84a <__ascii_mbtowc+0x16>
 800e852:	f06f 0001 	mvn.w	r0, #1
 800e856:	e7f8      	b.n	800e84a <__ascii_mbtowc+0x16>

0800e858 <memmove>:
 800e858:	4288      	cmp	r0, r1
 800e85a:	b510      	push	{r4, lr}
 800e85c:	eb01 0402 	add.w	r4, r1, r2
 800e860:	d902      	bls.n	800e868 <memmove+0x10>
 800e862:	4284      	cmp	r4, r0
 800e864:	4623      	mov	r3, r4
 800e866:	d807      	bhi.n	800e878 <memmove+0x20>
 800e868:	1e43      	subs	r3, r0, #1
 800e86a:	42a1      	cmp	r1, r4
 800e86c:	d008      	beq.n	800e880 <memmove+0x28>
 800e86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e876:	e7f8      	b.n	800e86a <memmove+0x12>
 800e878:	4402      	add	r2, r0
 800e87a:	4601      	mov	r1, r0
 800e87c:	428a      	cmp	r2, r1
 800e87e:	d100      	bne.n	800e882 <memmove+0x2a>
 800e880:	bd10      	pop	{r4, pc}
 800e882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e88a:	e7f7      	b.n	800e87c <memmove+0x24>

0800e88c <_realloc_r>:
 800e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	4680      	mov	r8, r0
 800e892:	4614      	mov	r4, r2
 800e894:	460e      	mov	r6, r1
 800e896:	b921      	cbnz	r1, 800e8a2 <_realloc_r+0x16>
 800e898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	4611      	mov	r1, r2
 800e89e:	f7fd bceb 	b.w	800c278 <_malloc_r>
 800e8a2:	b92a      	cbnz	r2, 800e8b0 <_realloc_r+0x24>
 800e8a4:	f7fd fc7c 	bl	800c1a0 <_free_r>
 800e8a8:	4625      	mov	r5, r4
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b0:	f000 faae 	bl	800ee10 <_malloc_usable_size_r>
 800e8b4:	4284      	cmp	r4, r0
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	d802      	bhi.n	800e8c0 <_realloc_r+0x34>
 800e8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8be:	d812      	bhi.n	800e8e6 <_realloc_r+0x5a>
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f7fd fcd8 	bl	800c278 <_malloc_r>
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d0ed      	beq.n	800e8aa <_realloc_r+0x1e>
 800e8ce:	42bc      	cmp	r4, r7
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	bf28      	it	cs
 800e8d6:	463a      	movcs	r2, r7
 800e8d8:	f7fd fc4c 	bl	800c174 <memcpy>
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4640      	mov	r0, r8
 800e8e0:	f7fd fc5e 	bl	800c1a0 <_free_r>
 800e8e4:	e7e1      	b.n	800e8aa <_realloc_r+0x1e>
 800e8e6:	4635      	mov	r5, r6
 800e8e8:	e7df      	b.n	800e8aa <_realloc_r+0x1e>

0800e8ea <__sfputc_r>:
 800e8ea:	6893      	ldr	r3, [r2, #8]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	b410      	push	{r4}
 800e8f2:	6093      	str	r3, [r2, #8]
 800e8f4:	da08      	bge.n	800e908 <__sfputc_r+0x1e>
 800e8f6:	6994      	ldr	r4, [r2, #24]
 800e8f8:	42a3      	cmp	r3, r4
 800e8fa:	db01      	blt.n	800e900 <__sfputc_r+0x16>
 800e8fc:	290a      	cmp	r1, #10
 800e8fe:	d103      	bne.n	800e908 <__sfputc_r+0x1e>
 800e900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e904:	f000 b94a 	b.w	800eb9c <__swbuf_r>
 800e908:	6813      	ldr	r3, [r2, #0]
 800e90a:	1c58      	adds	r0, r3, #1
 800e90c:	6010      	str	r0, [r2, #0]
 800e90e:	7019      	strb	r1, [r3, #0]
 800e910:	4608      	mov	r0, r1
 800e912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <__sfputs_r>:
 800e918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91a:	4606      	mov	r6, r0
 800e91c:	460f      	mov	r7, r1
 800e91e:	4614      	mov	r4, r2
 800e920:	18d5      	adds	r5, r2, r3
 800e922:	42ac      	cmp	r4, r5
 800e924:	d101      	bne.n	800e92a <__sfputs_r+0x12>
 800e926:	2000      	movs	r0, #0
 800e928:	e007      	b.n	800e93a <__sfputs_r+0x22>
 800e92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92e:	463a      	mov	r2, r7
 800e930:	4630      	mov	r0, r6
 800e932:	f7ff ffda 	bl	800e8ea <__sfputc_r>
 800e936:	1c43      	adds	r3, r0, #1
 800e938:	d1f3      	bne.n	800e922 <__sfputs_r+0xa>
 800e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e93c <_vfiprintf_r>:
 800e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	460d      	mov	r5, r1
 800e942:	b09d      	sub	sp, #116	; 0x74
 800e944:	4614      	mov	r4, r2
 800e946:	4698      	mov	r8, r3
 800e948:	4606      	mov	r6, r0
 800e94a:	b118      	cbz	r0, 800e954 <_vfiprintf_r+0x18>
 800e94c:	6983      	ldr	r3, [r0, #24]
 800e94e:	b90b      	cbnz	r3, 800e954 <_vfiprintf_r+0x18>
 800e950:	f7fd fb42 	bl	800bfd8 <__sinit>
 800e954:	4b89      	ldr	r3, [pc, #548]	; (800eb7c <_vfiprintf_r+0x240>)
 800e956:	429d      	cmp	r5, r3
 800e958:	d11b      	bne.n	800e992 <_vfiprintf_r+0x56>
 800e95a:	6875      	ldr	r5, [r6, #4]
 800e95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e95e:	07d9      	lsls	r1, r3, #31
 800e960:	d405      	bmi.n	800e96e <_vfiprintf_r+0x32>
 800e962:	89ab      	ldrh	r3, [r5, #12]
 800e964:	059a      	lsls	r2, r3, #22
 800e966:	d402      	bmi.n	800e96e <_vfiprintf_r+0x32>
 800e968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e96a:	f7fd fbf8 	bl	800c15e <__retarget_lock_acquire_recursive>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	071b      	lsls	r3, r3, #28
 800e972:	d501      	bpl.n	800e978 <_vfiprintf_r+0x3c>
 800e974:	692b      	ldr	r3, [r5, #16]
 800e976:	b9eb      	cbnz	r3, 800e9b4 <_vfiprintf_r+0x78>
 800e978:	4629      	mov	r1, r5
 800e97a:	4630      	mov	r0, r6
 800e97c:	f000 f96e 	bl	800ec5c <__swsetup_r>
 800e980:	b1c0      	cbz	r0, 800e9b4 <_vfiprintf_r+0x78>
 800e982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e984:	07dc      	lsls	r4, r3, #31
 800e986:	d50e      	bpl.n	800e9a6 <_vfiprintf_r+0x6a>
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	b01d      	add	sp, #116	; 0x74
 800e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e992:	4b7b      	ldr	r3, [pc, #492]	; (800eb80 <_vfiprintf_r+0x244>)
 800e994:	429d      	cmp	r5, r3
 800e996:	d101      	bne.n	800e99c <_vfiprintf_r+0x60>
 800e998:	68b5      	ldr	r5, [r6, #8]
 800e99a:	e7df      	b.n	800e95c <_vfiprintf_r+0x20>
 800e99c:	4b79      	ldr	r3, [pc, #484]	; (800eb84 <_vfiprintf_r+0x248>)
 800e99e:	429d      	cmp	r5, r3
 800e9a0:	bf08      	it	eq
 800e9a2:	68f5      	ldreq	r5, [r6, #12]
 800e9a4:	e7da      	b.n	800e95c <_vfiprintf_r+0x20>
 800e9a6:	89ab      	ldrh	r3, [r5, #12]
 800e9a8:	0598      	lsls	r0, r3, #22
 800e9aa:	d4ed      	bmi.n	800e988 <_vfiprintf_r+0x4c>
 800e9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ae:	f7fd fbd7 	bl	800c160 <__retarget_lock_release_recursive>
 800e9b2:	e7e9      	b.n	800e988 <_vfiprintf_r+0x4c>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b8:	2320      	movs	r3, #32
 800e9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9c2:	2330      	movs	r3, #48	; 0x30
 800e9c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb88 <_vfiprintf_r+0x24c>
 800e9c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9cc:	f04f 0901 	mov.w	r9, #1
 800e9d0:	4623      	mov	r3, r4
 800e9d2:	469a      	mov	sl, r3
 800e9d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d8:	b10a      	cbz	r2, 800e9de <_vfiprintf_r+0xa2>
 800e9da:	2a25      	cmp	r2, #37	; 0x25
 800e9dc:	d1f9      	bne.n	800e9d2 <_vfiprintf_r+0x96>
 800e9de:	ebba 0b04 	subs.w	fp, sl, r4
 800e9e2:	d00b      	beq.n	800e9fc <_vfiprintf_r+0xc0>
 800e9e4:	465b      	mov	r3, fp
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f7ff ff94 	bl	800e918 <__sfputs_r>
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	f000 80aa 	beq.w	800eb4a <_vfiprintf_r+0x20e>
 800e9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9f8:	445a      	add	r2, fp
 800e9fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 80a2 	beq.w	800eb4a <_vfiprintf_r+0x20e>
 800ea06:	2300      	movs	r3, #0
 800ea08:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea10:	f10a 0a01 	add.w	sl, sl, #1
 800ea14:	9304      	str	r3, [sp, #16]
 800ea16:	9307      	str	r3, [sp, #28]
 800ea18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ea1e:	4654      	mov	r4, sl
 800ea20:	2205      	movs	r2, #5
 800ea22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea26:	4858      	ldr	r0, [pc, #352]	; (800eb88 <_vfiprintf_r+0x24c>)
 800ea28:	f7f1 fbe2 	bl	80001f0 <memchr>
 800ea2c:	9a04      	ldr	r2, [sp, #16]
 800ea2e:	b9d8      	cbnz	r0, 800ea68 <_vfiprintf_r+0x12c>
 800ea30:	06d1      	lsls	r1, r2, #27
 800ea32:	bf44      	itt	mi
 800ea34:	2320      	movmi	r3, #32
 800ea36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea3a:	0713      	lsls	r3, r2, #28
 800ea3c:	bf44      	itt	mi
 800ea3e:	232b      	movmi	r3, #43	; 0x2b
 800ea40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea44:	f89a 3000 	ldrb.w	r3, [sl]
 800ea48:	2b2a      	cmp	r3, #42	; 0x2a
 800ea4a:	d015      	beq.n	800ea78 <_vfiprintf_r+0x13c>
 800ea4c:	9a07      	ldr	r2, [sp, #28]
 800ea4e:	4654      	mov	r4, sl
 800ea50:	2000      	movs	r0, #0
 800ea52:	f04f 0c0a 	mov.w	ip, #10
 800ea56:	4621      	mov	r1, r4
 800ea58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea5c:	3b30      	subs	r3, #48	; 0x30
 800ea5e:	2b09      	cmp	r3, #9
 800ea60:	d94e      	bls.n	800eb00 <_vfiprintf_r+0x1c4>
 800ea62:	b1b0      	cbz	r0, 800ea92 <_vfiprintf_r+0x156>
 800ea64:	9207      	str	r2, [sp, #28]
 800ea66:	e014      	b.n	800ea92 <_vfiprintf_r+0x156>
 800ea68:	eba0 0308 	sub.w	r3, r0, r8
 800ea6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea70:	4313      	orrs	r3, r2
 800ea72:	9304      	str	r3, [sp, #16]
 800ea74:	46a2      	mov	sl, r4
 800ea76:	e7d2      	b.n	800ea1e <_vfiprintf_r+0xe2>
 800ea78:	9b03      	ldr	r3, [sp, #12]
 800ea7a:	1d19      	adds	r1, r3, #4
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	9103      	str	r1, [sp, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bfbb      	ittet	lt
 800ea84:	425b      	neglt	r3, r3
 800ea86:	f042 0202 	orrlt.w	r2, r2, #2
 800ea8a:	9307      	strge	r3, [sp, #28]
 800ea8c:	9307      	strlt	r3, [sp, #28]
 800ea8e:	bfb8      	it	lt
 800ea90:	9204      	strlt	r2, [sp, #16]
 800ea92:	7823      	ldrb	r3, [r4, #0]
 800ea94:	2b2e      	cmp	r3, #46	; 0x2e
 800ea96:	d10c      	bne.n	800eab2 <_vfiprintf_r+0x176>
 800ea98:	7863      	ldrb	r3, [r4, #1]
 800ea9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea9c:	d135      	bne.n	800eb0a <_vfiprintf_r+0x1ce>
 800ea9e:	9b03      	ldr	r3, [sp, #12]
 800eaa0:	1d1a      	adds	r2, r3, #4
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	9203      	str	r2, [sp, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	bfb8      	it	lt
 800eaaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaae:	3402      	adds	r4, #2
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb98 <_vfiprintf_r+0x25c>
 800eab6:	7821      	ldrb	r1, [r4, #0]
 800eab8:	2203      	movs	r2, #3
 800eaba:	4650      	mov	r0, sl
 800eabc:	f7f1 fb98 	bl	80001f0 <memchr>
 800eac0:	b140      	cbz	r0, 800ead4 <_vfiprintf_r+0x198>
 800eac2:	2340      	movs	r3, #64	; 0x40
 800eac4:	eba0 000a 	sub.w	r0, r0, sl
 800eac8:	fa03 f000 	lsl.w	r0, r3, r0
 800eacc:	9b04      	ldr	r3, [sp, #16]
 800eace:	4303      	orrs	r3, r0
 800ead0:	3401      	adds	r4, #1
 800ead2:	9304      	str	r3, [sp, #16]
 800ead4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead8:	482c      	ldr	r0, [pc, #176]	; (800eb8c <_vfiprintf_r+0x250>)
 800eada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eade:	2206      	movs	r2, #6
 800eae0:	f7f1 fb86 	bl	80001f0 <memchr>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d03f      	beq.n	800eb68 <_vfiprintf_r+0x22c>
 800eae8:	4b29      	ldr	r3, [pc, #164]	; (800eb90 <_vfiprintf_r+0x254>)
 800eaea:	bb1b      	cbnz	r3, 800eb34 <_vfiprintf_r+0x1f8>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	3307      	adds	r3, #7
 800eaf0:	f023 0307 	bic.w	r3, r3, #7
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafa:	443b      	add	r3, r7
 800eafc:	9309      	str	r3, [sp, #36]	; 0x24
 800eafe:	e767      	b.n	800e9d0 <_vfiprintf_r+0x94>
 800eb00:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb04:	460c      	mov	r4, r1
 800eb06:	2001      	movs	r0, #1
 800eb08:	e7a5      	b.n	800ea56 <_vfiprintf_r+0x11a>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	3401      	adds	r4, #1
 800eb0e:	9305      	str	r3, [sp, #20]
 800eb10:	4619      	mov	r1, r3
 800eb12:	f04f 0c0a 	mov.w	ip, #10
 800eb16:	4620      	mov	r0, r4
 800eb18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb1c:	3a30      	subs	r2, #48	; 0x30
 800eb1e:	2a09      	cmp	r2, #9
 800eb20:	d903      	bls.n	800eb2a <_vfiprintf_r+0x1ee>
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d0c5      	beq.n	800eab2 <_vfiprintf_r+0x176>
 800eb26:	9105      	str	r1, [sp, #20]
 800eb28:	e7c3      	b.n	800eab2 <_vfiprintf_r+0x176>
 800eb2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb2e:	4604      	mov	r4, r0
 800eb30:	2301      	movs	r3, #1
 800eb32:	e7f0      	b.n	800eb16 <_vfiprintf_r+0x1da>
 800eb34:	ab03      	add	r3, sp, #12
 800eb36:	9300      	str	r3, [sp, #0]
 800eb38:	462a      	mov	r2, r5
 800eb3a:	4b16      	ldr	r3, [pc, #88]	; (800eb94 <_vfiprintf_r+0x258>)
 800eb3c:	a904      	add	r1, sp, #16
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7fd fcae 	bl	800c4a0 <_printf_float>
 800eb44:	4607      	mov	r7, r0
 800eb46:	1c78      	adds	r0, r7, #1
 800eb48:	d1d6      	bne.n	800eaf8 <_vfiprintf_r+0x1bc>
 800eb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb4c:	07d9      	lsls	r1, r3, #31
 800eb4e:	d405      	bmi.n	800eb5c <_vfiprintf_r+0x220>
 800eb50:	89ab      	ldrh	r3, [r5, #12]
 800eb52:	059a      	lsls	r2, r3, #22
 800eb54:	d402      	bmi.n	800eb5c <_vfiprintf_r+0x220>
 800eb56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb58:	f7fd fb02 	bl	800c160 <__retarget_lock_release_recursive>
 800eb5c:	89ab      	ldrh	r3, [r5, #12]
 800eb5e:	065b      	lsls	r3, r3, #25
 800eb60:	f53f af12 	bmi.w	800e988 <_vfiprintf_r+0x4c>
 800eb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb66:	e711      	b.n	800e98c <_vfiprintf_r+0x50>
 800eb68:	ab03      	add	r3, sp, #12
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	462a      	mov	r2, r5
 800eb6e:	4b09      	ldr	r3, [pc, #36]	; (800eb94 <_vfiprintf_r+0x258>)
 800eb70:	a904      	add	r1, sp, #16
 800eb72:	4630      	mov	r0, r6
 800eb74:	f7fd ff38 	bl	800c9e8 <_printf_i>
 800eb78:	e7e4      	b.n	800eb44 <_vfiprintf_r+0x208>
 800eb7a:	bf00      	nop
 800eb7c:	080101c8 	.word	0x080101c8
 800eb80:	080101e8 	.word	0x080101e8
 800eb84:	080101a8 	.word	0x080101a8
 800eb88:	0801042c 	.word	0x0801042c
 800eb8c:	08010436 	.word	0x08010436
 800eb90:	0800c4a1 	.word	0x0800c4a1
 800eb94:	0800e919 	.word	0x0800e919
 800eb98:	08010432 	.word	0x08010432

0800eb9c <__swbuf_r>:
 800eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9e:	460e      	mov	r6, r1
 800eba0:	4614      	mov	r4, r2
 800eba2:	4605      	mov	r5, r0
 800eba4:	b118      	cbz	r0, 800ebae <__swbuf_r+0x12>
 800eba6:	6983      	ldr	r3, [r0, #24]
 800eba8:	b90b      	cbnz	r3, 800ebae <__swbuf_r+0x12>
 800ebaa:	f7fd fa15 	bl	800bfd8 <__sinit>
 800ebae:	4b21      	ldr	r3, [pc, #132]	; (800ec34 <__swbuf_r+0x98>)
 800ebb0:	429c      	cmp	r4, r3
 800ebb2:	d12b      	bne.n	800ec0c <__swbuf_r+0x70>
 800ebb4:	686c      	ldr	r4, [r5, #4]
 800ebb6:	69a3      	ldr	r3, [r4, #24]
 800ebb8:	60a3      	str	r3, [r4, #8]
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	071a      	lsls	r2, r3, #28
 800ebbe:	d52f      	bpl.n	800ec20 <__swbuf_r+0x84>
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	b36b      	cbz	r3, 800ec20 <__swbuf_r+0x84>
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	6820      	ldr	r0, [r4, #0]
 800ebc8:	1ac0      	subs	r0, r0, r3
 800ebca:	6963      	ldr	r3, [r4, #20]
 800ebcc:	b2f6      	uxtb	r6, r6
 800ebce:	4283      	cmp	r3, r0
 800ebd0:	4637      	mov	r7, r6
 800ebd2:	dc04      	bgt.n	800ebde <__swbuf_r+0x42>
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	f7ff f896 	bl	800dd08 <_fflush_r>
 800ebdc:	bb30      	cbnz	r0, 800ec2c <__swbuf_r+0x90>
 800ebde:	68a3      	ldr	r3, [r4, #8]
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	60a3      	str	r3, [r4, #8]
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	6022      	str	r2, [r4, #0]
 800ebea:	701e      	strb	r6, [r3, #0]
 800ebec:	6963      	ldr	r3, [r4, #20]
 800ebee:	3001      	adds	r0, #1
 800ebf0:	4283      	cmp	r3, r0
 800ebf2:	d004      	beq.n	800ebfe <__swbuf_r+0x62>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	07db      	lsls	r3, r3, #31
 800ebf8:	d506      	bpl.n	800ec08 <__swbuf_r+0x6c>
 800ebfa:	2e0a      	cmp	r6, #10
 800ebfc:	d104      	bne.n	800ec08 <__swbuf_r+0x6c>
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4628      	mov	r0, r5
 800ec02:	f7ff f881 	bl	800dd08 <_fflush_r>
 800ec06:	b988      	cbnz	r0, 800ec2c <__swbuf_r+0x90>
 800ec08:	4638      	mov	r0, r7
 800ec0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <__swbuf_r+0x9c>)
 800ec0e:	429c      	cmp	r4, r3
 800ec10:	d101      	bne.n	800ec16 <__swbuf_r+0x7a>
 800ec12:	68ac      	ldr	r4, [r5, #8]
 800ec14:	e7cf      	b.n	800ebb6 <__swbuf_r+0x1a>
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <__swbuf_r+0xa0>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	bf08      	it	eq
 800ec1c:	68ec      	ldreq	r4, [r5, #12]
 800ec1e:	e7ca      	b.n	800ebb6 <__swbuf_r+0x1a>
 800ec20:	4621      	mov	r1, r4
 800ec22:	4628      	mov	r0, r5
 800ec24:	f000 f81a 	bl	800ec5c <__swsetup_r>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d0cb      	beq.n	800ebc4 <__swbuf_r+0x28>
 800ec2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ec30:	e7ea      	b.n	800ec08 <__swbuf_r+0x6c>
 800ec32:	bf00      	nop
 800ec34:	080101c8 	.word	0x080101c8
 800ec38:	080101e8 	.word	0x080101e8
 800ec3c:	080101a8 	.word	0x080101a8

0800ec40 <__ascii_wctomb>:
 800ec40:	b149      	cbz	r1, 800ec56 <__ascii_wctomb+0x16>
 800ec42:	2aff      	cmp	r2, #255	; 0xff
 800ec44:	bf85      	ittet	hi
 800ec46:	238a      	movhi	r3, #138	; 0x8a
 800ec48:	6003      	strhi	r3, [r0, #0]
 800ec4a:	700a      	strbls	r2, [r1, #0]
 800ec4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec50:	bf98      	it	ls
 800ec52:	2001      	movls	r0, #1
 800ec54:	4770      	bx	lr
 800ec56:	4608      	mov	r0, r1
 800ec58:	4770      	bx	lr
	...

0800ec5c <__swsetup_r>:
 800ec5c:	4b32      	ldr	r3, [pc, #200]	; (800ed28 <__swsetup_r+0xcc>)
 800ec5e:	b570      	push	{r4, r5, r6, lr}
 800ec60:	681d      	ldr	r5, [r3, #0]
 800ec62:	4606      	mov	r6, r0
 800ec64:	460c      	mov	r4, r1
 800ec66:	b125      	cbz	r5, 800ec72 <__swsetup_r+0x16>
 800ec68:	69ab      	ldr	r3, [r5, #24]
 800ec6a:	b913      	cbnz	r3, 800ec72 <__swsetup_r+0x16>
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f7fd f9b3 	bl	800bfd8 <__sinit>
 800ec72:	4b2e      	ldr	r3, [pc, #184]	; (800ed2c <__swsetup_r+0xd0>)
 800ec74:	429c      	cmp	r4, r3
 800ec76:	d10f      	bne.n	800ec98 <__swsetup_r+0x3c>
 800ec78:	686c      	ldr	r4, [r5, #4]
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec80:	0719      	lsls	r1, r3, #28
 800ec82:	d42c      	bmi.n	800ecde <__swsetup_r+0x82>
 800ec84:	06dd      	lsls	r5, r3, #27
 800ec86:	d411      	bmi.n	800ecac <__swsetup_r+0x50>
 800ec88:	2309      	movs	r3, #9
 800ec8a:	6033      	str	r3, [r6, #0]
 800ec8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec90:	81a3      	strh	r3, [r4, #12]
 800ec92:	f04f 30ff 	mov.w	r0, #4294967295
 800ec96:	e03e      	b.n	800ed16 <__swsetup_r+0xba>
 800ec98:	4b25      	ldr	r3, [pc, #148]	; (800ed30 <__swsetup_r+0xd4>)
 800ec9a:	429c      	cmp	r4, r3
 800ec9c:	d101      	bne.n	800eca2 <__swsetup_r+0x46>
 800ec9e:	68ac      	ldr	r4, [r5, #8]
 800eca0:	e7eb      	b.n	800ec7a <__swsetup_r+0x1e>
 800eca2:	4b24      	ldr	r3, [pc, #144]	; (800ed34 <__swsetup_r+0xd8>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	bf08      	it	eq
 800eca8:	68ec      	ldreq	r4, [r5, #12]
 800ecaa:	e7e6      	b.n	800ec7a <__swsetup_r+0x1e>
 800ecac:	0758      	lsls	r0, r3, #29
 800ecae:	d512      	bpl.n	800ecd6 <__swsetup_r+0x7a>
 800ecb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecb2:	b141      	cbz	r1, 800ecc6 <__swsetup_r+0x6a>
 800ecb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecb8:	4299      	cmp	r1, r3
 800ecba:	d002      	beq.n	800ecc2 <__swsetup_r+0x66>
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7fd fa6f 	bl	800c1a0 <_free_r>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	6363      	str	r3, [r4, #52]	; 0x34
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eccc:	81a3      	strh	r3, [r4, #12]
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	6923      	ldr	r3, [r4, #16]
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	f043 0308 	orr.w	r3, r3, #8
 800ecdc:	81a3      	strh	r3, [r4, #12]
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	b94b      	cbnz	r3, 800ecf6 <__swsetup_r+0x9a>
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ece8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecec:	d003      	beq.n	800ecf6 <__swsetup_r+0x9a>
 800ecee:	4621      	mov	r1, r4
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f000 f84d 	bl	800ed90 <__smakebuf_r>
 800ecf6:	89a0      	ldrh	r0, [r4, #12]
 800ecf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecfc:	f010 0301 	ands.w	r3, r0, #1
 800ed00:	d00a      	beq.n	800ed18 <__swsetup_r+0xbc>
 800ed02:	2300      	movs	r3, #0
 800ed04:	60a3      	str	r3, [r4, #8]
 800ed06:	6963      	ldr	r3, [r4, #20]
 800ed08:	425b      	negs	r3, r3
 800ed0a:	61a3      	str	r3, [r4, #24]
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	b943      	cbnz	r3, 800ed22 <__swsetup_r+0xc6>
 800ed10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed14:	d1ba      	bne.n	800ec8c <__swsetup_r+0x30>
 800ed16:	bd70      	pop	{r4, r5, r6, pc}
 800ed18:	0781      	lsls	r1, r0, #30
 800ed1a:	bf58      	it	pl
 800ed1c:	6963      	ldrpl	r3, [r4, #20]
 800ed1e:	60a3      	str	r3, [r4, #8]
 800ed20:	e7f4      	b.n	800ed0c <__swsetup_r+0xb0>
 800ed22:	2000      	movs	r0, #0
 800ed24:	e7f7      	b.n	800ed16 <__swsetup_r+0xba>
 800ed26:	bf00      	nop
 800ed28:	20000074 	.word	0x20000074
 800ed2c:	080101c8 	.word	0x080101c8
 800ed30:	080101e8 	.word	0x080101e8
 800ed34:	080101a8 	.word	0x080101a8

0800ed38 <abort>:
 800ed38:	b508      	push	{r3, lr}
 800ed3a:	2006      	movs	r0, #6
 800ed3c:	f000 f898 	bl	800ee70 <raise>
 800ed40:	2001      	movs	r0, #1
 800ed42:	f7f3 f90b 	bl	8001f5c <_exit>

0800ed46 <__swhatbuf_r>:
 800ed46:	b570      	push	{r4, r5, r6, lr}
 800ed48:	460e      	mov	r6, r1
 800ed4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	b096      	sub	sp, #88	; 0x58
 800ed52:	4614      	mov	r4, r2
 800ed54:	461d      	mov	r5, r3
 800ed56:	da08      	bge.n	800ed6a <__swhatbuf_r+0x24>
 800ed58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	602a      	str	r2, [r5, #0]
 800ed60:	061a      	lsls	r2, r3, #24
 800ed62:	d410      	bmi.n	800ed86 <__swhatbuf_r+0x40>
 800ed64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed68:	e00e      	b.n	800ed88 <__swhatbuf_r+0x42>
 800ed6a:	466a      	mov	r2, sp
 800ed6c:	f000 f89c 	bl	800eea8 <_fstat_r>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	dbf1      	blt.n	800ed58 <__swhatbuf_r+0x12>
 800ed74:	9a01      	ldr	r2, [sp, #4]
 800ed76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed7e:	425a      	negs	r2, r3
 800ed80:	415a      	adcs	r2, r3
 800ed82:	602a      	str	r2, [r5, #0]
 800ed84:	e7ee      	b.n	800ed64 <__swhatbuf_r+0x1e>
 800ed86:	2340      	movs	r3, #64	; 0x40
 800ed88:	2000      	movs	r0, #0
 800ed8a:	6023      	str	r3, [r4, #0]
 800ed8c:	b016      	add	sp, #88	; 0x58
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}

0800ed90 <__smakebuf_r>:
 800ed90:	898b      	ldrh	r3, [r1, #12]
 800ed92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed94:	079d      	lsls	r5, r3, #30
 800ed96:	4606      	mov	r6, r0
 800ed98:	460c      	mov	r4, r1
 800ed9a:	d507      	bpl.n	800edac <__smakebuf_r+0x1c>
 800ed9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	6123      	str	r3, [r4, #16]
 800eda4:	2301      	movs	r3, #1
 800eda6:	6163      	str	r3, [r4, #20]
 800eda8:	b002      	add	sp, #8
 800edaa:	bd70      	pop	{r4, r5, r6, pc}
 800edac:	ab01      	add	r3, sp, #4
 800edae:	466a      	mov	r2, sp
 800edb0:	f7ff ffc9 	bl	800ed46 <__swhatbuf_r>
 800edb4:	9900      	ldr	r1, [sp, #0]
 800edb6:	4605      	mov	r5, r0
 800edb8:	4630      	mov	r0, r6
 800edba:	f7fd fa5d 	bl	800c278 <_malloc_r>
 800edbe:	b948      	cbnz	r0, 800edd4 <__smakebuf_r+0x44>
 800edc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edc4:	059a      	lsls	r2, r3, #22
 800edc6:	d4ef      	bmi.n	800eda8 <__smakebuf_r+0x18>
 800edc8:	f023 0303 	bic.w	r3, r3, #3
 800edcc:	f043 0302 	orr.w	r3, r3, #2
 800edd0:	81a3      	strh	r3, [r4, #12]
 800edd2:	e7e3      	b.n	800ed9c <__smakebuf_r+0xc>
 800edd4:	4b0d      	ldr	r3, [pc, #52]	; (800ee0c <__smakebuf_r+0x7c>)
 800edd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	6020      	str	r0, [r4, #0]
 800eddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ede0:	81a3      	strh	r3, [r4, #12]
 800ede2:	9b00      	ldr	r3, [sp, #0]
 800ede4:	6163      	str	r3, [r4, #20]
 800ede6:	9b01      	ldr	r3, [sp, #4]
 800ede8:	6120      	str	r0, [r4, #16]
 800edea:	b15b      	cbz	r3, 800ee04 <__smakebuf_r+0x74>
 800edec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edf0:	4630      	mov	r0, r6
 800edf2:	f000 f86b 	bl	800eecc <_isatty_r>
 800edf6:	b128      	cbz	r0, 800ee04 <__smakebuf_r+0x74>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f023 0303 	bic.w	r3, r3, #3
 800edfe:	f043 0301 	orr.w	r3, r3, #1
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	89a0      	ldrh	r0, [r4, #12]
 800ee06:	4305      	orrs	r5, r0
 800ee08:	81a5      	strh	r5, [r4, #12]
 800ee0a:	e7cd      	b.n	800eda8 <__smakebuf_r+0x18>
 800ee0c:	0800bf71 	.word	0x0800bf71

0800ee10 <_malloc_usable_size_r>:
 800ee10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee14:	1f18      	subs	r0, r3, #4
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bfbc      	itt	lt
 800ee1a:	580b      	ldrlt	r3, [r1, r0]
 800ee1c:	18c0      	addlt	r0, r0, r3
 800ee1e:	4770      	bx	lr

0800ee20 <_raise_r>:
 800ee20:	291f      	cmp	r1, #31
 800ee22:	b538      	push	{r3, r4, r5, lr}
 800ee24:	4604      	mov	r4, r0
 800ee26:	460d      	mov	r5, r1
 800ee28:	d904      	bls.n	800ee34 <_raise_r+0x14>
 800ee2a:	2316      	movs	r3, #22
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee36:	b112      	cbz	r2, 800ee3e <_raise_r+0x1e>
 800ee38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee3c:	b94b      	cbnz	r3, 800ee52 <_raise_r+0x32>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 f830 	bl	800eea4 <_getpid_r>
 800ee44:	462a      	mov	r2, r5
 800ee46:	4601      	mov	r1, r0
 800ee48:	4620      	mov	r0, r4
 800ee4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee4e:	f000 b817 	b.w	800ee80 <_kill_r>
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d00a      	beq.n	800ee6c <_raise_r+0x4c>
 800ee56:	1c59      	adds	r1, r3, #1
 800ee58:	d103      	bne.n	800ee62 <_raise_r+0x42>
 800ee5a:	2316      	movs	r3, #22
 800ee5c:	6003      	str	r3, [r0, #0]
 800ee5e:	2001      	movs	r0, #1
 800ee60:	e7e7      	b.n	800ee32 <_raise_r+0x12>
 800ee62:	2400      	movs	r4, #0
 800ee64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee68:	4628      	mov	r0, r5
 800ee6a:	4798      	blx	r3
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	e7e0      	b.n	800ee32 <_raise_r+0x12>

0800ee70 <raise>:
 800ee70:	4b02      	ldr	r3, [pc, #8]	; (800ee7c <raise+0xc>)
 800ee72:	4601      	mov	r1, r0
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	f7ff bfd3 	b.w	800ee20 <_raise_r>
 800ee7a:	bf00      	nop
 800ee7c:	20000074 	.word	0x20000074

0800ee80 <_kill_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d07      	ldr	r5, [pc, #28]	; (800eea0 <_kill_r+0x20>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	f7f3 f855 	bl	8001f3c <_kill>
 800ee92:	1c43      	adds	r3, r0, #1
 800ee94:	d102      	bne.n	800ee9c <_kill_r+0x1c>
 800ee96:	682b      	ldr	r3, [r5, #0]
 800ee98:	b103      	cbz	r3, 800ee9c <_kill_r+0x1c>
 800ee9a:	6023      	str	r3, [r4, #0]
 800ee9c:	bd38      	pop	{r3, r4, r5, pc}
 800ee9e:	bf00      	nop
 800eea0:	20004f50 	.word	0x20004f50

0800eea4 <_getpid_r>:
 800eea4:	f7f3 b842 	b.w	8001f2c <_getpid>

0800eea8 <_fstat_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d07      	ldr	r5, [pc, #28]	; (800eec8 <_fstat_r+0x20>)
 800eeac:	2300      	movs	r3, #0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	602b      	str	r3, [r5, #0]
 800eeb6:	f7f3 f8a0 	bl	8001ffa <_fstat>
 800eeba:	1c43      	adds	r3, r0, #1
 800eebc:	d102      	bne.n	800eec4 <_fstat_r+0x1c>
 800eebe:	682b      	ldr	r3, [r5, #0]
 800eec0:	b103      	cbz	r3, 800eec4 <_fstat_r+0x1c>
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	bd38      	pop	{r3, r4, r5, pc}
 800eec6:	bf00      	nop
 800eec8:	20004f50 	.word	0x20004f50

0800eecc <_isatty_r>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4d06      	ldr	r5, [pc, #24]	; (800eee8 <_isatty_r+0x1c>)
 800eed0:	2300      	movs	r3, #0
 800eed2:	4604      	mov	r4, r0
 800eed4:	4608      	mov	r0, r1
 800eed6:	602b      	str	r3, [r5, #0]
 800eed8:	f7f3 f89f 	bl	800201a <_isatty>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_isatty_r+0x1a>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_isatty_r+0x1a>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20004f50 	.word	0x20004f50
 800eeec:	00000000 	.word	0x00000000

0800eef0 <log>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	ed2d 8b02 	vpush	{d8}
 800eef6:	ec55 4b10 	vmov	r4, r5, d0
 800eefa:	f000 f865 	bl	800efc8 <__ieee754_log>
 800eefe:	4622      	mov	r2, r4
 800ef00:	462b      	mov	r3, r5
 800ef02:	4620      	mov	r0, r4
 800ef04:	4629      	mov	r1, r5
 800ef06:	eeb0 8a40 	vmov.f32	s16, s0
 800ef0a:	eef0 8a60 	vmov.f32	s17, s1
 800ef0e:	f7f1 fe15 	bl	8000b3c <__aeabi_dcmpun>
 800ef12:	b998      	cbnz	r0, 800ef3c <log+0x4c>
 800ef14:	2200      	movs	r2, #0
 800ef16:	2300      	movs	r3, #0
 800ef18:	4620      	mov	r0, r4
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	f7f1 fe04 	bl	8000b28 <__aeabi_dcmpgt>
 800ef20:	b960      	cbnz	r0, 800ef3c <log+0x4c>
 800ef22:	2200      	movs	r2, #0
 800ef24:	2300      	movs	r3, #0
 800ef26:	4620      	mov	r0, r4
 800ef28:	4629      	mov	r1, r5
 800ef2a:	f7f1 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef2e:	b160      	cbz	r0, 800ef4a <log+0x5a>
 800ef30:	f7fc fff4 	bl	800bf1c <__errno>
 800ef34:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ef60 <log+0x70>
 800ef38:	2322      	movs	r3, #34	; 0x22
 800ef3a:	6003      	str	r3, [r0, #0]
 800ef3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ef40:	eef0 0a68 	vmov.f32	s1, s17
 800ef44:	ecbd 8b02 	vpop	{d8}
 800ef48:	bd38      	pop	{r3, r4, r5, pc}
 800ef4a:	f7fc ffe7 	bl	800bf1c <__errno>
 800ef4e:	ecbd 8b02 	vpop	{d8}
 800ef52:	2321      	movs	r3, #33	; 0x21
 800ef54:	6003      	str	r3, [r0, #0]
 800ef56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5a:	4803      	ldr	r0, [pc, #12]	; (800ef68 <log+0x78>)
 800ef5c:	f000 baa0 	b.w	800f4a0 <nan>
 800ef60:	00000000 	.word	0x00000000
 800ef64:	fff00000 	.word	0xfff00000
 800ef68:	08010478 	.word	0x08010478

0800ef6c <sqrt>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	ed2d 8b02 	vpush	{d8}
 800ef72:	ec55 4b10 	vmov	r4, r5, d0
 800ef76:	f000 f9e1 	bl	800f33c <__ieee754_sqrt>
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	4620      	mov	r0, r4
 800ef80:	4629      	mov	r1, r5
 800ef82:	eeb0 8a40 	vmov.f32	s16, s0
 800ef86:	eef0 8a60 	vmov.f32	s17, s1
 800ef8a:	f7f1 fdd7 	bl	8000b3c <__aeabi_dcmpun>
 800ef8e:	b990      	cbnz	r0, 800efb6 <sqrt+0x4a>
 800ef90:	2200      	movs	r2, #0
 800ef92:	2300      	movs	r3, #0
 800ef94:	4620      	mov	r0, r4
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 fda8 	bl	8000aec <__aeabi_dcmplt>
 800ef9c:	b158      	cbz	r0, 800efb6 <sqrt+0x4a>
 800ef9e:	f7fc ffbd 	bl	800bf1c <__errno>
 800efa2:	2321      	movs	r3, #33	; 0x21
 800efa4:	6003      	str	r3, [r0, #0]
 800efa6:	2200      	movs	r2, #0
 800efa8:	2300      	movs	r3, #0
 800efaa:	4610      	mov	r0, r2
 800efac:	4619      	mov	r1, r3
 800efae:	f7f1 fc55 	bl	800085c <__aeabi_ddiv>
 800efb2:	ec41 0b18 	vmov	d8, r0, r1
 800efb6:	eeb0 0a48 	vmov.f32	s0, s16
 800efba:	eef0 0a68 	vmov.f32	s1, s17
 800efbe:	ecbd 8b02 	vpop	{d8}
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	0000      	movs	r0, r0
	...

0800efc8 <__ieee754_log>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ec51 0b10 	vmov	r0, r1, d0
 800efd0:	ed2d 8b04 	vpush	{d8-d9}
 800efd4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800efd8:	b083      	sub	sp, #12
 800efda:	460d      	mov	r5, r1
 800efdc:	da29      	bge.n	800f032 <__ieee754_log+0x6a>
 800efde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800efe2:	4303      	orrs	r3, r0
 800efe4:	ee10 2a10 	vmov	r2, s0
 800efe8:	d10c      	bne.n	800f004 <__ieee754_log+0x3c>
 800efea:	49cf      	ldr	r1, [pc, #828]	; (800f328 <__ieee754_log+0x360>)
 800efec:	2200      	movs	r2, #0
 800efee:	2300      	movs	r3, #0
 800eff0:	2000      	movs	r0, #0
 800eff2:	f7f1 fc33 	bl	800085c <__aeabi_ddiv>
 800eff6:	ec41 0b10 	vmov	d0, r0, r1
 800effa:	b003      	add	sp, #12
 800effc:	ecbd 8b04 	vpop	{d8-d9}
 800f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f004:	2900      	cmp	r1, #0
 800f006:	da05      	bge.n	800f014 <__ieee754_log+0x4c>
 800f008:	460b      	mov	r3, r1
 800f00a:	f7f1 f945 	bl	8000298 <__aeabi_dsub>
 800f00e:	2200      	movs	r2, #0
 800f010:	2300      	movs	r3, #0
 800f012:	e7ee      	b.n	800eff2 <__ieee754_log+0x2a>
 800f014:	4bc5      	ldr	r3, [pc, #788]	; (800f32c <__ieee754_log+0x364>)
 800f016:	2200      	movs	r2, #0
 800f018:	f7f1 faf6 	bl	8000608 <__aeabi_dmul>
 800f01c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f020:	460d      	mov	r5, r1
 800f022:	4ac3      	ldr	r2, [pc, #780]	; (800f330 <__ieee754_log+0x368>)
 800f024:	4295      	cmp	r5, r2
 800f026:	dd06      	ble.n	800f036 <__ieee754_log+0x6e>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	f7f1 f936 	bl	800029c <__adddf3>
 800f030:	e7e1      	b.n	800eff6 <__ieee754_log+0x2e>
 800f032:	2300      	movs	r3, #0
 800f034:	e7f5      	b.n	800f022 <__ieee754_log+0x5a>
 800f036:	152c      	asrs	r4, r5, #20
 800f038:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f03c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f040:	441c      	add	r4, r3
 800f042:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800f046:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f04a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f04e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800f052:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800f056:	ea42 0105 	orr.w	r1, r2, r5
 800f05a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f05e:	2200      	movs	r2, #0
 800f060:	4bb4      	ldr	r3, [pc, #720]	; (800f334 <__ieee754_log+0x36c>)
 800f062:	f7f1 f919 	bl	8000298 <__aeabi_dsub>
 800f066:	1cab      	adds	r3, r5, #2
 800f068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	4682      	mov	sl, r0
 800f070:	468b      	mov	fp, r1
 800f072:	f04f 0200 	mov.w	r2, #0
 800f076:	dc53      	bgt.n	800f120 <__ieee754_log+0x158>
 800f078:	2300      	movs	r3, #0
 800f07a:	f7f1 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f07e:	b1d0      	cbz	r0, 800f0b6 <__ieee754_log+0xee>
 800f080:	2c00      	cmp	r4, #0
 800f082:	f000 8122 	beq.w	800f2ca <__ieee754_log+0x302>
 800f086:	4620      	mov	r0, r4
 800f088:	f7f1 fa54 	bl	8000534 <__aeabi_i2d>
 800f08c:	a390      	add	r3, pc, #576	; (adr r3, 800f2d0 <__ieee754_log+0x308>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	4606      	mov	r6, r0
 800f094:	460f      	mov	r7, r1
 800f096:	f7f1 fab7 	bl	8000608 <__aeabi_dmul>
 800f09a:	a38f      	add	r3, pc, #572	; (adr r3, 800f2d8 <__ieee754_log+0x310>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	f7f1 faae 	bl	8000608 <__aeabi_dmul>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	e7ba      	b.n	800f02c <__ieee754_log+0x64>
 800f0b6:	a38a      	add	r3, pc, #552	; (adr r3, 800f2e0 <__ieee754_log+0x318>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	4650      	mov	r0, sl
 800f0be:	4659      	mov	r1, fp
 800f0c0:	f7f1 faa2 	bl	8000608 <__aeabi_dmul>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	499b      	ldr	r1, [pc, #620]	; (800f338 <__ieee754_log+0x370>)
 800f0cc:	f7f1 f8e4 	bl	8000298 <__aeabi_dsub>
 800f0d0:	4652      	mov	r2, sl
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	465b      	mov	r3, fp
 800f0d8:	4650      	mov	r0, sl
 800f0da:	4659      	mov	r1, fp
 800f0dc:	f7f1 fa94 	bl	8000608 <__aeabi_dmul>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	4639      	mov	r1, r7
 800f0e8:	f7f1 fa8e 	bl	8000608 <__aeabi_dmul>
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	460f      	mov	r7, r1
 800f0f0:	b914      	cbnz	r4, 800f0f8 <__ieee754_log+0x130>
 800f0f2:	4632      	mov	r2, r6
 800f0f4:	463b      	mov	r3, r7
 800f0f6:	e0a2      	b.n	800f23e <__ieee754_log+0x276>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7f1 fa1b 	bl	8000534 <__aeabi_i2d>
 800f0fe:	a374      	add	r3, pc, #464	; (adr r3, 800f2d0 <__ieee754_log+0x308>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	4680      	mov	r8, r0
 800f106:	4689      	mov	r9, r1
 800f108:	f7f1 fa7e 	bl	8000608 <__aeabi_dmul>
 800f10c:	a372      	add	r3, pc, #456	; (adr r3, 800f2d8 <__ieee754_log+0x310>)
 800f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f112:	4604      	mov	r4, r0
 800f114:	460d      	mov	r5, r1
 800f116:	4640      	mov	r0, r8
 800f118:	4649      	mov	r1, r9
 800f11a:	f7f1 fa75 	bl	8000608 <__aeabi_dmul>
 800f11e:	e0a7      	b.n	800f270 <__ieee754_log+0x2a8>
 800f120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f124:	f7f1 f8ba 	bl	800029c <__adddf3>
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	4650      	mov	r0, sl
 800f12e:	4659      	mov	r1, fp
 800f130:	f7f1 fb94 	bl	800085c <__aeabi_ddiv>
 800f134:	ec41 0b18 	vmov	d8, r0, r1
 800f138:	4620      	mov	r0, r4
 800f13a:	f7f1 f9fb 	bl	8000534 <__aeabi_i2d>
 800f13e:	ec53 2b18 	vmov	r2, r3, d8
 800f142:	ec41 0b19 	vmov	d9, r0, r1
 800f146:	ec51 0b18 	vmov	r0, r1, d8
 800f14a:	f7f1 fa5d 	bl	8000608 <__aeabi_dmul>
 800f14e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800f152:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800f156:	9301      	str	r3, [sp, #4]
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	4680      	mov	r8, r0
 800f15e:	4689      	mov	r9, r1
 800f160:	f7f1 fa52 	bl	8000608 <__aeabi_dmul>
 800f164:	a360      	add	r3, pc, #384	; (adr r3, 800f2e8 <__ieee754_log+0x320>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	4606      	mov	r6, r0
 800f16c:	460f      	mov	r7, r1
 800f16e:	f7f1 fa4b 	bl	8000608 <__aeabi_dmul>
 800f172:	a35f      	add	r3, pc, #380	; (adr r3, 800f2f0 <__ieee754_log+0x328>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 f890 	bl	800029c <__adddf3>
 800f17c:	4632      	mov	r2, r6
 800f17e:	463b      	mov	r3, r7
 800f180:	f7f1 fa42 	bl	8000608 <__aeabi_dmul>
 800f184:	a35c      	add	r3, pc, #368	; (adr r3, 800f2f8 <__ieee754_log+0x330>)
 800f186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18a:	f7f1 f887 	bl	800029c <__adddf3>
 800f18e:	4632      	mov	r2, r6
 800f190:	463b      	mov	r3, r7
 800f192:	f7f1 fa39 	bl	8000608 <__aeabi_dmul>
 800f196:	a35a      	add	r3, pc, #360	; (adr r3, 800f300 <__ieee754_log+0x338>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	f7f1 f87e 	bl	800029c <__adddf3>
 800f1a0:	4642      	mov	r2, r8
 800f1a2:	464b      	mov	r3, r9
 800f1a4:	f7f1 fa30 	bl	8000608 <__aeabi_dmul>
 800f1a8:	a357      	add	r3, pc, #348	; (adr r3, 800f308 <__ieee754_log+0x340>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	4680      	mov	r8, r0
 800f1b0:	4689      	mov	r9, r1
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	f7f1 fa27 	bl	8000608 <__aeabi_dmul>
 800f1ba:	a355      	add	r3, pc, #340	; (adr r3, 800f310 <__ieee754_log+0x348>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f7f1 f86c 	bl	800029c <__adddf3>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 fa1e 	bl	8000608 <__aeabi_dmul>
 800f1cc:	a352      	add	r3, pc, #328	; (adr r3, 800f318 <__ieee754_log+0x350>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f863 	bl	800029c <__adddf3>
 800f1d6:	4632      	mov	r2, r6
 800f1d8:	463b      	mov	r3, r7
 800f1da:	f7f1 fa15 	bl	8000608 <__aeabi_dmul>
 800f1de:	460b      	mov	r3, r1
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	f7f1 f859 	bl	800029c <__adddf3>
 800f1ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f1ee:	9b01      	ldr	r3, [sp, #4]
 800f1f0:	3551      	adds	r5, #81	; 0x51
 800f1f2:	431d      	orrs	r5, r3
 800f1f4:	2d00      	cmp	r5, #0
 800f1f6:	4680      	mov	r8, r0
 800f1f8:	4689      	mov	r9, r1
 800f1fa:	dd48      	ble.n	800f28e <__ieee754_log+0x2c6>
 800f1fc:	4b4e      	ldr	r3, [pc, #312]	; (800f338 <__ieee754_log+0x370>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	4650      	mov	r0, sl
 800f202:	4659      	mov	r1, fp
 800f204:	f7f1 fa00 	bl	8000608 <__aeabi_dmul>
 800f208:	4652      	mov	r2, sl
 800f20a:	465b      	mov	r3, fp
 800f20c:	f7f1 f9fc 	bl	8000608 <__aeabi_dmul>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4606      	mov	r6, r0
 800f216:	460f      	mov	r7, r1
 800f218:	4640      	mov	r0, r8
 800f21a:	4649      	mov	r1, r9
 800f21c:	f7f1 f83e 	bl	800029c <__adddf3>
 800f220:	ec53 2b18 	vmov	r2, r3, d8
 800f224:	f7f1 f9f0 	bl	8000608 <__aeabi_dmul>
 800f228:	4680      	mov	r8, r0
 800f22a:	4689      	mov	r9, r1
 800f22c:	b964      	cbnz	r4, 800f248 <__ieee754_log+0x280>
 800f22e:	4602      	mov	r2, r0
 800f230:	460b      	mov	r3, r1
 800f232:	4630      	mov	r0, r6
 800f234:	4639      	mov	r1, r7
 800f236:	f7f1 f82f 	bl	8000298 <__aeabi_dsub>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4650      	mov	r0, sl
 800f240:	4659      	mov	r1, fp
 800f242:	f7f1 f829 	bl	8000298 <__aeabi_dsub>
 800f246:	e6d6      	b.n	800eff6 <__ieee754_log+0x2e>
 800f248:	a321      	add	r3, pc, #132	; (adr r3, 800f2d0 <__ieee754_log+0x308>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	ec51 0b19 	vmov	r0, r1, d9
 800f252:	f7f1 f9d9 	bl	8000608 <__aeabi_dmul>
 800f256:	a320      	add	r3, pc, #128	; (adr r3, 800f2d8 <__ieee754_log+0x310>)
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	4604      	mov	r4, r0
 800f25e:	460d      	mov	r5, r1
 800f260:	ec51 0b19 	vmov	r0, r1, d9
 800f264:	f7f1 f9d0 	bl	8000608 <__aeabi_dmul>
 800f268:	4642      	mov	r2, r8
 800f26a:	464b      	mov	r3, r9
 800f26c:	f7f1 f816 	bl	800029c <__adddf3>
 800f270:	4602      	mov	r2, r0
 800f272:	460b      	mov	r3, r1
 800f274:	4630      	mov	r0, r6
 800f276:	4639      	mov	r1, r7
 800f278:	f7f1 f80e 	bl	8000298 <__aeabi_dsub>
 800f27c:	4652      	mov	r2, sl
 800f27e:	465b      	mov	r3, fp
 800f280:	f7f1 f80a 	bl	8000298 <__aeabi_dsub>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	e7d9      	b.n	800f242 <__ieee754_log+0x27a>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4650      	mov	r0, sl
 800f294:	4659      	mov	r1, fp
 800f296:	f7f0 ffff 	bl	8000298 <__aeabi_dsub>
 800f29a:	ec53 2b18 	vmov	r2, r3, d8
 800f29e:	f7f1 f9b3 	bl	8000608 <__aeabi_dmul>
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	460f      	mov	r7, r1
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	f43f af23 	beq.w	800f0f2 <__ieee754_log+0x12a>
 800f2ac:	a308      	add	r3, pc, #32	; (adr r3, 800f2d0 <__ieee754_log+0x308>)
 800f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b2:	ec51 0b19 	vmov	r0, r1, d9
 800f2b6:	f7f1 f9a7 	bl	8000608 <__aeabi_dmul>
 800f2ba:	a307      	add	r3, pc, #28	; (adr r3, 800f2d8 <__ieee754_log+0x310>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	ec51 0b19 	vmov	r0, r1, d9
 800f2c8:	e727      	b.n	800f11a <__ieee754_log+0x152>
 800f2ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800f320 <__ieee754_log+0x358>
 800f2ce:	e694      	b.n	800effa <__ieee754_log+0x32>
 800f2d0:	fee00000 	.word	0xfee00000
 800f2d4:	3fe62e42 	.word	0x3fe62e42
 800f2d8:	35793c76 	.word	0x35793c76
 800f2dc:	3dea39ef 	.word	0x3dea39ef
 800f2e0:	55555555 	.word	0x55555555
 800f2e4:	3fd55555 	.word	0x3fd55555
 800f2e8:	df3e5244 	.word	0xdf3e5244
 800f2ec:	3fc2f112 	.word	0x3fc2f112
 800f2f0:	96cb03de 	.word	0x96cb03de
 800f2f4:	3fc74664 	.word	0x3fc74664
 800f2f8:	94229359 	.word	0x94229359
 800f2fc:	3fd24924 	.word	0x3fd24924
 800f300:	55555593 	.word	0x55555593
 800f304:	3fe55555 	.word	0x3fe55555
 800f308:	d078c69f 	.word	0xd078c69f
 800f30c:	3fc39a09 	.word	0x3fc39a09
 800f310:	1d8e78af 	.word	0x1d8e78af
 800f314:	3fcc71c5 	.word	0x3fcc71c5
 800f318:	9997fa04 	.word	0x9997fa04
 800f31c:	3fd99999 	.word	0x3fd99999
	...
 800f328:	c3500000 	.word	0xc3500000
 800f32c:	43500000 	.word	0x43500000
 800f330:	7fefffff 	.word	0x7fefffff
 800f334:	3ff00000 	.word	0x3ff00000
 800f338:	3fe00000 	.word	0x3fe00000

0800f33c <__ieee754_sqrt>:
 800f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f340:	ec55 4b10 	vmov	r4, r5, d0
 800f344:	4e55      	ldr	r6, [pc, #340]	; (800f49c <__ieee754_sqrt+0x160>)
 800f346:	43ae      	bics	r6, r5
 800f348:	ee10 0a10 	vmov	r0, s0
 800f34c:	ee10 3a10 	vmov	r3, s0
 800f350:	462a      	mov	r2, r5
 800f352:	4629      	mov	r1, r5
 800f354:	d110      	bne.n	800f378 <__ieee754_sqrt+0x3c>
 800f356:	ee10 2a10 	vmov	r2, s0
 800f35a:	462b      	mov	r3, r5
 800f35c:	f7f1 f954 	bl	8000608 <__aeabi_dmul>
 800f360:	4602      	mov	r2, r0
 800f362:	460b      	mov	r3, r1
 800f364:	4620      	mov	r0, r4
 800f366:	4629      	mov	r1, r5
 800f368:	f7f0 ff98 	bl	800029c <__adddf3>
 800f36c:	4604      	mov	r4, r0
 800f36e:	460d      	mov	r5, r1
 800f370:	ec45 4b10 	vmov	d0, r4, r5
 800f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f378:	2d00      	cmp	r5, #0
 800f37a:	dc10      	bgt.n	800f39e <__ieee754_sqrt+0x62>
 800f37c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f380:	4330      	orrs	r0, r6
 800f382:	d0f5      	beq.n	800f370 <__ieee754_sqrt+0x34>
 800f384:	b15d      	cbz	r5, 800f39e <__ieee754_sqrt+0x62>
 800f386:	ee10 2a10 	vmov	r2, s0
 800f38a:	462b      	mov	r3, r5
 800f38c:	ee10 0a10 	vmov	r0, s0
 800f390:	f7f0 ff82 	bl	8000298 <__aeabi_dsub>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	f7f1 fa60 	bl	800085c <__aeabi_ddiv>
 800f39c:	e7e6      	b.n	800f36c <__ieee754_sqrt+0x30>
 800f39e:	1512      	asrs	r2, r2, #20
 800f3a0:	d074      	beq.n	800f48c <__ieee754_sqrt+0x150>
 800f3a2:	07d4      	lsls	r4, r2, #31
 800f3a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f3a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f3ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f3b0:	bf5e      	ittt	pl
 800f3b2:	0fda      	lsrpl	r2, r3, #31
 800f3b4:	005b      	lslpl	r3, r3, #1
 800f3b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f3ba:	2400      	movs	r4, #0
 800f3bc:	0fda      	lsrs	r2, r3, #31
 800f3be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f3c2:	107f      	asrs	r7, r7, #1
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	2516      	movs	r5, #22
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f3ce:	1886      	adds	r6, r0, r2
 800f3d0:	428e      	cmp	r6, r1
 800f3d2:	bfde      	ittt	le
 800f3d4:	1b89      	suble	r1, r1, r6
 800f3d6:	18b0      	addle	r0, r6, r2
 800f3d8:	18a4      	addle	r4, r4, r2
 800f3da:	0049      	lsls	r1, r1, #1
 800f3dc:	3d01      	subs	r5, #1
 800f3de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f3e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f3e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f3ea:	d1f0      	bne.n	800f3ce <__ieee754_sqrt+0x92>
 800f3ec:	462a      	mov	r2, r5
 800f3ee:	f04f 0e20 	mov.w	lr, #32
 800f3f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f3f6:	4281      	cmp	r1, r0
 800f3f8:	eb06 0c05 	add.w	ip, r6, r5
 800f3fc:	dc02      	bgt.n	800f404 <__ieee754_sqrt+0xc8>
 800f3fe:	d113      	bne.n	800f428 <__ieee754_sqrt+0xec>
 800f400:	459c      	cmp	ip, r3
 800f402:	d811      	bhi.n	800f428 <__ieee754_sqrt+0xec>
 800f404:	f1bc 0f00 	cmp.w	ip, #0
 800f408:	eb0c 0506 	add.w	r5, ip, r6
 800f40c:	da43      	bge.n	800f496 <__ieee754_sqrt+0x15a>
 800f40e:	2d00      	cmp	r5, #0
 800f410:	db41      	blt.n	800f496 <__ieee754_sqrt+0x15a>
 800f412:	f100 0801 	add.w	r8, r0, #1
 800f416:	1a09      	subs	r1, r1, r0
 800f418:	459c      	cmp	ip, r3
 800f41a:	bf88      	it	hi
 800f41c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f420:	eba3 030c 	sub.w	r3, r3, ip
 800f424:	4432      	add	r2, r6
 800f426:	4640      	mov	r0, r8
 800f428:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f42c:	f1be 0e01 	subs.w	lr, lr, #1
 800f430:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f434:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f438:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f43c:	d1db      	bne.n	800f3f6 <__ieee754_sqrt+0xba>
 800f43e:	430b      	orrs	r3, r1
 800f440:	d006      	beq.n	800f450 <__ieee754_sqrt+0x114>
 800f442:	1c50      	adds	r0, r2, #1
 800f444:	bf13      	iteet	ne
 800f446:	3201      	addne	r2, #1
 800f448:	3401      	addeq	r4, #1
 800f44a:	4672      	moveq	r2, lr
 800f44c:	f022 0201 	bicne.w	r2, r2, #1
 800f450:	1063      	asrs	r3, r4, #1
 800f452:	0852      	lsrs	r2, r2, #1
 800f454:	07e1      	lsls	r1, r4, #31
 800f456:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f45a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f45e:	bf48      	it	mi
 800f460:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f464:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f468:	4614      	mov	r4, r2
 800f46a:	e781      	b.n	800f370 <__ieee754_sqrt+0x34>
 800f46c:	0ad9      	lsrs	r1, r3, #11
 800f46e:	3815      	subs	r0, #21
 800f470:	055b      	lsls	r3, r3, #21
 800f472:	2900      	cmp	r1, #0
 800f474:	d0fa      	beq.n	800f46c <__ieee754_sqrt+0x130>
 800f476:	02cd      	lsls	r5, r1, #11
 800f478:	d50a      	bpl.n	800f490 <__ieee754_sqrt+0x154>
 800f47a:	f1c2 0420 	rsb	r4, r2, #32
 800f47e:	fa23 f404 	lsr.w	r4, r3, r4
 800f482:	1e55      	subs	r5, r2, #1
 800f484:	4093      	lsls	r3, r2
 800f486:	4321      	orrs	r1, r4
 800f488:	1b42      	subs	r2, r0, r5
 800f48a:	e78a      	b.n	800f3a2 <__ieee754_sqrt+0x66>
 800f48c:	4610      	mov	r0, r2
 800f48e:	e7f0      	b.n	800f472 <__ieee754_sqrt+0x136>
 800f490:	0049      	lsls	r1, r1, #1
 800f492:	3201      	adds	r2, #1
 800f494:	e7ef      	b.n	800f476 <__ieee754_sqrt+0x13a>
 800f496:	4680      	mov	r8, r0
 800f498:	e7bd      	b.n	800f416 <__ieee754_sqrt+0xda>
 800f49a:	bf00      	nop
 800f49c:	7ff00000 	.word	0x7ff00000

0800f4a0 <nan>:
 800f4a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4a8 <nan+0x8>
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	00000000 	.word	0x00000000
 800f4ac:	7ff80000 	.word	0x7ff80000

0800f4b0 <_init>:
 800f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b2:	bf00      	nop
 800f4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4b6:	bc08      	pop	{r3}
 800f4b8:	469e      	mov	lr, r3
 800f4ba:	4770      	bx	lr

0800f4bc <_fini>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	bf00      	nop
 800f4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4c2:	bc08      	pop	{r3}
 800f4c4:	469e      	mov	lr, r3
 800f4c6:	4770      	bx	lr
