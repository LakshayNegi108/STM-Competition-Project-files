
006_I2CMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005278  08005278  00015278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000021c  080058b8  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080058b8  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005510  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159d  00000000  00000000  0002575c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00026d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  000272d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f46  00000000  00000000  000277d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076f5  00000000  00000000  0003e71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008672b  00000000  00000000  00045e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  000cc590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005260 	.word	0x08005260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08005260 	.word	0x08005260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
void I2C1_init(void);
int I2C1_byteRead(char saddr, char maddr, char *data);
int I2C1_DevReady(char saddr, uint8_t tries);
void delayMs(int n);

int main() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8

	RCC_CONFIG_84MHZ();
 8000ec2:	f001 f915 	bl	80020f0 <RCC_CONFIG_84MHZ>

	uart_print_config(9600);
 8000ec6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000eca:	f001 fa83 	bl	80023d4 <uart_print_config>
	print("Working\n");
 8000ece:	481d      	ldr	r0, [pc, #116]	; (8000f44 <main+0x88>)
 8000ed0:	f001 fa5c 	bl	800238c <print>

	gpio_config(PORTB, 8, ALT_MODE, LOW_SPEED, EN_PU, OD);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2202      	movs	r2, #2
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <main+0x8c>)
 8000ee4:	f000 ff90 	bl	8001e08 <gpio_config>
	gpio_config(PORTB, 9, ALT_MODE, LOW_SPEED, EN_PU, OD);
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	2301      	movs	r3, #1
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	2109      	movs	r1, #9
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <main+0x8c>)
 8000ef8:	f000 ff86 	bl	8001e08 <gpio_config>
	gpio_altfn(PORTB, 8, PB8_I2C1_SCL);
 8000efc:	2204      	movs	r2, #4
 8000efe:	2108      	movs	r1, #8
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <main+0x8c>)
 8000f02:	f001 f83c 	bl	8001f7e <gpio_altfn>
	gpio_altfn(PORTB, 9, PB9_I2C1_SDA);
 8000f06:	2204      	movs	r2, #4
 8000f08:	2109      	movs	r1, #9
 8000f0a:	480f      	ldr	r0, [pc, #60]	; (8000f48 <main+0x8c>)
 8000f0c:	f001 f837 	bl	8001f7e <gpio_altfn>

	if (I2C_INIT(I2C1, STANDARD_MODE, 42, 0x32) != BML_OK) {
 8000f10:	2332      	movs	r3, #50	; 0x32
 8000f12:	222a      	movs	r2, #42	; 0x2a
 8000f14:	2100      	movs	r1, #0
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <main+0x90>)
 8000f18:	f001 f87c 	bl	8002014 <I2C_INIT>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <main+0x6e>
		print("Error in Init\n");
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <main+0x94>)
 8000f24:	f001 fa32 	bl	800238c <print>
		while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x6c>
//	}

	uint8_t data;
	while (1) {
//		print("Running\n");
		I2C1_byteRead(SLAVE_ADDR, 0x07, &data);
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2107      	movs	r1, #7
 8000f30:	205a      	movs	r0, #90	; 0x5a
 8000f32:	f000 f811 	bl	8000f58 <I2C1_byteRead>
		print("Temp: %d\n", data);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <main+0x98>)
 8000f3c:	f001 fa26 	bl	800238c <print>
		I2C1_byteRead(SLAVE_ADDR, 0x07, &data);
 8000f40:	e7f3      	b.n	8000f2a <main+0x6e>
 8000f42:	bf00      	nop
 8000f44:	08005278 	.word	0x08005278
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	08005284 	.word	0x08005284
 8000f54:	08005294 	.word	0x08005294

08000f58 <I2C1_byteRead>:

/* this funtion reads a byte of data from the memory location
 * maddr of a device with I2C slave device address saddr.
 * For simplicity, no error checking or error report is done.
 */
int I2C1_byteRead(char saddr, char maddr, char *data) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	603a      	str	r2, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	460b      	mov	r3, r1
 8000f66:	71bb      	strb	r3, [r7, #6]
	volatile int tmp;

	while (I2C1->SR2 & 2)
 8000f68:	bf00      	nop
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <I2C1_byteRead+0xf4>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <I2C1_byteRead+0x12>
		; /* wait until bus not busy */

	I2C1->CR1 |= 0x100; /* generate start */
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <I2C1_byteRead+0xf4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a34      	ldr	r2, [pc, #208]	; (800104c <I2C1_byteRead+0xf4>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 1))
 8000f82:	bf00      	nop
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <I2C1_byteRead+0xf4>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f9      	beq.n	8000f84 <I2C1_byteRead+0x2c>
		; /* wait until start flag is set */

	I2C1->DR = saddr << 1; /* transmit slave address + Write */
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	005a      	lsls	r2, r3, #1
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <I2C1_byteRead+0xf4>)
 8000f96:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & 2))
 8000f98:	bf00      	nop
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <I2C1_byteRead+0xf4>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f9      	beq.n	8000f9a <I2C1_byteRead+0x42>
		; /* wait until addr flag is set */
	tmp = I2C1->SR2; /* clear addr flag */
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <I2C1_byteRead+0xf4>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	60fb      	str	r3, [r7, #12]

	while (!(I2C1->SR1 & 0x80))
 8000fac:	bf00      	nop
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <I2C1_byteRead+0xf4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <I2C1_byteRead+0x56>
		; /* wait until data register empty */
	I2C1->DR = maddr; /* send memory address */
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <I2C1_byteRead+0xf4>)
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	6113      	str	r3, [r2, #16]

	while (!(I2C1->SR1 & 0x80))
 8000fc0:	bf00      	nop
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <I2C1_byteRead+0xf4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <I2C1_byteRead+0x6a>
		; /* wait until data register empty */

	I2C1->CR1 |= 0x100; /* generate restart */
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <I2C1_byteRead+0xf4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <I2C1_byteRead+0xf4>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 1))
 8000fda:	bf00      	nop
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <I2C1_byteRead+0xf4>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f9      	beq.n	8000fdc <I2C1_byteRead+0x84>
		; /* wait until start flag is set */
	I2C1->DR = saddr << 1 | 1; /* transmit slave address + Read */
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <I2C1_byteRead+0xf4>)
 8000ff2:	611a      	str	r2, [r3, #16]

	while (!(I2C1->SR1 & 2))
 8000ff4:	bf00      	nop
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <I2C1_byteRead+0xf4>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <I2C1_byteRead+0x9e>
		; /* wait until addr flag is set */
	I2C1->CR1 &= ~0x400; /* Disable Acknowledge */
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <I2C1_byteRead+0xf4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <I2C1_byteRead+0xf4>)
 8001008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800100c:	6013      	str	r3, [r2, #0]
	tmp = I2C1->SR2; /* clear addr flag */
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <I2C1_byteRead+0xf4>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	60fb      	str	r3, [r7, #12]

	I2C1->CR1 |= 0x200; /* generate stop after data received */
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <I2C1_byteRead+0xf4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <I2C1_byteRead+0xf4>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]

	while (!(I2C1->SR1 & 0x40))
 8001020:	bf00      	nop
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <I2C1_byteRead+0xf4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <I2C1_byteRead+0xca>
		; /* Wait until RXNE flag is set */
	*data++ = I2C1->DR; /* Read data from DR */
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <I2C1_byteRead+0xf4>)
 8001030:	6919      	ldr	r1, [r3, #16]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	603a      	str	r2, [r7, #0]
 8001038:	b2ca      	uxtb	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]

	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f934 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_kill>:

int _kill(int pid, int sig)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010be:	f001 f99f 	bl	8002400 <__errno>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2216      	movs	r2, #22
 80010c6:	601a      	str	r2, [r3, #0]
	return -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_exit>:

void _exit (int status)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe7 	bl	80010b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010e6:	e7fe      	b.n	80010e6 <_exit+0x12>

080010e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e00a      	b.n	8001110 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010fa:	f3af 8000 	nop.w
 80010fe:	4601      	mov	r1, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf0      	blt.n	80010fa <_read+0x12>
	}

return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e009      	b.n	8001148 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf1      	blt.n	8001134 <_write+0x12>
	}
	return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f001 f904 	bl	8002400 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20018000 	.word	0x20018000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000238 	.word	0x20000238
 800122c:	20000350 	.word	0x20000350

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127e:	f7ff ffd7 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f001 f8c3 	bl	800240c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fe19 	bl	8000ebc <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800128c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001298:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 800129c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80012a0:	20000350 	.word	0x20000350

080012a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>
	...

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f8e8 	bl	800149c <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f8be 	bl	8001464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	2000023c 	.word	0x2000023c

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000023c 	.word	0x2000023c

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001476:	f7ff ff67 	bl	8001348 <__NVIC_GetPriorityGrouping>
 800147a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	6978      	ldr	r0, [r7, #20]
 8001482:	f7ff ff99 	bl	80013b8 <NVIC_EncodePriority>
 8001486:	4602      	mov	r2, r0
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff68 	bl	8001364 <__NVIC_SetPriority>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ffbb 	bl	8001420 <SysTick_Config>
 80014aa:	4603      	mov	r3, r0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fee0 	bl	8001330 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fedc 	bl	8001330 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fecc 	bl	8001330 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fec8 	bl	8001330 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fe81 	bl	8001330 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fe7d 	bl	8001330 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fe60 	bl	8001330 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fe5c 	bl	8001330 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fe40 	bl	8001330 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fe3c 	bl	8001330 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fe29 	bl	8001330 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fe25 	bl	8001330 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fde5 	bl	8001330 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fde1 	bl	8001330 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fda6 	bl	8001330 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fda2 	bl	8001330 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fd90 	bl	8001330 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fd8c 	bl	8001330 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fd60 	bl	8001330 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fd5c 	bl	8001330 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fd35 	bl	8001330 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fd31 	bl	8001330 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fd1e 	bl	8001330 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fd1a 	bl	8001330 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fc4c 	bl	8001330 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fc48 	bl	8001330 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fbac 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	080052a0 	.word	0x080052a0
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b094      	sub	sp, #80	; 0x50
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80e1 	bhi.w	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0db      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bae:	e0d8      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6139      	str	r1, [r7, #16]
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c14:	4659      	mov	r1, fp
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4651      	mov	r1, sl
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4651      	mov	r1, sl
 8001c24:	ebb2 0801 	subs.w	r8, r2, r1
 8001c28:	4659      	mov	r1, fp
 8001c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c62:	4629      	mov	r1, r5
 8001c64:	024b      	lsls	r3, r1, #9
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	024a      	lsls	r2, r1, #9
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c80:	f7fe ff9a 	bl	8000bb8 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0159      	lsls	r1, r3, #5
 8001cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cba:	0150      	lsls	r0, r2, #5
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	464b      	mov	r3, r9
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	61fa      	str	r2, [r7, #28]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	f7fe ff40 	bl	8000bb8 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3750      	adds	r7, #80	; 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <gpio_clk_en+0x78>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d106      	bne.n	8001d9a <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <gpio_clk_en+0x7c>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <gpio_clk_en+0x7c>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8001d98:	e026      	b.n	8001de8 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <gpio_clk_en+0x80>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d106      	bne.n	8001db0 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <gpio_clk_en+0x7c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <gpio_clk_en+0x7c>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001dae:	e01b      	b.n	8001de8 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <gpio_clk_en+0x84>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d106      	bne.n	8001dc6 <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <gpio_clk_en+0x7c>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <gpio_clk_en+0x7c>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001dc4:	e010      	b.n	8001de8 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <gpio_clk_en+0x88>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d106      	bne.n	8001ddc <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <gpio_clk_en+0x7c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <gpio_clk_en+0x7c>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001dda:	e005      	b.n	8001de8 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <gpio_clk_en+0x7c>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <gpio_clk_en+0x7c>)
 8001de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00

08001e08 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d117      	bne.n	8001e4c <gpio_config+0x44>
		gpio_clk_en(port);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff ffad 	bl	8001d7c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f846 	bl	8001eb8 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f85b 	bl	8001eec <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f870 	bl	8001f20 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f885 	bl	8001f54 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8001e4a:	e031      	b.n	8001eb0 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <gpio_config+0x66>
		gpio_clk_en(port);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff ff92 	bl	8001d7c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f82b 	bl	8001eb8 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f85a 	bl	8001f20 <gpio_PUPD>
}
 8001e6c:	e020      	b.n	8001eb0 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d112      	bne.n	8001e9a <gpio_config+0x92>
		gpio_clk_en(port);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff ff81 	bl	8001d7c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f81a 	bl	8001eb8 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f849 	bl	8001f20 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f85e 	bl	8001f54 <gpio_PHPL_OD>
}
 8001e98:	e00a      	b.n	8001eb0 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d107      	bne.n	8001eb0 <gpio_config+0xa8>
		gpio_clk_en(port);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff ff6b 	bl	8001d7c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f804 	bl	8001eb8 <gpio_moder>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <gpio_moder+0x30>)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <gpio_speed+0x30>)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <gpio_PUPD+0x30>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	60da      	str	r2, [r3, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d80a      	bhi.n	8001fa6 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8001fa4:	e00a      	b.n	8001fbc <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3b08      	subs	r3, #8
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <I2C_Reset>:

void I2C_DI(I2C_TypeDef *i2c) {
	i2c->CR1 &= ~I2C_CR1_PE;
}

void I2C_Reset(I2C_TypeDef *i2c) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= 0x8000;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	601a      	str	r2, [r3, #0]
	i2c->CR1 &= ~0x8000;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <I2C_INIT>:

BML_StatusTypeDef I2C_INIT(I2C_TypeDef *i2c, uint8_t timingMode,
		uint8_t pClkVal, uint8_t ownAddr) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	461a      	mov	r2, r3
 8002022:	4603      	mov	r3, r0
 8002024:	70fb      	strb	r3, [r7, #3]
 8002026:	460b      	mov	r3, r1
 8002028:	70bb      	strb	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	707b      	strb	r3, [r7, #1]
	if (i2c == I2C1) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <I2C_INIT+0xcc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d106      	bne.n	8002044 <I2C_INIT+0x30>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <I2C_INIT+0xd0>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <I2C_INIT+0xd0>)
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	e014      	b.n	800206e <I2C_INIT+0x5a>
	} else if (i2c == I2C2) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <I2C_INIT+0xd4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d106      	bne.n	800205a <I2C_INIT+0x46>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <I2C_INIT+0xd0>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <I2C_INIT+0xd0>)
 8002052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	e009      	b.n	800206e <I2C_INIT+0x5a>
	} else if (i2c == I2C3) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	; (80020ec <I2C_INIT+0xd8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d105      	bne.n	800206e <I2C_INIT+0x5a>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <I2C_INIT+0xd0>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <I2C_INIT+0xd0>)
 8002068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
	}
	I2C_Reset(i2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffba 	bl	8001fe8 <I2C_Reset>
	if ((pClkVal < 50) | (pClkVal > 2)) {
		i2c->CR2 |= pClkVal;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	78bb      	ldrb	r3, [r7, #2]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	605a      	str	r2, [r3, #4]
	}
//	i2c->OAR1 |= ownAddr << 1;

	switch (timingMode) {
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <I2C_INIT+0x78>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d011      	beq.n	80020ae <I2C_INIT+0x9a>
 800208a:	e017      	b.n	80020bc <I2C_INIT+0xa8>
	case STANDARD_MODE:
		i2c->CCR &= ~(1 << 15);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	61da      	str	r2, [r3, #28]
		i2c->CCR |= pClkVal * 5;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	78ba      	ldrb	r2, [r7, #2]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	ea41 0203 	orr.w	r2, r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	61da      	str	r2, [r3, #28]
		break;
 80020ac:	e008      	b.n	80020c0 <I2C_INIT+0xac>
	case FAST_MODE:
		i2c->CCR |= (1 << 15);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	61da      	str	r2, [r3, #28]
		break;
 80020ba:	e001      	b.n	80020c0 <I2C_INIT+0xac>
	default:
		return BML_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e00a      	b.n	80020d6 <I2C_INIT+0xc2>
	}
	i2c->TRISE |= pClkVal + 1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	78ba      	ldrb	r2, [r7, #2]
 80020c6:	3201      	adds	r2, #1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]
	I2C_EN(i2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff7a 	bl	8001fc8 <I2C_EN>

	return BML_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40005800 	.word	0x40005800
 80020ec:	40005c00 	.word	0x40005c00

080020f0 <RCC_CONFIG_84MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_84MHZ() {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	; 0x50
 80020f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	2230      	movs	r2, #48	; 0x30
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f9a8 	bl	8002454 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <RCC_CONFIG_84MHZ+0xcc>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <RCC_CONFIG_84MHZ+0xcc>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <RCC_CONFIG_84MHZ+0xcc>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <RCC_CONFIG_84MHZ+0xd0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <RCC_CONFIG_84MHZ+0xd0>)
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <RCC_CONFIG_84MHZ+0xd0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002150:	2302      	movs	r3, #2
 8002152:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002154:	2301      	movs	r3, #1
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002158:	2310      	movs	r3, #16
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215c:	2302      	movs	r3, #2
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002160:	2300      	movs	r3, #0
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8002164:	2310      	movs	r3, #16
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8002168:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800216e:	2304      	movs	r3, #4
 8002170:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002172:	2307      	movs	r3, #7
 8002174:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f99a 	bl	80014b4 <HAL_RCC_OscConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d000      	beq.n	8002188 <RCC_CONFIG_84MHZ+0x98>
	  {
//	    Error_Handler();
		  while(1);
 8002186:	e7fe      	b.n	8002186 <RCC_CONFIG_84MHZ+0x96>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002188:	230f      	movs	r3, #15
 800218a:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218c:	2302      	movs	r3, #2
 800218e:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002198:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbfd 	bl	80019a4 <HAL_RCC_ClockConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d000      	beq.n	80021b2 <RCC_CONFIG_84MHZ+0xc2>
	  {
//	    Error_Handler();
		  while(1);
 80021b0:	e7fe      	b.n	80021b0 <RCC_CONFIG_84MHZ+0xc0>
	  }
}
 80021b2:	bf00      	nop
 80021b4:	4618      	mov	r0, r3
 80021b6:	3750      	adds	r7, #80	; 0x50
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000

080021c4 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f818 	bl	8002208 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f842 	bl	800226c <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 80021e8:	69f9      	ldr	r1, [r7, #28]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f884 	bl	80022f8 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021f8:	f043 030c 	orr.w	r3, r3, #12
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	60d3      	str	r3, [r2, #12]

}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <USART_CLK_EN+0x54>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <USART_CLK_EN+0x58>)
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	4a10      	ldr	r2, [pc, #64]	; (8002260 <USART_CLK_EN+0x58>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8002224:	e014      	b.n	8002250 <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <USART_CLK_EN+0x5c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d106      	bne.n	800223c <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <USART_CLK_EN+0x58>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <USART_CLK_EN+0x58>)
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
}
 800223a:	e009      	b.n	8002250 <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <USART_CLK_EN+0x60>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d105      	bne.n	8002250 <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <USART_CLK_EN+0x58>)
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <USART_CLK_EN+0x58>)
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40011000 	.word	0x40011000
 8002260:	40023800 	.word	0x40023800
 8002264:	40004400 	.word	0x40004400
 8002268:	40011400 	.word	0x40011400

0800226c <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800227a:	2300      	movs	r3, #0
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2302      	movs	r3, #2
 8002284:	2202      	movs	r2, #2
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff fdbd 	bl	8001e08 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800228e:	2300      	movs	r3, #0
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2302      	movs	r3, #2
 8002298:	2202      	movs	r2, #2
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fdb3 	bl	8001e08 <gpio_config>

	if (usart == USART1) {
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <USART_PIN_CONFIG+0x80>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01b      	beq.n	80022e2 <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <USART_PIN_CONFIG+0x84>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d117      	bne.n	80022e2 <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <USART_PIN_CONFIG+0x88>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d107      	bne.n	80022ca <USART_PIN_CONFIG+0x5e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d104      	bne.n	80022ca <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 80022c0:	2207      	movs	r2, #7
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	68b8      	ldr	r0, [r7, #8]
 80022c6:	f7ff fe5a 	bl	8001f7e <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <USART_PIN_CONFIG+0x88>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d107      	bne.n	80022e2 <USART_PIN_CONFIG+0x76>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d104      	bne.n	80022e2 <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 80022d8:	2207      	movs	r2, #7
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fe4e 	bl	8001f7e <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40011000 	.word	0x40011000
 80022f0:	40004400 	.word	0x40004400
 80022f4:	40020000 	.word	0x40020000

080022f8 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <USART_BDR_SEL+0x30>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20000000 	.word	0x20000000

0800232c <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
 8002342:	e017      	b.n	8002374 <USART_WRITE+0x48>
		if (len == 1) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d103      	bne.n	8002352 <USART_WRITE+0x26>
			usart->DR = ch;
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	e006      	b.n	8002360 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8002360:	bf00      	nop
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f9      	beq.n	8002362 <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	3301      	adds	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8e3      	bhi.n	8002344 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 800238c:	b40f      	push	{r0, r1, r2, r3}
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a2:	480a      	ldr	r0, [pc, #40]	; (80023cc <print+0x40>)
 80023a4:	f000 fcf4 	bl	8002d90 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <print+0x40>)
 80023aa:	f7fd ff19 	bl	80001e0 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	4905      	ldr	r1, [pc, #20]	; (80023cc <print+0x40>)
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <print+0x44>)
 80023ba:	f7ff ffb7 	bl	800232c <USART_WRITE>

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c8:	b004      	add	sp, #16
 80023ca:	4770      	bx	lr
 80023cc:	20000240 	.word	0x20000240
 80023d0:	40004400 	.word	0x40004400

080023d4 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2303      	movs	r3, #3
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2302      	movs	r3, #2
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <uart_print_config+0x24>)
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <uart_print_config+0x24>)
 80023ea:	4804      	ldr	r0, [pc, #16]	; (80023fc <uart_print_config+0x28>)
 80023ec:	f7ff feea 	bl	80021c4 <USART_INIT>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40004400 	.word	0x40004400

08002400 <__errno>:
 8002400:	4b01      	ldr	r3, [pc, #4]	; (8002408 <__errno+0x8>)
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000004c 	.word	0x2000004c

0800240c <__libc_init_array>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4d0d      	ldr	r5, [pc, #52]	; (8002444 <__libc_init_array+0x38>)
 8002410:	4c0d      	ldr	r4, [pc, #52]	; (8002448 <__libc_init_array+0x3c>)
 8002412:	1b64      	subs	r4, r4, r5
 8002414:	10a4      	asrs	r4, r4, #2
 8002416:	2600      	movs	r6, #0
 8002418:	42a6      	cmp	r6, r4
 800241a:	d109      	bne.n	8002430 <__libc_init_array+0x24>
 800241c:	4d0b      	ldr	r5, [pc, #44]	; (800244c <__libc_init_array+0x40>)
 800241e:	4c0c      	ldr	r4, [pc, #48]	; (8002450 <__libc_init_array+0x44>)
 8002420:	f002 ff1e 	bl	8005260 <_init>
 8002424:	1b64      	subs	r4, r4, r5
 8002426:	10a4      	asrs	r4, r4, #2
 8002428:	2600      	movs	r6, #0
 800242a:	42a6      	cmp	r6, r4
 800242c:	d105      	bne.n	800243a <__libc_init_array+0x2e>
 800242e:	bd70      	pop	{r4, r5, r6, pc}
 8002430:	f855 3b04 	ldr.w	r3, [r5], #4
 8002434:	4798      	blx	r3
 8002436:	3601      	adds	r6, #1
 8002438:	e7ee      	b.n	8002418 <__libc_init_array+0xc>
 800243a:	f855 3b04 	ldr.w	r3, [r5], #4
 800243e:	4798      	blx	r3
 8002440:	3601      	adds	r6, #1
 8002442:	e7f2      	b.n	800242a <__libc_init_array+0x1e>
 8002444:	08005694 	.word	0x08005694
 8002448:	08005694 	.word	0x08005694
 800244c:	08005694 	.word	0x08005694
 8002450:	08005698 	.word	0x08005698

08002454 <memset>:
 8002454:	4402      	add	r2, r0
 8002456:	4603      	mov	r3, r0
 8002458:	4293      	cmp	r3, r2
 800245a:	d100      	bne.n	800245e <memset+0xa>
 800245c:	4770      	bx	lr
 800245e:	f803 1b01 	strb.w	r1, [r3], #1
 8002462:	e7f9      	b.n	8002458 <memset+0x4>

08002464 <__cvt>:
 8002464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	ec55 4b10 	vmov	r4, r5, d0
 800246c:	2d00      	cmp	r5, #0
 800246e:	460e      	mov	r6, r1
 8002470:	4619      	mov	r1, r3
 8002472:	462b      	mov	r3, r5
 8002474:	bfbb      	ittet	lt
 8002476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800247a:	461d      	movlt	r5, r3
 800247c:	2300      	movge	r3, #0
 800247e:	232d      	movlt	r3, #45	; 0x2d
 8002480:	700b      	strb	r3, [r1, #0]
 8002482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002488:	4691      	mov	r9, r2
 800248a:	f023 0820 	bic.w	r8, r3, #32
 800248e:	bfbc      	itt	lt
 8002490:	4622      	movlt	r2, r4
 8002492:	4614      	movlt	r4, r2
 8002494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002498:	d005      	beq.n	80024a6 <__cvt+0x42>
 800249a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800249e:	d100      	bne.n	80024a2 <__cvt+0x3e>
 80024a0:	3601      	adds	r6, #1
 80024a2:	2102      	movs	r1, #2
 80024a4:	e000      	b.n	80024a8 <__cvt+0x44>
 80024a6:	2103      	movs	r1, #3
 80024a8:	ab03      	add	r3, sp, #12
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	ab02      	add	r3, sp, #8
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	ec45 4b10 	vmov	d0, r4, r5
 80024b4:	4653      	mov	r3, sl
 80024b6:	4632      	mov	r2, r6
 80024b8:	f000 fd06 	bl	8002ec8 <_dtoa_r>
 80024bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80024c0:	4607      	mov	r7, r0
 80024c2:	d102      	bne.n	80024ca <__cvt+0x66>
 80024c4:	f019 0f01 	tst.w	r9, #1
 80024c8:	d022      	beq.n	8002510 <__cvt+0xac>
 80024ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80024ce:	eb07 0906 	add.w	r9, r7, r6
 80024d2:	d110      	bne.n	80024f6 <__cvt+0x92>
 80024d4:	783b      	ldrb	r3, [r7, #0]
 80024d6:	2b30      	cmp	r3, #48	; 0x30
 80024d8:	d10a      	bne.n	80024f0 <__cvt+0x8c>
 80024da:	2200      	movs	r2, #0
 80024dc:	2300      	movs	r3, #0
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	f7fe faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80024e6:	b918      	cbnz	r0, 80024f0 <__cvt+0x8c>
 80024e8:	f1c6 0601 	rsb	r6, r6, #1
 80024ec:	f8ca 6000 	str.w	r6, [sl]
 80024f0:	f8da 3000 	ldr.w	r3, [sl]
 80024f4:	4499      	add	r9, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	2300      	movs	r3, #0
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fe faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002502:	b108      	cbz	r0, 8002508 <__cvt+0xa4>
 8002504:	f8cd 900c 	str.w	r9, [sp, #12]
 8002508:	2230      	movs	r2, #48	; 0x30
 800250a:	9b03      	ldr	r3, [sp, #12]
 800250c:	454b      	cmp	r3, r9
 800250e:	d307      	bcc.n	8002520 <__cvt+0xbc>
 8002510:	9b03      	ldr	r3, [sp, #12]
 8002512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002514:	1bdb      	subs	r3, r3, r7
 8002516:	4638      	mov	r0, r7
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	b004      	add	sp, #16
 800251c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	9103      	str	r1, [sp, #12]
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e7f0      	b.n	800250a <__cvt+0xa6>

08002528 <__exponent>:
 8002528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800252a:	4603      	mov	r3, r0
 800252c:	2900      	cmp	r1, #0
 800252e:	bfb8      	it	lt
 8002530:	4249      	neglt	r1, r1
 8002532:	f803 2b02 	strb.w	r2, [r3], #2
 8002536:	bfb4      	ite	lt
 8002538:	222d      	movlt	r2, #45	; 0x2d
 800253a:	222b      	movge	r2, #43	; 0x2b
 800253c:	2909      	cmp	r1, #9
 800253e:	7042      	strb	r2, [r0, #1]
 8002540:	dd2a      	ble.n	8002598 <__exponent+0x70>
 8002542:	f10d 0407 	add.w	r4, sp, #7
 8002546:	46a4      	mov	ip, r4
 8002548:	270a      	movs	r7, #10
 800254a:	46a6      	mov	lr, r4
 800254c:	460a      	mov	r2, r1
 800254e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002552:	fb07 1516 	mls	r5, r7, r6, r1
 8002556:	3530      	adds	r5, #48	; 0x30
 8002558:	2a63      	cmp	r2, #99	; 0x63
 800255a:	f104 34ff 	add.w	r4, r4, #4294967295
 800255e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002562:	4631      	mov	r1, r6
 8002564:	dcf1      	bgt.n	800254a <__exponent+0x22>
 8002566:	3130      	adds	r1, #48	; 0x30
 8002568:	f1ae 0502 	sub.w	r5, lr, #2
 800256c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002570:	1c44      	adds	r4, r0, #1
 8002572:	4629      	mov	r1, r5
 8002574:	4561      	cmp	r1, ip
 8002576:	d30a      	bcc.n	800258e <__exponent+0x66>
 8002578:	f10d 0209 	add.w	r2, sp, #9
 800257c:	eba2 020e 	sub.w	r2, r2, lr
 8002580:	4565      	cmp	r5, ip
 8002582:	bf88      	it	hi
 8002584:	2200      	movhi	r2, #0
 8002586:	4413      	add	r3, r2
 8002588:	1a18      	subs	r0, r3, r0
 800258a:	b003      	add	sp, #12
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002592:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002596:	e7ed      	b.n	8002574 <__exponent+0x4c>
 8002598:	2330      	movs	r3, #48	; 0x30
 800259a:	3130      	adds	r1, #48	; 0x30
 800259c:	7083      	strb	r3, [r0, #2]
 800259e:	70c1      	strb	r1, [r0, #3]
 80025a0:	1d03      	adds	r3, r0, #4
 80025a2:	e7f1      	b.n	8002588 <__exponent+0x60>

080025a4 <_printf_float>:
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	ed2d 8b02 	vpush	{d8}
 80025ac:	b08d      	sub	sp, #52	; 0x34
 80025ae:	460c      	mov	r4, r1
 80025b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80025b4:	4616      	mov	r6, r2
 80025b6:	461f      	mov	r7, r3
 80025b8:	4605      	mov	r5, r0
 80025ba:	f001 fa73 	bl	8003aa4 <_localeconv_r>
 80025be:	f8d0 a000 	ldr.w	sl, [r0]
 80025c2:	4650      	mov	r0, sl
 80025c4:	f7fd fe0c 	bl	80001e0 <strlen>
 80025c8:	2300      	movs	r3, #0
 80025ca:	930a      	str	r3, [sp, #40]	; 0x28
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	9305      	str	r3, [sp, #20]
 80025d0:	f8d8 3000 	ldr.w	r3, [r8]
 80025d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80025d8:	3307      	adds	r3, #7
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	f103 0208 	add.w	r2, r3, #8
 80025e2:	f8c8 2000 	str.w	r2, [r8]
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80025ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80025f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80025f6:	9307      	str	r3, [sp, #28]
 80025f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80025fc:	ee08 0a10 	vmov	s16, r0
 8002600:	4b9f      	ldr	r3, [pc, #636]	; (8002880 <_printf_float+0x2dc>)
 8002602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002606:	f04f 32ff 	mov.w	r2, #4294967295
 800260a:	f7fe fa97 	bl	8000b3c <__aeabi_dcmpun>
 800260e:	bb88      	cbnz	r0, 8002674 <_printf_float+0xd0>
 8002610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002614:	4b9a      	ldr	r3, [pc, #616]	; (8002880 <_printf_float+0x2dc>)
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	f7fe fa71 	bl	8000b00 <__aeabi_dcmple>
 800261e:	bb48      	cbnz	r0, 8002674 <_printf_float+0xd0>
 8002620:	2200      	movs	r2, #0
 8002622:	2300      	movs	r3, #0
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fe fa60 	bl	8000aec <__aeabi_dcmplt>
 800262c:	b110      	cbz	r0, 8002634 <_printf_float+0x90>
 800262e:	232d      	movs	r3, #45	; 0x2d
 8002630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002634:	4b93      	ldr	r3, [pc, #588]	; (8002884 <_printf_float+0x2e0>)
 8002636:	4894      	ldr	r0, [pc, #592]	; (8002888 <_printf_float+0x2e4>)
 8002638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800263c:	bf94      	ite	ls
 800263e:	4698      	movls	r8, r3
 8002640:	4680      	movhi	r8, r0
 8002642:	2303      	movs	r3, #3
 8002644:	6123      	str	r3, [r4, #16]
 8002646:	9b05      	ldr	r3, [sp, #20]
 8002648:	f023 0204 	bic.w	r2, r3, #4
 800264c:	6022      	str	r2, [r4, #0]
 800264e:	f04f 0900 	mov.w	r9, #0
 8002652:	9700      	str	r7, [sp, #0]
 8002654:	4633      	mov	r3, r6
 8002656:	aa0b      	add	r2, sp, #44	; 0x2c
 8002658:	4621      	mov	r1, r4
 800265a:	4628      	mov	r0, r5
 800265c:	f000 f9d8 	bl	8002a10 <_printf_common>
 8002660:	3001      	adds	r0, #1
 8002662:	f040 8090 	bne.w	8002786 <_printf_float+0x1e2>
 8002666:	f04f 30ff 	mov.w	r0, #4294967295
 800266a:	b00d      	add	sp, #52	; 0x34
 800266c:	ecbd 8b02 	vpop	{d8}
 8002670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fe fa5e 	bl	8000b3c <__aeabi_dcmpun>
 8002680:	b140      	cbz	r0, 8002694 <_printf_float+0xf0>
 8002682:	464b      	mov	r3, r9
 8002684:	2b00      	cmp	r3, #0
 8002686:	bfbc      	itt	lt
 8002688:	232d      	movlt	r3, #45	; 0x2d
 800268a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800268e:	487f      	ldr	r0, [pc, #508]	; (800288c <_printf_float+0x2e8>)
 8002690:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <_printf_float+0x2ec>)
 8002692:	e7d1      	b.n	8002638 <_printf_float+0x94>
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800269a:	9206      	str	r2, [sp, #24]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	d13f      	bne.n	8002720 <_printf_float+0x17c>
 80026a0:	2306      	movs	r3, #6
 80026a2:	6063      	str	r3, [r4, #4]
 80026a4:	9b05      	ldr	r3, [sp, #20]
 80026a6:	6861      	ldr	r1, [r4, #4]
 80026a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026ac:	2300      	movs	r3, #0
 80026ae:	9303      	str	r3, [sp, #12]
 80026b0:	ab0a      	add	r3, sp, #40	; 0x28
 80026b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80026b6:	ab09      	add	r3, sp, #36	; 0x24
 80026b8:	ec49 8b10 	vmov	d0, r8, r9
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	6022      	str	r2, [r4, #0]
 80026c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80026c4:	4628      	mov	r0, r5
 80026c6:	f7ff fecd 	bl	8002464 <__cvt>
 80026ca:	9b06      	ldr	r3, [sp, #24]
 80026cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026ce:	2b47      	cmp	r3, #71	; 0x47
 80026d0:	4680      	mov	r8, r0
 80026d2:	d108      	bne.n	80026e6 <_printf_float+0x142>
 80026d4:	1cc8      	adds	r0, r1, #3
 80026d6:	db02      	blt.n	80026de <_printf_float+0x13a>
 80026d8:	6863      	ldr	r3, [r4, #4]
 80026da:	4299      	cmp	r1, r3
 80026dc:	dd41      	ble.n	8002762 <_printf_float+0x1be>
 80026de:	f1ab 0b02 	sub.w	fp, fp, #2
 80026e2:	fa5f fb8b 	uxtb.w	fp, fp
 80026e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80026ea:	d820      	bhi.n	800272e <_printf_float+0x18a>
 80026ec:	3901      	subs	r1, #1
 80026ee:	465a      	mov	r2, fp
 80026f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80026f4:	9109      	str	r1, [sp, #36]	; 0x24
 80026f6:	f7ff ff17 	bl	8002528 <__exponent>
 80026fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80026fc:	1813      	adds	r3, r2, r0
 80026fe:	2a01      	cmp	r2, #1
 8002700:	4681      	mov	r9, r0
 8002702:	6123      	str	r3, [r4, #16]
 8002704:	dc02      	bgt.n	800270c <_printf_float+0x168>
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	07d2      	lsls	r2, r2, #31
 800270a:	d501      	bpl.n	8002710 <_printf_float+0x16c>
 800270c:	3301      	adds	r3, #1
 800270e:	6123      	str	r3, [r4, #16]
 8002710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002714:	2b00      	cmp	r3, #0
 8002716:	d09c      	beq.n	8002652 <_printf_float+0xae>
 8002718:	232d      	movs	r3, #45	; 0x2d
 800271a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800271e:	e798      	b.n	8002652 <_printf_float+0xae>
 8002720:	9a06      	ldr	r2, [sp, #24]
 8002722:	2a47      	cmp	r2, #71	; 0x47
 8002724:	d1be      	bne.n	80026a4 <_printf_float+0x100>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1bc      	bne.n	80026a4 <_printf_float+0x100>
 800272a:	2301      	movs	r3, #1
 800272c:	e7b9      	b.n	80026a2 <_printf_float+0xfe>
 800272e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002732:	d118      	bne.n	8002766 <_printf_float+0x1c2>
 8002734:	2900      	cmp	r1, #0
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	dd0b      	ble.n	8002752 <_printf_float+0x1ae>
 800273a:	6121      	str	r1, [r4, #16]
 800273c:	b913      	cbnz	r3, 8002744 <_printf_float+0x1a0>
 800273e:	6822      	ldr	r2, [r4, #0]
 8002740:	07d0      	lsls	r0, r2, #31
 8002742:	d502      	bpl.n	800274a <_printf_float+0x1a6>
 8002744:	3301      	adds	r3, #1
 8002746:	440b      	add	r3, r1
 8002748:	6123      	str	r3, [r4, #16]
 800274a:	65a1      	str	r1, [r4, #88]	; 0x58
 800274c:	f04f 0900 	mov.w	r9, #0
 8002750:	e7de      	b.n	8002710 <_printf_float+0x16c>
 8002752:	b913      	cbnz	r3, 800275a <_printf_float+0x1b6>
 8002754:	6822      	ldr	r2, [r4, #0]
 8002756:	07d2      	lsls	r2, r2, #31
 8002758:	d501      	bpl.n	800275e <_printf_float+0x1ba>
 800275a:	3302      	adds	r3, #2
 800275c:	e7f4      	b.n	8002748 <_printf_float+0x1a4>
 800275e:	2301      	movs	r3, #1
 8002760:	e7f2      	b.n	8002748 <_printf_float+0x1a4>
 8002762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002768:	4299      	cmp	r1, r3
 800276a:	db05      	blt.n	8002778 <_printf_float+0x1d4>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	6121      	str	r1, [r4, #16]
 8002770:	07d8      	lsls	r0, r3, #31
 8002772:	d5ea      	bpl.n	800274a <_printf_float+0x1a6>
 8002774:	1c4b      	adds	r3, r1, #1
 8002776:	e7e7      	b.n	8002748 <_printf_float+0x1a4>
 8002778:	2900      	cmp	r1, #0
 800277a:	bfd4      	ite	le
 800277c:	f1c1 0202 	rsble	r2, r1, #2
 8002780:	2201      	movgt	r2, #1
 8002782:	4413      	add	r3, r2
 8002784:	e7e0      	b.n	8002748 <_printf_float+0x1a4>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	055a      	lsls	r2, r3, #21
 800278a:	d407      	bmi.n	800279c <_printf_float+0x1f8>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	4642      	mov	r2, r8
 8002790:	4631      	mov	r1, r6
 8002792:	4628      	mov	r0, r5
 8002794:	47b8      	blx	r7
 8002796:	3001      	adds	r0, #1
 8002798:	d12c      	bne.n	80027f4 <_printf_float+0x250>
 800279a:	e764      	b.n	8002666 <_printf_float+0xc2>
 800279c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80027a0:	f240 80e0 	bls.w	8002964 <_printf_float+0x3c0>
 80027a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80027a8:	2200      	movs	r2, #0
 80027aa:	2300      	movs	r3, #0
 80027ac:	f7fe f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d034      	beq.n	800281e <_printf_float+0x27a>
 80027b4:	4a37      	ldr	r2, [pc, #220]	; (8002894 <_printf_float+0x2f0>)
 80027b6:	2301      	movs	r3, #1
 80027b8:	4631      	mov	r1, r6
 80027ba:	4628      	mov	r0, r5
 80027bc:	47b8      	blx	r7
 80027be:	3001      	adds	r0, #1
 80027c0:	f43f af51 	beq.w	8002666 <_printf_float+0xc2>
 80027c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027c8:	429a      	cmp	r2, r3
 80027ca:	db02      	blt.n	80027d2 <_printf_float+0x22e>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	07d8      	lsls	r0, r3, #31
 80027d0:	d510      	bpl.n	80027f4 <_printf_float+0x250>
 80027d2:	ee18 3a10 	vmov	r3, s16
 80027d6:	4652      	mov	r2, sl
 80027d8:	4631      	mov	r1, r6
 80027da:	4628      	mov	r0, r5
 80027dc:	47b8      	blx	r7
 80027de:	3001      	adds	r0, #1
 80027e0:	f43f af41 	beq.w	8002666 <_printf_float+0xc2>
 80027e4:	f04f 0800 	mov.w	r8, #0
 80027e8:	f104 091a 	add.w	r9, r4, #26
 80027ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4543      	cmp	r3, r8
 80027f2:	dc09      	bgt.n	8002808 <_printf_float+0x264>
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	079b      	lsls	r3, r3, #30
 80027f8:	f100 8105 	bmi.w	8002a06 <_printf_float+0x462>
 80027fc:	68e0      	ldr	r0, [r4, #12]
 80027fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002800:	4298      	cmp	r0, r3
 8002802:	bfb8      	it	lt
 8002804:	4618      	movlt	r0, r3
 8002806:	e730      	b.n	800266a <_printf_float+0xc6>
 8002808:	2301      	movs	r3, #1
 800280a:	464a      	mov	r2, r9
 800280c:	4631      	mov	r1, r6
 800280e:	4628      	mov	r0, r5
 8002810:	47b8      	blx	r7
 8002812:	3001      	adds	r0, #1
 8002814:	f43f af27 	beq.w	8002666 <_printf_float+0xc2>
 8002818:	f108 0801 	add.w	r8, r8, #1
 800281c:	e7e6      	b.n	80027ec <_printf_float+0x248>
 800281e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	dc39      	bgt.n	8002898 <_printf_float+0x2f4>
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <_printf_float+0x2f0>)
 8002826:	2301      	movs	r3, #1
 8002828:	4631      	mov	r1, r6
 800282a:	4628      	mov	r0, r5
 800282c:	47b8      	blx	r7
 800282e:	3001      	adds	r0, #1
 8002830:	f43f af19 	beq.w	8002666 <_printf_float+0xc2>
 8002834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002838:	4313      	orrs	r3, r2
 800283a:	d102      	bne.n	8002842 <_printf_float+0x29e>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	07d9      	lsls	r1, r3, #31
 8002840:	d5d8      	bpl.n	80027f4 <_printf_float+0x250>
 8002842:	ee18 3a10 	vmov	r3, s16
 8002846:	4652      	mov	r2, sl
 8002848:	4631      	mov	r1, r6
 800284a:	4628      	mov	r0, r5
 800284c:	47b8      	blx	r7
 800284e:	3001      	adds	r0, #1
 8002850:	f43f af09 	beq.w	8002666 <_printf_float+0xc2>
 8002854:	f04f 0900 	mov.w	r9, #0
 8002858:	f104 0a1a 	add.w	sl, r4, #26
 800285c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800285e:	425b      	negs	r3, r3
 8002860:	454b      	cmp	r3, r9
 8002862:	dc01      	bgt.n	8002868 <_printf_float+0x2c4>
 8002864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002866:	e792      	b.n	800278e <_printf_float+0x1ea>
 8002868:	2301      	movs	r3, #1
 800286a:	4652      	mov	r2, sl
 800286c:	4631      	mov	r1, r6
 800286e:	4628      	mov	r0, r5
 8002870:	47b8      	blx	r7
 8002872:	3001      	adds	r0, #1
 8002874:	f43f aef7 	beq.w	8002666 <_printf_float+0xc2>
 8002878:	f109 0901 	add.w	r9, r9, #1
 800287c:	e7ee      	b.n	800285c <_printf_float+0x2b8>
 800287e:	bf00      	nop
 8002880:	7fefffff 	.word	0x7fefffff
 8002884:	080052b4 	.word	0x080052b4
 8002888:	080052b8 	.word	0x080052b8
 800288c:	080052c0 	.word	0x080052c0
 8002890:	080052bc 	.word	0x080052bc
 8002894:	080052c4 	.word	0x080052c4
 8002898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800289a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800289c:	429a      	cmp	r2, r3
 800289e:	bfa8      	it	ge
 80028a0:	461a      	movge	r2, r3
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	4691      	mov	r9, r2
 80028a6:	dc37      	bgt.n	8002918 <_printf_float+0x374>
 80028a8:	f04f 0b00 	mov.w	fp, #0
 80028ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028b0:	f104 021a 	add.w	r2, r4, #26
 80028b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028b6:	9305      	str	r3, [sp, #20]
 80028b8:	eba3 0309 	sub.w	r3, r3, r9
 80028bc:	455b      	cmp	r3, fp
 80028be:	dc33      	bgt.n	8002928 <_printf_float+0x384>
 80028c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028c4:	429a      	cmp	r2, r3
 80028c6:	db3b      	blt.n	8002940 <_printf_float+0x39c>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	07da      	lsls	r2, r3, #31
 80028cc:	d438      	bmi.n	8002940 <_printf_float+0x39c>
 80028ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028d0:	9a05      	ldr	r2, [sp, #20]
 80028d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028d4:	1a9a      	subs	r2, r3, r2
 80028d6:	eba3 0901 	sub.w	r9, r3, r1
 80028da:	4591      	cmp	r9, r2
 80028dc:	bfa8      	it	ge
 80028de:	4691      	movge	r9, r2
 80028e0:	f1b9 0f00 	cmp.w	r9, #0
 80028e4:	dc35      	bgt.n	8002952 <_printf_float+0x3ae>
 80028e6:	f04f 0800 	mov.w	r8, #0
 80028ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028ee:	f104 0a1a 	add.w	sl, r4, #26
 80028f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	eba3 0309 	sub.w	r3, r3, r9
 80028fc:	4543      	cmp	r3, r8
 80028fe:	f77f af79 	ble.w	80027f4 <_printf_float+0x250>
 8002902:	2301      	movs	r3, #1
 8002904:	4652      	mov	r2, sl
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	47b8      	blx	r7
 800290c:	3001      	adds	r0, #1
 800290e:	f43f aeaa 	beq.w	8002666 <_printf_float+0xc2>
 8002912:	f108 0801 	add.w	r8, r8, #1
 8002916:	e7ec      	b.n	80028f2 <_printf_float+0x34e>
 8002918:	4613      	mov	r3, r2
 800291a:	4631      	mov	r1, r6
 800291c:	4642      	mov	r2, r8
 800291e:	4628      	mov	r0, r5
 8002920:	47b8      	blx	r7
 8002922:	3001      	adds	r0, #1
 8002924:	d1c0      	bne.n	80028a8 <_printf_float+0x304>
 8002926:	e69e      	b.n	8002666 <_printf_float+0xc2>
 8002928:	2301      	movs	r3, #1
 800292a:	4631      	mov	r1, r6
 800292c:	4628      	mov	r0, r5
 800292e:	9205      	str	r2, [sp, #20]
 8002930:	47b8      	blx	r7
 8002932:	3001      	adds	r0, #1
 8002934:	f43f ae97 	beq.w	8002666 <_printf_float+0xc2>
 8002938:	9a05      	ldr	r2, [sp, #20]
 800293a:	f10b 0b01 	add.w	fp, fp, #1
 800293e:	e7b9      	b.n	80028b4 <_printf_float+0x310>
 8002940:	ee18 3a10 	vmov	r3, s16
 8002944:	4652      	mov	r2, sl
 8002946:	4631      	mov	r1, r6
 8002948:	4628      	mov	r0, r5
 800294a:	47b8      	blx	r7
 800294c:	3001      	adds	r0, #1
 800294e:	d1be      	bne.n	80028ce <_printf_float+0x32a>
 8002950:	e689      	b.n	8002666 <_printf_float+0xc2>
 8002952:	9a05      	ldr	r2, [sp, #20]
 8002954:	464b      	mov	r3, r9
 8002956:	4442      	add	r2, r8
 8002958:	4631      	mov	r1, r6
 800295a:	4628      	mov	r0, r5
 800295c:	47b8      	blx	r7
 800295e:	3001      	adds	r0, #1
 8002960:	d1c1      	bne.n	80028e6 <_printf_float+0x342>
 8002962:	e680      	b.n	8002666 <_printf_float+0xc2>
 8002964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002966:	2a01      	cmp	r2, #1
 8002968:	dc01      	bgt.n	800296e <_printf_float+0x3ca>
 800296a:	07db      	lsls	r3, r3, #31
 800296c:	d538      	bpl.n	80029e0 <_printf_float+0x43c>
 800296e:	2301      	movs	r3, #1
 8002970:	4642      	mov	r2, r8
 8002972:	4631      	mov	r1, r6
 8002974:	4628      	mov	r0, r5
 8002976:	47b8      	blx	r7
 8002978:	3001      	adds	r0, #1
 800297a:	f43f ae74 	beq.w	8002666 <_printf_float+0xc2>
 800297e:	ee18 3a10 	vmov	r3, s16
 8002982:	4652      	mov	r2, sl
 8002984:	4631      	mov	r1, r6
 8002986:	4628      	mov	r0, r5
 8002988:	47b8      	blx	r7
 800298a:	3001      	adds	r0, #1
 800298c:	f43f ae6b 	beq.w	8002666 <_printf_float+0xc2>
 8002990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002994:	2200      	movs	r2, #0
 8002996:	2300      	movs	r3, #0
 8002998:	f7fe f89e 	bl	8000ad8 <__aeabi_dcmpeq>
 800299c:	b9d8      	cbnz	r0, 80029d6 <_printf_float+0x432>
 800299e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029a0:	f108 0201 	add.w	r2, r8, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4631      	mov	r1, r6
 80029a8:	4628      	mov	r0, r5
 80029aa:	47b8      	blx	r7
 80029ac:	3001      	adds	r0, #1
 80029ae:	d10e      	bne.n	80029ce <_printf_float+0x42a>
 80029b0:	e659      	b.n	8002666 <_printf_float+0xc2>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4652      	mov	r2, sl
 80029b6:	4631      	mov	r1, r6
 80029b8:	4628      	mov	r0, r5
 80029ba:	47b8      	blx	r7
 80029bc:	3001      	adds	r0, #1
 80029be:	f43f ae52 	beq.w	8002666 <_printf_float+0xc2>
 80029c2:	f108 0801 	add.w	r8, r8, #1
 80029c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	4543      	cmp	r3, r8
 80029cc:	dcf1      	bgt.n	80029b2 <_printf_float+0x40e>
 80029ce:	464b      	mov	r3, r9
 80029d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80029d4:	e6dc      	b.n	8002790 <_printf_float+0x1ec>
 80029d6:	f04f 0800 	mov.w	r8, #0
 80029da:	f104 0a1a 	add.w	sl, r4, #26
 80029de:	e7f2      	b.n	80029c6 <_printf_float+0x422>
 80029e0:	2301      	movs	r3, #1
 80029e2:	4642      	mov	r2, r8
 80029e4:	e7df      	b.n	80029a6 <_printf_float+0x402>
 80029e6:	2301      	movs	r3, #1
 80029e8:	464a      	mov	r2, r9
 80029ea:	4631      	mov	r1, r6
 80029ec:	4628      	mov	r0, r5
 80029ee:	47b8      	blx	r7
 80029f0:	3001      	adds	r0, #1
 80029f2:	f43f ae38 	beq.w	8002666 <_printf_float+0xc2>
 80029f6:	f108 0801 	add.w	r8, r8, #1
 80029fa:	68e3      	ldr	r3, [r4, #12]
 80029fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029fe:	1a5b      	subs	r3, r3, r1
 8002a00:	4543      	cmp	r3, r8
 8002a02:	dcf0      	bgt.n	80029e6 <_printf_float+0x442>
 8002a04:	e6fa      	b.n	80027fc <_printf_float+0x258>
 8002a06:	f04f 0800 	mov.w	r8, #0
 8002a0a:	f104 0919 	add.w	r9, r4, #25
 8002a0e:	e7f4      	b.n	80029fa <_printf_float+0x456>

08002a10 <_printf_common>:
 8002a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a14:	4616      	mov	r6, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	688a      	ldr	r2, [r1, #8]
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfb8      	it	lt
 8002a24:	4613      	movlt	r3, r2
 8002a26:	6033      	str	r3, [r6, #0]
 8002a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	b10a      	cbz	r2, 8002a36 <_printf_common+0x26>
 8002a32:	3301      	adds	r3, #1
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0699      	lsls	r1, r3, #26
 8002a3a:	bf42      	ittt	mi
 8002a3c:	6833      	ldrmi	r3, [r6, #0]
 8002a3e:	3302      	addmi	r3, #2
 8002a40:	6033      	strmi	r3, [r6, #0]
 8002a42:	6825      	ldr	r5, [r4, #0]
 8002a44:	f015 0506 	ands.w	r5, r5, #6
 8002a48:	d106      	bne.n	8002a58 <_printf_common+0x48>
 8002a4a:	f104 0a19 	add.w	sl, r4, #25
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	6832      	ldr	r2, [r6, #0]
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	42ab      	cmp	r3, r5
 8002a56:	dc26      	bgt.n	8002aa6 <_printf_common+0x96>
 8002a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a5c:	1e13      	subs	r3, r2, #0
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	0692      	lsls	r2, r2, #26
 8002a66:	d42b      	bmi.n	8002ac0 <_printf_common+0xb0>
 8002a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c0      	blx	r8
 8002a72:	3001      	adds	r0, #1
 8002a74:	d01e      	beq.n	8002ab4 <_printf_common+0xa4>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	68e5      	ldr	r5, [r4, #12]
 8002a7a:	6832      	ldr	r2, [r6, #0]
 8002a7c:	f003 0306 	and.w	r3, r3, #6
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	bf08      	it	eq
 8002a84:	1aad      	subeq	r5, r5, r2
 8002a86:	68a3      	ldr	r3, [r4, #8]
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	bf0c      	ite	eq
 8002a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a90:	2500      	movne	r5, #0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bfc4      	itt	gt
 8002a96:	1a9b      	subgt	r3, r3, r2
 8002a98:	18ed      	addgt	r5, r5, r3
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	341a      	adds	r4, #26
 8002a9e:	42b5      	cmp	r5, r6
 8002aa0:	d11a      	bne.n	8002ad8 <_printf_common+0xc8>
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e008      	b.n	8002ab8 <_printf_common+0xa8>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	4652      	mov	r2, sl
 8002aaa:	4649      	mov	r1, r9
 8002aac:	4638      	mov	r0, r7
 8002aae:	47c0      	blx	r8
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d103      	bne.n	8002abc <_printf_common+0xac>
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abc:	3501      	adds	r5, #1
 8002abe:	e7c6      	b.n	8002a4e <_printf_common+0x3e>
 8002ac0:	18e1      	adds	r1, r4, r3
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aca:	4422      	add	r2, r4
 8002acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	e7c7      	b.n	8002a68 <_printf_common+0x58>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4622      	mov	r2, r4
 8002adc:	4649      	mov	r1, r9
 8002ade:	4638      	mov	r0, r7
 8002ae0:	47c0      	blx	r8
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	d0e6      	beq.n	8002ab4 <_printf_common+0xa4>
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7d9      	b.n	8002a9e <_printf_common+0x8e>
	...

08002aec <_printf_i>:
 8002aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af0:	7e0f      	ldrb	r7, [r1, #24]
 8002af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002af4:	2f78      	cmp	r7, #120	; 0x78
 8002af6:	4691      	mov	r9, r2
 8002af8:	4680      	mov	r8, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	469a      	mov	sl, r3
 8002afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b02:	d807      	bhi.n	8002b14 <_printf_i+0x28>
 8002b04:	2f62      	cmp	r7, #98	; 0x62
 8002b06:	d80a      	bhi.n	8002b1e <_printf_i+0x32>
 8002b08:	2f00      	cmp	r7, #0
 8002b0a:	f000 80d8 	beq.w	8002cbe <_printf_i+0x1d2>
 8002b0e:	2f58      	cmp	r7, #88	; 0x58
 8002b10:	f000 80a3 	beq.w	8002c5a <_printf_i+0x16e>
 8002b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b1c:	e03a      	b.n	8002b94 <_printf_i+0xa8>
 8002b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b22:	2b15      	cmp	r3, #21
 8002b24:	d8f6      	bhi.n	8002b14 <_printf_i+0x28>
 8002b26:	a101      	add	r1, pc, #4	; (adr r1, 8002b2c <_printf_i+0x40>)
 8002b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b2c:	08002b85 	.word	0x08002b85
 8002b30:	08002b99 	.word	0x08002b99
 8002b34:	08002b15 	.word	0x08002b15
 8002b38:	08002b15 	.word	0x08002b15
 8002b3c:	08002b15 	.word	0x08002b15
 8002b40:	08002b15 	.word	0x08002b15
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002b15 	.word	0x08002b15
 8002b4c:	08002b15 	.word	0x08002b15
 8002b50:	08002b15 	.word	0x08002b15
 8002b54:	08002b15 	.word	0x08002b15
 8002b58:	08002ca5 	.word	0x08002ca5
 8002b5c:	08002bc9 	.word	0x08002bc9
 8002b60:	08002c87 	.word	0x08002c87
 8002b64:	08002b15 	.word	0x08002b15
 8002b68:	08002b15 	.word	0x08002b15
 8002b6c:	08002cc7 	.word	0x08002cc7
 8002b70:	08002b15 	.word	0x08002b15
 8002b74:	08002bc9 	.word	0x08002bc9
 8002b78:	08002b15 	.word	0x08002b15
 8002b7c:	08002b15 	.word	0x08002b15
 8002b80:	08002c8f 	.word	0x08002c8f
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	1d1a      	adds	r2, r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	602a      	str	r2, [r5, #0]
 8002b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0a3      	b.n	8002ce0 <_printf_i+0x1f4>
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	6829      	ldr	r1, [r5, #0]
 8002b9c:	0606      	lsls	r6, r0, #24
 8002b9e:	f101 0304 	add.w	r3, r1, #4
 8002ba2:	d50a      	bpl.n	8002bba <_printf_i+0xce>
 8002ba4:	680e      	ldr	r6, [r1, #0]
 8002ba6:	602b      	str	r3, [r5, #0]
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	da03      	bge.n	8002bb4 <_printf_i+0xc8>
 8002bac:	232d      	movs	r3, #45	; 0x2d
 8002bae:	4276      	negs	r6, r6
 8002bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb4:	485e      	ldr	r0, [pc, #376]	; (8002d30 <_printf_i+0x244>)
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	e019      	b.n	8002bee <_printf_i+0x102>
 8002bba:	680e      	ldr	r6, [r1, #0]
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bc2:	bf18      	it	ne
 8002bc4:	b236      	sxthne	r6, r6
 8002bc6:	e7ef      	b.n	8002ba8 <_printf_i+0xbc>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	6820      	ldr	r0, [r4, #0]
 8002bcc:	1d19      	adds	r1, r3, #4
 8002bce:	6029      	str	r1, [r5, #0]
 8002bd0:	0601      	lsls	r1, r0, #24
 8002bd2:	d501      	bpl.n	8002bd8 <_printf_i+0xec>
 8002bd4:	681e      	ldr	r6, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <_printf_i+0xf2>
 8002bd8:	0646      	lsls	r6, r0, #25
 8002bda:	d5fb      	bpl.n	8002bd4 <_printf_i+0xe8>
 8002bdc:	881e      	ldrh	r6, [r3, #0]
 8002bde:	4854      	ldr	r0, [pc, #336]	; (8002d30 <_printf_i+0x244>)
 8002be0:	2f6f      	cmp	r7, #111	; 0x6f
 8002be2:	bf0c      	ite	eq
 8002be4:	2308      	moveq	r3, #8
 8002be6:	230a      	movne	r3, #10
 8002be8:	2100      	movs	r1, #0
 8002bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bee:	6865      	ldr	r5, [r4, #4]
 8002bf0:	60a5      	str	r5, [r4, #8]
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	bfa2      	ittt	ge
 8002bf6:	6821      	ldrge	r1, [r4, #0]
 8002bf8:	f021 0104 	bicge.w	r1, r1, #4
 8002bfc:	6021      	strge	r1, [r4, #0]
 8002bfe:	b90e      	cbnz	r6, 8002c04 <_printf_i+0x118>
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	d04d      	beq.n	8002ca0 <_printf_i+0x1b4>
 8002c04:	4615      	mov	r5, r2
 8002c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8002c0e:	5dc7      	ldrb	r7, [r0, r7]
 8002c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c14:	4637      	mov	r7, r6
 8002c16:	42bb      	cmp	r3, r7
 8002c18:	460e      	mov	r6, r1
 8002c1a:	d9f4      	bls.n	8002c06 <_printf_i+0x11a>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10b      	bne.n	8002c38 <_printf_i+0x14c>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	07de      	lsls	r6, r3, #31
 8002c24:	d508      	bpl.n	8002c38 <_printf_i+0x14c>
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	6861      	ldr	r1, [r4, #4]
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	bfde      	ittt	le
 8002c2e:	2330      	movle	r3, #48	; 0x30
 8002c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c38:	1b52      	subs	r2, r2, r5
 8002c3a:	6122      	str	r2, [r4, #16]
 8002c3c:	f8cd a000 	str.w	sl, [sp]
 8002c40:	464b      	mov	r3, r9
 8002c42:	aa03      	add	r2, sp, #12
 8002c44:	4621      	mov	r1, r4
 8002c46:	4640      	mov	r0, r8
 8002c48:	f7ff fee2 	bl	8002a10 <_printf_common>
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	d14c      	bne.n	8002cea <_printf_i+0x1fe>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b004      	add	sp, #16
 8002c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5a:	4835      	ldr	r0, [pc, #212]	; (8002d30 <_printf_i+0x244>)
 8002c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c60:	6829      	ldr	r1, [r5, #0]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c68:	6029      	str	r1, [r5, #0]
 8002c6a:	061d      	lsls	r5, r3, #24
 8002c6c:	d514      	bpl.n	8002c98 <_printf_i+0x1ac>
 8002c6e:	07df      	lsls	r7, r3, #31
 8002c70:	bf44      	itt	mi
 8002c72:	f043 0320 	orrmi.w	r3, r3, #32
 8002c76:	6023      	strmi	r3, [r4, #0]
 8002c78:	b91e      	cbnz	r6, 8002c82 <_printf_i+0x196>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f023 0320 	bic.w	r3, r3, #32
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	2310      	movs	r3, #16
 8002c84:	e7b0      	b.n	8002be8 <_printf_i+0xfc>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	2378      	movs	r3, #120	; 0x78
 8002c90:	4828      	ldr	r0, [pc, #160]	; (8002d34 <_printf_i+0x248>)
 8002c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c96:	e7e3      	b.n	8002c60 <_printf_i+0x174>
 8002c98:	0659      	lsls	r1, r3, #25
 8002c9a:	bf48      	it	mi
 8002c9c:	b2b6      	uxthmi	r6, r6
 8002c9e:	e7e6      	b.n	8002c6e <_printf_i+0x182>
 8002ca0:	4615      	mov	r5, r2
 8002ca2:	e7bb      	b.n	8002c1c <_printf_i+0x130>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	6826      	ldr	r6, [r4, #0]
 8002ca8:	6961      	ldr	r1, [r4, #20]
 8002caa:	1d18      	adds	r0, r3, #4
 8002cac:	6028      	str	r0, [r5, #0]
 8002cae:	0635      	lsls	r5, r6, #24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	d501      	bpl.n	8002cb8 <_printf_i+0x1cc>
 8002cb4:	6019      	str	r1, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <_printf_i+0x1d2>
 8002cb8:	0670      	lsls	r0, r6, #25
 8002cba:	d5fb      	bpl.n	8002cb4 <_printf_i+0x1c8>
 8002cbc:	8019      	strh	r1, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	4615      	mov	r5, r2
 8002cc4:	e7ba      	b.n	8002c3c <_printf_i+0x150>
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	602a      	str	r2, [r5, #0]
 8002ccc:	681d      	ldr	r5, [r3, #0]
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7fd fa8c 	bl	80001f0 <memchr>
 8002cd8:	b108      	cbz	r0, 8002cde <_printf_i+0x1f2>
 8002cda:	1b40      	subs	r0, r0, r5
 8002cdc:	6060      	str	r0, [r4, #4]
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	6123      	str	r3, [r4, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce8:	e7a8      	b.n	8002c3c <_printf_i+0x150>
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	462a      	mov	r2, r5
 8002cee:	4649      	mov	r1, r9
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	47d0      	blx	sl
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d0ab      	beq.n	8002c50 <_printf_i+0x164>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d413      	bmi.n	8002d26 <_printf_i+0x23a>
 8002cfe:	68e0      	ldr	r0, [r4, #12]
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	4298      	cmp	r0, r3
 8002d04:	bfb8      	it	lt
 8002d06:	4618      	movlt	r0, r3
 8002d08:	e7a4      	b.n	8002c54 <_printf_i+0x168>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4632      	mov	r2, r6
 8002d0e:	4649      	mov	r1, r9
 8002d10:	4640      	mov	r0, r8
 8002d12:	47d0      	blx	sl
 8002d14:	3001      	adds	r0, #1
 8002d16:	d09b      	beq.n	8002c50 <_printf_i+0x164>
 8002d18:	3501      	adds	r5, #1
 8002d1a:	68e3      	ldr	r3, [r4, #12]
 8002d1c:	9903      	ldr	r1, [sp, #12]
 8002d1e:	1a5b      	subs	r3, r3, r1
 8002d20:	42ab      	cmp	r3, r5
 8002d22:	dcf2      	bgt.n	8002d0a <_printf_i+0x21e>
 8002d24:	e7eb      	b.n	8002cfe <_printf_i+0x212>
 8002d26:	2500      	movs	r5, #0
 8002d28:	f104 0619 	add.w	r6, r4, #25
 8002d2c:	e7f5      	b.n	8002d1a <_printf_i+0x22e>
 8002d2e:	bf00      	nop
 8002d30:	080052c6 	.word	0x080052c6
 8002d34:	080052d7 	.word	0x080052d7

08002d38 <_vsniprintf_r>:
 8002d38:	b530      	push	{r4, r5, lr}
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	2c00      	cmp	r4, #0
 8002d3e:	b09b      	sub	sp, #108	; 0x6c
 8002d40:	4605      	mov	r5, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	da05      	bge.n	8002d52 <_vsniprintf_r+0x1a>
 8002d46:	238b      	movs	r3, #139	; 0x8b
 8002d48:	6003      	str	r3, [r0, #0]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	b01b      	add	sp, #108	; 0x6c
 8002d50:	bd30      	pop	{r4, r5, pc}
 8002d52:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002d5a:	bf14      	ite	ne
 8002d5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d60:	4623      	moveq	r3, r4
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	9305      	str	r3, [sp, #20]
 8002d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d6a:	9100      	str	r1, [sp, #0]
 8002d6c:	9104      	str	r1, [sp, #16]
 8002d6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002d72:	4669      	mov	r1, sp
 8002d74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d76:	f001 fb85 	bl	8004484 <_svfiprintf_r>
 8002d7a:	1c43      	adds	r3, r0, #1
 8002d7c:	bfbc      	itt	lt
 8002d7e:	238b      	movlt	r3, #139	; 0x8b
 8002d80:	602b      	strlt	r3, [r5, #0]
 8002d82:	2c00      	cmp	r4, #0
 8002d84:	d0e3      	beq.n	8002d4e <_vsniprintf_r+0x16>
 8002d86:	9b00      	ldr	r3, [sp, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e7df      	b.n	8002d4e <_vsniprintf_r+0x16>
	...

08002d90 <vsniprintf>:
 8002d90:	b507      	push	{r0, r1, r2, lr}
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	460a      	mov	r2, r1
 8002d98:	4601      	mov	r1, r0
 8002d9a:	4803      	ldr	r0, [pc, #12]	; (8002da8 <vsniprintf+0x18>)
 8002d9c:	6800      	ldr	r0, [r0, #0]
 8002d9e:	f7ff ffcb 	bl	8002d38 <_vsniprintf_r>
 8002da2:	b003      	add	sp, #12
 8002da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da8:	2000004c 	.word	0x2000004c

08002dac <quorem>:
 8002dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	6903      	ldr	r3, [r0, #16]
 8002db2:	690c      	ldr	r4, [r1, #16]
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	4607      	mov	r7, r0
 8002db8:	f2c0 8081 	blt.w	8002ebe <quorem+0x112>
 8002dbc:	3c01      	subs	r4, #1
 8002dbe:	f101 0814 	add.w	r8, r1, #20
 8002dc2:	f100 0514 	add.w	r5, r0, #20
 8002dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002ddc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002de0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002de4:	d331      	bcc.n	8002e4a <quorem+0x9e>
 8002de6:	f04f 0e00 	mov.w	lr, #0
 8002dea:	4640      	mov	r0, r8
 8002dec:	46ac      	mov	ip, r5
 8002dee:	46f2      	mov	sl, lr
 8002df0:	f850 2b04 	ldr.w	r2, [r0], #4
 8002df4:	b293      	uxth	r3, r2
 8002df6:	fb06 e303 	mla	r3, r6, r3, lr
 8002dfa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	ebaa 0303 	sub.w	r3, sl, r3
 8002e04:	f8dc a000 	ldr.w	sl, [ip]
 8002e08:	0c12      	lsrs	r2, r2, #16
 8002e0a:	fa13 f38a 	uxtah	r3, r3, sl
 8002e0e:	fb06 e202 	mla	r2, r6, r2, lr
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	9b00      	ldr	r3, [sp, #0]
 8002e16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e24:	f8bd 3000 	ldrh.w	r3, [sp]
 8002e28:	4581      	cmp	r9, r0
 8002e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e2e:	f84c 3b04 	str.w	r3, [ip], #4
 8002e32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e36:	d2db      	bcs.n	8002df0 <quorem+0x44>
 8002e38:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e3c:	b92b      	cbnz	r3, 8002e4a <quorem+0x9e>
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	3b04      	subs	r3, #4
 8002e42:	429d      	cmp	r5, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	d32e      	bcc.n	8002ea6 <quorem+0xfa>
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	f001 f8c6 	bl	8003fdc <__mcmp>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	db24      	blt.n	8002e9e <quorem+0xf2>
 8002e54:	3601      	adds	r6, #1
 8002e56:	4628      	mov	r0, r5
 8002e58:	f04f 0c00 	mov.w	ip, #0
 8002e5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e60:	f8d0 e000 	ldr.w	lr, [r0]
 8002e64:	b293      	uxth	r3, r2
 8002e66:	ebac 0303 	sub.w	r3, ip, r3
 8002e6a:	0c12      	lsrs	r2, r2, #16
 8002e6c:	fa13 f38e 	uxtah	r3, r3, lr
 8002e70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e7e:	45c1      	cmp	r9, r8
 8002e80:	f840 3b04 	str.w	r3, [r0], #4
 8002e84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002e88:	d2e8      	bcs.n	8002e5c <quorem+0xb0>
 8002e8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e92:	b922      	cbnz	r2, 8002e9e <quorem+0xf2>
 8002e94:	3b04      	subs	r3, #4
 8002e96:	429d      	cmp	r5, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	d30a      	bcc.n	8002eb2 <quorem+0x106>
 8002e9c:	613c      	str	r4, [r7, #16]
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	b003      	add	sp, #12
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	3b04      	subs	r3, #4
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d1cc      	bne.n	8002e48 <quorem+0x9c>
 8002eae:	3c01      	subs	r4, #1
 8002eb0:	e7c7      	b.n	8002e42 <quorem+0x96>
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	3b04      	subs	r3, #4
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d1f0      	bne.n	8002e9c <quorem+0xf0>
 8002eba:	3c01      	subs	r4, #1
 8002ebc:	e7eb      	b.n	8002e96 <quorem+0xea>
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e7ee      	b.n	8002ea0 <quorem+0xf4>
 8002ec2:	0000      	movs	r0, r0
 8002ec4:	0000      	movs	r0, r0
	...

08002ec8 <_dtoa_r>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	ed2d 8b04 	vpush	{d8-d9}
 8002ed0:	ec57 6b10 	vmov	r6, r7, d0
 8002ed4:	b093      	sub	sp, #76	; 0x4c
 8002ed6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ed8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002edc:	9106      	str	r1, [sp, #24]
 8002ede:	ee10 aa10 	vmov	sl, s0
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8002ee8:	46bb      	mov	fp, r7
 8002eea:	b975      	cbnz	r5, 8002f0a <_dtoa_r+0x42>
 8002eec:	2010      	movs	r0, #16
 8002eee:	f000 fddd 	bl	8003aac <malloc>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6260      	str	r0, [r4, #36]	; 0x24
 8002ef6:	b920      	cbnz	r0, 8002f02 <_dtoa_r+0x3a>
 8002ef8:	4ba7      	ldr	r3, [pc, #668]	; (8003198 <_dtoa_r+0x2d0>)
 8002efa:	21ea      	movs	r1, #234	; 0xea
 8002efc:	48a7      	ldr	r0, [pc, #668]	; (800319c <_dtoa_r+0x2d4>)
 8002efe:	f001 fbd1 	bl	80046a4 <__assert_func>
 8002f02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002f06:	6005      	str	r5, [r0, #0]
 8002f08:	60c5      	str	r5, [r0, #12]
 8002f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	b151      	cbz	r1, 8002f26 <_dtoa_r+0x5e>
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	604a      	str	r2, [r1, #4]
 8002f14:	2301      	movs	r3, #1
 8002f16:	4093      	lsls	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f000 fe1c 	bl	8003b58 <_Bfree>
 8002f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	1e3b      	subs	r3, r7, #0
 8002f28:	bfaa      	itet	ge
 8002f2a:	2300      	movge	r3, #0
 8002f2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002f30:	f8c8 3000 	strge.w	r3, [r8]
 8002f34:	4b9a      	ldr	r3, [pc, #616]	; (80031a0 <_dtoa_r+0x2d8>)
 8002f36:	bfbc      	itt	lt
 8002f38:	2201      	movlt	r2, #1
 8002f3a:	f8c8 2000 	strlt.w	r2, [r8]
 8002f3e:	ea33 030b 	bics.w	r3, r3, fp
 8002f42:	d11b      	bne.n	8002f7c <_dtoa_r+0xb4>
 8002f44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f46:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002f50:	4333      	orrs	r3, r6
 8002f52:	f000 8592 	beq.w	8003a7a <_dtoa_r+0xbb2>
 8002f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f58:	b963      	cbnz	r3, 8002f74 <_dtoa_r+0xac>
 8002f5a:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <_dtoa_r+0x2dc>)
 8002f5c:	e022      	b.n	8002fa4 <_dtoa_r+0xdc>
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <_dtoa_r+0x2e0>)
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	3308      	adds	r3, #8
 8002f64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	9801      	ldr	r0, [sp, #4]
 8002f6a:	b013      	add	sp, #76	; 0x4c
 8002f6c:	ecbd 8b04 	vpop	{d8-d9}
 8002f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f74:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <_dtoa_r+0x2dc>)
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	3303      	adds	r3, #3
 8002f7a:	e7f3      	b.n	8002f64 <_dtoa_r+0x9c>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4650      	mov	r0, sl
 8002f82:	4659      	mov	r1, fp
 8002f84:	f7fd fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f88:	ec4b ab19 	vmov	d9, sl, fp
 8002f8c:	4680      	mov	r8, r0
 8002f8e:	b158      	cbz	r0, 8002fa8 <_dtoa_r+0xe0>
 8002f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f92:	2301      	movs	r3, #1
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 856b 	beq.w	8003a74 <_dtoa_r+0xbac>
 8002f9e:	4883      	ldr	r0, [pc, #524]	; (80031ac <_dtoa_r+0x2e4>)
 8002fa0:	6018      	str	r0, [r3, #0]
 8002fa2:	1e43      	subs	r3, r0, #1
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	e7df      	b.n	8002f68 <_dtoa_r+0xa0>
 8002fa8:	ec4b ab10 	vmov	d0, sl, fp
 8002fac:	aa10      	add	r2, sp, #64	; 0x40
 8002fae:	a911      	add	r1, sp, #68	; 0x44
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f001 f8b9 	bl	8004128 <__d2b>
 8002fb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002fba:	ee08 0a10 	vmov	s16, r0
 8002fbe:	2d00      	cmp	r5, #0
 8002fc0:	f000 8084 	beq.w	80030cc <_dtoa_r+0x204>
 8002fc4:	ee19 3a90 	vmov	r3, s19
 8002fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002fd0:	4656      	mov	r6, sl
 8002fd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002fda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002fde:	4b74      	ldr	r3, [pc, #464]	; (80031b0 <_dtoa_r+0x2e8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	4639      	mov	r1, r7
 8002fe6:	f7fd f957 	bl	8000298 <__aeabi_dsub>
 8002fea:	a365      	add	r3, pc, #404	; (adr r3, 8003180 <_dtoa_r+0x2b8>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fb0a 	bl	8000608 <__aeabi_dmul>
 8002ff4:	a364      	add	r3, pc, #400	; (adr r3, 8003188 <_dtoa_r+0x2c0>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd f94f 	bl	800029c <__adddf3>
 8002ffe:	4606      	mov	r6, r0
 8003000:	4628      	mov	r0, r5
 8003002:	460f      	mov	r7, r1
 8003004:	f7fd fa96 	bl	8000534 <__aeabi_i2d>
 8003008:	a361      	add	r3, pc, #388	; (adr r3, 8003190 <_dtoa_r+0x2c8>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	f7fd fafb 	bl	8000608 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4630      	mov	r0, r6
 8003018:	4639      	mov	r1, r7
 800301a:	f7fd f93f 	bl	800029c <__adddf3>
 800301e:	4606      	mov	r6, r0
 8003020:	460f      	mov	r7, r1
 8003022:	f7fd fda1 	bl	8000b68 <__aeabi_d2iz>
 8003026:	2200      	movs	r2, #0
 8003028:	9000      	str	r0, [sp, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	4630      	mov	r0, r6
 800302e:	4639      	mov	r1, r7
 8003030:	f7fd fd5c 	bl	8000aec <__aeabi_dcmplt>
 8003034:	b150      	cbz	r0, 800304c <_dtoa_r+0x184>
 8003036:	9800      	ldr	r0, [sp, #0]
 8003038:	f7fd fa7c 	bl	8000534 <__aeabi_i2d>
 800303c:	4632      	mov	r2, r6
 800303e:	463b      	mov	r3, r7
 8003040:	f7fd fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003044:	b910      	cbnz	r0, 800304c <_dtoa_r+0x184>
 8003046:	9b00      	ldr	r3, [sp, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	9b00      	ldr	r3, [sp, #0]
 800304e:	2b16      	cmp	r3, #22
 8003050:	d85a      	bhi.n	8003108 <_dtoa_r+0x240>
 8003052:	9a00      	ldr	r2, [sp, #0]
 8003054:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <_dtoa_r+0x2ec>)
 8003056:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	ec51 0b19 	vmov	r0, r1, d9
 8003062:	f7fd fd43 	bl	8000aec <__aeabi_dcmplt>
 8003066:	2800      	cmp	r0, #0
 8003068:	d050      	beq.n	800310c <_dtoa_r+0x244>
 800306a:	9b00      	ldr	r3, [sp, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	930b      	str	r3, [sp, #44]	; 0x2c
 8003074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003076:	1b5d      	subs	r5, r3, r5
 8003078:	1e6b      	subs	r3, r5, #1
 800307a:	9305      	str	r3, [sp, #20]
 800307c:	bf45      	ittet	mi
 800307e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003082:	9304      	strmi	r3, [sp, #16]
 8003084:	2300      	movpl	r3, #0
 8003086:	2300      	movmi	r3, #0
 8003088:	bf4c      	ite	mi
 800308a:	9305      	strmi	r3, [sp, #20]
 800308c:	9304      	strpl	r3, [sp, #16]
 800308e:	9b00      	ldr	r3, [sp, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db3d      	blt.n	8003110 <_dtoa_r+0x248>
 8003094:	9b05      	ldr	r3, [sp, #20]
 8003096:	9a00      	ldr	r2, [sp, #0]
 8003098:	920a      	str	r2, [sp, #40]	; 0x28
 800309a:	4413      	add	r3, r2
 800309c:	9305      	str	r3, [sp, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	9307      	str	r3, [sp, #28]
 80030a2:	9b06      	ldr	r3, [sp, #24]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	f200 8089 	bhi.w	80031bc <_dtoa_r+0x2f4>
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	bfc4      	itt	gt
 80030ae:	3b04      	subgt	r3, #4
 80030b0:	9306      	strgt	r3, [sp, #24]
 80030b2:	9b06      	ldr	r3, [sp, #24]
 80030b4:	f1a3 0302 	sub.w	r3, r3, #2
 80030b8:	bfcc      	ite	gt
 80030ba:	2500      	movgt	r5, #0
 80030bc:	2501      	movle	r5, #1
 80030be:	2b03      	cmp	r3, #3
 80030c0:	f200 8087 	bhi.w	80031d2 <_dtoa_r+0x30a>
 80030c4:	e8df f003 	tbb	[pc, r3]
 80030c8:	59383a2d 	.word	0x59383a2d
 80030cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80030d0:	441d      	add	r5, r3
 80030d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	bfc1      	itttt	gt
 80030da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80030de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80030e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80030e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80030ea:	bfda      	itte	le
 80030ec:	f1c3 0320 	rsble	r3, r3, #32
 80030f0:	fa06 f003 	lslle.w	r0, r6, r3
 80030f4:	4318      	orrgt	r0, r3
 80030f6:	f7fd fa0d 	bl	8000514 <__aeabi_ui2d>
 80030fa:	2301      	movs	r3, #1
 80030fc:	4606      	mov	r6, r0
 80030fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003102:	3d01      	subs	r5, #1
 8003104:	930e      	str	r3, [sp, #56]	; 0x38
 8003106:	e76a      	b.n	8002fde <_dtoa_r+0x116>
 8003108:	2301      	movs	r3, #1
 800310a:	e7b2      	b.n	8003072 <_dtoa_r+0x1aa>
 800310c:	900b      	str	r0, [sp, #44]	; 0x2c
 800310e:	e7b1      	b.n	8003074 <_dtoa_r+0x1ac>
 8003110:	9b04      	ldr	r3, [sp, #16]
 8003112:	9a00      	ldr	r2, [sp, #0]
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	9304      	str	r3, [sp, #16]
 8003118:	4253      	negs	r3, r2
 800311a:	9307      	str	r3, [sp, #28]
 800311c:	2300      	movs	r3, #0
 800311e:	930a      	str	r3, [sp, #40]	; 0x28
 8003120:	e7bf      	b.n	80030a2 <_dtoa_r+0x1da>
 8003122:	2300      	movs	r3, #0
 8003124:	9308      	str	r3, [sp, #32]
 8003126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	dc55      	bgt.n	80031d8 <_dtoa_r+0x310>
 800312c:	2301      	movs	r3, #1
 800312e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003132:	461a      	mov	r2, r3
 8003134:	9209      	str	r2, [sp, #36]	; 0x24
 8003136:	e00c      	b.n	8003152 <_dtoa_r+0x28a>
 8003138:	2301      	movs	r3, #1
 800313a:	e7f3      	b.n	8003124 <_dtoa_r+0x25c>
 800313c:	2300      	movs	r3, #0
 800313e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003140:	9308      	str	r3, [sp, #32]
 8003142:	9b00      	ldr	r3, [sp, #0]
 8003144:	4413      	add	r3, r2
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	9303      	str	r3, [sp, #12]
 800314e:	bfb8      	it	lt
 8003150:	2301      	movlt	r3, #1
 8003152:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003154:	2200      	movs	r2, #0
 8003156:	6042      	str	r2, [r0, #4]
 8003158:	2204      	movs	r2, #4
 800315a:	f102 0614 	add.w	r6, r2, #20
 800315e:	429e      	cmp	r6, r3
 8003160:	6841      	ldr	r1, [r0, #4]
 8003162:	d93d      	bls.n	80031e0 <_dtoa_r+0x318>
 8003164:	4620      	mov	r0, r4
 8003166:	f000 fcb7 	bl	8003ad8 <_Balloc>
 800316a:	9001      	str	r0, [sp, #4]
 800316c:	2800      	cmp	r0, #0
 800316e:	d13b      	bne.n	80031e8 <_dtoa_r+0x320>
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_dtoa_r+0x2f0>)
 8003172:	4602      	mov	r2, r0
 8003174:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003178:	e6c0      	b.n	8002efc <_dtoa_r+0x34>
 800317a:	2301      	movs	r3, #1
 800317c:	e7df      	b.n	800313e <_dtoa_r+0x276>
 800317e:	bf00      	nop
 8003180:	636f4361 	.word	0x636f4361
 8003184:	3fd287a7 	.word	0x3fd287a7
 8003188:	8b60c8b3 	.word	0x8b60c8b3
 800318c:	3fc68a28 	.word	0x3fc68a28
 8003190:	509f79fb 	.word	0x509f79fb
 8003194:	3fd34413 	.word	0x3fd34413
 8003198:	080052f5 	.word	0x080052f5
 800319c:	0800530c 	.word	0x0800530c
 80031a0:	7ff00000 	.word	0x7ff00000
 80031a4:	080052f1 	.word	0x080052f1
 80031a8:	080052e8 	.word	0x080052e8
 80031ac:	080052c5 	.word	0x080052c5
 80031b0:	3ff80000 	.word	0x3ff80000
 80031b4:	08005400 	.word	0x08005400
 80031b8:	08005367 	.word	0x08005367
 80031bc:	2501      	movs	r5, #1
 80031be:	2300      	movs	r3, #0
 80031c0:	9306      	str	r3, [sp, #24]
 80031c2:	9508      	str	r5, [sp, #32]
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2312      	movs	r3, #18
 80031d0:	e7b0      	b.n	8003134 <_dtoa_r+0x26c>
 80031d2:	2301      	movs	r3, #1
 80031d4:	9308      	str	r3, [sp, #32]
 80031d6:	e7f5      	b.n	80031c4 <_dtoa_r+0x2fc>
 80031d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80031de:	e7b8      	b.n	8003152 <_dtoa_r+0x28a>
 80031e0:	3101      	adds	r1, #1
 80031e2:	6041      	str	r1, [r0, #4]
 80031e4:	0052      	lsls	r2, r2, #1
 80031e6:	e7b8      	b.n	800315a <_dtoa_r+0x292>
 80031e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ea:	9a01      	ldr	r2, [sp, #4]
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	9b03      	ldr	r3, [sp, #12]
 80031f0:	2b0e      	cmp	r3, #14
 80031f2:	f200 809d 	bhi.w	8003330 <_dtoa_r+0x468>
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	f000 809a 	beq.w	8003330 <_dtoa_r+0x468>
 80031fc:	9b00      	ldr	r3, [sp, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dd32      	ble.n	8003268 <_dtoa_r+0x3a0>
 8003202:	4ab7      	ldr	r2, [pc, #732]	; (80034e0 <_dtoa_r+0x618>)
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800320c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003210:	9b00      	ldr	r3, [sp, #0]
 8003212:	05d8      	lsls	r0, r3, #23
 8003214:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003218:	d516      	bpl.n	8003248 <_dtoa_r+0x380>
 800321a:	4bb2      	ldr	r3, [pc, #712]	; (80034e4 <_dtoa_r+0x61c>)
 800321c:	ec51 0b19 	vmov	r0, r1, d9
 8003220:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003224:	f7fd fb1a 	bl	800085c <__aeabi_ddiv>
 8003228:	f007 070f 	and.w	r7, r7, #15
 800322c:	4682      	mov	sl, r0
 800322e:	468b      	mov	fp, r1
 8003230:	2503      	movs	r5, #3
 8003232:	4eac      	ldr	r6, [pc, #688]	; (80034e4 <_dtoa_r+0x61c>)
 8003234:	b957      	cbnz	r7, 800324c <_dtoa_r+0x384>
 8003236:	4642      	mov	r2, r8
 8003238:	464b      	mov	r3, r9
 800323a:	4650      	mov	r0, sl
 800323c:	4659      	mov	r1, fp
 800323e:	f7fd fb0d 	bl	800085c <__aeabi_ddiv>
 8003242:	4682      	mov	sl, r0
 8003244:	468b      	mov	fp, r1
 8003246:	e028      	b.n	800329a <_dtoa_r+0x3d2>
 8003248:	2502      	movs	r5, #2
 800324a:	e7f2      	b.n	8003232 <_dtoa_r+0x36a>
 800324c:	07f9      	lsls	r1, r7, #31
 800324e:	d508      	bpl.n	8003262 <_dtoa_r+0x39a>
 8003250:	4640      	mov	r0, r8
 8003252:	4649      	mov	r1, r9
 8003254:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003258:	f7fd f9d6 	bl	8000608 <__aeabi_dmul>
 800325c:	3501      	adds	r5, #1
 800325e:	4680      	mov	r8, r0
 8003260:	4689      	mov	r9, r1
 8003262:	107f      	asrs	r7, r7, #1
 8003264:	3608      	adds	r6, #8
 8003266:	e7e5      	b.n	8003234 <_dtoa_r+0x36c>
 8003268:	f000 809b 	beq.w	80033a2 <_dtoa_r+0x4da>
 800326c:	9b00      	ldr	r3, [sp, #0]
 800326e:	4f9d      	ldr	r7, [pc, #628]	; (80034e4 <_dtoa_r+0x61c>)
 8003270:	425e      	negs	r6, r3
 8003272:	4b9b      	ldr	r3, [pc, #620]	; (80034e0 <_dtoa_r+0x618>)
 8003274:	f006 020f 	and.w	r2, r6, #15
 8003278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	ec51 0b19 	vmov	r0, r1, d9
 8003284:	f7fd f9c0 	bl	8000608 <__aeabi_dmul>
 8003288:	1136      	asrs	r6, r6, #4
 800328a:	4682      	mov	sl, r0
 800328c:	468b      	mov	fp, r1
 800328e:	2300      	movs	r3, #0
 8003290:	2502      	movs	r5, #2
 8003292:	2e00      	cmp	r6, #0
 8003294:	d17a      	bne.n	800338c <_dtoa_r+0x4c4>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1d3      	bne.n	8003242 <_dtoa_r+0x37a>
 800329a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8082 	beq.w	80033a6 <_dtoa_r+0x4de>
 80032a2:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <_dtoa_r+0x620>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	4650      	mov	r0, sl
 80032a8:	4659      	mov	r1, fp
 80032aa:	f7fd fc1f 	bl	8000aec <__aeabi_dcmplt>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d079      	beq.n	80033a6 <_dtoa_r+0x4de>
 80032b2:	9b03      	ldr	r3, [sp, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d076      	beq.n	80033a6 <_dtoa_r+0x4de>
 80032b8:	9b02      	ldr	r3, [sp, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	dd36      	ble.n	800332c <_dtoa_r+0x464>
 80032be:	9b00      	ldr	r3, [sp, #0]
 80032c0:	4650      	mov	r0, sl
 80032c2:	4659      	mov	r1, fp
 80032c4:	1e5f      	subs	r7, r3, #1
 80032c6:	2200      	movs	r2, #0
 80032c8:	4b88      	ldr	r3, [pc, #544]	; (80034ec <_dtoa_r+0x624>)
 80032ca:	f7fd f99d 	bl	8000608 <__aeabi_dmul>
 80032ce:	9e02      	ldr	r6, [sp, #8]
 80032d0:	4682      	mov	sl, r0
 80032d2:	468b      	mov	fp, r1
 80032d4:	3501      	adds	r5, #1
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7fd f92c 	bl	8000534 <__aeabi_i2d>
 80032dc:	4652      	mov	r2, sl
 80032de:	465b      	mov	r3, fp
 80032e0:	f7fd f992 	bl	8000608 <__aeabi_dmul>
 80032e4:	4b82      	ldr	r3, [pc, #520]	; (80034f0 <_dtoa_r+0x628>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	f7fc ffd8 	bl	800029c <__adddf3>
 80032ec:	46d0      	mov	r8, sl
 80032ee:	46d9      	mov	r9, fp
 80032f0:	4682      	mov	sl, r0
 80032f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d158      	bne.n	80033ac <_dtoa_r+0x4e4>
 80032fa:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <_dtoa_r+0x62c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	f7fc ffc9 	bl	8000298 <__aeabi_dsub>
 8003306:	4652      	mov	r2, sl
 8003308:	465b      	mov	r3, fp
 800330a:	4680      	mov	r8, r0
 800330c:	4689      	mov	r9, r1
 800330e:	f7fd fc0b 	bl	8000b28 <__aeabi_dcmpgt>
 8003312:	2800      	cmp	r0, #0
 8003314:	f040 8295 	bne.w	8003842 <_dtoa_r+0x97a>
 8003318:	4652      	mov	r2, sl
 800331a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800331e:	4640      	mov	r0, r8
 8003320:	4649      	mov	r1, r9
 8003322:	f7fd fbe3 	bl	8000aec <__aeabi_dcmplt>
 8003326:	2800      	cmp	r0, #0
 8003328:	f040 8289 	bne.w	800383e <_dtoa_r+0x976>
 800332c:	ec5b ab19 	vmov	sl, fp, d9
 8003330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003332:	2b00      	cmp	r3, #0
 8003334:	f2c0 8148 	blt.w	80035c8 <_dtoa_r+0x700>
 8003338:	9a00      	ldr	r2, [sp, #0]
 800333a:	2a0e      	cmp	r2, #14
 800333c:	f300 8144 	bgt.w	80035c8 <_dtoa_r+0x700>
 8003340:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <_dtoa_r+0x618>)
 8003342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003346:	e9d3 8900 	ldrd	r8, r9, [r3]
 800334a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	f280 80d5 	bge.w	80034fc <_dtoa_r+0x634>
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f300 80d1 	bgt.w	80034fc <_dtoa_r+0x634>
 800335a:	f040 826f 	bne.w	800383c <_dtoa_r+0x974>
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <_dtoa_r+0x62c>)
 8003360:	2200      	movs	r2, #0
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fd f94f 	bl	8000608 <__aeabi_dmul>
 800336a:	4652      	mov	r2, sl
 800336c:	465b      	mov	r3, fp
 800336e:	f7fd fbd1 	bl	8000b14 <__aeabi_dcmpge>
 8003372:	9e03      	ldr	r6, [sp, #12]
 8003374:	4637      	mov	r7, r6
 8003376:	2800      	cmp	r0, #0
 8003378:	f040 8245 	bne.w	8003806 <_dtoa_r+0x93e>
 800337c:	9d01      	ldr	r5, [sp, #4]
 800337e:	2331      	movs	r3, #49	; 0x31
 8003380:	f805 3b01 	strb.w	r3, [r5], #1
 8003384:	9b00      	ldr	r3, [sp, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	e240      	b.n	800380e <_dtoa_r+0x946>
 800338c:	07f2      	lsls	r2, r6, #31
 800338e:	d505      	bpl.n	800339c <_dtoa_r+0x4d4>
 8003390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003394:	f7fd f938 	bl	8000608 <__aeabi_dmul>
 8003398:	3501      	adds	r5, #1
 800339a:	2301      	movs	r3, #1
 800339c:	1076      	asrs	r6, r6, #1
 800339e:	3708      	adds	r7, #8
 80033a0:	e777      	b.n	8003292 <_dtoa_r+0x3ca>
 80033a2:	2502      	movs	r5, #2
 80033a4:	e779      	b.n	800329a <_dtoa_r+0x3d2>
 80033a6:	9f00      	ldr	r7, [sp, #0]
 80033a8:	9e03      	ldr	r6, [sp, #12]
 80033aa:	e794      	b.n	80032d6 <_dtoa_r+0x40e>
 80033ac:	9901      	ldr	r1, [sp, #4]
 80033ae:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <_dtoa_r+0x618>)
 80033b0:	4431      	add	r1, r6
 80033b2:	910d      	str	r1, [sp, #52]	; 0x34
 80033b4:	9908      	ldr	r1, [sp, #32]
 80033b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80033ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80033be:	2900      	cmp	r1, #0
 80033c0:	d043      	beq.n	800344a <_dtoa_r+0x582>
 80033c2:	494d      	ldr	r1, [pc, #308]	; (80034f8 <_dtoa_r+0x630>)
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd fa49 	bl	800085c <__aeabi_ddiv>
 80033ca:	4652      	mov	r2, sl
 80033cc:	465b      	mov	r3, fp
 80033ce:	f7fc ff63 	bl	8000298 <__aeabi_dsub>
 80033d2:	9d01      	ldr	r5, [sp, #4]
 80033d4:	4682      	mov	sl, r0
 80033d6:	468b      	mov	fp, r1
 80033d8:	4649      	mov	r1, r9
 80033da:	4640      	mov	r0, r8
 80033dc:	f7fd fbc4 	bl	8000b68 <__aeabi_d2iz>
 80033e0:	4606      	mov	r6, r0
 80033e2:	f7fd f8a7 	bl	8000534 <__aeabi_i2d>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4640      	mov	r0, r8
 80033ec:	4649      	mov	r1, r9
 80033ee:	f7fc ff53 	bl	8000298 <__aeabi_dsub>
 80033f2:	3630      	adds	r6, #48	; 0x30
 80033f4:	f805 6b01 	strb.w	r6, [r5], #1
 80033f8:	4652      	mov	r2, sl
 80033fa:	465b      	mov	r3, fp
 80033fc:	4680      	mov	r8, r0
 80033fe:	4689      	mov	r9, r1
 8003400:	f7fd fb74 	bl	8000aec <__aeabi_dcmplt>
 8003404:	2800      	cmp	r0, #0
 8003406:	d163      	bne.n	80034d0 <_dtoa_r+0x608>
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	4936      	ldr	r1, [pc, #216]	; (80034e8 <_dtoa_r+0x620>)
 800340e:	2000      	movs	r0, #0
 8003410:	f7fc ff42 	bl	8000298 <__aeabi_dsub>
 8003414:	4652      	mov	r2, sl
 8003416:	465b      	mov	r3, fp
 8003418:	f7fd fb68 	bl	8000aec <__aeabi_dcmplt>
 800341c:	2800      	cmp	r0, #0
 800341e:	f040 80b5 	bne.w	800358c <_dtoa_r+0x6c4>
 8003422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003424:	429d      	cmp	r5, r3
 8003426:	d081      	beq.n	800332c <_dtoa_r+0x464>
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <_dtoa_r+0x624>)
 800342a:	2200      	movs	r2, #0
 800342c:	4650      	mov	r0, sl
 800342e:	4659      	mov	r1, fp
 8003430:	f7fd f8ea 	bl	8000608 <__aeabi_dmul>
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <_dtoa_r+0x624>)
 8003436:	4682      	mov	sl, r0
 8003438:	468b      	mov	fp, r1
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	2200      	movs	r2, #0
 8003440:	f7fd f8e2 	bl	8000608 <__aeabi_dmul>
 8003444:	4680      	mov	r8, r0
 8003446:	4689      	mov	r9, r1
 8003448:	e7c6      	b.n	80033d8 <_dtoa_r+0x510>
 800344a:	4650      	mov	r0, sl
 800344c:	4659      	mov	r1, fp
 800344e:	f7fd f8db 	bl	8000608 <__aeabi_dmul>
 8003452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003454:	9d01      	ldr	r5, [sp, #4]
 8003456:	930f      	str	r3, [sp, #60]	; 0x3c
 8003458:	4682      	mov	sl, r0
 800345a:	468b      	mov	fp, r1
 800345c:	4649      	mov	r1, r9
 800345e:	4640      	mov	r0, r8
 8003460:	f7fd fb82 	bl	8000b68 <__aeabi_d2iz>
 8003464:	4606      	mov	r6, r0
 8003466:	f7fd f865 	bl	8000534 <__aeabi_i2d>
 800346a:	3630      	adds	r6, #48	; 0x30
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4640      	mov	r0, r8
 8003472:	4649      	mov	r1, r9
 8003474:	f7fc ff10 	bl	8000298 <__aeabi_dsub>
 8003478:	f805 6b01 	strb.w	r6, [r5], #1
 800347c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347e:	429d      	cmp	r5, r3
 8003480:	4680      	mov	r8, r0
 8003482:	4689      	mov	r9, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	d124      	bne.n	80034d4 <_dtoa_r+0x60c>
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <_dtoa_r+0x630>)
 800348c:	4650      	mov	r0, sl
 800348e:	4659      	mov	r1, fp
 8003490:	f7fc ff04 	bl	800029c <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd fb44 	bl	8000b28 <__aeabi_dcmpgt>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d173      	bne.n	800358c <_dtoa_r+0x6c4>
 80034a4:	4652      	mov	r2, sl
 80034a6:	465b      	mov	r3, fp
 80034a8:	4913      	ldr	r1, [pc, #76]	; (80034f8 <_dtoa_r+0x630>)
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fc fef4 	bl	8000298 <__aeabi_dsub>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4640      	mov	r0, r8
 80034b6:	4649      	mov	r1, r9
 80034b8:	f7fd fb18 	bl	8000aec <__aeabi_dcmplt>
 80034bc:	2800      	cmp	r0, #0
 80034be:	f43f af35 	beq.w	800332c <_dtoa_r+0x464>
 80034c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80034c4:	1e6b      	subs	r3, r5, #1
 80034c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80034c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034cc:	2b30      	cmp	r3, #48	; 0x30
 80034ce:	d0f8      	beq.n	80034c2 <_dtoa_r+0x5fa>
 80034d0:	9700      	str	r7, [sp, #0]
 80034d2:	e049      	b.n	8003568 <_dtoa_r+0x6a0>
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <_dtoa_r+0x624>)
 80034d6:	f7fd f897 	bl	8000608 <__aeabi_dmul>
 80034da:	4680      	mov	r8, r0
 80034dc:	4689      	mov	r9, r1
 80034de:	e7bd      	b.n	800345c <_dtoa_r+0x594>
 80034e0:	08005400 	.word	0x08005400
 80034e4:	080053d8 	.word	0x080053d8
 80034e8:	3ff00000 	.word	0x3ff00000
 80034ec:	40240000 	.word	0x40240000
 80034f0:	401c0000 	.word	0x401c0000
 80034f4:	40140000 	.word	0x40140000
 80034f8:	3fe00000 	.word	0x3fe00000
 80034fc:	9d01      	ldr	r5, [sp, #4]
 80034fe:	4656      	mov	r6, sl
 8003500:	465f      	mov	r7, fp
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	4630      	mov	r0, r6
 8003508:	4639      	mov	r1, r7
 800350a:	f7fd f9a7 	bl	800085c <__aeabi_ddiv>
 800350e:	f7fd fb2b 	bl	8000b68 <__aeabi_d2iz>
 8003512:	4682      	mov	sl, r0
 8003514:	f7fd f80e 	bl	8000534 <__aeabi_i2d>
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	f7fd f874 	bl	8000608 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4630      	mov	r0, r6
 8003526:	4639      	mov	r1, r7
 8003528:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800352c:	f7fc feb4 	bl	8000298 <__aeabi_dsub>
 8003530:	f805 6b01 	strb.w	r6, [r5], #1
 8003534:	9e01      	ldr	r6, [sp, #4]
 8003536:	9f03      	ldr	r7, [sp, #12]
 8003538:	1bae      	subs	r6, r5, r6
 800353a:	42b7      	cmp	r7, r6
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	d135      	bne.n	80035ae <_dtoa_r+0x6e6>
 8003542:	f7fc feab 	bl	800029c <__adddf3>
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	4606      	mov	r6, r0
 800354c:	460f      	mov	r7, r1
 800354e:	f7fd faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8003552:	b9d0      	cbnz	r0, 800358a <_dtoa_r+0x6c2>
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	4630      	mov	r0, r6
 800355a:	4639      	mov	r1, r7
 800355c:	f7fd fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003560:	b110      	cbz	r0, 8003568 <_dtoa_r+0x6a0>
 8003562:	f01a 0f01 	tst.w	sl, #1
 8003566:	d110      	bne.n	800358a <_dtoa_r+0x6c2>
 8003568:	4620      	mov	r0, r4
 800356a:	ee18 1a10 	vmov	r1, s16
 800356e:	f000 faf3 	bl	8003b58 <_Bfree>
 8003572:	2300      	movs	r3, #0
 8003574:	9800      	ldr	r0, [sp, #0]
 8003576:	702b      	strb	r3, [r5, #0]
 8003578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800357a:	3001      	adds	r0, #1
 800357c:	6018      	str	r0, [r3, #0]
 800357e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003580:	2b00      	cmp	r3, #0
 8003582:	f43f acf1 	beq.w	8002f68 <_dtoa_r+0xa0>
 8003586:	601d      	str	r5, [r3, #0]
 8003588:	e4ee      	b.n	8002f68 <_dtoa_r+0xa0>
 800358a:	9f00      	ldr	r7, [sp, #0]
 800358c:	462b      	mov	r3, r5
 800358e:	461d      	mov	r5, r3
 8003590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003594:	2a39      	cmp	r2, #57	; 0x39
 8003596:	d106      	bne.n	80035a6 <_dtoa_r+0x6de>
 8003598:	9a01      	ldr	r2, [sp, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d1f7      	bne.n	800358e <_dtoa_r+0x6c6>
 800359e:	9901      	ldr	r1, [sp, #4]
 80035a0:	2230      	movs	r2, #48	; 0x30
 80035a2:	3701      	adds	r7, #1
 80035a4:	700a      	strb	r2, [r1, #0]
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	3201      	adds	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e790      	b.n	80034d0 <_dtoa_r+0x608>
 80035ae:	4ba6      	ldr	r3, [pc, #664]	; (8003848 <_dtoa_r+0x980>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	f7fd f829 	bl	8000608 <__aeabi_dmul>
 80035b6:	2200      	movs	r2, #0
 80035b8:	2300      	movs	r3, #0
 80035ba:	4606      	mov	r6, r0
 80035bc:	460f      	mov	r7, r1
 80035be:	f7fd fa8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d09d      	beq.n	8003502 <_dtoa_r+0x63a>
 80035c6:	e7cf      	b.n	8003568 <_dtoa_r+0x6a0>
 80035c8:	9a08      	ldr	r2, [sp, #32]
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	f000 80d7 	beq.w	800377e <_dtoa_r+0x8b6>
 80035d0:	9a06      	ldr	r2, [sp, #24]
 80035d2:	2a01      	cmp	r2, #1
 80035d4:	f300 80ba 	bgt.w	800374c <_dtoa_r+0x884>
 80035d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035da:	2a00      	cmp	r2, #0
 80035dc:	f000 80b2 	beq.w	8003744 <_dtoa_r+0x87c>
 80035e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80035e4:	9e07      	ldr	r6, [sp, #28]
 80035e6:	9d04      	ldr	r5, [sp, #16]
 80035e8:	9a04      	ldr	r2, [sp, #16]
 80035ea:	441a      	add	r2, r3
 80035ec:	9204      	str	r2, [sp, #16]
 80035ee:	9a05      	ldr	r2, [sp, #20]
 80035f0:	2101      	movs	r1, #1
 80035f2:	441a      	add	r2, r3
 80035f4:	4620      	mov	r0, r4
 80035f6:	9205      	str	r2, [sp, #20]
 80035f8:	f000 fb66 	bl	8003cc8 <__i2b>
 80035fc:	4607      	mov	r7, r0
 80035fe:	2d00      	cmp	r5, #0
 8003600:	dd0c      	ble.n	800361c <_dtoa_r+0x754>
 8003602:	9b05      	ldr	r3, [sp, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dd09      	ble.n	800361c <_dtoa_r+0x754>
 8003608:	42ab      	cmp	r3, r5
 800360a:	9a04      	ldr	r2, [sp, #16]
 800360c:	bfa8      	it	ge
 800360e:	462b      	movge	r3, r5
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	9204      	str	r2, [sp, #16]
 8003614:	9a05      	ldr	r2, [sp, #20]
 8003616:	1aed      	subs	r5, r5, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	9305      	str	r3, [sp, #20]
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	b31b      	cbz	r3, 8003668 <_dtoa_r+0x7a0>
 8003620:	9b08      	ldr	r3, [sp, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80af 	beq.w	8003786 <_dtoa_r+0x8be>
 8003628:	2e00      	cmp	r6, #0
 800362a:	dd13      	ble.n	8003654 <_dtoa_r+0x78c>
 800362c:	4639      	mov	r1, r7
 800362e:	4632      	mov	r2, r6
 8003630:	4620      	mov	r0, r4
 8003632:	f000 fc09 	bl	8003e48 <__pow5mult>
 8003636:	ee18 2a10 	vmov	r2, s16
 800363a:	4601      	mov	r1, r0
 800363c:	4607      	mov	r7, r0
 800363e:	4620      	mov	r0, r4
 8003640:	f000 fb58 	bl	8003cf4 <__multiply>
 8003644:	ee18 1a10 	vmov	r1, s16
 8003648:	4680      	mov	r8, r0
 800364a:	4620      	mov	r0, r4
 800364c:	f000 fa84 	bl	8003b58 <_Bfree>
 8003650:	ee08 8a10 	vmov	s16, r8
 8003654:	9b07      	ldr	r3, [sp, #28]
 8003656:	1b9a      	subs	r2, r3, r6
 8003658:	d006      	beq.n	8003668 <_dtoa_r+0x7a0>
 800365a:	ee18 1a10 	vmov	r1, s16
 800365e:	4620      	mov	r0, r4
 8003660:	f000 fbf2 	bl	8003e48 <__pow5mult>
 8003664:	ee08 0a10 	vmov	s16, r0
 8003668:	2101      	movs	r1, #1
 800366a:	4620      	mov	r0, r4
 800366c:	f000 fb2c 	bl	8003cc8 <__i2b>
 8003670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	4606      	mov	r6, r0
 8003676:	f340 8088 	ble.w	800378a <_dtoa_r+0x8c2>
 800367a:	461a      	mov	r2, r3
 800367c:	4601      	mov	r1, r0
 800367e:	4620      	mov	r0, r4
 8003680:	f000 fbe2 	bl	8003e48 <__pow5mult>
 8003684:	9b06      	ldr	r3, [sp, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	4606      	mov	r6, r0
 800368a:	f340 8081 	ble.w	8003790 <_dtoa_r+0x8c8>
 800368e:	f04f 0800 	mov.w	r8, #0
 8003692:	6933      	ldr	r3, [r6, #16]
 8003694:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003698:	6918      	ldr	r0, [r3, #16]
 800369a:	f000 fac5 	bl	8003c28 <__hi0bits>
 800369e:	f1c0 0020 	rsb	r0, r0, #32
 80036a2:	9b05      	ldr	r3, [sp, #20]
 80036a4:	4418      	add	r0, r3
 80036a6:	f010 001f 	ands.w	r0, r0, #31
 80036aa:	f000 8092 	beq.w	80037d2 <_dtoa_r+0x90a>
 80036ae:	f1c0 0320 	rsb	r3, r0, #32
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	f340 808a 	ble.w	80037cc <_dtoa_r+0x904>
 80036b8:	f1c0 001c 	rsb	r0, r0, #28
 80036bc:	9b04      	ldr	r3, [sp, #16]
 80036be:	4403      	add	r3, r0
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	9b05      	ldr	r3, [sp, #20]
 80036c4:	4403      	add	r3, r0
 80036c6:	4405      	add	r5, r0
 80036c8:	9305      	str	r3, [sp, #20]
 80036ca:	9b04      	ldr	r3, [sp, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dd07      	ble.n	80036e0 <_dtoa_r+0x818>
 80036d0:	ee18 1a10 	vmov	r1, s16
 80036d4:	461a      	mov	r2, r3
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 fc10 	bl	8003efc <__lshift>
 80036dc:	ee08 0a10 	vmov	s16, r0
 80036e0:	9b05      	ldr	r3, [sp, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dd05      	ble.n	80036f2 <_dtoa_r+0x82a>
 80036e6:	4631      	mov	r1, r6
 80036e8:	461a      	mov	r2, r3
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 fc06 	bl	8003efc <__lshift>
 80036f0:	4606      	mov	r6, r0
 80036f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d06e      	beq.n	80037d6 <_dtoa_r+0x90e>
 80036f8:	ee18 0a10 	vmov	r0, s16
 80036fc:	4631      	mov	r1, r6
 80036fe:	f000 fc6d 	bl	8003fdc <__mcmp>
 8003702:	2800      	cmp	r0, #0
 8003704:	da67      	bge.n	80037d6 <_dtoa_r+0x90e>
 8003706:	9b00      	ldr	r3, [sp, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	ee18 1a10 	vmov	r1, s16
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	220a      	movs	r2, #10
 8003712:	2300      	movs	r3, #0
 8003714:	4620      	mov	r0, r4
 8003716:	f000 fa41 	bl	8003b9c <__multadd>
 800371a:	9b08      	ldr	r3, [sp, #32]
 800371c:	ee08 0a10 	vmov	s16, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 81b1 	beq.w	8003a88 <_dtoa_r+0xbc0>
 8003726:	2300      	movs	r3, #0
 8003728:	4639      	mov	r1, r7
 800372a:	220a      	movs	r2, #10
 800372c:	4620      	mov	r0, r4
 800372e:	f000 fa35 	bl	8003b9c <__multadd>
 8003732:	9b02      	ldr	r3, [sp, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	4607      	mov	r7, r0
 8003738:	f300 808e 	bgt.w	8003858 <_dtoa_r+0x990>
 800373c:	9b06      	ldr	r3, [sp, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	dc51      	bgt.n	80037e6 <_dtoa_r+0x91e>
 8003742:	e089      	b.n	8003858 <_dtoa_r+0x990>
 8003744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003746:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800374a:	e74b      	b.n	80035e4 <_dtoa_r+0x71c>
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	1e5e      	subs	r6, r3, #1
 8003750:	9b07      	ldr	r3, [sp, #28]
 8003752:	42b3      	cmp	r3, r6
 8003754:	bfbf      	itttt	lt
 8003756:	9b07      	ldrlt	r3, [sp, #28]
 8003758:	9607      	strlt	r6, [sp, #28]
 800375a:	1af2      	sublt	r2, r6, r3
 800375c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800375e:	bfb6      	itet	lt
 8003760:	189b      	addlt	r3, r3, r2
 8003762:	1b9e      	subge	r6, r3, r6
 8003764:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	bfb8      	it	lt
 800376a:	2600      	movlt	r6, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	bfb7      	itett	lt
 8003770:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003774:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003778:	1a9d      	sublt	r5, r3, r2
 800377a:	2300      	movlt	r3, #0
 800377c:	e734      	b.n	80035e8 <_dtoa_r+0x720>
 800377e:	9e07      	ldr	r6, [sp, #28]
 8003780:	9d04      	ldr	r5, [sp, #16]
 8003782:	9f08      	ldr	r7, [sp, #32]
 8003784:	e73b      	b.n	80035fe <_dtoa_r+0x736>
 8003786:	9a07      	ldr	r2, [sp, #28]
 8003788:	e767      	b.n	800365a <_dtoa_r+0x792>
 800378a:	9b06      	ldr	r3, [sp, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	dc18      	bgt.n	80037c2 <_dtoa_r+0x8fa>
 8003790:	f1ba 0f00 	cmp.w	sl, #0
 8003794:	d115      	bne.n	80037c2 <_dtoa_r+0x8fa>
 8003796:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800379a:	b993      	cbnz	r3, 80037c2 <_dtoa_r+0x8fa>
 800379c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80037a0:	0d1b      	lsrs	r3, r3, #20
 80037a2:	051b      	lsls	r3, r3, #20
 80037a4:	b183      	cbz	r3, 80037c8 <_dtoa_r+0x900>
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	9b05      	ldr	r3, [sp, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	9305      	str	r3, [sp, #20]
 80037b2:	f04f 0801 	mov.w	r8, #1
 80037b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f af6a 	bne.w	8003692 <_dtoa_r+0x7ca>
 80037be:	2001      	movs	r0, #1
 80037c0:	e76f      	b.n	80036a2 <_dtoa_r+0x7da>
 80037c2:	f04f 0800 	mov.w	r8, #0
 80037c6:	e7f6      	b.n	80037b6 <_dtoa_r+0x8ee>
 80037c8:	4698      	mov	r8, r3
 80037ca:	e7f4      	b.n	80037b6 <_dtoa_r+0x8ee>
 80037cc:	f43f af7d 	beq.w	80036ca <_dtoa_r+0x802>
 80037d0:	4618      	mov	r0, r3
 80037d2:	301c      	adds	r0, #28
 80037d4:	e772      	b.n	80036bc <_dtoa_r+0x7f4>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	dc37      	bgt.n	800384c <_dtoa_r+0x984>
 80037dc:	9b06      	ldr	r3, [sp, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	dd34      	ble.n	800384c <_dtoa_r+0x984>
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	9302      	str	r3, [sp, #8]
 80037e6:	9b02      	ldr	r3, [sp, #8]
 80037e8:	b96b      	cbnz	r3, 8003806 <_dtoa_r+0x93e>
 80037ea:	4631      	mov	r1, r6
 80037ec:	2205      	movs	r2, #5
 80037ee:	4620      	mov	r0, r4
 80037f0:	f000 f9d4 	bl	8003b9c <__multadd>
 80037f4:	4601      	mov	r1, r0
 80037f6:	4606      	mov	r6, r0
 80037f8:	ee18 0a10 	vmov	r0, s16
 80037fc:	f000 fbee 	bl	8003fdc <__mcmp>
 8003800:	2800      	cmp	r0, #0
 8003802:	f73f adbb 	bgt.w	800337c <_dtoa_r+0x4b4>
 8003806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003808:	9d01      	ldr	r5, [sp, #4]
 800380a:	43db      	mvns	r3, r3
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f04f 0800 	mov.w	r8, #0
 8003812:	4631      	mov	r1, r6
 8003814:	4620      	mov	r0, r4
 8003816:	f000 f99f 	bl	8003b58 <_Bfree>
 800381a:	2f00      	cmp	r7, #0
 800381c:	f43f aea4 	beq.w	8003568 <_dtoa_r+0x6a0>
 8003820:	f1b8 0f00 	cmp.w	r8, #0
 8003824:	d005      	beq.n	8003832 <_dtoa_r+0x96a>
 8003826:	45b8      	cmp	r8, r7
 8003828:	d003      	beq.n	8003832 <_dtoa_r+0x96a>
 800382a:	4641      	mov	r1, r8
 800382c:	4620      	mov	r0, r4
 800382e:	f000 f993 	bl	8003b58 <_Bfree>
 8003832:	4639      	mov	r1, r7
 8003834:	4620      	mov	r0, r4
 8003836:	f000 f98f 	bl	8003b58 <_Bfree>
 800383a:	e695      	b.n	8003568 <_dtoa_r+0x6a0>
 800383c:	2600      	movs	r6, #0
 800383e:	4637      	mov	r7, r6
 8003840:	e7e1      	b.n	8003806 <_dtoa_r+0x93e>
 8003842:	9700      	str	r7, [sp, #0]
 8003844:	4637      	mov	r7, r6
 8003846:	e599      	b.n	800337c <_dtoa_r+0x4b4>
 8003848:	40240000 	.word	0x40240000
 800384c:	9b08      	ldr	r3, [sp, #32]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80ca 	beq.w	80039e8 <_dtoa_r+0xb20>
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	2d00      	cmp	r5, #0
 800385a:	dd05      	ble.n	8003868 <_dtoa_r+0x9a0>
 800385c:	4639      	mov	r1, r7
 800385e:	462a      	mov	r2, r5
 8003860:	4620      	mov	r0, r4
 8003862:	f000 fb4b 	bl	8003efc <__lshift>
 8003866:	4607      	mov	r7, r0
 8003868:	f1b8 0f00 	cmp.w	r8, #0
 800386c:	d05b      	beq.n	8003926 <_dtoa_r+0xa5e>
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f931 	bl	8003ad8 <_Balloc>
 8003876:	4605      	mov	r5, r0
 8003878:	b928      	cbnz	r0, 8003886 <_dtoa_r+0x9be>
 800387a:	4b87      	ldr	r3, [pc, #540]	; (8003a98 <_dtoa_r+0xbd0>)
 800387c:	4602      	mov	r2, r0
 800387e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003882:	f7ff bb3b 	b.w	8002efc <_dtoa_r+0x34>
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	3202      	adds	r2, #2
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	f107 010c 	add.w	r1, r7, #12
 8003890:	300c      	adds	r0, #12
 8003892:	f000 f913 	bl	8003abc <memcpy>
 8003896:	2201      	movs	r2, #1
 8003898:	4629      	mov	r1, r5
 800389a:	4620      	mov	r0, r4
 800389c:	f000 fb2e 	bl	8003efc <__lshift>
 80038a0:	9b01      	ldr	r3, [sp, #4]
 80038a2:	f103 0901 	add.w	r9, r3, #1
 80038a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	9305      	str	r3, [sp, #20]
 80038ae:	f00a 0301 	and.w	r3, sl, #1
 80038b2:	46b8      	mov	r8, r7
 80038b4:	9304      	str	r3, [sp, #16]
 80038b6:	4607      	mov	r7, r0
 80038b8:	4631      	mov	r1, r6
 80038ba:	ee18 0a10 	vmov	r0, s16
 80038be:	f7ff fa75 	bl	8002dac <quorem>
 80038c2:	4641      	mov	r1, r8
 80038c4:	9002      	str	r0, [sp, #8]
 80038c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80038ca:	ee18 0a10 	vmov	r0, s16
 80038ce:	f000 fb85 	bl	8003fdc <__mcmp>
 80038d2:	463a      	mov	r2, r7
 80038d4:	9003      	str	r0, [sp, #12]
 80038d6:	4631      	mov	r1, r6
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 fb9b 	bl	8004014 <__mdiff>
 80038de:	68c2      	ldr	r2, [r0, #12]
 80038e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80038e4:	4605      	mov	r5, r0
 80038e6:	bb02      	cbnz	r2, 800392a <_dtoa_r+0xa62>
 80038e8:	4601      	mov	r1, r0
 80038ea:	ee18 0a10 	vmov	r0, s16
 80038ee:	f000 fb75 	bl	8003fdc <__mcmp>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4629      	mov	r1, r5
 80038f6:	4620      	mov	r0, r4
 80038f8:	9207      	str	r2, [sp, #28]
 80038fa:	f000 f92d 	bl	8003b58 <_Bfree>
 80038fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003902:	ea43 0102 	orr.w	r1, r3, r2
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	430b      	orrs	r3, r1
 800390a:	464d      	mov	r5, r9
 800390c:	d10f      	bne.n	800392e <_dtoa_r+0xa66>
 800390e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003912:	d02a      	beq.n	800396a <_dtoa_r+0xaa2>
 8003914:	9b03      	ldr	r3, [sp, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	dd02      	ble.n	8003920 <_dtoa_r+0xa58>
 800391a:	9b02      	ldr	r3, [sp, #8]
 800391c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003920:	f88b a000 	strb.w	sl, [fp]
 8003924:	e775      	b.n	8003812 <_dtoa_r+0x94a>
 8003926:	4638      	mov	r0, r7
 8003928:	e7ba      	b.n	80038a0 <_dtoa_r+0x9d8>
 800392a:	2201      	movs	r2, #1
 800392c:	e7e2      	b.n	80038f4 <_dtoa_r+0xa2c>
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	db04      	blt.n	800393e <_dtoa_r+0xa76>
 8003934:	9906      	ldr	r1, [sp, #24]
 8003936:	430b      	orrs	r3, r1
 8003938:	9904      	ldr	r1, [sp, #16]
 800393a:	430b      	orrs	r3, r1
 800393c:	d122      	bne.n	8003984 <_dtoa_r+0xabc>
 800393e:	2a00      	cmp	r2, #0
 8003940:	ddee      	ble.n	8003920 <_dtoa_r+0xa58>
 8003942:	ee18 1a10 	vmov	r1, s16
 8003946:	2201      	movs	r2, #1
 8003948:	4620      	mov	r0, r4
 800394a:	f000 fad7 	bl	8003efc <__lshift>
 800394e:	4631      	mov	r1, r6
 8003950:	ee08 0a10 	vmov	s16, r0
 8003954:	f000 fb42 	bl	8003fdc <__mcmp>
 8003958:	2800      	cmp	r0, #0
 800395a:	dc03      	bgt.n	8003964 <_dtoa_r+0xa9c>
 800395c:	d1e0      	bne.n	8003920 <_dtoa_r+0xa58>
 800395e:	f01a 0f01 	tst.w	sl, #1
 8003962:	d0dd      	beq.n	8003920 <_dtoa_r+0xa58>
 8003964:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003968:	d1d7      	bne.n	800391a <_dtoa_r+0xa52>
 800396a:	2339      	movs	r3, #57	; 0x39
 800396c:	f88b 3000 	strb.w	r3, [fp]
 8003970:	462b      	mov	r3, r5
 8003972:	461d      	mov	r5, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800397a:	2a39      	cmp	r2, #57	; 0x39
 800397c:	d071      	beq.n	8003a62 <_dtoa_r+0xb9a>
 800397e:	3201      	adds	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e746      	b.n	8003812 <_dtoa_r+0x94a>
 8003984:	2a00      	cmp	r2, #0
 8003986:	dd07      	ble.n	8003998 <_dtoa_r+0xad0>
 8003988:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800398c:	d0ed      	beq.n	800396a <_dtoa_r+0xaa2>
 800398e:	f10a 0301 	add.w	r3, sl, #1
 8003992:	f88b 3000 	strb.w	r3, [fp]
 8003996:	e73c      	b.n	8003812 <_dtoa_r+0x94a>
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800399e:	4599      	cmp	r9, r3
 80039a0:	d047      	beq.n	8003a32 <_dtoa_r+0xb6a>
 80039a2:	ee18 1a10 	vmov	r1, s16
 80039a6:	2300      	movs	r3, #0
 80039a8:	220a      	movs	r2, #10
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f8f6 	bl	8003b9c <__multadd>
 80039b0:	45b8      	cmp	r8, r7
 80039b2:	ee08 0a10 	vmov	s16, r0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	f04f 020a 	mov.w	r2, #10
 80039be:	4641      	mov	r1, r8
 80039c0:	4620      	mov	r0, r4
 80039c2:	d106      	bne.n	80039d2 <_dtoa_r+0xb0a>
 80039c4:	f000 f8ea 	bl	8003b9c <__multadd>
 80039c8:	4680      	mov	r8, r0
 80039ca:	4607      	mov	r7, r0
 80039cc:	f109 0901 	add.w	r9, r9, #1
 80039d0:	e772      	b.n	80038b8 <_dtoa_r+0x9f0>
 80039d2:	f000 f8e3 	bl	8003b9c <__multadd>
 80039d6:	4639      	mov	r1, r7
 80039d8:	4680      	mov	r8, r0
 80039da:	2300      	movs	r3, #0
 80039dc:	220a      	movs	r2, #10
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 f8dc 	bl	8003b9c <__multadd>
 80039e4:	4607      	mov	r7, r0
 80039e6:	e7f1      	b.n	80039cc <_dtoa_r+0xb04>
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	9d01      	ldr	r5, [sp, #4]
 80039ee:	ee18 0a10 	vmov	r0, s16
 80039f2:	4631      	mov	r1, r6
 80039f4:	f7ff f9da 	bl	8002dac <quorem>
 80039f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80039fc:	9b01      	ldr	r3, [sp, #4]
 80039fe:	f805 ab01 	strb.w	sl, [r5], #1
 8003a02:	1aea      	subs	r2, r5, r3
 8003a04:	9b02      	ldr	r3, [sp, #8]
 8003a06:	4293      	cmp	r3, r2
 8003a08:	dd09      	ble.n	8003a1e <_dtoa_r+0xb56>
 8003a0a:	ee18 1a10 	vmov	r1, s16
 8003a0e:	2300      	movs	r3, #0
 8003a10:	220a      	movs	r2, #10
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 f8c2 	bl	8003b9c <__multadd>
 8003a18:	ee08 0a10 	vmov	s16, r0
 8003a1c:	e7e7      	b.n	80039ee <_dtoa_r+0xb26>
 8003a1e:	9b02      	ldr	r3, [sp, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bfc8      	it	gt
 8003a24:	461d      	movgt	r5, r3
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	bfd8      	it	le
 8003a2a:	2501      	movle	r5, #1
 8003a2c:	441d      	add	r5, r3
 8003a2e:	f04f 0800 	mov.w	r8, #0
 8003a32:	ee18 1a10 	vmov	r1, s16
 8003a36:	2201      	movs	r2, #1
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 fa5f 	bl	8003efc <__lshift>
 8003a3e:	4631      	mov	r1, r6
 8003a40:	ee08 0a10 	vmov	s16, r0
 8003a44:	f000 faca 	bl	8003fdc <__mcmp>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	dc91      	bgt.n	8003970 <_dtoa_r+0xaa8>
 8003a4c:	d102      	bne.n	8003a54 <_dtoa_r+0xb8c>
 8003a4e:	f01a 0f01 	tst.w	sl, #1
 8003a52:	d18d      	bne.n	8003970 <_dtoa_r+0xaa8>
 8003a54:	462b      	mov	r3, r5
 8003a56:	461d      	mov	r5, r3
 8003a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a5c:	2a30      	cmp	r2, #48	; 0x30
 8003a5e:	d0fa      	beq.n	8003a56 <_dtoa_r+0xb8e>
 8003a60:	e6d7      	b.n	8003812 <_dtoa_r+0x94a>
 8003a62:	9a01      	ldr	r2, [sp, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d184      	bne.n	8003972 <_dtoa_r+0xaaa>
 8003a68:	9b00      	ldr	r3, [sp, #0]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2331      	movs	r3, #49	; 0x31
 8003a70:	7013      	strb	r3, [r2, #0]
 8003a72:	e6ce      	b.n	8003812 <_dtoa_r+0x94a>
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <_dtoa_r+0xbd4>)
 8003a76:	f7ff ba95 	b.w	8002fa4 <_dtoa_r+0xdc>
 8003a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f aa6e 	bne.w	8002f5e <_dtoa_r+0x96>
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <_dtoa_r+0xbd8>)
 8003a84:	f7ff ba8e 	b.w	8002fa4 <_dtoa_r+0xdc>
 8003a88:	9b02      	ldr	r3, [sp, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	dcae      	bgt.n	80039ec <_dtoa_r+0xb24>
 8003a8e:	9b06      	ldr	r3, [sp, #24]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f73f aea8 	bgt.w	80037e6 <_dtoa_r+0x91e>
 8003a96:	e7a9      	b.n	80039ec <_dtoa_r+0xb24>
 8003a98:	08005367 	.word	0x08005367
 8003a9c:	080052c4 	.word	0x080052c4
 8003aa0:	080052e8 	.word	0x080052e8

08003aa4 <_localeconv_r>:
 8003aa4:	4800      	ldr	r0, [pc, #0]	; (8003aa8 <_localeconv_r+0x4>)
 8003aa6:	4770      	bx	lr
 8003aa8:	200001a0 	.word	0x200001a0

08003aac <malloc>:
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <malloc+0xc>)
 8003aae:	4601      	mov	r1, r0
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f000 bc17 	b.w	80042e4 <_malloc_r>
 8003ab6:	bf00      	nop
 8003ab8:	2000004c 	.word	0x2000004c

08003abc <memcpy>:
 8003abc:	440a      	add	r2, r1
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ac4:	d100      	bne.n	8003ac8 <memcpy+0xc>
 8003ac6:	4770      	bx	lr
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad2:	4291      	cmp	r1, r2
 8003ad4:	d1f9      	bne.n	8003aca <memcpy+0xe>
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <_Balloc>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003adc:	4604      	mov	r4, r0
 8003ade:	460d      	mov	r5, r1
 8003ae0:	b976      	cbnz	r6, 8003b00 <_Balloc+0x28>
 8003ae2:	2010      	movs	r0, #16
 8003ae4:	f7ff ffe2 	bl	8003aac <malloc>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6260      	str	r0, [r4, #36]	; 0x24
 8003aec:	b920      	cbnz	r0, 8003af8 <_Balloc+0x20>
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <_Balloc+0x78>)
 8003af0:	4818      	ldr	r0, [pc, #96]	; (8003b54 <_Balloc+0x7c>)
 8003af2:	2166      	movs	r1, #102	; 0x66
 8003af4:	f000 fdd6 	bl	80046a4 <__assert_func>
 8003af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003afc:	6006      	str	r6, [r0, #0]
 8003afe:	60c6      	str	r6, [r0, #12]
 8003b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b02:	68f3      	ldr	r3, [r6, #12]
 8003b04:	b183      	cbz	r3, 8003b28 <_Balloc+0x50>
 8003b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b0e:	b9b8      	cbnz	r0, 8003b40 <_Balloc+0x68>
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f605 	lsl.w	r6, r1, r5
 8003b16:	1d72      	adds	r2, r6, #5
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f000 fb60 	bl	80041e0 <_calloc_r>
 8003b20:	b160      	cbz	r0, 8003b3c <_Balloc+0x64>
 8003b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b26:	e00e      	b.n	8003b46 <_Balloc+0x6e>
 8003b28:	2221      	movs	r2, #33	; 0x21
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f000 fb57 	bl	80041e0 <_calloc_r>
 8003b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b34:	60f0      	str	r0, [r6, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e4      	bne.n	8003b06 <_Balloc+0x2e>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	6802      	ldr	r2, [r0, #0]
 8003b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b46:	2300      	movs	r3, #0
 8003b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b4c:	e7f7      	b.n	8003b3e <_Balloc+0x66>
 8003b4e:	bf00      	nop
 8003b50:	080052f5 	.word	0x080052f5
 8003b54:	08005378 	.word	0x08005378

08003b58 <_Bfree>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	b976      	cbnz	r6, 8003b80 <_Bfree+0x28>
 8003b62:	2010      	movs	r0, #16
 8003b64:	f7ff ffa2 	bl	8003aac <malloc>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8003b6c:	b920      	cbnz	r0, 8003b78 <_Bfree+0x20>
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <_Bfree+0x3c>)
 8003b70:	4809      	ldr	r0, [pc, #36]	; (8003b98 <_Bfree+0x40>)
 8003b72:	218a      	movs	r1, #138	; 0x8a
 8003b74:	f000 fd96 	bl	80046a4 <__assert_func>
 8003b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b7c:	6006      	str	r6, [r0, #0]
 8003b7e:	60c6      	str	r6, [r0, #12]
 8003b80:	b13c      	cbz	r4, 8003b92 <_Bfree+0x3a>
 8003b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b84:	6862      	ldr	r2, [r4, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b8c:	6021      	str	r1, [r4, #0]
 8003b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	080052f5 	.word	0x080052f5
 8003b98:	08005378 	.word	0x08005378

08003b9c <__multadd>:
 8003b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba0:	690d      	ldr	r5, [r1, #16]
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	461e      	mov	r6, r3
 8003ba8:	f101 0c14 	add.w	ip, r1, #20
 8003bac:	2000      	movs	r0, #0
 8003bae:	f8dc 3000 	ldr.w	r3, [ip]
 8003bb2:	b299      	uxth	r1, r3
 8003bb4:	fb02 6101 	mla	r1, r2, r1, r6
 8003bb8:	0c1e      	lsrs	r6, r3, #16
 8003bba:	0c0b      	lsrs	r3, r1, #16
 8003bbc:	fb02 3306 	mla	r3, r2, r6, r3
 8003bc0:	b289      	uxth	r1, r1
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003bc8:	4285      	cmp	r5, r0
 8003bca:	f84c 1b04 	str.w	r1, [ip], #4
 8003bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003bd2:	dcec      	bgt.n	8003bae <__multadd+0x12>
 8003bd4:	b30e      	cbz	r6, 8003c1a <__multadd+0x7e>
 8003bd6:	68a3      	ldr	r3, [r4, #8]
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc19      	bgt.n	8003c10 <__multadd+0x74>
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	4638      	mov	r0, r7
 8003be0:	3101      	adds	r1, #1
 8003be2:	f7ff ff79 	bl	8003ad8 <_Balloc>
 8003be6:	4680      	mov	r8, r0
 8003be8:	b928      	cbnz	r0, 8003bf6 <__multadd+0x5a>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__multadd+0x84>)
 8003bee:	480d      	ldr	r0, [pc, #52]	; (8003c24 <__multadd+0x88>)
 8003bf0:	21b5      	movs	r1, #181	; 0xb5
 8003bf2:	f000 fd57 	bl	80046a4 <__assert_func>
 8003bf6:	6922      	ldr	r2, [r4, #16]
 8003bf8:	3202      	adds	r2, #2
 8003bfa:	f104 010c 	add.w	r1, r4, #12
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	300c      	adds	r0, #12
 8003c02:	f7ff ff5b 	bl	8003abc <memcpy>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4638      	mov	r0, r7
 8003c0a:	f7ff ffa5 	bl	8003b58 <_Bfree>
 8003c0e:	4644      	mov	r4, r8
 8003c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c14:	3501      	adds	r5, #1
 8003c16:	615e      	str	r6, [r3, #20]
 8003c18:	6125      	str	r5, [r4, #16]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c20:	08005367 	.word	0x08005367
 8003c24:	08005378 	.word	0x08005378

08003c28 <__hi0bits>:
 8003c28:	0c03      	lsrs	r3, r0, #16
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	b9d3      	cbnz	r3, 8003c64 <__hi0bits+0x3c>
 8003c2e:	0400      	lsls	r0, r0, #16
 8003c30:	2310      	movs	r3, #16
 8003c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003c36:	bf04      	itt	eq
 8003c38:	0200      	lsleq	r0, r0, #8
 8003c3a:	3308      	addeq	r3, #8
 8003c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003c40:	bf04      	itt	eq
 8003c42:	0100      	lsleq	r0, r0, #4
 8003c44:	3304      	addeq	r3, #4
 8003c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003c4a:	bf04      	itt	eq
 8003c4c:	0080      	lsleq	r0, r0, #2
 8003c4e:	3302      	addeq	r3, #2
 8003c50:	2800      	cmp	r0, #0
 8003c52:	db05      	blt.n	8003c60 <__hi0bits+0x38>
 8003c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003c58:	f103 0301 	add.w	r3, r3, #1
 8003c5c:	bf08      	it	eq
 8003c5e:	2320      	moveq	r3, #32
 8003c60:	4618      	mov	r0, r3
 8003c62:	4770      	bx	lr
 8003c64:	2300      	movs	r3, #0
 8003c66:	e7e4      	b.n	8003c32 <__hi0bits+0xa>

08003c68 <__lo0bits>:
 8003c68:	6803      	ldr	r3, [r0, #0]
 8003c6a:	f013 0207 	ands.w	r2, r3, #7
 8003c6e:	4601      	mov	r1, r0
 8003c70:	d00b      	beq.n	8003c8a <__lo0bits+0x22>
 8003c72:	07da      	lsls	r2, r3, #31
 8003c74:	d423      	bmi.n	8003cbe <__lo0bits+0x56>
 8003c76:	0798      	lsls	r0, r3, #30
 8003c78:	bf49      	itett	mi
 8003c7a:	085b      	lsrmi	r3, r3, #1
 8003c7c:	089b      	lsrpl	r3, r3, #2
 8003c7e:	2001      	movmi	r0, #1
 8003c80:	600b      	strmi	r3, [r1, #0]
 8003c82:	bf5c      	itt	pl
 8003c84:	600b      	strpl	r3, [r1, #0]
 8003c86:	2002      	movpl	r0, #2
 8003c88:	4770      	bx	lr
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	b9a8      	cbnz	r0, 8003cba <__lo0bits+0x52>
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	2010      	movs	r0, #16
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	b90a      	cbnz	r2, 8003c9a <__lo0bits+0x32>
 8003c96:	3008      	adds	r0, #8
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	071a      	lsls	r2, r3, #28
 8003c9c:	bf04      	itt	eq
 8003c9e:	091b      	lsreq	r3, r3, #4
 8003ca0:	3004      	addeq	r0, #4
 8003ca2:	079a      	lsls	r2, r3, #30
 8003ca4:	bf04      	itt	eq
 8003ca6:	089b      	lsreq	r3, r3, #2
 8003ca8:	3002      	addeq	r0, #2
 8003caa:	07da      	lsls	r2, r3, #31
 8003cac:	d403      	bmi.n	8003cb6 <__lo0bits+0x4e>
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	f100 0001 	add.w	r0, r0, #1
 8003cb4:	d005      	beq.n	8003cc2 <__lo0bits+0x5a>
 8003cb6:	600b      	str	r3, [r1, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	4610      	mov	r0, r2
 8003cbc:	e7e9      	b.n	8003c92 <__lo0bits+0x2a>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	4770      	bx	lr
 8003cc2:	2020      	movs	r0, #32
 8003cc4:	4770      	bx	lr
	...

08003cc8 <__i2b>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	460c      	mov	r4, r1
 8003ccc:	2101      	movs	r1, #1
 8003cce:	f7ff ff03 	bl	8003ad8 <_Balloc>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	b928      	cbnz	r0, 8003ce2 <__i2b+0x1a>
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <__i2b+0x24>)
 8003cd8:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <__i2b+0x28>)
 8003cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003cde:	f000 fce1 	bl	80046a4 <__assert_func>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	6144      	str	r4, [r0, #20]
 8003ce6:	6103      	str	r3, [r0, #16]
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	bf00      	nop
 8003cec:	08005367 	.word	0x08005367
 8003cf0:	08005378 	.word	0x08005378

08003cf4 <__multiply>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4691      	mov	r9, r2
 8003cfa:	690a      	ldr	r2, [r1, #16]
 8003cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bfb8      	it	lt
 8003d04:	460b      	movlt	r3, r1
 8003d06:	460c      	mov	r4, r1
 8003d08:	bfbc      	itt	lt
 8003d0a:	464c      	movlt	r4, r9
 8003d0c:	4699      	movlt	r9, r3
 8003d0e:	6927      	ldr	r7, [r4, #16]
 8003d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	eb07 060a 	add.w	r6, r7, sl
 8003d1c:	42b3      	cmp	r3, r6
 8003d1e:	b085      	sub	sp, #20
 8003d20:	bfb8      	it	lt
 8003d22:	3101      	addlt	r1, #1
 8003d24:	f7ff fed8 	bl	8003ad8 <_Balloc>
 8003d28:	b930      	cbnz	r0, 8003d38 <__multiply+0x44>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <__multiply+0x14c>)
 8003d2e:	4845      	ldr	r0, [pc, #276]	; (8003e44 <__multiply+0x150>)
 8003d30:	f240 115d 	movw	r1, #349	; 0x15d
 8003d34:	f000 fcb6 	bl	80046a4 <__assert_func>
 8003d38:	f100 0514 	add.w	r5, r0, #20
 8003d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003d40:	462b      	mov	r3, r5
 8003d42:	2200      	movs	r2, #0
 8003d44:	4543      	cmp	r3, r8
 8003d46:	d321      	bcc.n	8003d8c <__multiply+0x98>
 8003d48:	f104 0314 	add.w	r3, r4, #20
 8003d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003d50:	f109 0314 	add.w	r3, r9, #20
 8003d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003d58:	9202      	str	r2, [sp, #8]
 8003d5a:	1b3a      	subs	r2, r7, r4
 8003d5c:	3a15      	subs	r2, #21
 8003d5e:	f022 0203 	bic.w	r2, r2, #3
 8003d62:	3204      	adds	r2, #4
 8003d64:	f104 0115 	add.w	r1, r4, #21
 8003d68:	428f      	cmp	r7, r1
 8003d6a:	bf38      	it	cc
 8003d6c:	2204      	movcc	r2, #4
 8003d6e:	9201      	str	r2, [sp, #4]
 8003d70:	9a02      	ldr	r2, [sp, #8]
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d80c      	bhi.n	8003d92 <__multiply+0x9e>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	dd03      	ble.n	8003d84 <__multiply+0x90>
 8003d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05a      	beq.n	8003e3a <__multiply+0x146>
 8003d84:	6106      	str	r6, [r0, #16]
 8003d86:	b005      	add	sp, #20
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	f843 2b04 	str.w	r2, [r3], #4
 8003d90:	e7d8      	b.n	8003d44 <__multiply+0x50>
 8003d92:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d96:	f1ba 0f00 	cmp.w	sl, #0
 8003d9a:	d024      	beq.n	8003de6 <__multiply+0xf2>
 8003d9c:	f104 0e14 	add.w	lr, r4, #20
 8003da0:	46a9      	mov	r9, r5
 8003da2:	f04f 0c00 	mov.w	ip, #0
 8003da6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003daa:	f8d9 1000 	ldr.w	r1, [r9]
 8003dae:	fa1f fb82 	uxth.w	fp, r2
 8003db2:	b289      	uxth	r1, r1
 8003db4:	fb0a 110b 	mla	r1, sl, fp, r1
 8003db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc0:	4461      	add	r1, ip
 8003dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003dc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8003dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003dce:	b289      	uxth	r1, r1
 8003dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003dd4:	4577      	cmp	r7, lr
 8003dd6:	f849 1b04 	str.w	r1, [r9], #4
 8003dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003dde:	d8e2      	bhi.n	8003da6 <__multiply+0xb2>
 8003de0:	9a01      	ldr	r2, [sp, #4]
 8003de2:	f845 c002 	str.w	ip, [r5, r2]
 8003de6:	9a03      	ldr	r2, [sp, #12]
 8003de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003dec:	3304      	adds	r3, #4
 8003dee:	f1b9 0f00 	cmp.w	r9, #0
 8003df2:	d020      	beq.n	8003e36 <__multiply+0x142>
 8003df4:	6829      	ldr	r1, [r5, #0]
 8003df6:	f104 0c14 	add.w	ip, r4, #20
 8003dfa:	46ae      	mov	lr, r5
 8003dfc:	f04f 0a00 	mov.w	sl, #0
 8003e00:	f8bc b000 	ldrh.w	fp, [ip]
 8003e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003e08:	fb09 220b 	mla	r2, r9, fp, r2
 8003e0c:	4492      	add	sl, r2
 8003e0e:	b289      	uxth	r1, r1
 8003e10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003e14:	f84e 1b04 	str.w	r1, [lr], #4
 8003e18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003e1c:	f8be 1000 	ldrh.w	r1, [lr]
 8003e20:	0c12      	lsrs	r2, r2, #16
 8003e22:	fb09 1102 	mla	r1, r9, r2, r1
 8003e26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003e2a:	4567      	cmp	r7, ip
 8003e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003e30:	d8e6      	bhi.n	8003e00 <__multiply+0x10c>
 8003e32:	9a01      	ldr	r2, [sp, #4]
 8003e34:	50a9      	str	r1, [r5, r2]
 8003e36:	3504      	adds	r5, #4
 8003e38:	e79a      	b.n	8003d70 <__multiply+0x7c>
 8003e3a:	3e01      	subs	r6, #1
 8003e3c:	e79c      	b.n	8003d78 <__multiply+0x84>
 8003e3e:	bf00      	nop
 8003e40:	08005367 	.word	0x08005367
 8003e44:	08005378 	.word	0x08005378

08003e48 <__pow5mult>:
 8003e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	f012 0203 	ands.w	r2, r2, #3
 8003e52:	4606      	mov	r6, r0
 8003e54:	460f      	mov	r7, r1
 8003e56:	d007      	beq.n	8003e68 <__pow5mult+0x20>
 8003e58:	4c25      	ldr	r4, [pc, #148]	; (8003ef0 <__pow5mult+0xa8>)
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e62:	f7ff fe9b 	bl	8003b9c <__multadd>
 8003e66:	4607      	mov	r7, r0
 8003e68:	10ad      	asrs	r5, r5, #2
 8003e6a:	d03d      	beq.n	8003ee8 <__pow5mult+0xa0>
 8003e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e6e:	b97c      	cbnz	r4, 8003e90 <__pow5mult+0x48>
 8003e70:	2010      	movs	r0, #16
 8003e72:	f7ff fe1b 	bl	8003aac <malloc>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6270      	str	r0, [r6, #36]	; 0x24
 8003e7a:	b928      	cbnz	r0, 8003e88 <__pow5mult+0x40>
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <__pow5mult+0xac>)
 8003e7e:	481e      	ldr	r0, [pc, #120]	; (8003ef8 <__pow5mult+0xb0>)
 8003e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e84:	f000 fc0e 	bl	80046a4 <__assert_func>
 8003e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e8c:	6004      	str	r4, [r0, #0]
 8003e8e:	60c4      	str	r4, [r0, #12]
 8003e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e98:	b94c      	cbnz	r4, 8003eae <__pow5mult+0x66>
 8003e9a:	f240 2171 	movw	r1, #625	; 0x271
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ff12 	bl	8003cc8 <__i2b>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003eaa:	4604      	mov	r4, r0
 8003eac:	6003      	str	r3, [r0, #0]
 8003eae:	f04f 0900 	mov.w	r9, #0
 8003eb2:	07eb      	lsls	r3, r5, #31
 8003eb4:	d50a      	bpl.n	8003ecc <__pow5mult+0x84>
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff ff1a 	bl	8003cf4 <__multiply>
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f7ff fe47 	bl	8003b58 <_Bfree>
 8003eca:	4647      	mov	r7, r8
 8003ecc:	106d      	asrs	r5, r5, #1
 8003ece:	d00b      	beq.n	8003ee8 <__pow5mult+0xa0>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	b938      	cbnz	r0, 8003ee4 <__pow5mult+0x9c>
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ff0b 	bl	8003cf4 <__multiply>
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	f8c0 9000 	str.w	r9, [r0]
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	e7e4      	b.n	8003eb2 <__pow5mult+0x6a>
 8003ee8:	4638      	mov	r0, r7
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eee:	bf00      	nop
 8003ef0:	080054c8 	.word	0x080054c8
 8003ef4:	080052f5 	.word	0x080052f5
 8003ef8:	08005378 	.word	0x08005378

08003efc <__lshift>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	460c      	mov	r4, r1
 8003f02:	6849      	ldr	r1, [r1, #4]
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4691      	mov	r9, r2
 8003f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f14:	f108 0601 	add.w	r6, r8, #1
 8003f18:	42b3      	cmp	r3, r6
 8003f1a:	db0b      	blt.n	8003f34 <__lshift+0x38>
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff fddb 	bl	8003ad8 <_Balloc>
 8003f22:	4605      	mov	r5, r0
 8003f24:	b948      	cbnz	r0, 8003f3a <__lshift+0x3e>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <__lshift+0xd8>)
 8003f2a:	482b      	ldr	r0, [pc, #172]	; (8003fd8 <__lshift+0xdc>)
 8003f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f30:	f000 fbb8 	bl	80046a4 <__assert_func>
 8003f34:	3101      	adds	r1, #1
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	e7ee      	b.n	8003f18 <__lshift+0x1c>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f100 0114 	add.w	r1, r0, #20
 8003f40:	f100 0210 	add.w	r2, r0, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	4553      	cmp	r3, sl
 8003f48:	db37      	blt.n	8003fba <__lshift+0xbe>
 8003f4a:	6920      	ldr	r0, [r4, #16]
 8003f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f50:	f104 0314 	add.w	r3, r4, #20
 8003f54:	f019 091f 	ands.w	r9, r9, #31
 8003f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003f60:	d02f      	beq.n	8003fc2 <__lshift+0xc6>
 8003f62:	f1c9 0e20 	rsb	lr, r9, #32
 8003f66:	468a      	mov	sl, r1
 8003f68:	f04f 0c00 	mov.w	ip, #0
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	fa02 f209 	lsl.w	r2, r2, r9
 8003f72:	ea42 020c 	orr.w	r2, r2, ip
 8003f76:	f84a 2b04 	str.w	r2, [sl], #4
 8003f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7e:	4298      	cmp	r0, r3
 8003f80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003f84:	d8f2      	bhi.n	8003f6c <__lshift+0x70>
 8003f86:	1b03      	subs	r3, r0, r4
 8003f88:	3b15      	subs	r3, #21
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	3304      	adds	r3, #4
 8003f90:	f104 0215 	add.w	r2, r4, #21
 8003f94:	4290      	cmp	r0, r2
 8003f96:	bf38      	it	cc
 8003f98:	2304      	movcc	r3, #4
 8003f9a:	f841 c003 	str.w	ip, [r1, r3]
 8003f9e:	f1bc 0f00 	cmp.w	ip, #0
 8003fa2:	d001      	beq.n	8003fa8 <__lshift+0xac>
 8003fa4:	f108 0602 	add.w	r6, r8, #2
 8003fa8:	3e01      	subs	r6, #1
 8003faa:	4638      	mov	r0, r7
 8003fac:	612e      	str	r6, [r5, #16]
 8003fae:	4621      	mov	r1, r4
 8003fb0:	f7ff fdd2 	bl	8003b58 <_Bfree>
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	e7c1      	b.n	8003f46 <__lshift+0x4a>
 8003fc2:	3904      	subs	r1, #4
 8003fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fcc:	4298      	cmp	r0, r3
 8003fce:	d8f9      	bhi.n	8003fc4 <__lshift+0xc8>
 8003fd0:	e7ea      	b.n	8003fa8 <__lshift+0xac>
 8003fd2:	bf00      	nop
 8003fd4:	08005367 	.word	0x08005367
 8003fd8:	08005378 	.word	0x08005378

08003fdc <__mcmp>:
 8003fdc:	b530      	push	{r4, r5, lr}
 8003fde:	6902      	ldr	r2, [r0, #16]
 8003fe0:	690c      	ldr	r4, [r1, #16]
 8003fe2:	1b12      	subs	r2, r2, r4
 8003fe4:	d10e      	bne.n	8004004 <__mcmp+0x28>
 8003fe6:	f100 0314 	add.w	r3, r0, #20
 8003fea:	3114      	adds	r1, #20
 8003fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003ffc:	42a5      	cmp	r5, r4
 8003ffe:	d003      	beq.n	8004008 <__mcmp+0x2c>
 8004000:	d305      	bcc.n	800400e <__mcmp+0x32>
 8004002:	2201      	movs	r2, #1
 8004004:	4610      	mov	r0, r2
 8004006:	bd30      	pop	{r4, r5, pc}
 8004008:	4283      	cmp	r3, r0
 800400a:	d3f3      	bcc.n	8003ff4 <__mcmp+0x18>
 800400c:	e7fa      	b.n	8004004 <__mcmp+0x28>
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	e7f7      	b.n	8004004 <__mcmp+0x28>

08004014 <__mdiff>:
 8004014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	460c      	mov	r4, r1
 800401a:	4606      	mov	r6, r0
 800401c:	4611      	mov	r1, r2
 800401e:	4620      	mov	r0, r4
 8004020:	4690      	mov	r8, r2
 8004022:	f7ff ffdb 	bl	8003fdc <__mcmp>
 8004026:	1e05      	subs	r5, r0, #0
 8004028:	d110      	bne.n	800404c <__mdiff+0x38>
 800402a:	4629      	mov	r1, r5
 800402c:	4630      	mov	r0, r6
 800402e:	f7ff fd53 	bl	8003ad8 <_Balloc>
 8004032:	b930      	cbnz	r0, 8004042 <__mdiff+0x2e>
 8004034:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <__mdiff+0x10c>)
 8004036:	4602      	mov	r2, r0
 8004038:	f240 2132 	movw	r1, #562	; 0x232
 800403c:	4839      	ldr	r0, [pc, #228]	; (8004124 <__mdiff+0x110>)
 800403e:	f000 fb31 	bl	80046a4 <__assert_func>
 8004042:	2301      	movs	r3, #1
 8004044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	bfa4      	itt	ge
 800404e:	4643      	movge	r3, r8
 8004050:	46a0      	movge	r8, r4
 8004052:	4630      	mov	r0, r6
 8004054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004058:	bfa6      	itte	ge
 800405a:	461c      	movge	r4, r3
 800405c:	2500      	movge	r5, #0
 800405e:	2501      	movlt	r5, #1
 8004060:	f7ff fd3a 	bl	8003ad8 <_Balloc>
 8004064:	b920      	cbnz	r0, 8004070 <__mdiff+0x5c>
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <__mdiff+0x10c>)
 8004068:	4602      	mov	r2, r0
 800406a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800406e:	e7e5      	b.n	800403c <__mdiff+0x28>
 8004070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004074:	6926      	ldr	r6, [r4, #16]
 8004076:	60c5      	str	r5, [r0, #12]
 8004078:	f104 0914 	add.w	r9, r4, #20
 800407c:	f108 0514 	add.w	r5, r8, #20
 8004080:	f100 0e14 	add.w	lr, r0, #20
 8004084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800408c:	f108 0210 	add.w	r2, r8, #16
 8004090:	46f2      	mov	sl, lr
 8004092:	2100      	movs	r1, #0
 8004094:	f859 3b04 	ldr.w	r3, [r9], #4
 8004098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800409c:	fa1f f883 	uxth.w	r8, r3
 80040a0:	fa11 f18b 	uxtah	r1, r1, fp
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	eba1 0808 	sub.w	r8, r1, r8
 80040aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80040ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80040b2:	fa1f f888 	uxth.w	r8, r8
 80040b6:	1419      	asrs	r1, r3, #16
 80040b8:	454e      	cmp	r6, r9
 80040ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80040be:	f84a 3b04 	str.w	r3, [sl], #4
 80040c2:	d8e7      	bhi.n	8004094 <__mdiff+0x80>
 80040c4:	1b33      	subs	r3, r6, r4
 80040c6:	3b15      	subs	r3, #21
 80040c8:	f023 0303 	bic.w	r3, r3, #3
 80040cc:	3304      	adds	r3, #4
 80040ce:	3415      	adds	r4, #21
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	bf38      	it	cc
 80040d4:	2304      	movcc	r3, #4
 80040d6:	441d      	add	r5, r3
 80040d8:	4473      	add	r3, lr
 80040da:	469e      	mov	lr, r3
 80040dc:	462e      	mov	r6, r5
 80040de:	4566      	cmp	r6, ip
 80040e0:	d30e      	bcc.n	8004100 <__mdiff+0xec>
 80040e2:	f10c 0203 	add.w	r2, ip, #3
 80040e6:	1b52      	subs	r2, r2, r5
 80040e8:	f022 0203 	bic.w	r2, r2, #3
 80040ec:	3d03      	subs	r5, #3
 80040ee:	45ac      	cmp	ip, r5
 80040f0:	bf38      	it	cc
 80040f2:	2200      	movcc	r2, #0
 80040f4:	441a      	add	r2, r3
 80040f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80040fa:	b17b      	cbz	r3, 800411c <__mdiff+0x108>
 80040fc:	6107      	str	r7, [r0, #16]
 80040fe:	e7a3      	b.n	8004048 <__mdiff+0x34>
 8004100:	f856 8b04 	ldr.w	r8, [r6], #4
 8004104:	fa11 f288 	uxtah	r2, r1, r8
 8004108:	1414      	asrs	r4, r2, #16
 800410a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800410e:	b292      	uxth	r2, r2
 8004110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004114:	f84e 2b04 	str.w	r2, [lr], #4
 8004118:	1421      	asrs	r1, r4, #16
 800411a:	e7e0      	b.n	80040de <__mdiff+0xca>
 800411c:	3f01      	subs	r7, #1
 800411e:	e7ea      	b.n	80040f6 <__mdiff+0xe2>
 8004120:	08005367 	.word	0x08005367
 8004124:	08005378 	.word	0x08005378

08004128 <__d2b>:
 8004128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800412c:	4689      	mov	r9, r1
 800412e:	2101      	movs	r1, #1
 8004130:	ec57 6b10 	vmov	r6, r7, d0
 8004134:	4690      	mov	r8, r2
 8004136:	f7ff fccf 	bl	8003ad8 <_Balloc>
 800413a:	4604      	mov	r4, r0
 800413c:	b930      	cbnz	r0, 800414c <__d2b+0x24>
 800413e:	4602      	mov	r2, r0
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <__d2b+0xb0>)
 8004142:	4826      	ldr	r0, [pc, #152]	; (80041dc <__d2b+0xb4>)
 8004144:	f240 310a 	movw	r1, #778	; 0x30a
 8004148:	f000 faac 	bl	80046a4 <__assert_func>
 800414c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004154:	bb35      	cbnz	r5, 80041a4 <__d2b+0x7c>
 8004156:	2e00      	cmp	r6, #0
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	d028      	beq.n	80041ae <__d2b+0x86>
 800415c:	4668      	mov	r0, sp
 800415e:	9600      	str	r6, [sp, #0]
 8004160:	f7ff fd82 	bl	8003c68 <__lo0bits>
 8004164:	9900      	ldr	r1, [sp, #0]
 8004166:	b300      	cbz	r0, 80041aa <__d2b+0x82>
 8004168:	9a01      	ldr	r2, [sp, #4]
 800416a:	f1c0 0320 	rsb	r3, r0, #32
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	430b      	orrs	r3, r1
 8004174:	40c2      	lsrs	r2, r0
 8004176:	6163      	str	r3, [r4, #20]
 8004178:	9201      	str	r2, [sp, #4]
 800417a:	9b01      	ldr	r3, [sp, #4]
 800417c:	61a3      	str	r3, [r4, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2202      	movne	r2, #2
 8004184:	2201      	moveq	r2, #1
 8004186:	6122      	str	r2, [r4, #16]
 8004188:	b1d5      	cbz	r5, 80041c0 <__d2b+0x98>
 800418a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800418e:	4405      	add	r5, r0
 8004190:	f8c9 5000 	str.w	r5, [r9]
 8004194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004198:	f8c8 0000 	str.w	r0, [r8]
 800419c:	4620      	mov	r0, r4
 800419e:	b003      	add	sp, #12
 80041a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a8:	e7d5      	b.n	8004156 <__d2b+0x2e>
 80041aa:	6161      	str	r1, [r4, #20]
 80041ac:	e7e5      	b.n	800417a <__d2b+0x52>
 80041ae:	a801      	add	r0, sp, #4
 80041b0:	f7ff fd5a 	bl	8003c68 <__lo0bits>
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	6163      	str	r3, [r4, #20]
 80041b8:	2201      	movs	r2, #1
 80041ba:	6122      	str	r2, [r4, #16]
 80041bc:	3020      	adds	r0, #32
 80041be:	e7e3      	b.n	8004188 <__d2b+0x60>
 80041c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80041c8:	f8c9 0000 	str.w	r0, [r9]
 80041cc:	6918      	ldr	r0, [r3, #16]
 80041ce:	f7ff fd2b 	bl	8003c28 <__hi0bits>
 80041d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80041d6:	e7df      	b.n	8004198 <__d2b+0x70>
 80041d8:	08005367 	.word	0x08005367
 80041dc:	08005378 	.word	0x08005378

080041e0 <_calloc_r>:
 80041e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041e2:	fba1 2402 	umull	r2, r4, r1, r2
 80041e6:	b94c      	cbnz	r4, 80041fc <_calloc_r+0x1c>
 80041e8:	4611      	mov	r1, r2
 80041ea:	9201      	str	r2, [sp, #4]
 80041ec:	f000 f87a 	bl	80042e4 <_malloc_r>
 80041f0:	9a01      	ldr	r2, [sp, #4]
 80041f2:	4605      	mov	r5, r0
 80041f4:	b930      	cbnz	r0, 8004204 <_calloc_r+0x24>
 80041f6:	4628      	mov	r0, r5
 80041f8:	b003      	add	sp, #12
 80041fa:	bd30      	pop	{r4, r5, pc}
 80041fc:	220c      	movs	r2, #12
 80041fe:	6002      	str	r2, [r0, #0]
 8004200:	2500      	movs	r5, #0
 8004202:	e7f8      	b.n	80041f6 <_calloc_r+0x16>
 8004204:	4621      	mov	r1, r4
 8004206:	f7fe f925 	bl	8002454 <memset>
 800420a:	e7f4      	b.n	80041f6 <_calloc_r+0x16>

0800420c <_free_r>:
 800420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800420e:	2900      	cmp	r1, #0
 8004210:	d044      	beq.n	800429c <_free_r+0x90>
 8004212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004216:	9001      	str	r0, [sp, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f1a1 0404 	sub.w	r4, r1, #4
 800421e:	bfb8      	it	lt
 8004220:	18e4      	addlt	r4, r4, r3
 8004222:	f000 fa9b 	bl	800475c <__malloc_lock>
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <_free_r+0x94>)
 8004228:	9801      	ldr	r0, [sp, #4]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x30>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	b003      	add	sp, #12
 8004234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004238:	f000 ba96 	b.w	8004768 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x46>
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	1961      	adds	r1, r4, r5
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x22>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x50>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x46>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1855      	adds	r5, r2, r1
 8004260:	42a5      	cmp	r5, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x70>
 8004264:	6824      	ldr	r4, [r4, #0]
 8004266:	4421      	add	r1, r4
 8004268:	1854      	adds	r4, r2, r1
 800426a:	42a3      	cmp	r3, r4
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x26>
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	4421      	add	r1, r4
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	e7da      	b.n	8004232 <_free_r+0x26>
 800427c:	d902      	bls.n	8004284 <_free_r+0x78>
 800427e:	230c      	movs	r3, #12
 8004280:	6003      	str	r3, [r0, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x26>
 8004284:	6825      	ldr	r5, [r4, #0]
 8004286:	1961      	adds	r1, r4, r5
 8004288:	428b      	cmp	r3, r1
 800428a:	bf04      	itt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1949      	addeq	r1, r1, r5
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6054      	str	r4, [r2, #4]
 800429a:	e7ca      	b.n	8004232 <_free_r+0x26>
 800429c:	b003      	add	sp, #12
 800429e:	bd30      	pop	{r4, r5, pc}
 80042a0:	20000340 	.word	0x20000340

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0e      	ldr	r6, [pc, #56]	; (80042e0 <sbrk_aligned+0x3c>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 f9e8 	bl	8004684 <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f9e3 	bl	8004684 <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d00a      	beq.n	80042d8 <sbrk_aligned+0x34>
 80042c2:	1cc4      	adds	r4, r0, #3
 80042c4:	f024 0403 	bic.w	r4, r4, #3
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d007      	beq.n	80042dc <sbrk_aligned+0x38>
 80042cc:	1a21      	subs	r1, r4, r0
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 f9d8 	bl	8004684 <_sbrk_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d101      	bne.n	80042dc <sbrk_aligned+0x38>
 80042d8:	f04f 34ff 	mov.w	r4, #4294967295
 80042dc:	4620      	mov	r0, r4
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	20000344 	.word	0x20000344

080042e4 <_malloc_r>:
 80042e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e8:	1ccd      	adds	r5, r1, #3
 80042ea:	f025 0503 	bic.w	r5, r5, #3
 80042ee:	3508      	adds	r5, #8
 80042f0:	2d0c      	cmp	r5, #12
 80042f2:	bf38      	it	cc
 80042f4:	250c      	movcc	r5, #12
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	4607      	mov	r7, r0
 80042fa:	db01      	blt.n	8004300 <_malloc_r+0x1c>
 80042fc:	42a9      	cmp	r1, r5
 80042fe:	d905      	bls.n	800430c <_malloc_r+0x28>
 8004300:	230c      	movs	r3, #12
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	2600      	movs	r6, #0
 8004306:	4630      	mov	r0, r6
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430c:	4e2e      	ldr	r6, [pc, #184]	; (80043c8 <_malloc_r+0xe4>)
 800430e:	f000 fa25 	bl	800475c <__malloc_lock>
 8004312:	6833      	ldr	r3, [r6, #0]
 8004314:	461c      	mov	r4, r3
 8004316:	bb34      	cbnz	r4, 8004366 <_malloc_r+0x82>
 8004318:	4629      	mov	r1, r5
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff ffc2 	bl	80042a4 <sbrk_aligned>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	4604      	mov	r4, r0
 8004324:	d14d      	bne.n	80043c2 <_malloc_r+0xde>
 8004326:	6834      	ldr	r4, [r6, #0]
 8004328:	4626      	mov	r6, r4
 800432a:	2e00      	cmp	r6, #0
 800432c:	d140      	bne.n	80043b0 <_malloc_r+0xcc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4631      	mov	r1, r6
 8004332:	4638      	mov	r0, r7
 8004334:	eb04 0803 	add.w	r8, r4, r3
 8004338:	f000 f9a4 	bl	8004684 <_sbrk_r>
 800433c:	4580      	cmp	r8, r0
 800433e:	d13a      	bne.n	80043b6 <_malloc_r+0xd2>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	3503      	adds	r5, #3
 8004344:	1a6d      	subs	r5, r5, r1
 8004346:	f025 0503 	bic.w	r5, r5, #3
 800434a:	3508      	adds	r5, #8
 800434c:	2d0c      	cmp	r5, #12
 800434e:	bf38      	it	cc
 8004350:	250c      	movcc	r5, #12
 8004352:	4629      	mov	r1, r5
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff ffa5 	bl	80042a4 <sbrk_aligned>
 800435a:	3001      	adds	r0, #1
 800435c:	d02b      	beq.n	80043b6 <_malloc_r+0xd2>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	442b      	add	r3, r5
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	e00e      	b.n	8004384 <_malloc_r+0xa0>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	1b52      	subs	r2, r2, r5
 800436a:	d41e      	bmi.n	80043aa <_malloc_r+0xc6>
 800436c:	2a0b      	cmp	r2, #11
 800436e:	d916      	bls.n	800439e <_malloc_r+0xba>
 8004370:	1961      	adds	r1, r4, r5
 8004372:	42a3      	cmp	r3, r4
 8004374:	6025      	str	r5, [r4, #0]
 8004376:	bf18      	it	ne
 8004378:	6059      	strne	r1, [r3, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	bf08      	it	eq
 800437e:	6031      	streq	r1, [r6, #0]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4638      	mov	r0, r7
 8004386:	f104 060b 	add.w	r6, r4, #11
 800438a:	f000 f9ed 	bl	8004768 <__malloc_unlock>
 800438e:	f026 0607 	bic.w	r6, r6, #7
 8004392:	1d23      	adds	r3, r4, #4
 8004394:	1af2      	subs	r2, r6, r3
 8004396:	d0b6      	beq.n	8004306 <_malloc_r+0x22>
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	50a3      	str	r3, [r4, r2]
 800439c:	e7b3      	b.n	8004306 <_malloc_r+0x22>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	bf0c      	ite	eq
 80043a4:	6032      	streq	r2, [r6, #0]
 80043a6:	605a      	strne	r2, [r3, #4]
 80043a8:	e7ec      	b.n	8004384 <_malloc_r+0xa0>
 80043aa:	4623      	mov	r3, r4
 80043ac:	6864      	ldr	r4, [r4, #4]
 80043ae:	e7b2      	b.n	8004316 <_malloc_r+0x32>
 80043b0:	4634      	mov	r4, r6
 80043b2:	6876      	ldr	r6, [r6, #4]
 80043b4:	e7b9      	b.n	800432a <_malloc_r+0x46>
 80043b6:	230c      	movs	r3, #12
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4638      	mov	r0, r7
 80043bc:	f000 f9d4 	bl	8004768 <__malloc_unlock>
 80043c0:	e7a1      	b.n	8004306 <_malloc_r+0x22>
 80043c2:	6025      	str	r5, [r4, #0]
 80043c4:	e7de      	b.n	8004384 <_malloc_r+0xa0>
 80043c6:	bf00      	nop
 80043c8:	20000340 	.word	0x20000340

080043cc <__ssputs_r>:
 80043cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	688e      	ldr	r6, [r1, #8]
 80043d2:	429e      	cmp	r6, r3
 80043d4:	4682      	mov	sl, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4690      	mov	r8, r2
 80043da:	461f      	mov	r7, r3
 80043dc:	d838      	bhi.n	8004450 <__ssputs_r+0x84>
 80043de:	898a      	ldrh	r2, [r1, #12]
 80043e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043e4:	d032      	beq.n	800444c <__ssputs_r+0x80>
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	6909      	ldr	r1, [r1, #16]
 80043ea:	eba5 0901 	sub.w	r9, r5, r1
 80043ee:	6965      	ldr	r5, [r4, #20]
 80043f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043f8:	3301      	adds	r3, #1
 80043fa:	444b      	add	r3, r9
 80043fc:	106d      	asrs	r5, r5, #1
 80043fe:	429d      	cmp	r5, r3
 8004400:	bf38      	it	cc
 8004402:	461d      	movcc	r5, r3
 8004404:	0553      	lsls	r3, r2, #21
 8004406:	d531      	bpl.n	800446c <__ssputs_r+0xa0>
 8004408:	4629      	mov	r1, r5
 800440a:	f7ff ff6b 	bl	80042e4 <_malloc_r>
 800440e:	4606      	mov	r6, r0
 8004410:	b950      	cbnz	r0, 8004428 <__ssputs_r+0x5c>
 8004412:	230c      	movs	r3, #12
 8004414:	f8ca 3000 	str.w	r3, [sl]
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004428:	6921      	ldr	r1, [r4, #16]
 800442a:	464a      	mov	r2, r9
 800442c:	f7ff fb46 	bl	8003abc <memcpy>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	6126      	str	r6, [r4, #16]
 800443e:	6165      	str	r5, [r4, #20]
 8004440:	444e      	add	r6, r9
 8004442:	eba5 0509 	sub.w	r5, r5, r9
 8004446:	6026      	str	r6, [r4, #0]
 8004448:	60a5      	str	r5, [r4, #8]
 800444a:	463e      	mov	r6, r7
 800444c:	42be      	cmp	r6, r7
 800444e:	d900      	bls.n	8004452 <__ssputs_r+0x86>
 8004450:	463e      	mov	r6, r7
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	4632      	mov	r2, r6
 8004456:	4641      	mov	r1, r8
 8004458:	f000 f966 	bl	8004728 <memmove>
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	1b9b      	subs	r3, r3, r6
 8004460:	60a3      	str	r3, [r4, #8]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	4433      	add	r3, r6
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	2000      	movs	r0, #0
 800446a:	e7db      	b.n	8004424 <__ssputs_r+0x58>
 800446c:	462a      	mov	r2, r5
 800446e:	f000 f981 	bl	8004774 <_realloc_r>
 8004472:	4606      	mov	r6, r0
 8004474:	2800      	cmp	r0, #0
 8004476:	d1e1      	bne.n	800443c <__ssputs_r+0x70>
 8004478:	6921      	ldr	r1, [r4, #16]
 800447a:	4650      	mov	r0, sl
 800447c:	f7ff fec6 	bl	800420c <_free_r>
 8004480:	e7c7      	b.n	8004412 <__ssputs_r+0x46>
	...

08004484 <_svfiprintf_r>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	4698      	mov	r8, r3
 800448a:	898b      	ldrh	r3, [r1, #12]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	b09d      	sub	sp, #116	; 0x74
 8004490:	4607      	mov	r7, r0
 8004492:	460d      	mov	r5, r1
 8004494:	4614      	mov	r4, r2
 8004496:	d50e      	bpl.n	80044b6 <_svfiprintf_r+0x32>
 8004498:	690b      	ldr	r3, [r1, #16]
 800449a:	b963      	cbnz	r3, 80044b6 <_svfiprintf_r+0x32>
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	f7ff ff21 	bl	80042e4 <_malloc_r>
 80044a2:	6028      	str	r0, [r5, #0]
 80044a4:	6128      	str	r0, [r5, #16]
 80044a6:	b920      	cbnz	r0, 80044b2 <_svfiprintf_r+0x2e>
 80044a8:	230c      	movs	r3, #12
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e0d1      	b.n	8004656 <_svfiprintf_r+0x1d2>
 80044b2:	2340      	movs	r3, #64	; 0x40
 80044b4:	616b      	str	r3, [r5, #20]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ba:	2320      	movs	r3, #32
 80044bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80044c4:	2330      	movs	r3, #48	; 0x30
 80044c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004670 <_svfiprintf_r+0x1ec>
 80044ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ce:	f04f 0901 	mov.w	r9, #1
 80044d2:	4623      	mov	r3, r4
 80044d4:	469a      	mov	sl, r3
 80044d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044da:	b10a      	cbz	r2, 80044e0 <_svfiprintf_r+0x5c>
 80044dc:	2a25      	cmp	r2, #37	; 0x25
 80044de:	d1f9      	bne.n	80044d4 <_svfiprintf_r+0x50>
 80044e0:	ebba 0b04 	subs.w	fp, sl, r4
 80044e4:	d00b      	beq.n	80044fe <_svfiprintf_r+0x7a>
 80044e6:	465b      	mov	r3, fp
 80044e8:	4622      	mov	r2, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff ff6d 	bl	80043cc <__ssputs_r>
 80044f2:	3001      	adds	r0, #1
 80044f4:	f000 80aa 	beq.w	800464c <_svfiprintf_r+0x1c8>
 80044f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fa:	445a      	add	r2, fp
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a2 	beq.w	800464c <_svfiprintf_r+0x1c8>
 8004508:	2300      	movs	r3, #0
 800450a:	f04f 32ff 	mov.w	r2, #4294967295
 800450e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004512:	f10a 0a01 	add.w	sl, sl, #1
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	9307      	str	r3, [sp, #28]
 800451a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800451e:	931a      	str	r3, [sp, #104]	; 0x68
 8004520:	4654      	mov	r4, sl
 8004522:	2205      	movs	r2, #5
 8004524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004528:	4851      	ldr	r0, [pc, #324]	; (8004670 <_svfiprintf_r+0x1ec>)
 800452a:	f7fb fe61 	bl	80001f0 <memchr>
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	b9d8      	cbnz	r0, 800456a <_svfiprintf_r+0xe6>
 8004532:	06d0      	lsls	r0, r2, #27
 8004534:	bf44      	itt	mi
 8004536:	2320      	movmi	r3, #32
 8004538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453c:	0711      	lsls	r1, r2, #28
 800453e:	bf44      	itt	mi
 8004540:	232b      	movmi	r3, #43	; 0x2b
 8004542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b2a      	cmp	r3, #42	; 0x2a
 800454c:	d015      	beq.n	800457a <_svfiprintf_r+0xf6>
 800454e:	9a07      	ldr	r2, [sp, #28]
 8004550:	4654      	mov	r4, sl
 8004552:	2000      	movs	r0, #0
 8004554:	f04f 0c0a 	mov.w	ip, #10
 8004558:	4621      	mov	r1, r4
 800455a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455e:	3b30      	subs	r3, #48	; 0x30
 8004560:	2b09      	cmp	r3, #9
 8004562:	d94e      	bls.n	8004602 <_svfiprintf_r+0x17e>
 8004564:	b1b0      	cbz	r0, 8004594 <_svfiprintf_r+0x110>
 8004566:	9207      	str	r2, [sp, #28]
 8004568:	e014      	b.n	8004594 <_svfiprintf_r+0x110>
 800456a:	eba0 0308 	sub.w	r3, r0, r8
 800456e:	fa09 f303 	lsl.w	r3, r9, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	9304      	str	r3, [sp, #16]
 8004576:	46a2      	mov	sl, r4
 8004578:	e7d2      	b.n	8004520 <_svfiprintf_r+0x9c>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	9103      	str	r1, [sp, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfbb      	ittet	lt
 8004586:	425b      	neglt	r3, r3
 8004588:	f042 0202 	orrlt.w	r2, r2, #2
 800458c:	9307      	strge	r3, [sp, #28]
 800458e:	9307      	strlt	r3, [sp, #28]
 8004590:	bfb8      	it	lt
 8004592:	9204      	strlt	r2, [sp, #16]
 8004594:	7823      	ldrb	r3, [r4, #0]
 8004596:	2b2e      	cmp	r3, #46	; 0x2e
 8004598:	d10c      	bne.n	80045b4 <_svfiprintf_r+0x130>
 800459a:	7863      	ldrb	r3, [r4, #1]
 800459c:	2b2a      	cmp	r3, #42	; 0x2a
 800459e:	d135      	bne.n	800460c <_svfiprintf_r+0x188>
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	9203      	str	r2, [sp, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bfb8      	it	lt
 80045ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80045b0:	3402      	adds	r4, #2
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004680 <_svfiprintf_r+0x1fc>
 80045b8:	7821      	ldrb	r1, [r4, #0]
 80045ba:	2203      	movs	r2, #3
 80045bc:	4650      	mov	r0, sl
 80045be:	f7fb fe17 	bl	80001f0 <memchr>
 80045c2:	b140      	cbz	r0, 80045d6 <_svfiprintf_r+0x152>
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	eba0 000a 	sub.w	r0, r0, sl
 80045ca:	fa03 f000 	lsl.w	r0, r3, r0
 80045ce:	9b04      	ldr	r3, [sp, #16]
 80045d0:	4303      	orrs	r3, r0
 80045d2:	3401      	adds	r4, #1
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045da:	4826      	ldr	r0, [pc, #152]	; (8004674 <_svfiprintf_r+0x1f0>)
 80045dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045e0:	2206      	movs	r2, #6
 80045e2:	f7fb fe05 	bl	80001f0 <memchr>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d038      	beq.n	800465c <_svfiprintf_r+0x1d8>
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <_svfiprintf_r+0x1f4>)
 80045ec:	bb1b      	cbnz	r3, 8004636 <_svfiprintf_r+0x1b2>
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	3307      	adds	r3, #7
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	3308      	adds	r3, #8
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fc:	4433      	add	r3, r6
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	e767      	b.n	80044d2 <_svfiprintf_r+0x4e>
 8004602:	fb0c 3202 	mla	r2, ip, r2, r3
 8004606:	460c      	mov	r4, r1
 8004608:	2001      	movs	r0, #1
 800460a:	e7a5      	b.n	8004558 <_svfiprintf_r+0xd4>
 800460c:	2300      	movs	r3, #0
 800460e:	3401      	adds	r4, #1
 8004610:	9305      	str	r3, [sp, #20]
 8004612:	4619      	mov	r1, r3
 8004614:	f04f 0c0a 	mov.w	ip, #10
 8004618:	4620      	mov	r0, r4
 800461a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461e:	3a30      	subs	r2, #48	; 0x30
 8004620:	2a09      	cmp	r2, #9
 8004622:	d903      	bls.n	800462c <_svfiprintf_r+0x1a8>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0c5      	beq.n	80045b4 <_svfiprintf_r+0x130>
 8004628:	9105      	str	r1, [sp, #20]
 800462a:	e7c3      	b.n	80045b4 <_svfiprintf_r+0x130>
 800462c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004630:	4604      	mov	r4, r0
 8004632:	2301      	movs	r3, #1
 8004634:	e7f0      	b.n	8004618 <_svfiprintf_r+0x194>
 8004636:	ab03      	add	r3, sp, #12
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	462a      	mov	r2, r5
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <_svfiprintf_r+0x1f8>)
 800463e:	a904      	add	r1, sp, #16
 8004640:	4638      	mov	r0, r7
 8004642:	f7fd ffaf 	bl	80025a4 <_printf_float>
 8004646:	1c42      	adds	r2, r0, #1
 8004648:	4606      	mov	r6, r0
 800464a:	d1d6      	bne.n	80045fa <_svfiprintf_r+0x176>
 800464c:	89ab      	ldrh	r3, [r5, #12]
 800464e:	065b      	lsls	r3, r3, #25
 8004650:	f53f af2c 	bmi.w	80044ac <_svfiprintf_r+0x28>
 8004654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004656:	b01d      	add	sp, #116	; 0x74
 8004658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465c:	ab03      	add	r3, sp, #12
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	462a      	mov	r2, r5
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <_svfiprintf_r+0x1f8>)
 8004664:	a904      	add	r1, sp, #16
 8004666:	4638      	mov	r0, r7
 8004668:	f7fe fa40 	bl	8002aec <_printf_i>
 800466c:	e7eb      	b.n	8004646 <_svfiprintf_r+0x1c2>
 800466e:	bf00      	nop
 8004670:	080054d4 	.word	0x080054d4
 8004674:	080054de 	.word	0x080054de
 8004678:	080025a5 	.word	0x080025a5
 800467c:	080043cd 	.word	0x080043cd
 8004680:	080054da 	.word	0x080054da

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_sbrk_r+0x1c>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7fc fd98 	bl	80011c4 <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000348 	.word	0x20000348

080046a4 <__assert_func>:
 80046a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046a6:	4614      	mov	r4, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <__assert_func+0x2c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4605      	mov	r5, r0
 80046b0:	68d8      	ldr	r0, [r3, #12]
 80046b2:	b14c      	cbz	r4, 80046c8 <__assert_func+0x24>
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <__assert_func+0x30>)
 80046b6:	9100      	str	r1, [sp, #0]
 80046b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046bc:	4906      	ldr	r1, [pc, #24]	; (80046d8 <__assert_func+0x34>)
 80046be:	462b      	mov	r3, r5
 80046c0:	f000 f80e 	bl	80046e0 <fiprintf>
 80046c4:	f000 faac 	bl	8004c20 <abort>
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <__assert_func+0x38>)
 80046ca:	461c      	mov	r4, r3
 80046cc:	e7f3      	b.n	80046b6 <__assert_func+0x12>
 80046ce:	bf00      	nop
 80046d0:	2000004c 	.word	0x2000004c
 80046d4:	080054e5 	.word	0x080054e5
 80046d8:	080054f2 	.word	0x080054f2
 80046dc:	08005520 	.word	0x08005520

080046e0 <fiprintf>:
 80046e0:	b40e      	push	{r1, r2, r3}
 80046e2:	b503      	push	{r0, r1, lr}
 80046e4:	4601      	mov	r1, r0
 80046e6:	ab03      	add	r3, sp, #12
 80046e8:	4805      	ldr	r0, [pc, #20]	; (8004700 <fiprintf+0x20>)
 80046ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ee:	6800      	ldr	r0, [r0, #0]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	f000 f897 	bl	8004824 <_vfiprintf_r>
 80046f6:	b002      	add	sp, #8
 80046f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046fc:	b003      	add	sp, #12
 80046fe:	4770      	bx	lr
 8004700:	2000004c 	.word	0x2000004c

08004704 <__ascii_mbtowc>:
 8004704:	b082      	sub	sp, #8
 8004706:	b901      	cbnz	r1, 800470a <__ascii_mbtowc+0x6>
 8004708:	a901      	add	r1, sp, #4
 800470a:	b142      	cbz	r2, 800471e <__ascii_mbtowc+0x1a>
 800470c:	b14b      	cbz	r3, 8004722 <__ascii_mbtowc+0x1e>
 800470e:	7813      	ldrb	r3, [r2, #0]
 8004710:	600b      	str	r3, [r1, #0]
 8004712:	7812      	ldrb	r2, [r2, #0]
 8004714:	1e10      	subs	r0, r2, #0
 8004716:	bf18      	it	ne
 8004718:	2001      	movne	r0, #1
 800471a:	b002      	add	sp, #8
 800471c:	4770      	bx	lr
 800471e:	4610      	mov	r0, r2
 8004720:	e7fb      	b.n	800471a <__ascii_mbtowc+0x16>
 8004722:	f06f 0001 	mvn.w	r0, #1
 8004726:	e7f8      	b.n	800471a <__ascii_mbtowc+0x16>

08004728 <memmove>:
 8004728:	4288      	cmp	r0, r1
 800472a:	b510      	push	{r4, lr}
 800472c:	eb01 0402 	add.w	r4, r1, r2
 8004730:	d902      	bls.n	8004738 <memmove+0x10>
 8004732:	4284      	cmp	r4, r0
 8004734:	4623      	mov	r3, r4
 8004736:	d807      	bhi.n	8004748 <memmove+0x20>
 8004738:	1e43      	subs	r3, r0, #1
 800473a:	42a1      	cmp	r1, r4
 800473c:	d008      	beq.n	8004750 <memmove+0x28>
 800473e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004746:	e7f8      	b.n	800473a <memmove+0x12>
 8004748:	4402      	add	r2, r0
 800474a:	4601      	mov	r1, r0
 800474c:	428a      	cmp	r2, r1
 800474e:	d100      	bne.n	8004752 <memmove+0x2a>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800475a:	e7f7      	b.n	800474c <memmove+0x24>

0800475c <__malloc_lock>:
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <__malloc_lock+0x8>)
 800475e:	f000 bc1f 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8004762:	bf00      	nop
 8004764:	2000034c 	.word	0x2000034c

08004768 <__malloc_unlock>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__malloc_unlock+0x8>)
 800476a:	f000 bc1a 	b.w	8004fa2 <__retarget_lock_release_recursive>
 800476e:	bf00      	nop
 8004770:	2000034c 	.word	0x2000034c

08004774 <_realloc_r>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	4680      	mov	r8, r0
 800477a:	4614      	mov	r4, r2
 800477c:	460e      	mov	r6, r1
 800477e:	b921      	cbnz	r1, 800478a <_realloc_r+0x16>
 8004780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004784:	4611      	mov	r1, r2
 8004786:	f7ff bdad 	b.w	80042e4 <_malloc_r>
 800478a:	b92a      	cbnz	r2, 8004798 <_realloc_r+0x24>
 800478c:	f7ff fd3e 	bl	800420c <_free_r>
 8004790:	4625      	mov	r5, r4
 8004792:	4628      	mov	r0, r5
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	f000 fc6a 	bl	8005070 <_malloc_usable_size_r>
 800479c:	4284      	cmp	r4, r0
 800479e:	4607      	mov	r7, r0
 80047a0:	d802      	bhi.n	80047a8 <_realloc_r+0x34>
 80047a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047a6:	d812      	bhi.n	80047ce <_realloc_r+0x5a>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff fd9a 	bl	80042e4 <_malloc_r>
 80047b0:	4605      	mov	r5, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0ed      	beq.n	8004792 <_realloc_r+0x1e>
 80047b6:	42bc      	cmp	r4, r7
 80047b8:	4622      	mov	r2, r4
 80047ba:	4631      	mov	r1, r6
 80047bc:	bf28      	it	cs
 80047be:	463a      	movcs	r2, r7
 80047c0:	f7ff f97c 	bl	8003abc <memcpy>
 80047c4:	4631      	mov	r1, r6
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7ff fd20 	bl	800420c <_free_r>
 80047cc:	e7e1      	b.n	8004792 <_realloc_r+0x1e>
 80047ce:	4635      	mov	r5, r6
 80047d0:	e7df      	b.n	8004792 <_realloc_r+0x1e>

080047d2 <__sfputc_r>:
 80047d2:	6893      	ldr	r3, [r2, #8]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	b410      	push	{r4}
 80047da:	6093      	str	r3, [r2, #8]
 80047dc:	da08      	bge.n	80047f0 <__sfputc_r+0x1e>
 80047de:	6994      	ldr	r4, [r2, #24]
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	db01      	blt.n	80047e8 <__sfputc_r+0x16>
 80047e4:	290a      	cmp	r1, #10
 80047e6:	d103      	bne.n	80047f0 <__sfputc_r+0x1e>
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ec:	f000 b94a 	b.w	8004a84 <__swbuf_r>
 80047f0:	6813      	ldr	r3, [r2, #0]
 80047f2:	1c58      	adds	r0, r3, #1
 80047f4:	6010      	str	r0, [r2, #0]
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	4608      	mov	r0, r1
 80047fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <__sfputs_r>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	4606      	mov	r6, r0
 8004804:	460f      	mov	r7, r1
 8004806:	4614      	mov	r4, r2
 8004808:	18d5      	adds	r5, r2, r3
 800480a:	42ac      	cmp	r4, r5
 800480c:	d101      	bne.n	8004812 <__sfputs_r+0x12>
 800480e:	2000      	movs	r0, #0
 8004810:	e007      	b.n	8004822 <__sfputs_r+0x22>
 8004812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004816:	463a      	mov	r2, r7
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffda 	bl	80047d2 <__sfputc_r>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	d1f3      	bne.n	800480a <__sfputs_r+0xa>
 8004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004824 <_vfiprintf_r>:
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	460d      	mov	r5, r1
 800482a:	b09d      	sub	sp, #116	; 0x74
 800482c:	4614      	mov	r4, r2
 800482e:	4698      	mov	r8, r3
 8004830:	4606      	mov	r6, r0
 8004832:	b118      	cbz	r0, 800483c <_vfiprintf_r+0x18>
 8004834:	6983      	ldr	r3, [r0, #24]
 8004836:	b90b      	cbnz	r3, 800483c <_vfiprintf_r+0x18>
 8004838:	f000 fb14 	bl	8004e64 <__sinit>
 800483c:	4b89      	ldr	r3, [pc, #548]	; (8004a64 <_vfiprintf_r+0x240>)
 800483e:	429d      	cmp	r5, r3
 8004840:	d11b      	bne.n	800487a <_vfiprintf_r+0x56>
 8004842:	6875      	ldr	r5, [r6, #4]
 8004844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004846:	07d9      	lsls	r1, r3, #31
 8004848:	d405      	bmi.n	8004856 <_vfiprintf_r+0x32>
 800484a:	89ab      	ldrh	r3, [r5, #12]
 800484c:	059a      	lsls	r2, r3, #22
 800484e:	d402      	bmi.n	8004856 <_vfiprintf_r+0x32>
 8004850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004852:	f000 fba5 	bl	8004fa0 <__retarget_lock_acquire_recursive>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	d501      	bpl.n	8004860 <_vfiprintf_r+0x3c>
 800485c:	692b      	ldr	r3, [r5, #16]
 800485e:	b9eb      	cbnz	r3, 800489c <_vfiprintf_r+0x78>
 8004860:	4629      	mov	r1, r5
 8004862:	4630      	mov	r0, r6
 8004864:	f000 f96e 	bl	8004b44 <__swsetup_r>
 8004868:	b1c0      	cbz	r0, 800489c <_vfiprintf_r+0x78>
 800486a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800486c:	07dc      	lsls	r4, r3, #31
 800486e:	d50e      	bpl.n	800488e <_vfiprintf_r+0x6a>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	b01d      	add	sp, #116	; 0x74
 8004876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487a:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <_vfiprintf_r+0x244>)
 800487c:	429d      	cmp	r5, r3
 800487e:	d101      	bne.n	8004884 <_vfiprintf_r+0x60>
 8004880:	68b5      	ldr	r5, [r6, #8]
 8004882:	e7df      	b.n	8004844 <_vfiprintf_r+0x20>
 8004884:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <_vfiprintf_r+0x248>)
 8004886:	429d      	cmp	r5, r3
 8004888:	bf08      	it	eq
 800488a:	68f5      	ldreq	r5, [r6, #12]
 800488c:	e7da      	b.n	8004844 <_vfiprintf_r+0x20>
 800488e:	89ab      	ldrh	r3, [r5, #12]
 8004890:	0598      	lsls	r0, r3, #22
 8004892:	d4ed      	bmi.n	8004870 <_vfiprintf_r+0x4c>
 8004894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004896:	f000 fb84 	bl	8004fa2 <__retarget_lock_release_recursive>
 800489a:	e7e9      	b.n	8004870 <_vfiprintf_r+0x4c>
 800489c:	2300      	movs	r3, #0
 800489e:	9309      	str	r3, [sp, #36]	; 0x24
 80048a0:	2320      	movs	r3, #32
 80048a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048aa:	2330      	movs	r3, #48	; 0x30
 80048ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a70 <_vfiprintf_r+0x24c>
 80048b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b4:	f04f 0901 	mov.w	r9, #1
 80048b8:	4623      	mov	r3, r4
 80048ba:	469a      	mov	sl, r3
 80048bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c0:	b10a      	cbz	r2, 80048c6 <_vfiprintf_r+0xa2>
 80048c2:	2a25      	cmp	r2, #37	; 0x25
 80048c4:	d1f9      	bne.n	80048ba <_vfiprintf_r+0x96>
 80048c6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ca:	d00b      	beq.n	80048e4 <_vfiprintf_r+0xc0>
 80048cc:	465b      	mov	r3, fp
 80048ce:	4622      	mov	r2, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7ff ff94 	bl	8004800 <__sfputs_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	f000 80aa 	beq.w	8004a32 <_vfiprintf_r+0x20e>
 80048de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e0:	445a      	add	r2, fp
 80048e2:	9209      	str	r2, [sp, #36]	; 0x24
 80048e4:	f89a 3000 	ldrb.w	r3, [sl]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a2 	beq.w	8004a32 <_vfiprintf_r+0x20e>
 80048ee:	2300      	movs	r3, #0
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295
 80048f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f8:	f10a 0a01 	add.w	sl, sl, #1
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	9307      	str	r3, [sp, #28]
 8004900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004904:	931a      	str	r3, [sp, #104]	; 0x68
 8004906:	4654      	mov	r4, sl
 8004908:	2205      	movs	r2, #5
 800490a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490e:	4858      	ldr	r0, [pc, #352]	; (8004a70 <_vfiprintf_r+0x24c>)
 8004910:	f7fb fc6e 	bl	80001f0 <memchr>
 8004914:	9a04      	ldr	r2, [sp, #16]
 8004916:	b9d8      	cbnz	r0, 8004950 <_vfiprintf_r+0x12c>
 8004918:	06d1      	lsls	r1, r2, #27
 800491a:	bf44      	itt	mi
 800491c:	2320      	movmi	r3, #32
 800491e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004922:	0713      	lsls	r3, r2, #28
 8004924:	bf44      	itt	mi
 8004926:	232b      	movmi	r3, #43	; 0x2b
 8004928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492c:	f89a 3000 	ldrb.w	r3, [sl]
 8004930:	2b2a      	cmp	r3, #42	; 0x2a
 8004932:	d015      	beq.n	8004960 <_vfiprintf_r+0x13c>
 8004934:	9a07      	ldr	r2, [sp, #28]
 8004936:	4654      	mov	r4, sl
 8004938:	2000      	movs	r0, #0
 800493a:	f04f 0c0a 	mov.w	ip, #10
 800493e:	4621      	mov	r1, r4
 8004940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004944:	3b30      	subs	r3, #48	; 0x30
 8004946:	2b09      	cmp	r3, #9
 8004948:	d94e      	bls.n	80049e8 <_vfiprintf_r+0x1c4>
 800494a:	b1b0      	cbz	r0, 800497a <_vfiprintf_r+0x156>
 800494c:	9207      	str	r2, [sp, #28]
 800494e:	e014      	b.n	800497a <_vfiprintf_r+0x156>
 8004950:	eba0 0308 	sub.w	r3, r0, r8
 8004954:	fa09 f303 	lsl.w	r3, r9, r3
 8004958:	4313      	orrs	r3, r2
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	46a2      	mov	sl, r4
 800495e:	e7d2      	b.n	8004906 <_vfiprintf_r+0xe2>
 8004960:	9b03      	ldr	r3, [sp, #12]
 8004962:	1d19      	adds	r1, r3, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	9103      	str	r1, [sp, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfbb      	ittet	lt
 800496c:	425b      	neglt	r3, r3
 800496e:	f042 0202 	orrlt.w	r2, r2, #2
 8004972:	9307      	strge	r3, [sp, #28]
 8004974:	9307      	strlt	r3, [sp, #28]
 8004976:	bfb8      	it	lt
 8004978:	9204      	strlt	r2, [sp, #16]
 800497a:	7823      	ldrb	r3, [r4, #0]
 800497c:	2b2e      	cmp	r3, #46	; 0x2e
 800497e:	d10c      	bne.n	800499a <_vfiprintf_r+0x176>
 8004980:	7863      	ldrb	r3, [r4, #1]
 8004982:	2b2a      	cmp	r3, #42	; 0x2a
 8004984:	d135      	bne.n	80049f2 <_vfiprintf_r+0x1ce>
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	9203      	str	r2, [sp, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfb8      	it	lt
 8004992:	f04f 33ff 	movlt.w	r3, #4294967295
 8004996:	3402      	adds	r4, #2
 8004998:	9305      	str	r3, [sp, #20]
 800499a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a80 <_vfiprintf_r+0x25c>
 800499e:	7821      	ldrb	r1, [r4, #0]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4650      	mov	r0, sl
 80049a4:	f7fb fc24 	bl	80001f0 <memchr>
 80049a8:	b140      	cbz	r0, 80049bc <_vfiprintf_r+0x198>
 80049aa:	2340      	movs	r3, #64	; 0x40
 80049ac:	eba0 000a 	sub.w	r0, r0, sl
 80049b0:	fa03 f000 	lsl.w	r0, r3, r0
 80049b4:	9b04      	ldr	r3, [sp, #16]
 80049b6:	4303      	orrs	r3, r0
 80049b8:	3401      	adds	r4, #1
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c0:	482c      	ldr	r0, [pc, #176]	; (8004a74 <_vfiprintf_r+0x250>)
 80049c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c6:	2206      	movs	r2, #6
 80049c8:	f7fb fc12 	bl	80001f0 <memchr>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d03f      	beq.n	8004a50 <_vfiprintf_r+0x22c>
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <_vfiprintf_r+0x254>)
 80049d2:	bb1b      	cbnz	r3, 8004a1c <_vfiprintf_r+0x1f8>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3307      	adds	r3, #7
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	3308      	adds	r3, #8
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	443b      	add	r3, r7
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	e767      	b.n	80048b8 <_vfiprintf_r+0x94>
 80049e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ec:	460c      	mov	r4, r1
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7a5      	b.n	800493e <_vfiprintf_r+0x11a>
 80049f2:	2300      	movs	r3, #0
 80049f4:	3401      	adds	r4, #1
 80049f6:	9305      	str	r3, [sp, #20]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f04f 0c0a 	mov.w	ip, #10
 80049fe:	4620      	mov	r0, r4
 8004a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a04:	3a30      	subs	r2, #48	; 0x30
 8004a06:	2a09      	cmp	r2, #9
 8004a08:	d903      	bls.n	8004a12 <_vfiprintf_r+0x1ee>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c5      	beq.n	800499a <_vfiprintf_r+0x176>
 8004a0e:	9105      	str	r1, [sp, #20]
 8004a10:	e7c3      	b.n	800499a <_vfiprintf_r+0x176>
 8004a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a16:	4604      	mov	r4, r0
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e7f0      	b.n	80049fe <_vfiprintf_r+0x1da>
 8004a1c:	ab03      	add	r3, sp, #12
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	462a      	mov	r2, r5
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <_vfiprintf_r+0x258>)
 8004a24:	a904      	add	r1, sp, #16
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7fd fdbc 	bl	80025a4 <_printf_float>
 8004a2c:	4607      	mov	r7, r0
 8004a2e:	1c78      	adds	r0, r7, #1
 8004a30:	d1d6      	bne.n	80049e0 <_vfiprintf_r+0x1bc>
 8004a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a34:	07d9      	lsls	r1, r3, #31
 8004a36:	d405      	bmi.n	8004a44 <_vfiprintf_r+0x220>
 8004a38:	89ab      	ldrh	r3, [r5, #12]
 8004a3a:	059a      	lsls	r2, r3, #22
 8004a3c:	d402      	bmi.n	8004a44 <_vfiprintf_r+0x220>
 8004a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a40:	f000 faaf 	bl	8004fa2 <__retarget_lock_release_recursive>
 8004a44:	89ab      	ldrh	r3, [r5, #12]
 8004a46:	065b      	lsls	r3, r3, #25
 8004a48:	f53f af12 	bmi.w	8004870 <_vfiprintf_r+0x4c>
 8004a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a4e:	e711      	b.n	8004874 <_vfiprintf_r+0x50>
 8004a50:	ab03      	add	r3, sp, #12
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	462a      	mov	r2, r5
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <_vfiprintf_r+0x258>)
 8004a58:	a904      	add	r1, sp, #16
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7fe f846 	bl	8002aec <_printf_i>
 8004a60:	e7e4      	b.n	8004a2c <_vfiprintf_r+0x208>
 8004a62:	bf00      	nop
 8004a64:	0800564c 	.word	0x0800564c
 8004a68:	0800566c 	.word	0x0800566c
 8004a6c:	0800562c 	.word	0x0800562c
 8004a70:	080054d4 	.word	0x080054d4
 8004a74:	080054de 	.word	0x080054de
 8004a78:	080025a5 	.word	0x080025a5
 8004a7c:	08004801 	.word	0x08004801
 8004a80:	080054da 	.word	0x080054da

08004a84 <__swbuf_r>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	460e      	mov	r6, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	b118      	cbz	r0, 8004a96 <__swbuf_r+0x12>
 8004a8e:	6983      	ldr	r3, [r0, #24]
 8004a90:	b90b      	cbnz	r3, 8004a96 <__swbuf_r+0x12>
 8004a92:	f000 f9e7 	bl	8004e64 <__sinit>
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <__swbuf_r+0x98>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d12b      	bne.n	8004af4 <__swbuf_r+0x70>
 8004a9c:	686c      	ldr	r4, [r5, #4]
 8004a9e:	69a3      	ldr	r3, [r4, #24]
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	d52f      	bpl.n	8004b08 <__swbuf_r+0x84>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b36b      	cbz	r3, 8004b08 <__swbuf_r+0x84>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	1ac0      	subs	r0, r0, r3
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	b2f6      	uxtb	r6, r6
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	4637      	mov	r7, r6
 8004aba:	dc04      	bgt.n	8004ac6 <__swbuf_r+0x42>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f93c 	bl	8004d3c <_fflush_r>
 8004ac4:	bb30      	cbnz	r0, 8004b14 <__swbuf_r+0x90>
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	701e      	strb	r6, [r3, #0]
 8004ad4:	6963      	ldr	r3, [r4, #20]
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	4283      	cmp	r3, r0
 8004ada:	d004      	beq.n	8004ae6 <__swbuf_r+0x62>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d506      	bpl.n	8004af0 <__swbuf_r+0x6c>
 8004ae2:	2e0a      	cmp	r6, #10
 8004ae4:	d104      	bne.n	8004af0 <__swbuf_r+0x6c>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 f927 	bl	8004d3c <_fflush_r>
 8004aee:	b988      	cbnz	r0, 8004b14 <__swbuf_r+0x90>
 8004af0:	4638      	mov	r0, r7
 8004af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <__swbuf_r+0x9c>)
 8004af6:	429c      	cmp	r4, r3
 8004af8:	d101      	bne.n	8004afe <__swbuf_r+0x7a>
 8004afa:	68ac      	ldr	r4, [r5, #8]
 8004afc:	e7cf      	b.n	8004a9e <__swbuf_r+0x1a>
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <__swbuf_r+0xa0>)
 8004b00:	429c      	cmp	r4, r3
 8004b02:	bf08      	it	eq
 8004b04:	68ec      	ldreq	r4, [r5, #12]
 8004b06:	e7ca      	b.n	8004a9e <__swbuf_r+0x1a>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f81a 	bl	8004b44 <__swsetup_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d0cb      	beq.n	8004aac <__swbuf_r+0x28>
 8004b14:	f04f 37ff 	mov.w	r7, #4294967295
 8004b18:	e7ea      	b.n	8004af0 <__swbuf_r+0x6c>
 8004b1a:	bf00      	nop
 8004b1c:	0800564c 	.word	0x0800564c
 8004b20:	0800566c 	.word	0x0800566c
 8004b24:	0800562c 	.word	0x0800562c

08004b28 <__ascii_wctomb>:
 8004b28:	b149      	cbz	r1, 8004b3e <__ascii_wctomb+0x16>
 8004b2a:	2aff      	cmp	r2, #255	; 0xff
 8004b2c:	bf85      	ittet	hi
 8004b2e:	238a      	movhi	r3, #138	; 0x8a
 8004b30:	6003      	strhi	r3, [r0, #0]
 8004b32:	700a      	strbls	r2, [r1, #0]
 8004b34:	f04f 30ff 	movhi.w	r0, #4294967295
 8004b38:	bf98      	it	ls
 8004b3a:	2001      	movls	r0, #1
 8004b3c:	4770      	bx	lr
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4770      	bx	lr
	...

08004b44 <__swsetup_r>:
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <__swsetup_r+0xcc>)
 8004b46:	b570      	push	{r4, r5, r6, lr}
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	b125      	cbz	r5, 8004b5a <__swsetup_r+0x16>
 8004b50:	69ab      	ldr	r3, [r5, #24]
 8004b52:	b913      	cbnz	r3, 8004b5a <__swsetup_r+0x16>
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 f985 	bl	8004e64 <__sinit>
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <__swsetup_r+0xd0>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	d10f      	bne.n	8004b80 <__swsetup_r+0x3c>
 8004b60:	686c      	ldr	r4, [r5, #4]
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b68:	0719      	lsls	r1, r3, #28
 8004b6a:	d42c      	bmi.n	8004bc6 <__swsetup_r+0x82>
 8004b6c:	06dd      	lsls	r5, r3, #27
 8004b6e:	d411      	bmi.n	8004b94 <__swsetup_r+0x50>
 8004b70:	2309      	movs	r3, #9
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	e03e      	b.n	8004bfe <__swsetup_r+0xba>
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <__swsetup_r+0xd4>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d101      	bne.n	8004b8a <__swsetup_r+0x46>
 8004b86:	68ac      	ldr	r4, [r5, #8]
 8004b88:	e7eb      	b.n	8004b62 <__swsetup_r+0x1e>
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <__swsetup_r+0xd8>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	bf08      	it	eq
 8004b90:	68ec      	ldreq	r4, [r5, #12]
 8004b92:	e7e6      	b.n	8004b62 <__swsetup_r+0x1e>
 8004b94:	0758      	lsls	r0, r3, #29
 8004b96:	d512      	bpl.n	8004bbe <__swsetup_r+0x7a>
 8004b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9a:	b141      	cbz	r1, 8004bae <__swsetup_r+0x6a>
 8004b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	d002      	beq.n	8004baa <__swsetup_r+0x66>
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff fb31 	bl	800420c <_free_r>
 8004baa:	2300      	movs	r3, #0
 8004bac:	6363      	str	r3, [r4, #52]	; 0x34
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6063      	str	r3, [r4, #4]
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f043 0308 	orr.w	r3, r3, #8
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	b94b      	cbnz	r3, 8004bde <__swsetup_r+0x9a>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d003      	beq.n	8004bde <__swsetup_r+0x9a>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 fa09 	bl	8004ff0 <__smakebuf_r>
 8004bde:	89a0      	ldrh	r0, [r4, #12]
 8004be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be4:	f010 0301 	ands.w	r3, r0, #1
 8004be8:	d00a      	beq.n	8004c00 <__swsetup_r+0xbc>
 8004bea:	2300      	movs	r3, #0
 8004bec:	60a3      	str	r3, [r4, #8]
 8004bee:	6963      	ldr	r3, [r4, #20]
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	61a3      	str	r3, [r4, #24]
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	b943      	cbnz	r3, 8004c0a <__swsetup_r+0xc6>
 8004bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bfc:	d1ba      	bne.n	8004b74 <__swsetup_r+0x30>
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
 8004c00:	0781      	lsls	r1, r0, #30
 8004c02:	bf58      	it	pl
 8004c04:	6963      	ldrpl	r3, [r4, #20]
 8004c06:	60a3      	str	r3, [r4, #8]
 8004c08:	e7f4      	b.n	8004bf4 <__swsetup_r+0xb0>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e7f7      	b.n	8004bfe <__swsetup_r+0xba>
 8004c0e:	bf00      	nop
 8004c10:	2000004c 	.word	0x2000004c
 8004c14:	0800564c 	.word	0x0800564c
 8004c18:	0800566c 	.word	0x0800566c
 8004c1c:	0800562c 	.word	0x0800562c

08004c20 <abort>:
 8004c20:	b508      	push	{r3, lr}
 8004c22:	2006      	movs	r0, #6
 8004c24:	f000 fa54 	bl	80050d0 <raise>
 8004c28:	2001      	movs	r0, #1
 8004c2a:	f7fc fa53 	bl	80010d4 <_exit>
	...

08004c30 <__sflush_r>:
 8004c30:	898a      	ldrh	r2, [r1, #12]
 8004c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c36:	4605      	mov	r5, r0
 8004c38:	0710      	lsls	r0, r2, #28
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	d458      	bmi.n	8004cf0 <__sflush_r+0xc0>
 8004c3e:	684b      	ldr	r3, [r1, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dc05      	bgt.n	8004c50 <__sflush_r+0x20>
 8004c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	dc02      	bgt.n	8004c50 <__sflush_r+0x20>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c52:	2e00      	cmp	r6, #0
 8004c54:	d0f9      	beq.n	8004c4a <__sflush_r+0x1a>
 8004c56:	2300      	movs	r3, #0
 8004c58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c5c:	682f      	ldr	r7, [r5, #0]
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	d032      	beq.n	8004cc8 <__sflush_r+0x98>
 8004c62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	075a      	lsls	r2, r3, #29
 8004c68:	d505      	bpl.n	8004c76 <__sflush_r+0x46>
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	1ac0      	subs	r0, r0, r3
 8004c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c70:	b10b      	cbz	r3, 8004c76 <__sflush_r+0x46>
 8004c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c74:	1ac0      	subs	r0, r0, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7c:	6a21      	ldr	r1, [r4, #32]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b0      	blx	r6
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	d106      	bne.n	8004c96 <__sflush_r+0x66>
 8004c88:	6829      	ldr	r1, [r5, #0]
 8004c8a:	291d      	cmp	r1, #29
 8004c8c:	d82c      	bhi.n	8004ce8 <__sflush_r+0xb8>
 8004c8e:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <__sflush_r+0x108>)
 8004c90:	40ca      	lsrs	r2, r1
 8004c92:	07d6      	lsls	r6, r2, #31
 8004c94:	d528      	bpl.n	8004ce8 <__sflush_r+0xb8>
 8004c96:	2200      	movs	r2, #0
 8004c98:	6062      	str	r2, [r4, #4]
 8004c9a:	04d9      	lsls	r1, r3, #19
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	6022      	str	r2, [r4, #0]
 8004ca0:	d504      	bpl.n	8004cac <__sflush_r+0x7c>
 8004ca2:	1c42      	adds	r2, r0, #1
 8004ca4:	d101      	bne.n	8004caa <__sflush_r+0x7a>
 8004ca6:	682b      	ldr	r3, [r5, #0]
 8004ca8:	b903      	cbnz	r3, 8004cac <__sflush_r+0x7c>
 8004caa:	6560      	str	r0, [r4, #84]	; 0x54
 8004cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cae:	602f      	str	r7, [r5, #0]
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d0ca      	beq.n	8004c4a <__sflush_r+0x1a>
 8004cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	d002      	beq.n	8004cc2 <__sflush_r+0x92>
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f7ff faa5 	bl	800420c <_free_r>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	6360      	str	r0, [r4, #52]	; 0x34
 8004cc6:	e7c1      	b.n	8004c4c <__sflush_r+0x1c>
 8004cc8:	6a21      	ldr	r1, [r4, #32]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b0      	blx	r6
 8004cd0:	1c41      	adds	r1, r0, #1
 8004cd2:	d1c7      	bne.n	8004c64 <__sflush_r+0x34>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0c4      	beq.n	8004c64 <__sflush_r+0x34>
 8004cda:	2b1d      	cmp	r3, #29
 8004cdc:	d001      	beq.n	8004ce2 <__sflush_r+0xb2>
 8004cde:	2b16      	cmp	r3, #22
 8004ce0:	d101      	bne.n	8004ce6 <__sflush_r+0xb6>
 8004ce2:	602f      	str	r7, [r5, #0]
 8004ce4:	e7b1      	b.n	8004c4a <__sflush_r+0x1a>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	e7ad      	b.n	8004c4c <__sflush_r+0x1c>
 8004cf0:	690f      	ldr	r7, [r1, #16]
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d0a9      	beq.n	8004c4a <__sflush_r+0x1a>
 8004cf6:	0793      	lsls	r3, r2, #30
 8004cf8:	680e      	ldr	r6, [r1, #0]
 8004cfa:	bf08      	it	eq
 8004cfc:	694b      	ldreq	r3, [r1, #20]
 8004cfe:	600f      	str	r7, [r1, #0]
 8004d00:	bf18      	it	ne
 8004d02:	2300      	movne	r3, #0
 8004d04:	eba6 0807 	sub.w	r8, r6, r7
 8004d08:	608b      	str	r3, [r1, #8]
 8004d0a:	f1b8 0f00 	cmp.w	r8, #0
 8004d0e:	dd9c      	ble.n	8004c4a <__sflush_r+0x1a>
 8004d10:	6a21      	ldr	r1, [r4, #32]
 8004d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d14:	4643      	mov	r3, r8
 8004d16:	463a      	mov	r2, r7
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b0      	blx	r6
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	dc06      	bgt.n	8004d2e <__sflush_r+0xfe>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e78e      	b.n	8004c4c <__sflush_r+0x1c>
 8004d2e:	4407      	add	r7, r0
 8004d30:	eba8 0800 	sub.w	r8, r8, r0
 8004d34:	e7e9      	b.n	8004d0a <__sflush_r+0xda>
 8004d36:	bf00      	nop
 8004d38:	20400001 	.word	0x20400001

08004d3c <_fflush_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	4605      	mov	r5, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b913      	cbnz	r3, 8004d4c <_fflush_r+0x10>
 8004d46:	2500      	movs	r5, #0
 8004d48:	4628      	mov	r0, r5
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	b118      	cbz	r0, 8004d56 <_fflush_r+0x1a>
 8004d4e:	6983      	ldr	r3, [r0, #24]
 8004d50:	b90b      	cbnz	r3, 8004d56 <_fflush_r+0x1a>
 8004d52:	f000 f887 	bl	8004e64 <__sinit>
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <_fflush_r+0x6c>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d11b      	bne.n	8004d94 <_fflush_r+0x58>
 8004d5c:	686c      	ldr	r4, [r5, #4]
 8004d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ef      	beq.n	8004d46 <_fflush_r+0xa>
 8004d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d68:	07d0      	lsls	r0, r2, #31
 8004d6a:	d404      	bmi.n	8004d76 <_fflush_r+0x3a>
 8004d6c:	0599      	lsls	r1, r3, #22
 8004d6e:	d402      	bmi.n	8004d76 <_fflush_r+0x3a>
 8004d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d72:	f000 f915 	bl	8004fa0 <__retarget_lock_acquire_recursive>
 8004d76:	4628      	mov	r0, r5
 8004d78:	4621      	mov	r1, r4
 8004d7a:	f7ff ff59 	bl	8004c30 <__sflush_r>
 8004d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d80:	07da      	lsls	r2, r3, #31
 8004d82:	4605      	mov	r5, r0
 8004d84:	d4e0      	bmi.n	8004d48 <_fflush_r+0xc>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	059b      	lsls	r3, r3, #22
 8004d8a:	d4dd      	bmi.n	8004d48 <_fflush_r+0xc>
 8004d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8e:	f000 f908 	bl	8004fa2 <__retarget_lock_release_recursive>
 8004d92:	e7d9      	b.n	8004d48 <_fflush_r+0xc>
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <_fflush_r+0x70>)
 8004d96:	429c      	cmp	r4, r3
 8004d98:	d101      	bne.n	8004d9e <_fflush_r+0x62>
 8004d9a:	68ac      	ldr	r4, [r5, #8]
 8004d9c:	e7df      	b.n	8004d5e <_fflush_r+0x22>
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <_fflush_r+0x74>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	bf08      	it	eq
 8004da4:	68ec      	ldreq	r4, [r5, #12]
 8004da6:	e7da      	b.n	8004d5e <_fflush_r+0x22>
 8004da8:	0800564c 	.word	0x0800564c
 8004dac:	0800566c 	.word	0x0800566c
 8004db0:	0800562c 	.word	0x0800562c

08004db4 <std>:
 8004db4:	2300      	movs	r3, #0
 8004db6:	b510      	push	{r4, lr}
 8004db8:	4604      	mov	r4, r0
 8004dba:	e9c0 3300 	strd	r3, r3, [r0]
 8004dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc2:	6083      	str	r3, [r0, #8]
 8004dc4:	8181      	strh	r1, [r0, #12]
 8004dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc8:	81c2      	strh	r2, [r0, #14]
 8004dca:	6183      	str	r3, [r0, #24]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	2208      	movs	r2, #8
 8004dd0:	305c      	adds	r0, #92	; 0x5c
 8004dd2:	f7fd fb3f 	bl	8002454 <memset>
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x38>)
 8004dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x3c>)
 8004ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <std+0x40>)
 8004de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x44>)
 8004de4:	6224      	str	r4, [r4, #32]
 8004de6:	6323      	str	r3, [r4, #48]	; 0x30
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	08005109 	.word	0x08005109
 8004df0:	0800512b 	.word	0x0800512b
 8004df4:	08005163 	.word	0x08005163
 8004df8:	08005187 	.word	0x08005187

08004dfc <_cleanup_r>:
 8004dfc:	4901      	ldr	r1, [pc, #4]	; (8004e04 <_cleanup_r+0x8>)
 8004dfe:	f000 b8af 	b.w	8004f60 <_fwalk_reent>
 8004e02:	bf00      	nop
 8004e04:	08004d3d 	.word	0x08004d3d

08004e08 <__sfmoreglue>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	2268      	movs	r2, #104	; 0x68
 8004e0c:	1e4d      	subs	r5, r1, #1
 8004e0e:	4355      	muls	r5, r2
 8004e10:	460e      	mov	r6, r1
 8004e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e16:	f7ff fa65 	bl	80042e4 <_malloc_r>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	b140      	cbz	r0, 8004e30 <__sfmoreglue+0x28>
 8004e1e:	2100      	movs	r1, #0
 8004e20:	e9c0 1600 	strd	r1, r6, [r0]
 8004e24:	300c      	adds	r0, #12
 8004e26:	60a0      	str	r0, [r4, #8]
 8004e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e2c:	f7fd fb12 	bl	8002454 <memset>
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd70      	pop	{r4, r5, r6, pc}

08004e34 <__sfp_lock_acquire>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__sfp_lock_acquire+0x8>)
 8004e36:	f000 b8b3 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	2000034d 	.word	0x2000034d

08004e40 <__sfp_lock_release>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__sfp_lock_release+0x8>)
 8004e42:	f000 b8ae 	b.w	8004fa2 <__retarget_lock_release_recursive>
 8004e46:	bf00      	nop
 8004e48:	2000034d 	.word	0x2000034d

08004e4c <__sinit_lock_acquire>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sinit_lock_acquire+0x8>)
 8004e4e:	f000 b8a7 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	2000034e 	.word	0x2000034e

08004e58 <__sinit_lock_release>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__sinit_lock_release+0x8>)
 8004e5a:	f000 b8a2 	b.w	8004fa2 <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	2000034e 	.word	0x2000034e

08004e64 <__sinit>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4604      	mov	r4, r0
 8004e68:	f7ff fff0 	bl	8004e4c <__sinit_lock_acquire>
 8004e6c:	69a3      	ldr	r3, [r4, #24]
 8004e6e:	b11b      	cbz	r3, 8004e78 <__sinit+0x14>
 8004e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e74:	f7ff bff0 	b.w	8004e58 <__sinit_lock_release>
 8004e78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e7c:	6523      	str	r3, [r4, #80]	; 0x50
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <__sinit+0x68>)
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <__sinit+0x6c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e86:	42a3      	cmp	r3, r4
 8004e88:	bf04      	itt	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	61a3      	streq	r3, [r4, #24]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f820 	bl	8004ed4 <__sfp>
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f81c 	bl	8004ed4 <__sfp>
 8004e9c:	60a0      	str	r0, [r4, #8]
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f000 f818 	bl	8004ed4 <__sfp>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	60e0      	str	r0, [r4, #12]
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	6860      	ldr	r0, [r4, #4]
 8004eac:	f7ff ff82 	bl	8004db4 <std>
 8004eb0:	68a0      	ldr	r0, [r4, #8]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2109      	movs	r1, #9
 8004eb6:	f7ff ff7d 	bl	8004db4 <std>
 8004eba:	68e0      	ldr	r0, [r4, #12]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	2112      	movs	r1, #18
 8004ec0:	f7ff ff78 	bl	8004db4 <std>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	61a3      	str	r3, [r4, #24]
 8004ec8:	e7d2      	b.n	8004e70 <__sinit+0xc>
 8004eca:	bf00      	nop
 8004ecc:	080052b0 	.word	0x080052b0
 8004ed0:	08004dfd 	.word	0x08004dfd

08004ed4 <__sfp>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	4607      	mov	r7, r0
 8004ed8:	f7ff ffac 	bl	8004e34 <__sfp_lock_acquire>
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <__sfp+0x84>)
 8004ede:	681e      	ldr	r6, [r3, #0]
 8004ee0:	69b3      	ldr	r3, [r6, #24]
 8004ee2:	b913      	cbnz	r3, 8004eea <__sfp+0x16>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f7ff ffbd 	bl	8004e64 <__sinit>
 8004eea:	3648      	adds	r6, #72	; 0x48
 8004eec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	d503      	bpl.n	8004efc <__sfp+0x28>
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	b30b      	cbz	r3, 8004f3c <__sfp+0x68>
 8004ef8:	6836      	ldr	r6, [r6, #0]
 8004efa:	e7f7      	b.n	8004eec <__sfp+0x18>
 8004efc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f00:	b9d5      	cbnz	r5, 8004f38 <__sfp+0x64>
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <__sfp+0x88>)
 8004f04:	60e3      	str	r3, [r4, #12]
 8004f06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f0a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f0c:	f000 f847 	bl	8004f9e <__retarget_lock_init_recursive>
 8004f10:	f7ff ff96 	bl	8004e40 <__sfp_lock_release>
 8004f14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f1c:	6025      	str	r5, [r4, #0]
 8004f1e:	61a5      	str	r5, [r4, #24]
 8004f20:	2208      	movs	r2, #8
 8004f22:	4629      	mov	r1, r5
 8004f24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f28:	f7fd fa94 	bl	8002454 <memset>
 8004f2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f34:	4620      	mov	r0, r4
 8004f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f38:	3468      	adds	r4, #104	; 0x68
 8004f3a:	e7d9      	b.n	8004ef0 <__sfp+0x1c>
 8004f3c:	2104      	movs	r1, #4
 8004f3e:	4638      	mov	r0, r7
 8004f40:	f7ff ff62 	bl	8004e08 <__sfmoreglue>
 8004f44:	4604      	mov	r4, r0
 8004f46:	6030      	str	r0, [r6, #0]
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1d5      	bne.n	8004ef8 <__sfp+0x24>
 8004f4c:	f7ff ff78 	bl	8004e40 <__sfp_lock_release>
 8004f50:	230c      	movs	r3, #12
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	e7ee      	b.n	8004f34 <__sfp+0x60>
 8004f56:	bf00      	nop
 8004f58:	080052b0 	.word	0x080052b0
 8004f5c:	ffff0001 	.word	0xffff0001

08004f60 <_fwalk_reent>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	4606      	mov	r6, r0
 8004f66:	4688      	mov	r8, r1
 8004f68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f6c:	2700      	movs	r7, #0
 8004f6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f72:	f1b9 0901 	subs.w	r9, r9, #1
 8004f76:	d505      	bpl.n	8004f84 <_fwalk_reent+0x24>
 8004f78:	6824      	ldr	r4, [r4, #0]
 8004f7a:	2c00      	cmp	r4, #0
 8004f7c:	d1f7      	bne.n	8004f6e <_fwalk_reent+0xe>
 8004f7e:	4638      	mov	r0, r7
 8004f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f84:	89ab      	ldrh	r3, [r5, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d907      	bls.n	8004f9a <_fwalk_reent+0x3a>
 8004f8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	d003      	beq.n	8004f9a <_fwalk_reent+0x3a>
 8004f92:	4629      	mov	r1, r5
 8004f94:	4630      	mov	r0, r6
 8004f96:	47c0      	blx	r8
 8004f98:	4307      	orrs	r7, r0
 8004f9a:	3568      	adds	r5, #104	; 0x68
 8004f9c:	e7e9      	b.n	8004f72 <_fwalk_reent+0x12>

08004f9e <__retarget_lock_init_recursive>:
 8004f9e:	4770      	bx	lr

08004fa0 <__retarget_lock_acquire_recursive>:
 8004fa0:	4770      	bx	lr

08004fa2 <__retarget_lock_release_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <__swhatbuf_r>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	460e      	mov	r6, r1
 8004fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fac:	2900      	cmp	r1, #0
 8004fae:	b096      	sub	sp, #88	; 0x58
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	da08      	bge.n	8004fc8 <__swhatbuf_r+0x24>
 8004fb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	061a      	lsls	r2, r3, #24
 8004fc0:	d410      	bmi.n	8004fe4 <__swhatbuf_r+0x40>
 8004fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc6:	e00e      	b.n	8004fe6 <__swhatbuf_r+0x42>
 8004fc8:	466a      	mov	r2, sp
 8004fca:	f000 f903 	bl	80051d4 <_fstat_r>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	dbf1      	blt.n	8004fb6 <__swhatbuf_r+0x12>
 8004fd2:	9a01      	ldr	r2, [sp, #4]
 8004fd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fdc:	425a      	negs	r2, r3
 8004fde:	415a      	adcs	r2, r3
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	e7ee      	b.n	8004fc2 <__swhatbuf_r+0x1e>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	b016      	add	sp, #88	; 0x58
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ff0 <__smakebuf_r>:
 8004ff0:	898b      	ldrh	r3, [r1, #12]
 8004ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ff4:	079d      	lsls	r5, r3, #30
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	d507      	bpl.n	800500c <__smakebuf_r+0x1c>
 8004ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2301      	movs	r3, #1
 8005006:	6163      	str	r3, [r4, #20]
 8005008:	b002      	add	sp, #8
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	ab01      	add	r3, sp, #4
 800500e:	466a      	mov	r2, sp
 8005010:	f7ff ffc8 	bl	8004fa4 <__swhatbuf_r>
 8005014:	9900      	ldr	r1, [sp, #0]
 8005016:	4605      	mov	r5, r0
 8005018:	4630      	mov	r0, r6
 800501a:	f7ff f963 	bl	80042e4 <_malloc_r>
 800501e:	b948      	cbnz	r0, 8005034 <__smakebuf_r+0x44>
 8005020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005024:	059a      	lsls	r2, r3, #22
 8005026:	d4ef      	bmi.n	8005008 <__smakebuf_r+0x18>
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	e7e3      	b.n	8004ffc <__smakebuf_r+0xc>
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <__smakebuf_r+0x7c>)
 8005036:	62b3      	str	r3, [r6, #40]	; 0x28
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	6020      	str	r0, [r4, #0]
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	9b00      	ldr	r3, [sp, #0]
 8005044:	6163      	str	r3, [r4, #20]
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	6120      	str	r0, [r4, #16]
 800504a:	b15b      	cbz	r3, 8005064 <__smakebuf_r+0x74>
 800504c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f8d1 	bl	80051f8 <_isatty_r>
 8005056:	b128      	cbz	r0, 8005064 <__smakebuf_r+0x74>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	89a0      	ldrh	r0, [r4, #12]
 8005066:	4305      	orrs	r5, r0
 8005068:	81a5      	strh	r5, [r4, #12]
 800506a:	e7cd      	b.n	8005008 <__smakebuf_r+0x18>
 800506c:	08004dfd 	.word	0x08004dfd

08005070 <_malloc_usable_size_r>:
 8005070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005074:	1f18      	subs	r0, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbc      	itt	lt
 800507a:	580b      	ldrlt	r3, [r1, r0]
 800507c:	18c0      	addlt	r0, r0, r3
 800507e:	4770      	bx	lr

08005080 <_raise_r>:
 8005080:	291f      	cmp	r1, #31
 8005082:	b538      	push	{r3, r4, r5, lr}
 8005084:	4604      	mov	r4, r0
 8005086:	460d      	mov	r5, r1
 8005088:	d904      	bls.n	8005094 <_raise_r+0x14>
 800508a:	2316      	movs	r3, #22
 800508c:	6003      	str	r3, [r0, #0]
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005096:	b112      	cbz	r2, 800509e <_raise_r+0x1e>
 8005098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800509c:	b94b      	cbnz	r3, 80050b2 <_raise_r+0x32>
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 f830 	bl	8005104 <_getpid_r>
 80050a4:	462a      	mov	r2, r5
 80050a6:	4601      	mov	r1, r0
 80050a8:	4620      	mov	r0, r4
 80050aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ae:	f000 b817 	b.w	80050e0 <_kill_r>
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d00a      	beq.n	80050cc <_raise_r+0x4c>
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	d103      	bne.n	80050c2 <_raise_r+0x42>
 80050ba:	2316      	movs	r3, #22
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	2001      	movs	r0, #1
 80050c0:	e7e7      	b.n	8005092 <_raise_r+0x12>
 80050c2:	2400      	movs	r4, #0
 80050c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050c8:	4628      	mov	r0, r5
 80050ca:	4798      	blx	r3
 80050cc:	2000      	movs	r0, #0
 80050ce:	e7e0      	b.n	8005092 <_raise_r+0x12>

080050d0 <raise>:
 80050d0:	4b02      	ldr	r3, [pc, #8]	; (80050dc <raise+0xc>)
 80050d2:	4601      	mov	r1, r0
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f7ff bfd3 	b.w	8005080 <_raise_r>
 80050da:	bf00      	nop
 80050dc:	2000004c 	.word	0x2000004c

080050e0 <_kill_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	; (8005100 <_kill_r+0x20>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	f7fb ffe1 	bl	80010b4 <_kill>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d102      	bne.n	80050fc <_kill_r+0x1c>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	b103      	cbz	r3, 80050fc <_kill_r+0x1c>
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000348 	.word	0x20000348

08005104 <_getpid_r>:
 8005104:	f7fb bfce 	b.w	80010a4 <_getpid>

08005108 <__sread>:
 8005108:	b510      	push	{r4, lr}
 800510a:	460c      	mov	r4, r1
 800510c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005110:	f000 f894 	bl	800523c <_read_r>
 8005114:	2800      	cmp	r0, #0
 8005116:	bfab      	itete	ge
 8005118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800511a:	89a3      	ldrhlt	r3, [r4, #12]
 800511c:	181b      	addge	r3, r3, r0
 800511e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005122:	bfac      	ite	ge
 8005124:	6563      	strge	r3, [r4, #84]	; 0x54
 8005126:	81a3      	strhlt	r3, [r4, #12]
 8005128:	bd10      	pop	{r4, pc}

0800512a <__swrite>:
 800512a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512e:	461f      	mov	r7, r3
 8005130:	898b      	ldrh	r3, [r1, #12]
 8005132:	05db      	lsls	r3, r3, #23
 8005134:	4605      	mov	r5, r0
 8005136:	460c      	mov	r4, r1
 8005138:	4616      	mov	r6, r2
 800513a:	d505      	bpl.n	8005148 <__swrite+0x1e>
 800513c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005140:	2302      	movs	r3, #2
 8005142:	2200      	movs	r2, #0
 8005144:	f000 f868 	bl	8005218 <_lseek_r>
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	4632      	mov	r2, r6
 8005156:	463b      	mov	r3, r7
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515e:	f000 b817 	b.w	8005190 <_write_r>

08005162 <__sseek>:
 8005162:	b510      	push	{r4, lr}
 8005164:	460c      	mov	r4, r1
 8005166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516a:	f000 f855 	bl	8005218 <_lseek_r>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	bf15      	itete	ne
 8005174:	6560      	strne	r0, [r4, #84]	; 0x54
 8005176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800517a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800517e:	81a3      	strheq	r3, [r4, #12]
 8005180:	bf18      	it	ne
 8005182:	81a3      	strhne	r3, [r4, #12]
 8005184:	bd10      	pop	{r4, pc}

08005186 <__sclose>:
 8005186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518a:	f000 b813 	b.w	80051b4 <_close_r>
	...

08005190 <_write_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <_write_r+0x20>)
 8005194:	4604      	mov	r4, r0
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f7fb ffbf 	bl	8001122 <_write>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_write_r+0x1e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_write_r+0x1e>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	20000348 	.word	0x20000348

080051b4 <_close_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d06      	ldr	r5, [pc, #24]	; (80051d0 <_close_r+0x1c>)
 80051b8:	2300      	movs	r3, #0
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fb ffcb 	bl	800115a <_close>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_close_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_close_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	20000348 	.word	0x20000348

080051d4 <_fstat_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d07      	ldr	r5, [pc, #28]	; (80051f4 <_fstat_r+0x20>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	f7fb ffc6 	bl	8001172 <_fstat>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	d102      	bne.n	80051f0 <_fstat_r+0x1c>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	b103      	cbz	r3, 80051f0 <_fstat_r+0x1c>
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	20000348 	.word	0x20000348

080051f8 <_isatty_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d06      	ldr	r5, [pc, #24]	; (8005214 <_isatty_r+0x1c>)
 80051fc:	2300      	movs	r3, #0
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	f7fb ffc5 	bl	8001192 <_isatty>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_isatty_r+0x1a>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_isatty_r+0x1a>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000348 	.word	0x20000348

08005218 <_lseek_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	; (8005238 <_lseek_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fb ffbe 	bl	80011a8 <_lseek>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_lseek_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_lseek_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000348 	.word	0x20000348

0800523c <_read_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	; (800525c <_read_r+0x20>)
 8005240:	4604      	mov	r4, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fb ff4c 	bl	80010e8 <_read>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_read_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_read_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000348 	.word	0x20000348

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
