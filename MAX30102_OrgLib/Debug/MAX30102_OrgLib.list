
MAX30102_OrgLib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000729c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007440  08007440  00017440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800784c  0800784c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007854  08007854  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800785c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000021c  08007a78  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007a78  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a3  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fca  00000000  00000000  0002d8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00030458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178bc  00000000  00000000  00030f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e803  00000000  00000000  000487fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a355  00000000  00000000  00056fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  000e13a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007424 	.word	0x08007424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08007424 	.word	0x08007424

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f000 fb6f 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f851 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 f913 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f0e:	f000 f8e7 	bl	80010e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f12:	f000 f8b7 	bl	8001084 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uart_print_config(9600);
 8000f16:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f1a:	f003 f8bf 	bl	800409c <uart_print_config>
	print("Working\n\r");
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <main+0xa4>)
 8000f20:	f003 f898 	bl	8004054 <print>

	max30102_init(&max30102, &hi2c1);
 8000f24:	491f      	ldr	r1, [pc, #124]	; (8000fa4 <main+0xa8>)
 8000f26:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <main+0xac>)
 8000f28:	f003 f8de 	bl	80040e8 <max30102_init>
	max30102_reset(&max30102);
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <main+0xac>)
 8000f2e:	f003 f957 	bl	80041e0 <max30102_reset>
	max30102_clear_fifo(&max30102);
 8000f32:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <main+0xac>)
 8000f34:	f003 faae 	bl	8004494 <max30102_clear_fifo>
	max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8000f38:	2307      	movs	r3, #7
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <main+0xac>)
 8000f40:	f003 fa6e 	bl	8004420 <max30102_set_fifo_config>

	// Sensor settings
	max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000f44:	2101      	movs	r1, #1
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <main+0xac>)
 8000f48:	f003 f9d0 	bl	80042ec <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(&max30102, max30102_adc_8192);
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <main+0xac>)
 8000f50:	f003 f9ef 	bl	8004332 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000f54:	2104      	movs	r1, #4
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <main+0xac>)
 8000f58:	f003 f9a9 	bl	80042ae <max30102_set_sampling_rate>
	max30102_set_led_current_1(&max30102, 5);
 8000f5c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <main+0xac>)
 8000f62:	f003 fa0d 	bl	8004380 <max30102_set_led_current_1>
	max30102_set_led_current_2(&max30102, 5);
 8000f66:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <main+0xac>)
 8000f6c:	f003 fa30 	bl	80043d0 <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(&max30102, max30102_spo2);
 8000f70:	2103      	movs	r1, #3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <main+0xac>)
 8000f74:	f003 f975 	bl	8004262 <max30102_set_mode>
//	max30102_set_a_full(&max30102, 1);

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(&max30102, 1);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <main+0xac>)
 8000f7c:	f003 f959 	bl	8004232 <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(&max30102, 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <main+0xac>)
 8000f84:	f003 f93d 	bl	8004202 <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] = { 0 };
 8000f88:	2300      	movs	r3, #0
 8000f8a:	80bb      	strh	r3, [r7, #4]
	max30102_read(&max30102, 0x00, en_reg, 1);
 8000f8c:	1d3a      	adds	r2, r7, #4
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <main+0xac>)
 8000f94:	f003 f906 	bl	80041a4 <max30102_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		max30102_update(&max30102);
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <main+0xac>)
 8000f9a:	f003 fb01 	bl	80045a0 <max30102_update>
 8000f9e:	e7fb      	b.n	8000f98 <main+0x9c>
 8000fa0:	08007440 	.word	0x08007440
 8000fa4:	20000238 	.word	0x20000238
 8000fa8:	200002d0 	.word	0x200002d0

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fb44 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <SystemClock_Config+0xd0>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <SystemClock_Config+0xd0>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <SystemClock_Config+0xd0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <SystemClock_Config+0xd4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <SystemClock_Config+0xd4>)
 8000ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <SystemClock_Config+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001020:	2310      	movs	r3, #16
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001024:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102a:	2304      	movs	r3, #4
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	2307      	movs	r3, #7
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fea8 	bl	8002d8c <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001042:	f000 f8e5 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f002 f90a 	bl	800327c <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800106e:	f000 f8cf 	bl	8001210 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f000 fd85 	bl	8001bd0 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f8a0 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000238 	.word	0x20000238
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART2_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001118:	f002 fad0 	bl	80036bc <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f000 f875 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000028c 	.word	0x2000028c
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011c0:	f000 fcec 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xd8>)
 80011dc:	f000 fb5a 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e0:	2320      	movs	r3, #32
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011f8:	f000 fb4c 	bl	8001894 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020800 	.word	0x40020800

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125a:	2007      	movs	r0, #7
 800125c:	f000 fae6 	bl	800182c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f000 fae4 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_UART_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001366:	2307      	movs	r3, #7
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001372:	f000 fa8f 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40004400 	.word	0x40004400
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f956 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_kill>:

int _kill(int pid, int sig)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013fa:	f003 f8dd 	bl	80045b8 <__errno>
 80013fe:	4603      	mov	r3, r0
 8001400:	2216      	movs	r2, #22
 8001402:	601a      	str	r2, [r3, #0]
	return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_exit>:

void _exit (int status)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffe7 	bl	80013f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001422:	e7fe      	b.n	8001422 <_exit+0x12>

08001424 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00a      	b.n	800144c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001436:	f3af 8000 	nop.w
 800143a:	4601      	mov	r1, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <_read+0x12>
	}

return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e009      	b.n	8001484 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf1      	blt.n	8001470 <_write+0x12>
	}
	return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_close>:

int _close(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	605a      	str	r2, [r3, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_isatty>:

int _isatty(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f003 f842 	bl	80045b8 <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20018000 	.word	0x20018000
 8001560:	00000400 	.word	0x00000400
 8001564:	200003d8 	.word	0x200003d8
 8001568:	200004f0 	.word	0x200004f0

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ac:	4c0b      	ldr	r4, [pc, #44]	; (80015dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ba:	f7ff ffd7 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f003 f801 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fc9b 	bl	8000efc <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80015d4:	0800785c 	.word	0x0800785c
  ldr r2, =_sbss
 80015d8:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80015dc:	200004f0 	.word	0x200004f0

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f90d 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe00 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f917 	bl	800187a <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f8ed 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	200003dc 	.word	0x200003dc

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200003dc 	.word	0x200003dc

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff47 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff5c 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffb0 	bl	80017e8 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e159      	b.n	8001b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8148 	bne.w	8001b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a2 	beq.w	8001b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1fe>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1f6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1f2>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f aea2 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e12b      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fb38 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c34:	f001 fd1a 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d807      	bhi.n	8001c54 <HAL_I2C_Init+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_I2C_Init+0x278>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e006      	b.n	8001c62 <HAL_I2C_Init+0x92>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a7d      	ldr	r2, [pc, #500]	; (8001e4c <HAL_I2C_Init+0x27c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0e7      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_I2C_Init+0x280>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_I2C_Init+0xd4>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <HAL_I2C_Init+0xe8>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_I2C_Init+0x284>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	495c      	ldr	r1, [pc, #368]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d819      	bhi.n	8001d0c <HAL_I2C_Init+0x13c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e59      	subs	r1, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cec:	400b      	ands	r3, r1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_I2C_Init+0x138>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e59      	subs	r1, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	e051      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e04f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_I2C_Init+0x168>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e012      	b.n	8001d5e <HAL_I2C_Init+0x18e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x196>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_I2C_Init+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e58      	subs	r0, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6809      	ldr	r1, [r1, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6911      	ldr	r1, [r2, #16]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	000186a0 	.word	0x000186a0
 8001e48:	001e847f 	.word	0x001e847f
 8001e4c:	003d08ff 	.word	0x003d08ff
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	461a      	mov	r2, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	817b      	strh	r3, [r7, #10]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fc20 	bl	80016b0 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	f040 80e0 	bne.w	8002040 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	2201      	movs	r2, #1
 8001e88:	4970      	ldr	r1, [pc, #448]	; (800204c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fda0 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0d3      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Transmit+0x50>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0cc      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d007      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fbf0 	bl	80026fc <I2C_MasterRequestWrite>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08d      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f3c:	e066      	b.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fe1a 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fe0a 	bl	8002bfe <I2C_WaitOnBTFFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e01a      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d194      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	817b      	strh	r3, [r7, #10]
 8002066:	460b      	mov	r3, r1
 8002068:	813b      	strh	r3, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800206e:	f7ff fb1f 	bl	80016b0 <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	f040 8208 	bne.w	8002492 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2319      	movs	r3, #25
 8002088:	2201      	movs	r2, #1
 800208a:	497b      	ldr	r1, [pc, #492]	; (8002278 <HAL_I2C_Mem_Read+0x224>)
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fc9f 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
 800209a:	e1fb      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_I2C_Mem_Read+0x56>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e1f4      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d007      	beq.n	80020d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2222      	movs	r2, #34	; 0x22
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a5b      	ldr	r2, [pc, #364]	; (800227c <HAL_I2C_Mem_Read+0x228>)
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002112:	88f8      	ldrh	r0, [r7, #6]
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	8979      	ldrh	r1, [r7, #10]
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4603      	mov	r3, r0
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fb6c 	bl	8002800 <I2C_RequestMemoryRead>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1b0      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d113      	bne.n	8002162 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e184      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	2b01      	cmp	r3, #1
 8002168:	d11b      	bne.n	80021a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e164      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d11b      	bne.n	80021e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	e144      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021f8:	e138      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b03      	cmp	r3, #3
 8002200:	f200 80f1 	bhi.w	80023e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b01      	cmp	r3, #1
 800220a:	d123      	bne.n	8002254 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fd35 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e139      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002252:	e10b      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	2b02      	cmp	r3, #2
 800225a:	d14e      	bne.n	80022fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	2200      	movs	r2, #0
 8002264:	4906      	ldr	r1, [pc, #24]	; (8002280 <HAL_I2C_Mem_Read+0x22c>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fbb2 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e10e      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
 8002276:	bf00      	nop
 8002278:	00100002 	.word	0x00100002
 800227c:	ffff0000 	.word	0xffff0000
 8002280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f8:	e0b8      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2200      	movs	r2, #0
 8002302:	4966      	ldr	r1, [pc, #408]	; (800249c <HAL_I2C_Mem_Read+0x448>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fb63 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0bf      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2200      	movs	r2, #0
 800235e:	494f      	ldr	r1, [pc, #316]	; (800249c <HAL_I2C_Mem_Read+0x448>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fb35 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e091      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e4:	e042      	b.n	800246c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fc48 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e04c      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d118      	bne.n	800246c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f aec2 	bne.w	80021fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	00010004 	.word	0x00010004

080024a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff f8fe 	bl	80016b0 <HAL_GetTick>
 80024b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	f040 8111 	bne.w	80026ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2319      	movs	r3, #25
 80024ce:	2201      	movs	r2, #1
 80024d0:	4988      	ldr	r1, [pc, #544]	; (80026f4 <HAL_I2C_IsDeviceReady+0x254>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa7c 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	e104      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_I2C_IsDeviceReady+0x50>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e0fd      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d007      	beq.n	8002516 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2224      	movs	r2, #36	; 0x24
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a70      	ldr	r2, [pc, #448]	; (80026f8 <HAL_I2C_IsDeviceReady+0x258>)
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa3a 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002570:	d103      	bne.n	800257a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0b6      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800258c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff f88f 	bl	80016b0 <HAL_GetTick>
 8002592:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025c2:	e025      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c4:	f7ff f874 	bl	80016b0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <HAL_I2C_IsDeviceReady+0x13a>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	22a0      	movs	r2, #160	; 0xa0
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2ba0      	cmp	r3, #160	; 0xa0
 800261a:	d005      	beq.n	8002628 <HAL_I2C_IsDeviceReady+0x188>
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_I2C_IsDeviceReady+0x188>
 8002622:	7dbb      	ldrb	r3, [r7, #22]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0cd      	beq.n	80025c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d129      	bne.n	8002692 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	4921      	ldr	r1, [pc, #132]	; (80026f4 <HAL_I2C_IsDeviceReady+0x254>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9ae 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e036      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e02c      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	490f      	ldr	r1, [pc, #60]	; (80026f4 <HAL_I2C_IsDeviceReady+0x254>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f98a 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e012      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f4ff af32 	bcc.w	800253a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	00100002 	.word	0x00100002
 80026f8:	ffff0000 	.word	0xffff0000

080026fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d006      	beq.n	8002726 <I2C_MasterRequestWrite+0x2a>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <I2C_MasterRequestWrite+0x2a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e00b      	b.n	8002750 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	2b12      	cmp	r3, #18
 800273e:	d107      	bne.n	8002750 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f937 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002776:	d103      	bne.n	8002780 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e035      	b.n	80027f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278c:	d108      	bne.n	80027a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e01b      	b.n	80027d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	11db      	asrs	r3, r3, #7
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f063 030f 	orn	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <I2C_MasterRequestWrite+0xfc>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f95d 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e010      	b.n	80027f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <I2C_MasterRequestWrite+0x100>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f94d 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	00010008 	.word	0x00010008
 80027fc:	00010002 	.word	0x00010002

08002800 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002828:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2200      	movs	r2, #0
 8002842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8c2 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d103      	bne.n	800286a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0aa      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800287c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	4952      	ldr	r1, [pc, #328]	; (80029cc <I2C_RequestMemoryRead+0x1cc>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8fa 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e097      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f964 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e076      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e021      	b.n	800292c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f93e 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e050      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	6a39      	ldr	r1, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f923 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e035      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002966:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2200      	movs	r2, #0
 8002970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f82b 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d103      	bne.n	8002998 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e013      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	4906      	ldr	r1, [pc, #24]	; (80029cc <I2C_RequestMemoryRead+0x1cc>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f863 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	00010002 	.word	0x00010002

080029d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	e025      	b.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d021      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe fe61 	bl	80016b0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e023      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10d      	bne.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	e00c      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0b6      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a8c:	e051      	b.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d123      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e046      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d021      	beq.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fddf 	bl	80016b0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e020      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e00b      	b.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d18d      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b88:	e02d      	b.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f8ce 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d021      	beq.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe fd85 	bl	80016b0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0220 	orr.w	r2, r3, #32
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d1ca      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0a:	e02d      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f88d 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e02d      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d021      	beq.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe fd44 	bl	80016b0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d1ca      	bne.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8c:	e042      	b.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d119      	bne.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e029      	b.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fcee 	bl	80016b0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d1b5      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d11b      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e267      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d075      	beq.n	8002e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d00c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d112      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc2:	4b82      	ldr	r3, [pc, #520]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	4b7e      	ldr	r3, [pc, #504]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05b      	beq.n	8002e94 <HAL_RCC_OscConfig+0x108>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d157      	bne.n	8002e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e242      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_OscConfig+0x74>
 8002df2:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e01d      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x98>
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6f      	ldr	r2, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6c      	ldr	r2, [pc, #432]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e24:	4b69      	ldr	r3, [pc, #420]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fc34 	bl	80016b0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fc30 	bl	80016b0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e207      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0xc0>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fc20 	bl	80016b0 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e74:	f7fe fc1c 	bl	80016b0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1f3      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0xe8>
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d063      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x152>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1c7      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	e03a      	b.n	8002f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x244>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe fbd5 	bl	80016b0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fbd1 	bl	80016b0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1a8      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4925      	ldr	r1, [pc, #148]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x244>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fbb4 	bl	80016b0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7fe fbb0 	bl	80016b0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e187      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d036      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d016      	beq.n	8002fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_RCC_OscConfig+0x248>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fb94 	bl	80016b0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fb90 	bl	80016b0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e167      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x200>
 8002faa:	e01b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_OscConfig+0x248>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fb7d 	bl	80016b0 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe fb79 	bl	80016b0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d907      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e150      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470000 	.word	0x42470000
 8002fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ea      	bne.n	8002fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8097 	beq.w	8003120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b81      	ldr	r3, [pc, #516]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b77      	ldr	r3, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b74      	ldr	r3, [pc, #464]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a73      	ldr	r2, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fb39 	bl	80016b0 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fb35 	bl	80016b0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e10c      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x2ea>
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a63      	ldr	r2, [pc, #396]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	e01c      	b.n	80030b0 <HAL_RCC_OscConfig+0x324>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x30c>
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0x324>
 8003098:	4b58      	ldr	r3, [pc, #352]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	4b55      	ldr	r3, [pc, #340]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fafa 	bl	80016b0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe faf6 	bl	80016b0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0cb      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	4b49      	ldr	r3, [pc, #292]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCC_OscConfig+0x334>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7fe fae4 	bl	80016b0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fae0 	bl	80016b0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0b5      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	4a38      	ldr	r2, [pc, #224]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a1 	beq.w	800326c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d05c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d141      	bne.n	80031c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fab4 	bl	80016b0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fab0 	bl	80016b0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e087      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	491b      	ldr	r1, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe fa89 	bl	80016b0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fe fa85 	bl	80016b0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e05c      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x416>
 80031c0:	e054      	b.n	800326c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fa72 	bl	80016b0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fa6e 	bl	80016b0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e045      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x444>
 80031ee:	e03d      	b.n	800326c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e038      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000
 8003204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_OscConfig+0x4ec>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d028      	beq.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d121      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d11a      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0cc      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b68      	ldr	r3, [pc, #416]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d90c      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b8      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d0:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	494d      	ldr	r1, [pc, #308]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d044      	beq.n	800339c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d119      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e07f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d003      	beq.n	800333a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	2b03      	cmp	r3, #3
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e067      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4934      	ldr	r1, [pc, #208]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800336c:	f7fe f9a0 	bl	80016b0 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7fe f99c 	bl	80016b0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e04f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d20c      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e032      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4916      	ldr	r1, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	490e      	ldr	r1, [pc, #56]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003402:	f000 f821 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	490a      	ldr	r1, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	5ccb      	ldrb	r3, [r1, r3]
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f900 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023c00 	.word	0x40023c00
 8003438:	40023800 	.word	0x40023800
 800343c:	08007458 	.word	0x08007458
 8003440:	20000000 	.word	0x20000000
 8003444:	20000004 	.word	0x20000004

08003448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344c:	b094      	sub	sp, #80	; 0x50
 800344e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	2300      	movs	r3, #0
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	2300      	movs	r3, #0
 800345a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003460:	4b79      	ldr	r3, [pc, #484]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b08      	cmp	r3, #8
 800346a:	d00d      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x40>
 800346c:	2b08      	cmp	r3, #8
 800346e:	f200 80e1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x34>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d003      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x3a>
 800347a:	e0db      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_RCC_GetSysClockFreq+0x204>)
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003480:	e0db      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_GetSysClockFreq+0x208>)
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003486:	e0d8      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003488:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349e:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	2200      	movs	r2, #0
 80034a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
 80034b2:	2300      	movs	r3, #0
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
 80034b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	f04f 0000 	mov.w	r0, #0
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	0159      	lsls	r1, r3, #5
 80034c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034cc:	0150      	lsls	r0, r2, #5
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4621      	mov	r1, r4
 80034d4:	1a51      	subs	r1, r2, r1
 80034d6:	6139      	str	r1, [r7, #16]
 80034d8:	4629      	mov	r1, r5
 80034da:	eb63 0301 	sbc.w	r3, r3, r1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ec:	4659      	mov	r1, fp
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034f6:	4651      	mov	r1, sl
 80034f8:	018a      	lsls	r2, r1, #6
 80034fa:	4651      	mov	r1, sl
 80034fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003500:	4659      	mov	r1, fp
 8003502:	eb63 0901 	sbc.w	r9, r3, r1
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351a:	4690      	mov	r8, r2
 800351c:	4699      	mov	r9, r3
 800351e:	4623      	mov	r3, r4
 8003520:	eb18 0303 	adds.w	r3, r8, r3
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	462b      	mov	r3, r5
 8003528:	eb49 0303 	adc.w	r3, r9, r3
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800353a:	4629      	mov	r1, r5
 800353c:	024b      	lsls	r3, r1, #9
 800353e:	4621      	mov	r1, r4
 8003540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003544:	4621      	mov	r1, r4
 8003546:	024a      	lsls	r2, r1, #9
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354e:	2200      	movs	r2, #0
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003558:	f7fd fb4e 	bl	8000bf8 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4613      	mov	r3, r2
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003564:	e058      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	4618      	mov	r0, r3
 8003570:	4611      	mov	r1, r2
 8003572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	f04f 0000 	mov.w	r0, #0
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	0159      	lsls	r1, r3, #5
 800358e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003592:	0150      	lsls	r0, r2, #5
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4641      	mov	r1, r8
 800359a:	ebb2 0a01 	subs.w	sl, r2, r1
 800359e:	4649      	mov	r1, r9
 80035a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b8:	ebb2 040a 	subs.w	r4, r2, sl
 80035bc:	eb63 050b 	sbc.w	r5, r3, fp
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	00eb      	lsls	r3, r5, #3
 80035ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ce:	00e2      	lsls	r2, r4, #3
 80035d0:	4614      	mov	r4, r2
 80035d2:	461d      	mov	r5, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	18e3      	adds	r3, r4, r3
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	464b      	mov	r3, r9
 80035dc:	eb45 0303 	adc.w	r3, r5, r3
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	2200      	movs	r2, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800360c:	f7fd faf4 	bl	8000bf8 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetSysClockFreq+0x204>)
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800363c:	4618      	mov	r0, r3
 800363e:	3750      	adds	r7, #80	; 0x50
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	007a1200 	.word	0x007a1200

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	08007468 	.word	0x08007468

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffdc 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0b5b      	lsrs	r3, r3, #13
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08007468 	.word	0x08007468

080036bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e03f      	b.n	800374e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fe0a 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	; 0x24
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f829 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b0c0      	sub	sp, #256	; 0x100
 800375e:	af00      	add	r7, sp, #0
 8003760:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	ea40 0301 	orr.w	r3, r0, r1
 8003780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	431a      	orrs	r2, r3
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	431a      	orrs	r2, r3
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037b0:	f021 010c 	bic.w	r1, r1, #12
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037be:	430b      	orrs	r3, r1
 80037c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	ea40 0301 	orr.w	r3, r0, r1
 80037de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <UART_SetConfig+0x2cc>)
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d005      	beq.n	80037f8 <UART_SetConfig+0xa0>
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b8d      	ldr	r3, [pc, #564]	; (8003a28 <UART_SetConfig+0x2d0>)
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d104      	bne.n	8003802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7ff ff4c 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 80037fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003800:	e003      	b.n	800380a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003802:	f7ff ff33 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8003806:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	f040 810c 	bne.w	8003a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	1891      	adds	r1, r2, r2
 8003830:	65b9      	str	r1, [r7, #88]	; 0x58
 8003832:	415b      	adcs	r3, r3
 8003834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800383a:	4621      	mov	r1, r4
 800383c:	eb12 0801 	adds.w	r8, r2, r1
 8003840:	4629      	mov	r1, r5
 8003842:	eb43 0901 	adc.w	r9, r3, r1
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385a:	4690      	mov	r8, r2
 800385c:	4699      	mov	r9, r3
 800385e:	4623      	mov	r3, r4
 8003860:	eb18 0303 	adds.w	r3, r8, r3
 8003864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003868:	462b      	mov	r3, r5
 800386a:	eb49 0303 	adc.w	r3, r9, r3
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800387e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003886:	460b      	mov	r3, r1
 8003888:	18db      	adds	r3, r3, r3
 800388a:	653b      	str	r3, [r7, #80]	; 0x50
 800388c:	4613      	mov	r3, r2
 800388e:	eb42 0303 	adc.w	r3, r2, r3
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
 8003894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800389c:	f7fd f9ac 	bl	8000bf8 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <UART_SetConfig+0x2d4>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	011c      	lsls	r4, r3, #4
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	1891      	adds	r1, r2, r2
 80038c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038c8:	415b      	adcs	r3, r3
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038d0:	4641      	mov	r1, r8
 80038d2:	eb12 0a01 	adds.w	sl, r2, r1
 80038d6:	4649      	mov	r1, r9
 80038d8:	eb43 0b01 	adc.w	fp, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f0:	4692      	mov	sl, r2
 80038f2:	469b      	mov	fp, r3
 80038f4:	4643      	mov	r3, r8
 80038f6:	eb1a 0303 	adds.w	r3, sl, r3
 80038fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038fe:	464b      	mov	r3, r9
 8003900:	eb4b 0303 	adc.w	r3, fp, r3
 8003904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003914:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800391c:	460b      	mov	r3, r1
 800391e:	18db      	adds	r3, r3, r3
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
 8003922:	4613      	mov	r3, r2
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
 800392a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003932:	f7fd f961 	bl	8000bf8 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4611      	mov	r1, r2
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <UART_SetConfig+0x2d4>)
 800393e:	fba3 2301 	umull	r2, r3, r3, r1
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2264      	movs	r2, #100	; 0x64
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	1acb      	subs	r3, r1, r3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <UART_SetConfig+0x2d4>)
 8003954:	fba3 2302 	umull	r2, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003960:	441c      	add	r4, r3
 8003962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800396c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	63b9      	str	r1, [r7, #56]	; 0x38
 800397c:	415b      	adcs	r3, r3
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003984:	4641      	mov	r1, r8
 8003986:	1851      	adds	r1, r2, r1
 8003988:	6339      	str	r1, [r7, #48]	; 0x30
 800398a:	4649      	mov	r1, r9
 800398c:	414b      	adcs	r3, r1
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800399c:	4659      	mov	r1, fp
 800399e:	00cb      	lsls	r3, r1, #3
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a6:	4651      	mov	r1, sl
 80039a8:	00ca      	lsls	r2, r1, #3
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	4642      	mov	r2, r8
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b8:	464b      	mov	r3, r9
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ee:	f7fd f903 	bl	8000bf8 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <UART_SetConfig+0x2d4>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2164      	movs	r1, #100	; 0x64
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	3332      	adds	r3, #50	; 0x32
 8003a0a:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <UART_SetConfig+0x2d4>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	f003 0207 	and.w	r2, r3, #7
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4422      	add	r2, r4
 8003a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a20:	e105      	b.n	8003c2e <UART_SetConfig+0x4d6>
 8003a22:	bf00      	nop
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40011400 	.word	0x40011400
 8003a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a42:	4642      	mov	r2, r8
 8003a44:	464b      	mov	r3, r9
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	6239      	str	r1, [r7, #32]
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a52:	4641      	mov	r1, r8
 8003a54:	1854      	adds	r4, r2, r1
 8003a56:	4649      	mov	r1, r9
 8003a58:	eb43 0501 	adc.w	r5, r3, r1
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	00eb      	lsls	r3, r5, #3
 8003a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6a:	00e2      	lsls	r2, r4, #3
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	18e3      	adds	r3, r4, r3
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a78:	464b      	mov	r3, r9
 8003a7a:	eb45 0303 	adc.w	r3, r5, r3
 8003a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	008b      	lsls	r3, r1, #2
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	008a      	lsls	r2, r1, #2
 8003aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ab0:	f7fd f8a2 	bl	8000bf8 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4b60      	ldr	r3, [pc, #384]	; (8003c3c <UART_SetConfig+0x4e4>)
 8003aba:	fba3 2302 	umull	r2, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	011c      	lsls	r4, r3, #4
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	61b9      	str	r1, [r7, #24]
 8003adc:	415b      	adcs	r3, r3
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	1851      	adds	r1, r2, r1
 8003ae8:	6139      	str	r1, [r7, #16]
 8003aea:	4649      	mov	r1, r9
 8003aec:	414b      	adcs	r3, r1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003afc:	4659      	mov	r1, fp
 8003afe:	00cb      	lsls	r3, r1, #3
 8003b00:	4651      	mov	r1, sl
 8003b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b06:	4651      	mov	r1, sl
 8003b08:	00ca      	lsls	r2, r1, #3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4642      	mov	r2, r8
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b18:	464b      	mov	r3, r9
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	4641      	mov	r1, r8
 8003b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b46:	4641      	mov	r1, r8
 8003b48:	008a      	lsls	r2, r1, #2
 8003b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b4e:	f7fd f853 	bl	8000bf8 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <UART_SetConfig+0x4e4>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	; 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	3332      	adds	r3, #50	; 0x32
 8003b6a:	4a34      	ldr	r2, [pc, #208]	; (8003c3c <UART_SetConfig+0x4e4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b76:	441c      	add	r4, r3
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b80:	677a      	str	r2, [r7, #116]	; 0x74
 8003b82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b86:	4642      	mov	r2, r8
 8003b88:	464b      	mov	r3, r9
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b96:	4641      	mov	r1, r8
 8003b98:	1851      	adds	r1, r2, r1
 8003b9a:	6039      	str	r1, [r7, #0]
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	414b      	adcs	r3, r1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bae:	4659      	mov	r1, fp
 8003bb0:	00cb      	lsls	r3, r1, #3
 8003bb2:	4651      	mov	r1, sl
 8003bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb8:	4651      	mov	r1, sl
 8003bba:	00ca      	lsls	r2, r1, #3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	189b      	adds	r3, r3, r2
 8003bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc8:	464b      	mov	r3, r9
 8003bca:	460a      	mov	r2, r1
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	663b      	str	r3, [r7, #96]	; 0x60
 8003bdc:	667a      	str	r2, [r7, #100]	; 0x64
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bea:	4649      	mov	r1, r9
 8003bec:	008b      	lsls	r3, r1, #2
 8003bee:	4641      	mov	r1, r8
 8003bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	008a      	lsls	r2, r1, #2
 8003bf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bfc:	f7fc fffc 	bl	8000bf8 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <UART_SetConfig+0x4e4>)
 8003c06:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2164      	movs	r1, #100	; 0x64
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	; 0x32
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <UART_SetConfig+0x4e4>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4422      	add	r2, r4
 8003c2c:	609a      	str	r2, [r3, #8]
}
 8003c2e:	bf00      	nop
 8003c30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3a:	bf00      	nop
 8003c3c:	51eb851f 	.word	0x51eb851f

08003c40 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <gpio_clk_en+0x78>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d106      	bne.n	8003c5e <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8003c5c:	e026      	b.n	8003cac <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <gpio_clk_en+0x80>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d106      	bne.n	8003c74 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003c72:	e01b      	b.n	8003cac <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <gpio_clk_en+0x84>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d106      	bne.n	8003c8a <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003c88:	e010      	b.n	8003cac <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <gpio_clk_en+0x88>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d106      	bne.n	8003ca0 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <gpio_clk_en+0x7c>)
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003c9e:	e005      	b.n	8003cac <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <gpio_clk_en+0x7c>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <gpio_clk_en+0x7c>)
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020c00 	.word	0x40020c00

08003ccc <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d117      	bne.n	8003d10 <gpio_config+0x44>
		gpio_clk_en(port);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff ffad 	bl	8003c40 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f846 	bl	8003d7c <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f85b 	bl	8003db0 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f870 	bl	8003de4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f885 	bl	8003e18 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8003d0e:	e031      	b.n	8003d74 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <gpio_config+0x66>
		gpio_clk_en(port);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff92 	bl	8003c40 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f82b 	bl	8003d7c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f85a 	bl	8003de4 <gpio_PUPD>
}
 8003d30:	e020      	b.n	8003d74 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d112      	bne.n	8003d5e <gpio_config+0x92>
		gpio_clk_en(port);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff ff81 	bl	8003c40 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f81a 	bl	8003d7c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f849 	bl	8003de4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f85e 	bl	8003e18 <gpio_PHPL_OD>
}
 8003d5c:	e00a      	b.n	8003d74 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d107      	bne.n	8003d74 <gpio_config+0xa8>
		gpio_clk_en(port);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff ff6b 	bl	8003c40 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f804 	bl	8003d7c <gpio_moder>
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4907      	ldr	r1, [pc, #28]	; (8003dac <gpio_moder+0x30>)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4907      	ldr	r1, [pc, #28]	; (8003de0 <gpio_speed+0x30>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	2000000c 	.word	0x2000000c

08003de4 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4907      	ldr	r1, [pc, #28]	; (8003e14 <gpio_PUPD+0x30>)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	2000000c 	.word	0x2000000c

08003e18 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d80a      	bhi.n	8003e6a <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8003e68:	e00a      	b.n	8003e80 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3b08      	subs	r3, #8
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f818 	bl	8003ed0 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f842 	bl	8003f34 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8003eb0:	69f9      	ldr	r1, [r7, #28]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f884 	bl	8003fc0 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ec0:	f043 030c 	orr.w	r3, r3, #12
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	60d3      	str	r3, [r2, #12]

}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <USART_CLK_EN+0x54>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d106      	bne.n	8003eee <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <USART_CLK_EN+0x58>)
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <USART_CLK_EN+0x58>)
 8003ee6:	f043 0310 	orr.w	r3, r3, #16
 8003eea:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8003eec:	e014      	b.n	8003f18 <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <USART_CLK_EN+0x5c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d106      	bne.n	8003f04 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <USART_CLK_EN+0x58>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <USART_CLK_EN+0x58>)
 8003efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003f02:	e009      	b.n	8003f18 <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <USART_CLK_EN+0x60>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d105      	bne.n	8003f18 <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <USART_CLK_EN+0x58>)
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <USART_CLK_EN+0x58>)
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40011000 	.word	0x40011000
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40011400 	.word	0x40011400

08003f34 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003f42:	2300      	movs	r3, #0
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f7ff febb 	bl	8003ccc <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003f56:	2300      	movs	r3, #0
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2302      	movs	r3, #2
 8003f60:	2202      	movs	r2, #2
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff feb1 	bl	8003ccc <gpio_config>

	if (usart == USART1) {
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <USART_PIN_CONFIG+0x80>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <USART_PIN_CONFIG+0x84>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d117      	bne.n	8003faa <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <USART_PIN_CONFIG+0x88>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d107      	bne.n	8003f92 <USART_PIN_CONFIG+0x5e>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d104      	bne.n	8003f92 <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 8003f88:	2207      	movs	r2, #7
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f7ff ff58 	bl	8003e42 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <USART_PIN_CONFIG+0x88>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d107      	bne.n	8003faa <USART_PIN_CONFIG+0x76>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d104      	bne.n	8003faa <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff4c 	bl	8003e42 <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40020000 	.word	0x40020000

08003fc0 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <USART_BDR_SEL+0x30>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]
 800400a:	e017      	b.n	800403c <USART_WRITE+0x48>
		if (len == 1) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d103      	bne.n	800401a <USART_WRITE+0x26>
			usart->DR = ch;
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e006      	b.n	8004028 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4413      	add	r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8004028:	bf00      	nop
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f9      	beq.n	800402a <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	3301      	adds	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d8e3      	bhi.n	800400c <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004054:	b40f      	push	{r0, r1, r2, r3}
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406a:	480a      	ldr	r0, [pc, #40]	; (8004094 <print+0x40>)
 800406c:	f001 f87a 	bl	8005164 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004070:	4808      	ldr	r0, [pc, #32]	; (8004094 <print+0x40>)
 8004072:	f7fc f8b5 	bl	80001e0 <strlen>
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	2364      	movs	r3, #100	; 0x64
 800407e:	4905      	ldr	r1, [pc, #20]	; (8004094 <print+0x40>)
 8004080:	4805      	ldr	r0, [pc, #20]	; (8004098 <print+0x44>)
 8004082:	f7ff ffb7 	bl	8003ff4 <USART_WRITE>

}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004090:	b004      	add	sp, #16
 8004092:	4770      	bx	lr
 8004094:	200003e0 	.word	0x200003e0
 8004098:	40004400 	.word	0x40004400

0800409c <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	2303      	movs	r3, #3
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2302      	movs	r3, #2
 80040ae:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <uart_print_config+0x24>)
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <uart_print_config+0x24>)
 80040b2:	4804      	ldr	r0, [pc, #16]	; (80040c4 <uart_print_config+0x28>)
 80040b4:	f7ff feea 	bl	8003e8c <USART_INIT>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40004400 	.word	0x40004400

080040c8 <max30102_plot>:
 */

#include "MAX30102_n.h"

void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
	print("%d, %d\n\r", ir_sample, red_sample);
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4803      	ldr	r0, [pc, #12]	; (80040e4 <max30102_plot+0x1c>)
 80040d8:	f7ff ffbc 	bl	8004054 <print>
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	0800744c 	.word	0x0800744c

080040e8 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
bool max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2280      	movs	r2, #128	; 0x80
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fa9d 	bl	8004648 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3384      	adds	r3, #132	; 0x84
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fa96 	bl	8004648 <memset>

    if(HAL_I2C_IsDeviceReady(obj->_ui2c, MAX30102_I2C_ADDR << 1, 2, 100) != HAL_OK){
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	2364      	movs	r3, #100	; 0x64
 8004122:	2202      	movs	r2, #2
 8004124:	21ae      	movs	r1, #174	; 0xae
 8004126:	f7fe f9bb 	bl	80024a0 <HAL_I2C_IsDeviceReady>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <max30102_init+0x4c>
    	return false;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <max30102_init+0x4e>
    }
    else{
    	return true;
 8004134:	2301      	movs	r3, #1
    }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af02      	add	r7, sp, #8
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	461a      	mov	r2, r3
 800414a:	460b      	mov	r3, r1
 800414c:	72fb      	strb	r3, [r7, #11]
 800414e:	4613      	mov	r3, r2
 8004150:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8004152:	893b      	ldrh	r3, [r7, #8]
 8004154:	3301      	adds	r3, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa58 	bl	800460c <malloc>
 800415c:	4603      	mov	r3, r0
 800415e:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	7afa      	ldrb	r2, [r7, #11]
 8004164:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <max30102_write+0x42>
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3301      	adds	r3, #1
 8004176:	893a      	ldrh	r2, [r7, #8]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa56 	bl	800462c <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	3301      	adds	r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	220a      	movs	r2, #10
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	21ae      	movs	r1, #174	; 0xae
 8004192:	f7fd fe61 	bl	8001e58 <HAL_I2C_Master_Transmit>
    free(payload);
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f000 fa40 	bl	800461c <free>
//	HAL_I2C_Mem_Write(obj->_ui2c, MAX30102_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf, buflen, 10);
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af04      	add	r7, sp, #16
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	72fb      	strb	r3, [r7, #11]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	75fb      	strb	r3, [r7, #23]
//    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
//    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
    HAL_I2C_Mem_Read(obj->_ui2c, MAX30102_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, buf, buflen, 10);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	230a      	movs	r3, #10
 80041c6:	9302      	str	r3, [sp, #8]
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2301      	movs	r3, #1
 80041d2:	21ae      	movs	r1, #174	; 0xae
 80041d4:	f7fd ff3e 	bl	8002054 <HAL_I2C_Mem_Read>
}
 80041d8:	bf00      	nop
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80041ec:	f107 020f 	add.w	r2, r7, #15
 80041f0:	2301      	movs	r3, #1
 80041f2:	2109      	movs	r1, #9
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ffa2 	bl	800413e <max30102_write>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	b2db      	uxtb	r3, r3
 800421a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800421c:	f107 020f 	add.w	r2, r7, #15
 8004220:	2301      	movs	r3, #1
 8004222:	2103      	movs	r1, #3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff8a 	bl	800413e <max30102_write>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	b2db      	uxtb	r3, r3
 800424a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800424c:	f107 020f 	add.w	r2, r7, #15
 8004250:	2301      	movs	r3, #1
 8004252:	2121      	movs	r1, #33	; 0x21
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff72 	bl	800413e <max30102_write>
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800426e:	f107 020f 	add.w	r2, r7, #15
 8004272:	2301      	movs	r3, #1
 8004274:	2109      	movs	r1, #9
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff94 	bl	80041a4 <max30102_read>
    config = (config & 0xf8) | mode;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	b25b      	sxtb	r3, r3
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	b25a      	sxtb	r2, r3
 8004286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428a:	4313      	orrs	r3, r2
 800428c:	b25b      	sxtb	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8004292:	f107 020f 	add.w	r2, r7, #15
 8004296:	2301      	movs	r3, #1
 8004298:	2109      	movs	r1, #9
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff4f 	bl	800413e <max30102_write>
    max30102_clear_fifo(obj);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8f7 	bl	8004494 <max30102_clear_fifo>
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80042ba:	f107 020f 	add.w	r2, r7, #15
 80042be:	2301      	movs	r3, #1
 80042c0:	210a      	movs	r1, #10
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff6e 	bl	80041a4 <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80042d6:	f107 020f 	add.w	r2, r7, #15
 80042da:	2301      	movs	r3, #1
 80042dc:	210a      	movs	r1, #10
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff2d 	bl	800413e <max30102_write>
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80042f8:	f107 020f 	add.w	r2, r7, #15
 80042fc:	2301      	movs	r3, #1
 80042fe:	210a      	movs	r1, #10
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff4f 	bl	80041a4 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	b25b      	sxtb	r3, r3
 800430a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800430e:	b25a      	sxtb	r2, r3
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	4313      	orrs	r3, r2
 8004316:	b25b      	sxtb	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800431c:	f107 020f 	add.w	r2, r7, #15
 8004320:	2301      	movs	r3, #1
 8004322:	210a      	movs	r1, #10
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff0a 	bl	800413e <max30102_write>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800433e:	f107 020f 	add.w	r2, r7, #15
 8004342:	2301      	movs	r3, #1
 8004344:	210a      	movs	r1, #10
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff2c 	bl	80041a4 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	b25b      	sxtb	r3, r3
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	b25a      	sxtb	r2, r3
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015b      	lsls	r3, r3, #5
 800435a:	b25b      	sxtb	r3, r3
 800435c:	4313      	orrs	r3, r2
 800435e:	b25b      	sxtb	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004364:	f107 020f 	add.w	r2, r7, #15
 8004368:	2301      	movs	r3, #1
 800436a:	210a      	movs	r1, #10
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fee6 	bl	800413e <max30102_write>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	0000      	movs	r0, r0
 800437c:	0000      	movs	r0, r0
	...

08004380 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800438c:	6838      	ldr	r0, [r7, #0]
 800438e:	f7fc f8e3 	bl	8000558 <__aeabi_f2d>
 8004392:	a30d      	add	r3, pc, #52	; (adr r3, 80043c8 <max30102_set_led_current_1+0x48>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f7fc fa60 	bl	800085c <__aeabi_ddiv>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fc fc08 	bl	8000bb8 <__aeabi_d2uiz>
 80043a8:	4603      	mov	r3, r0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80043ae:	f107 020f 	add.w	r2, r7, #15
 80043b2:	2301      	movs	r3, #1
 80043b4:	210c      	movs	r1, #12
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fec1 	bl	800413e <max30102_write>
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	f3af 8000 	nop.w
 80043c8:	9999999a 	.word	0x9999999a
 80043cc:	3fc99999 	.word	0x3fc99999

080043d0 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80043dc:	6838      	ldr	r0, [r7, #0]
 80043de:	f7fc f8bb 	bl	8000558 <__aeabi_f2d>
 80043e2:	a30d      	add	r3, pc, #52	; (adr r3, 8004418 <max30102_set_led_current_2+0x48>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc fa38 	bl	800085c <__aeabi_ddiv>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	f7fc fbe0 	bl	8000bb8 <__aeabi_d2uiz>
 80043f8:	4603      	mov	r3, r0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80043fe:	f107 020f 	add.w	r2, r7, #15
 8004402:	2301      	movs	r3, #1
 8004404:	210d      	movs	r1, #13
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe99 	bl	800413e <max30102_write>
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	f3af 8000 	nop.w
 8004418:	9999999a 	.word	0x9999999a
 800441c:	3fc99999 	.word	0x3fc99999

08004420 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	70fb      	strb	r3, [r7, #3]
 8004432:	460b      	mov	r3, r1
 8004434:	70bb      	strb	r3, [r7, #2]
 8004436:	4613      	mov	r3, r2
 8004438:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	015b      	lsls	r3, r3, #5
 8004442:	b25a      	sxtb	r2, r3
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	b25b      	sxtb	r3, r3
 8004448:	4313      	orrs	r3, r2
 800444a:	b25b      	sxtb	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8004450:	78bb      	ldrb	r3, [r7, #2]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	b25b      	sxtb	r3, r3
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	b25a      	sxtb	r2, r3
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	b25b      	sxtb	r3, r3
 8004460:	4313      	orrs	r3, r2
 8004462:	b25b      	sxtb	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8004468:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	b25a      	sxtb	r2, r3
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	b25b      	sxtb	r3, r3
 8004476:	4313      	orrs	r3, r2
 8004478:	b25b      	sxtb	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800447e:	f107 020f 	add.w	r2, r7, #15
 8004482:	2301      	movs	r3, #1
 8004484:	2108      	movs	r1, #8
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fe59 	bl	800413e <max30102_write>
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80044a0:	f107 020f 	add.w	r2, r7, #15
 80044a4:	2303      	movs	r3, #3
 80044a6:	2104      	movs	r1, #4
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fe48 	bl	800413e <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80044ae:	f107 020f 	add.w	r2, r7, #15
 80044b2:	2303      	movs	r3, #3
 80044b4:	2106      	movs	r1, #6
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fe41 	bl	800413e <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80044bc:	f107 020f 	add.w	r2, r7, #15
 80044c0:	2303      	movs	r3, #3
 80044c2:	2105      	movs	r1, #5
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fe3a 	bl	800413e <max30102_write>
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b088      	sub	sp, #32
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	74fb      	strb	r3, [r7, #19]
 80044de:	2300      	movs	r3, #0
 80044e0:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80044e2:	f107 0213 	add.w	r2, r7, #19
 80044e6:	2301      	movs	r3, #1
 80044e8:	2104      	movs	r1, #4
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fe5a 	bl	80041a4 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80044f0:	f107 0212 	add.w	r2, r7, #18
 80044f4:	2301      	movs	r3, #1
 80044f6:	2106      	movs	r1, #6
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fe53 	bl	80041a4 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80044fe:	7cfa      	ldrb	r2, [r7, #19]
 8004500:	7cbb      	ldrb	r3, [r7, #18]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8004508:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc03      	bgt.n	8004518 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8004510:	7ffb      	ldrb	r3, [r7, #31]
 8004512:	3320      	adds	r3, #32
 8004514:	b2db      	uxtb	r3, r3
 8004516:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8004518:	2300      	movs	r3, #0
 800451a:	77bb      	strb	r3, [r7, #30]
 800451c:	e035      	b.n	800458a <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800451e:	f107 020c 	add.w	r2, r7, #12
 8004522:	2306      	movs	r3, #6
 8004524:	2107      	movs	r1, #7
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff fe3c 	bl	80041a4 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800452c:	7b3b      	ldrb	r3, [r7, #12]
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	461a      	mov	r2, r3
 8004532:	7b7b      	ldrb	r3, [r7, #13]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	4313      	orrs	r3, r2
 8004538:	7bba      	ldrb	r2, [r7, #14]
 800453a:	4313      	orrs	r3, r2
 800453c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004540:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	461a      	mov	r2, r3
 8004548:	7c3b      	ldrb	r3, [r7, #16]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	4313      	orrs	r3, r2
 800454e:	7c7a      	ldrb	r2, [r7, #17]
 8004550:	4313      	orrs	r3, r2
 8004552:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004556:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8004558:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8004566:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	3320      	adds	r3, #32
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	69b8      	ldr	r0, [r7, #24]
 800457a:	f7ff fda5 	bl	80040c8 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800457e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3301      	adds	r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	77bb      	strb	r3, [r7, #30]
 800458a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800458e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004592:	429a      	cmp	r2, r3
 8004594:	dbc3      	blt.n	800451e <max30102_read_fifo+0x4c>
    }
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <max30102_update>:
{
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
}

void max30102_update(max30102_t *obj) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	max30102_read_fifo(obj);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff92 	bl	80044d2 <max30102_read_fifo>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000004c 	.word	0x2000004c

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f002 ff24 	bl	8007424 <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08007854 	.word	0x08007854
 8004600:	08007854 	.word	0x08007854
 8004604:	08007854 	.word	0x08007854
 8004608:	08007858 	.word	0x08007858

0800460c <malloc>:
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <malloc+0xc>)
 800460e:	4601      	mov	r1, r0
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	f000 b88d 	b.w	8004730 <_malloc_r>
 8004616:	bf00      	nop
 8004618:	2000004c 	.word	0x2000004c

0800461c <free>:
 800461c:	4b02      	ldr	r3, [pc, #8]	; (8004628 <free+0xc>)
 800461e:	4601      	mov	r1, r0
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	f000 b819 	b.w	8004658 <_free_r>
 8004626:	bf00      	nop
 8004628:	2000004c 	.word	0x2000004c

0800462c <memcpy>:
 800462c:	440a      	add	r2, r1
 800462e:	4291      	cmp	r1, r2
 8004630:	f100 33ff 	add.w	r3, r0, #4294967295
 8004634:	d100      	bne.n	8004638 <memcpy+0xc>
 8004636:	4770      	bx	lr
 8004638:	b510      	push	{r4, lr}
 800463a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800463e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004642:	4291      	cmp	r1, r2
 8004644:	d1f9      	bne.n	800463a <memcpy+0xe>
 8004646:	bd10      	pop	{r4, pc}

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <_free_r>:
 8004658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800465a:	2900      	cmp	r1, #0
 800465c:	d044      	beq.n	80046e8 <_free_r+0x90>
 800465e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004662:	9001      	str	r0, [sp, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f1a1 0404 	sub.w	r4, r1, #4
 800466a:	bfb8      	it	lt
 800466c:	18e4      	addlt	r4, r4, r3
 800466e:	f001 fc05 	bl	8005e7c <__malloc_lock>
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <_free_r+0x94>)
 8004674:	9801      	ldr	r0, [sp, #4]
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	b933      	cbnz	r3, 8004688 <_free_r+0x30>
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	6014      	str	r4, [r2, #0]
 800467e:	b003      	add	sp, #12
 8004680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004684:	f001 bc00 	b.w	8005e88 <__malloc_unlock>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d908      	bls.n	800469e <_free_r+0x46>
 800468c:	6825      	ldr	r5, [r4, #0]
 800468e:	1961      	adds	r1, r4, r5
 8004690:	428b      	cmp	r3, r1
 8004692:	bf01      	itttt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	1949      	addeq	r1, r1, r5
 800469a:	6021      	streq	r1, [r4, #0]
 800469c:	e7ed      	b.n	800467a <_free_r+0x22>
 800469e:	461a      	mov	r2, r3
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b10b      	cbz	r3, 80046a8 <_free_r+0x50>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d9fa      	bls.n	800469e <_free_r+0x46>
 80046a8:	6811      	ldr	r1, [r2, #0]
 80046aa:	1855      	adds	r5, r2, r1
 80046ac:	42a5      	cmp	r5, r4
 80046ae:	d10b      	bne.n	80046c8 <_free_r+0x70>
 80046b0:	6824      	ldr	r4, [r4, #0]
 80046b2:	4421      	add	r1, r4
 80046b4:	1854      	adds	r4, r2, r1
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	d1e0      	bne.n	800467e <_free_r+0x26>
 80046bc:	681c      	ldr	r4, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	6053      	str	r3, [r2, #4]
 80046c2:	4421      	add	r1, r4
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	e7da      	b.n	800467e <_free_r+0x26>
 80046c8:	d902      	bls.n	80046d0 <_free_r+0x78>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6003      	str	r3, [r0, #0]
 80046ce:	e7d6      	b.n	800467e <_free_r+0x26>
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	1961      	adds	r1, r4, r5
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf04      	itt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	bf04      	itt	eq
 80046e0:	1949      	addeq	r1, r1, r5
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	6054      	str	r4, [r2, #4]
 80046e6:	e7ca      	b.n	800467e <_free_r+0x26>
 80046e8:	b003      	add	sp, #12
 80046ea:	bd30      	pop	{r4, r5, pc}
 80046ec:	200004e0 	.word	0x200004e0

080046f0 <sbrk_aligned>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4e0e      	ldr	r6, [pc, #56]	; (800472c <sbrk_aligned+0x3c>)
 80046f4:	460c      	mov	r4, r1
 80046f6:	6831      	ldr	r1, [r6, #0]
 80046f8:	4605      	mov	r5, r0
 80046fa:	b911      	cbnz	r1, 8004702 <sbrk_aligned+0x12>
 80046fc:	f000 fcf6 	bl	80050ec <_sbrk_r>
 8004700:	6030      	str	r0, [r6, #0]
 8004702:	4621      	mov	r1, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 fcf1 	bl	80050ec <_sbrk_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d00a      	beq.n	8004724 <sbrk_aligned+0x34>
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d007      	beq.n	8004728 <sbrk_aligned+0x38>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4628      	mov	r0, r5
 800471c:	f000 fce6 	bl	80050ec <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d101      	bne.n	8004728 <sbrk_aligned+0x38>
 8004724:	f04f 34ff 	mov.w	r4, #4294967295
 8004728:	4620      	mov	r0, r4
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	200004e4 	.word	0x200004e4

08004730 <_malloc_r>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4607      	mov	r7, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d905      	bls.n	8004758 <_malloc_r+0x28>
 800474c:	230c      	movs	r3, #12
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	2600      	movs	r6, #0
 8004752:	4630      	mov	r0, r6
 8004754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004758:	4e2e      	ldr	r6, [pc, #184]	; (8004814 <_malloc_r+0xe4>)
 800475a:	f001 fb8f 	bl	8005e7c <__malloc_lock>
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	461c      	mov	r4, r3
 8004762:	bb34      	cbnz	r4, 80047b2 <_malloc_r+0x82>
 8004764:	4629      	mov	r1, r5
 8004766:	4638      	mov	r0, r7
 8004768:	f7ff ffc2 	bl	80046f0 <sbrk_aligned>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	4604      	mov	r4, r0
 8004770:	d14d      	bne.n	800480e <_malloc_r+0xde>
 8004772:	6834      	ldr	r4, [r6, #0]
 8004774:	4626      	mov	r6, r4
 8004776:	2e00      	cmp	r6, #0
 8004778:	d140      	bne.n	80047fc <_malloc_r+0xcc>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4631      	mov	r1, r6
 800477e:	4638      	mov	r0, r7
 8004780:	eb04 0803 	add.w	r8, r4, r3
 8004784:	f000 fcb2 	bl	80050ec <_sbrk_r>
 8004788:	4580      	cmp	r8, r0
 800478a:	d13a      	bne.n	8004802 <_malloc_r+0xd2>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	3503      	adds	r5, #3
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	f025 0503 	bic.w	r5, r5, #3
 8004796:	3508      	adds	r5, #8
 8004798:	2d0c      	cmp	r5, #12
 800479a:	bf38      	it	cc
 800479c:	250c      	movcc	r5, #12
 800479e:	4629      	mov	r1, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ffa5 	bl	80046f0 <sbrk_aligned>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d02b      	beq.n	8004802 <_malloc_r+0xd2>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	442b      	add	r3, r5
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e00e      	b.n	80047d0 <_malloc_r+0xa0>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	1b52      	subs	r2, r2, r5
 80047b6:	d41e      	bmi.n	80047f6 <_malloc_r+0xc6>
 80047b8:	2a0b      	cmp	r2, #11
 80047ba:	d916      	bls.n	80047ea <_malloc_r+0xba>
 80047bc:	1961      	adds	r1, r4, r5
 80047be:	42a3      	cmp	r3, r4
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	bf18      	it	ne
 80047c4:	6059      	strne	r1, [r3, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	bf08      	it	eq
 80047ca:	6031      	streq	r1, [r6, #0]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4638      	mov	r0, r7
 80047d2:	f104 060b 	add.w	r6, r4, #11
 80047d6:	f001 fb57 	bl	8005e88 <__malloc_unlock>
 80047da:	f026 0607 	bic.w	r6, r6, #7
 80047de:	1d23      	adds	r3, r4, #4
 80047e0:	1af2      	subs	r2, r6, r3
 80047e2:	d0b6      	beq.n	8004752 <_malloc_r+0x22>
 80047e4:	1b9b      	subs	r3, r3, r6
 80047e6:	50a3      	str	r3, [r4, r2]
 80047e8:	e7b3      	b.n	8004752 <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	6032      	streq	r2, [r6, #0]
 80047f2:	605a      	strne	r2, [r3, #4]
 80047f4:	e7ec      	b.n	80047d0 <_malloc_r+0xa0>
 80047f6:	4623      	mov	r3, r4
 80047f8:	6864      	ldr	r4, [r4, #4]
 80047fa:	e7b2      	b.n	8004762 <_malloc_r+0x32>
 80047fc:	4634      	mov	r4, r6
 80047fe:	6876      	ldr	r6, [r6, #4]
 8004800:	e7b9      	b.n	8004776 <_malloc_r+0x46>
 8004802:	230c      	movs	r3, #12
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4638      	mov	r0, r7
 8004808:	f001 fb3e 	bl	8005e88 <__malloc_unlock>
 800480c:	e7a1      	b.n	8004752 <_malloc_r+0x22>
 800480e:	6025      	str	r5, [r4, #0]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa0>
 8004812:	bf00      	nop
 8004814:	200004e0 	.word	0x200004e0

08004818 <__cvt>:
 8004818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	ec55 4b10 	vmov	r4, r5, d0
 8004820:	2d00      	cmp	r5, #0
 8004822:	460e      	mov	r6, r1
 8004824:	4619      	mov	r1, r3
 8004826:	462b      	mov	r3, r5
 8004828:	bfbb      	ittet	lt
 800482a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800482e:	461d      	movlt	r5, r3
 8004830:	2300      	movge	r3, #0
 8004832:	232d      	movlt	r3, #45	; 0x2d
 8004834:	700b      	strb	r3, [r1, #0]
 8004836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800483c:	4691      	mov	r9, r2
 800483e:	f023 0820 	bic.w	r8, r3, #32
 8004842:	bfbc      	itt	lt
 8004844:	4622      	movlt	r2, r4
 8004846:	4614      	movlt	r4, r2
 8004848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800484c:	d005      	beq.n	800485a <__cvt+0x42>
 800484e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004852:	d100      	bne.n	8004856 <__cvt+0x3e>
 8004854:	3601      	adds	r6, #1
 8004856:	2102      	movs	r1, #2
 8004858:	e000      	b.n	800485c <__cvt+0x44>
 800485a:	2103      	movs	r1, #3
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	ab02      	add	r3, sp, #8
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	ec45 4b10 	vmov	d0, r4, r5
 8004868:	4653      	mov	r3, sl
 800486a:	4632      	mov	r2, r6
 800486c:	f000 fd14 	bl	8005298 <_dtoa_r>
 8004870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004874:	4607      	mov	r7, r0
 8004876:	d102      	bne.n	800487e <__cvt+0x66>
 8004878:	f019 0f01 	tst.w	r9, #1
 800487c:	d022      	beq.n	80048c4 <__cvt+0xac>
 800487e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004882:	eb07 0906 	add.w	r9, r7, r6
 8004886:	d110      	bne.n	80048aa <__cvt+0x92>
 8004888:	783b      	ldrb	r3, [r7, #0]
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d10a      	bne.n	80048a4 <__cvt+0x8c>
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fc f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800489a:	b918      	cbnz	r0, 80048a4 <__cvt+0x8c>
 800489c:	f1c6 0601 	rsb	r6, r6, #1
 80048a0:	f8ca 6000 	str.w	r6, [sl]
 80048a4:	f8da 3000 	ldr.w	r3, [sl]
 80048a8:	4499      	add	r9, r3
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fc f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80048b6:	b108      	cbz	r0, 80048bc <__cvt+0xa4>
 80048b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048bc:	2230      	movs	r2, #48	; 0x30
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	454b      	cmp	r3, r9
 80048c2:	d307      	bcc.n	80048d4 <__cvt+0xbc>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c8:	1bdb      	subs	r3, r3, r7
 80048ca:	4638      	mov	r0, r7
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	b004      	add	sp, #16
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	9103      	str	r1, [sp, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e7f0      	b.n	80048be <__cvt+0xa6>

080048dc <__exponent>:
 80048dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048de:	4603      	mov	r3, r0
 80048e0:	2900      	cmp	r1, #0
 80048e2:	bfb8      	it	lt
 80048e4:	4249      	neglt	r1, r1
 80048e6:	f803 2b02 	strb.w	r2, [r3], #2
 80048ea:	bfb4      	ite	lt
 80048ec:	222d      	movlt	r2, #45	; 0x2d
 80048ee:	222b      	movge	r2, #43	; 0x2b
 80048f0:	2909      	cmp	r1, #9
 80048f2:	7042      	strb	r2, [r0, #1]
 80048f4:	dd2a      	ble.n	800494c <__exponent+0x70>
 80048f6:	f10d 0407 	add.w	r4, sp, #7
 80048fa:	46a4      	mov	ip, r4
 80048fc:	270a      	movs	r7, #10
 80048fe:	46a6      	mov	lr, r4
 8004900:	460a      	mov	r2, r1
 8004902:	fb91 f6f7 	sdiv	r6, r1, r7
 8004906:	fb07 1516 	mls	r5, r7, r6, r1
 800490a:	3530      	adds	r5, #48	; 0x30
 800490c:	2a63      	cmp	r2, #99	; 0x63
 800490e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004916:	4631      	mov	r1, r6
 8004918:	dcf1      	bgt.n	80048fe <__exponent+0x22>
 800491a:	3130      	adds	r1, #48	; 0x30
 800491c:	f1ae 0502 	sub.w	r5, lr, #2
 8004920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004924:	1c44      	adds	r4, r0, #1
 8004926:	4629      	mov	r1, r5
 8004928:	4561      	cmp	r1, ip
 800492a:	d30a      	bcc.n	8004942 <__exponent+0x66>
 800492c:	f10d 0209 	add.w	r2, sp, #9
 8004930:	eba2 020e 	sub.w	r2, r2, lr
 8004934:	4565      	cmp	r5, ip
 8004936:	bf88      	it	hi
 8004938:	2200      	movhi	r2, #0
 800493a:	4413      	add	r3, r2
 800493c:	1a18      	subs	r0, r3, r0
 800493e:	b003      	add	sp, #12
 8004940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004946:	f804 2f01 	strb.w	r2, [r4, #1]!
 800494a:	e7ed      	b.n	8004928 <__exponent+0x4c>
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	3130      	adds	r1, #48	; 0x30
 8004950:	7083      	strb	r3, [r0, #2]
 8004952:	70c1      	strb	r1, [r0, #3]
 8004954:	1d03      	adds	r3, r0, #4
 8004956:	e7f1      	b.n	800493c <__exponent+0x60>

08004958 <_printf_float>:
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	ed2d 8b02 	vpush	{d8}
 8004960:	b08d      	sub	sp, #52	; 0x34
 8004962:	460c      	mov	r4, r1
 8004964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004968:	4616      	mov	r6, r2
 800496a:	461f      	mov	r7, r3
 800496c:	4605      	mov	r5, r0
 800496e:	f001 fa81 	bl	8005e74 <_localeconv_r>
 8004972:	f8d0 a000 	ldr.w	sl, [r0]
 8004976:	4650      	mov	r0, sl
 8004978:	f7fb fc32 	bl	80001e0 <strlen>
 800497c:	2300      	movs	r3, #0
 800497e:	930a      	str	r3, [sp, #40]	; 0x28
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	9305      	str	r3, [sp, #20]
 8004984:	f8d8 3000 	ldr.w	r3, [r8]
 8004988:	f894 b018 	ldrb.w	fp, [r4, #24]
 800498c:	3307      	adds	r3, #7
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	f8c8 2000 	str.w	r2, [r8]
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80049b0:	ee08 0a10 	vmov	s16, r0
 80049b4:	4b9f      	ldr	r3, [pc, #636]	; (8004c34 <_printf_float+0x2dc>)
 80049b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	f7fc f8bd 	bl	8000b3c <__aeabi_dcmpun>
 80049c2:	bb88      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049c8:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <_printf_float+0x2dc>)
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	f7fc f897 	bl	8000b00 <__aeabi_dcmple>
 80049d2:	bb48      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fc f886 	bl	8000aec <__aeabi_dcmplt>
 80049e0:	b110      	cbz	r0, 80049e8 <_printf_float+0x90>
 80049e2:	232d      	movs	r3, #45	; 0x2d
 80049e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e8:	4b93      	ldr	r3, [pc, #588]	; (8004c38 <_printf_float+0x2e0>)
 80049ea:	4894      	ldr	r0, [pc, #592]	; (8004c3c <_printf_float+0x2e4>)
 80049ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049f0:	bf94      	ite	ls
 80049f2:	4698      	movls	r8, r3
 80049f4:	4680      	movhi	r8, r0
 80049f6:	2303      	movs	r3, #3
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	9b05      	ldr	r3, [sp, #20]
 80049fc:	f023 0204 	bic.w	r2, r3, #4
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	f04f 0900 	mov.w	r9, #0
 8004a06:	9700      	str	r7, [sp, #0]
 8004a08:	4633      	mov	r3, r6
 8004a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f9d8 	bl	8004dc4 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	f040 8090 	bne.w	8004b3a <_printf_float+0x1e2>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b00d      	add	sp, #52	; 0x34
 8004a20:	ecbd 8b02 	vpop	{d8}
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fc f884 	bl	8000b3c <__aeabi_dcmpun>
 8004a34:	b140      	cbz	r0, 8004a48 <_printf_float+0xf0>
 8004a36:	464b      	mov	r3, r9
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfbc      	itt	lt
 8004a3c:	232d      	movlt	r3, #45	; 0x2d
 8004a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a42:	487f      	ldr	r0, [pc, #508]	; (8004c40 <_printf_float+0x2e8>)
 8004a44:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <_printf_float+0x2ec>)
 8004a46:	e7d1      	b.n	80049ec <_printf_float+0x94>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a4e:	9206      	str	r2, [sp, #24]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	d13f      	bne.n	8004ad4 <_printf_float+0x17c>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	9b05      	ldr	r3, [sp, #20]
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a60:	2300      	movs	r3, #0
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	ab0a      	add	r3, sp, #40	; 0x28
 8004a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a6a:	ab09      	add	r3, sp, #36	; 0x24
 8004a6c:	ec49 8b10 	vmov	d0, r8, r9
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fecd 	bl	8004818 <__cvt>
 8004a7e:	9b06      	ldr	r3, [sp, #24]
 8004a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a82:	2b47      	cmp	r3, #71	; 0x47
 8004a84:	4680      	mov	r8, r0
 8004a86:	d108      	bne.n	8004a9a <_printf_float+0x142>
 8004a88:	1cc8      	adds	r0, r1, #3
 8004a8a:	db02      	blt.n	8004a92 <_printf_float+0x13a>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	dd41      	ble.n	8004b16 <_printf_float+0x1be>
 8004a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a96:	fa5f fb8b 	uxtb.w	fp, fp
 8004a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a9e:	d820      	bhi.n	8004ae2 <_printf_float+0x18a>
 8004aa0:	3901      	subs	r1, #1
 8004aa2:	465a      	mov	r2, fp
 8004aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8004aaa:	f7ff ff17 	bl	80048dc <__exponent>
 8004aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ab0:	1813      	adds	r3, r2, r0
 8004ab2:	2a01      	cmp	r2, #1
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	dc02      	bgt.n	8004ac0 <_printf_float+0x168>
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	07d2      	lsls	r2, r2, #31
 8004abe:	d501      	bpl.n	8004ac4 <_printf_float+0x16c>
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d09c      	beq.n	8004a06 <_printf_float+0xae>
 8004acc:	232d      	movs	r3, #45	; 0x2d
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad2:	e798      	b.n	8004a06 <_printf_float+0xae>
 8004ad4:	9a06      	ldr	r2, [sp, #24]
 8004ad6:	2a47      	cmp	r2, #71	; 0x47
 8004ad8:	d1be      	bne.n	8004a58 <_printf_float+0x100>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1bc      	bne.n	8004a58 <_printf_float+0x100>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7b9      	b.n	8004a56 <_printf_float+0xfe>
 8004ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ae6:	d118      	bne.n	8004b1a <_printf_float+0x1c2>
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	dd0b      	ble.n	8004b06 <_printf_float+0x1ae>
 8004aee:	6121      	str	r1, [r4, #16]
 8004af0:	b913      	cbnz	r3, 8004af8 <_printf_float+0x1a0>
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	07d0      	lsls	r0, r2, #31
 8004af6:	d502      	bpl.n	8004afe <_printf_float+0x1a6>
 8004af8:	3301      	adds	r3, #1
 8004afa:	440b      	add	r3, r1
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b00:	f04f 0900 	mov.w	r9, #0
 8004b04:	e7de      	b.n	8004ac4 <_printf_float+0x16c>
 8004b06:	b913      	cbnz	r3, 8004b0e <_printf_float+0x1b6>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	07d2      	lsls	r2, r2, #31
 8004b0c:	d501      	bpl.n	8004b12 <_printf_float+0x1ba>
 8004b0e:	3302      	adds	r3, #2
 8004b10:	e7f4      	b.n	8004afc <_printf_float+0x1a4>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e7f2      	b.n	8004afc <_printf_float+0x1a4>
 8004b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	db05      	blt.n	8004b2c <_printf_float+0x1d4>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6121      	str	r1, [r4, #16]
 8004b24:	07d8      	lsls	r0, r3, #31
 8004b26:	d5ea      	bpl.n	8004afe <_printf_float+0x1a6>
 8004b28:	1c4b      	adds	r3, r1, #1
 8004b2a:	e7e7      	b.n	8004afc <_printf_float+0x1a4>
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	bfd4      	ite	le
 8004b30:	f1c1 0202 	rsble	r2, r1, #2
 8004b34:	2201      	movgt	r2, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	e7e0      	b.n	8004afc <_printf_float+0x1a4>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	055a      	lsls	r2, r3, #21
 8004b3e:	d407      	bmi.n	8004b50 <_printf_float+0x1f8>
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	4642      	mov	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d12c      	bne.n	8004ba8 <_printf_float+0x250>
 8004b4e:	e764      	b.n	8004a1a <_printf_float+0xc2>
 8004b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b54:	f240 80e0 	bls.w	8004d18 <_printf_float+0x3c0>
 8004b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f7fb ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d034      	beq.n	8004bd2 <_printf_float+0x27a>
 8004b68:	4a37      	ldr	r2, [pc, #220]	; (8004c48 <_printf_float+0x2f0>)
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af51 	beq.w	8004a1a <_printf_float+0xc2>
 8004b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	db02      	blt.n	8004b86 <_printf_float+0x22e>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07d8      	lsls	r0, r3, #31
 8004b84:	d510      	bpl.n	8004ba8 <_printf_float+0x250>
 8004b86:	ee18 3a10 	vmov	r3, s16
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af41 	beq.w	8004a1a <_printf_float+0xc2>
 8004b98:	f04f 0800 	mov.w	r8, #0
 8004b9c:	f104 091a 	add.w	r9, r4, #26
 8004ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4543      	cmp	r3, r8
 8004ba6:	dc09      	bgt.n	8004bbc <_printf_float+0x264>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	f100 8105 	bmi.w	8004dba <_printf_float+0x462>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e730      	b.n	8004a1e <_printf_float+0xc6>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	464a      	mov	r2, r9
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f43f af27 	beq.w	8004a1a <_printf_float+0xc2>
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	e7e6      	b.n	8004ba0 <_printf_float+0x248>
 8004bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dc39      	bgt.n	8004c4c <_printf_float+0x2f4>
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <_printf_float+0x2f0>)
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f af19 	beq.w	8004a1a <_printf_float+0xc2>
 8004be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d102      	bne.n	8004bf6 <_printf_float+0x29e>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d5d8      	bpl.n	8004ba8 <_printf_float+0x250>
 8004bf6:	ee18 3a10 	vmov	r3, s16
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af09 	beq.w	8004a1a <_printf_float+0xc2>
 8004c08:	f04f 0900 	mov.w	r9, #0
 8004c0c:	f104 0a1a 	add.w	sl, r4, #26
 8004c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c12:	425b      	negs	r3, r3
 8004c14:	454b      	cmp	r3, r9
 8004c16:	dc01      	bgt.n	8004c1c <_printf_float+0x2c4>
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	e792      	b.n	8004b42 <_printf_float+0x1ea>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f aef7 	beq.w	8004a1a <_printf_float+0xc2>
 8004c2c:	f109 0901 	add.w	r9, r9, #1
 8004c30:	e7ee      	b.n	8004c10 <_printf_float+0x2b8>
 8004c32:	bf00      	nop
 8004c34:	7fefffff 	.word	0x7fefffff
 8004c38:	08007474 	.word	0x08007474
 8004c3c:	08007478 	.word	0x08007478
 8004c40:	08007480 	.word	0x08007480
 8004c44:	0800747c 	.word	0x0800747c
 8004c48:	08007484 	.word	0x08007484
 8004c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfa8      	it	ge
 8004c54:	461a      	movge	r2, r3
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	4691      	mov	r9, r2
 8004c5a:	dc37      	bgt.n	8004ccc <_printf_float+0x374>
 8004c5c:	f04f 0b00 	mov.w	fp, #0
 8004c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c64:	f104 021a 	add.w	r2, r4, #26
 8004c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	eba3 0309 	sub.w	r3, r3, r9
 8004c70:	455b      	cmp	r3, fp
 8004c72:	dc33      	bgt.n	8004cdc <_printf_float+0x384>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	db3b      	blt.n	8004cf4 <_printf_float+0x39c>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d438      	bmi.n	8004cf4 <_printf_float+0x39c>
 8004c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c84:	9a05      	ldr	r2, [sp, #20]
 8004c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c88:	1a9a      	subs	r2, r3, r2
 8004c8a:	eba3 0901 	sub.w	r9, r3, r1
 8004c8e:	4591      	cmp	r9, r2
 8004c90:	bfa8      	it	ge
 8004c92:	4691      	movge	r9, r2
 8004c94:	f1b9 0f00 	cmp.w	r9, #0
 8004c98:	dc35      	bgt.n	8004d06 <_printf_float+0x3ae>
 8004c9a:	f04f 0800 	mov.w	r8, #0
 8004c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca2:	f104 0a1a 	add.w	sl, r4, #26
 8004ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	eba3 0309 	sub.w	r3, r3, r9
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	f77f af79 	ble.w	8004ba8 <_printf_float+0x250>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f aeaa 	beq.w	8004a1a <_printf_float+0xc2>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	e7ec      	b.n	8004ca6 <_printf_float+0x34e>
 8004ccc:	4613      	mov	r3, r2
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d1c0      	bne.n	8004c5c <_printf_float+0x304>
 8004cda:	e69e      	b.n	8004a1a <_printf_float+0xc2>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	9205      	str	r2, [sp, #20]
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f ae97 	beq.w	8004a1a <_printf_float+0xc2>
 8004cec:	9a05      	ldr	r2, [sp, #20]
 8004cee:	f10b 0b01 	add.w	fp, fp, #1
 8004cf2:	e7b9      	b.n	8004c68 <_printf_float+0x310>
 8004cf4:	ee18 3a10 	vmov	r3, s16
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1be      	bne.n	8004c82 <_printf_float+0x32a>
 8004d04:	e689      	b.n	8004a1a <_printf_float+0xc2>
 8004d06:	9a05      	ldr	r2, [sp, #20]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	4442      	add	r2, r8
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c1      	bne.n	8004c9a <_printf_float+0x342>
 8004d16:	e680      	b.n	8004a1a <_printf_float+0xc2>
 8004d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	dc01      	bgt.n	8004d22 <_printf_float+0x3ca>
 8004d1e:	07db      	lsls	r3, r3, #31
 8004d20:	d538      	bpl.n	8004d94 <_printf_float+0x43c>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4642      	mov	r2, r8
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae74 	beq.w	8004a1a <_printf_float+0xc2>
 8004d32:	ee18 3a10 	vmov	r3, s16
 8004d36:	4652      	mov	r2, sl
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f43f ae6b 	beq.w	8004a1a <_printf_float+0xc2>
 8004d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f7fb fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_printf_float+0x432>
 8004d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d54:	f108 0201 	add.w	r2, r8, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	d10e      	bne.n	8004d82 <_printf_float+0x42a>
 8004d64:	e659      	b.n	8004a1a <_printf_float+0xc2>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae52 	beq.w	8004a1a <_printf_float+0xc2>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4543      	cmp	r3, r8
 8004d80:	dcf1      	bgt.n	8004d66 <_printf_float+0x40e>
 8004d82:	464b      	mov	r3, r9
 8004d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d88:	e6dc      	b.n	8004b44 <_printf_float+0x1ec>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0a1a 	add.w	sl, r4, #26
 8004d92:	e7f2      	b.n	8004d7a <_printf_float+0x422>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4642      	mov	r2, r8
 8004d98:	e7df      	b.n	8004d5a <_printf_float+0x402>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae38 	beq.w	8004a1a <_printf_float+0xc2>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dcf0      	bgt.n	8004d9a <_printf_float+0x442>
 8004db8:	e6fa      	b.n	8004bb0 <_printf_float+0x258>
 8004dba:	f04f 0800 	mov.w	r8, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f4      	b.n	8004dae <_printf_float+0x456>

08004dc4 <_printf_common>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4699      	mov	r9, r3
 8004dcc:	688a      	ldr	r2, [r1, #8]
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bfb8      	it	lt
 8004dd8:	4613      	movlt	r3, r2
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de0:	4607      	mov	r7, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	b10a      	cbz	r2, 8004dea <_printf_common+0x26>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	0699      	lsls	r1, r3, #26
 8004dee:	bf42      	ittt	mi
 8004df0:	6833      	ldrmi	r3, [r6, #0]
 8004df2:	3302      	addmi	r3, #2
 8004df4:	6033      	strmi	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	f015 0506 	ands.w	r5, r5, #6
 8004dfc:	d106      	bne.n	8004e0c <_printf_common+0x48>
 8004dfe:	f104 0a19 	add.w	sl, r4, #25
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc26      	bgt.n	8004e5a <_printf_common+0x96>
 8004e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e10:	1e13      	subs	r3, r2, #0
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	0692      	lsls	r2, r2, #26
 8004e1a:	d42b      	bmi.n	8004e74 <_printf_common+0xb0>
 8004e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e20:	4649      	mov	r1, r9
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d01e      	beq.n	8004e68 <_printf_common+0xa4>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	68e5      	ldr	r5, [r4, #12]
 8004e2e:	6832      	ldr	r2, [r6, #0]
 8004e30:	f003 0306 	and.w	r3, r3, #6
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	bf08      	it	eq
 8004e38:	1aad      	subeq	r5, r5, r2
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	bf0c      	ite	eq
 8004e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e44:	2500      	movne	r5, #0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfc4      	itt	gt
 8004e4a:	1a9b      	subgt	r3, r3, r2
 8004e4c:	18ed      	addgt	r5, r5, r3
 8004e4e:	2600      	movs	r6, #0
 8004e50:	341a      	adds	r4, #26
 8004e52:	42b5      	cmp	r5, r6
 8004e54:	d11a      	bne.n	8004e8c <_printf_common+0xc8>
 8004e56:	2000      	movs	r0, #0
 8004e58:	e008      	b.n	8004e6c <_printf_common+0xa8>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4638      	mov	r0, r7
 8004e62:	47c0      	blx	r8
 8004e64:	3001      	adds	r0, #1
 8004e66:	d103      	bne.n	8004e70 <_printf_common+0xac>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7c6      	b.n	8004e02 <_printf_common+0x3e>
 8004e74:	18e1      	adds	r1, r4, r3
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	2030      	movs	r0, #48	; 0x30
 8004e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e7e:	4422      	add	r2, r4
 8004e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e88:	3302      	adds	r3, #2
 8004e8a:	e7c7      	b.n	8004e1c <_printf_common+0x58>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4622      	mov	r2, r4
 8004e90:	4649      	mov	r1, r9
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d0e6      	beq.n	8004e68 <_printf_common+0xa4>
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7d9      	b.n	8004e52 <_printf_common+0x8e>
	...

08004ea0 <_printf_i>:
 8004ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	7e0f      	ldrb	r7, [r1, #24]
 8004ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ea8:	2f78      	cmp	r7, #120	; 0x78
 8004eaa:	4691      	mov	r9, r2
 8004eac:	4680      	mov	r8, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eb6:	d807      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eb8:	2f62      	cmp	r7, #98	; 0x62
 8004eba:	d80a      	bhi.n	8004ed2 <_printf_i+0x32>
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f000 80d8 	beq.w	8005072 <_printf_i+0x1d2>
 8004ec2:	2f58      	cmp	r7, #88	; 0x58
 8004ec4:	f000 80a3 	beq.w	800500e <_printf_i+0x16e>
 8004ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ed0:	e03a      	b.n	8004f48 <_printf_i+0xa8>
 8004ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ed6:	2b15      	cmp	r3, #21
 8004ed8:	d8f6      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eda:	a101      	add	r1, pc, #4	; (adr r1, 8004ee0 <_printf_i+0x40>)
 8004edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004ec9 	.word	0x08004ec9
 8004eec:	08004ec9 	.word	0x08004ec9
 8004ef0:	08004ec9 	.word	0x08004ec9
 8004ef4:	08004ec9 	.word	0x08004ec9
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004ec9 	.word	0x08004ec9
 8004f00:	08004ec9 	.word	0x08004ec9
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	08005059 	.word	0x08005059
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	0800503b 	.word	0x0800503b
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800507b 	.word	0x0800507b
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	08005043 	.word	0x08005043
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0a3      	b.n	8005094 <_printf_i+0x1f4>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	6829      	ldr	r1, [r5, #0]
 8004f50:	0606      	lsls	r6, r0, #24
 8004f52:	f101 0304 	add.w	r3, r1, #4
 8004f56:	d50a      	bpl.n	8004f6e <_printf_i+0xce>
 8004f58:	680e      	ldr	r6, [r1, #0]
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	da03      	bge.n	8004f68 <_printf_i+0xc8>
 8004f60:	232d      	movs	r3, #45	; 0x2d
 8004f62:	4276      	negs	r6, r6
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f68:	485e      	ldr	r0, [pc, #376]	; (80050e4 <_printf_i+0x244>)
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	e019      	b.n	8004fa2 <_printf_i+0x102>
 8004f6e:	680e      	ldr	r6, [r1, #0]
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f76:	bf18      	it	ne
 8004f78:	b236      	sxthne	r6, r6
 8004f7a:	e7ef      	b.n	8004f5c <_printf_i+0xbc>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	1d19      	adds	r1, r3, #4
 8004f82:	6029      	str	r1, [r5, #0]
 8004f84:	0601      	lsls	r1, r0, #24
 8004f86:	d501      	bpl.n	8004f8c <_printf_i+0xec>
 8004f88:	681e      	ldr	r6, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <_printf_i+0xf2>
 8004f8c:	0646      	lsls	r6, r0, #25
 8004f8e:	d5fb      	bpl.n	8004f88 <_printf_i+0xe8>
 8004f90:	881e      	ldrh	r6, [r3, #0]
 8004f92:	4854      	ldr	r0, [pc, #336]	; (80050e4 <_printf_i+0x244>)
 8004f94:	2f6f      	cmp	r7, #111	; 0x6f
 8004f96:	bf0c      	ite	eq
 8004f98:	2308      	moveq	r3, #8
 8004f9a:	230a      	movne	r3, #10
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa2:	6865      	ldr	r5, [r4, #4]
 8004fa4:	60a5      	str	r5, [r4, #8]
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	bfa2      	ittt	ge
 8004faa:	6821      	ldrge	r1, [r4, #0]
 8004fac:	f021 0104 	bicge.w	r1, r1, #4
 8004fb0:	6021      	strge	r1, [r4, #0]
 8004fb2:	b90e      	cbnz	r6, 8004fb8 <_printf_i+0x118>
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	d04d      	beq.n	8005054 <_printf_i+0x1b4>
 8004fb8:	4615      	mov	r5, r2
 8004fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8004fc2:	5dc7      	ldrb	r7, [r0, r7]
 8004fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fc8:	4637      	mov	r7, r6
 8004fca:	42bb      	cmp	r3, r7
 8004fcc:	460e      	mov	r6, r1
 8004fce:	d9f4      	bls.n	8004fba <_printf_i+0x11a>
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10b      	bne.n	8004fec <_printf_i+0x14c>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07de      	lsls	r6, r3, #31
 8004fd8:	d508      	bpl.n	8004fec <_printf_i+0x14c>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6861      	ldr	r1, [r4, #4]
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	bfde      	ittt	le
 8004fe2:	2330      	movle	r3, #48	; 0x30
 8004fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fec:	1b52      	subs	r2, r2, r5
 8004fee:	6122      	str	r2, [r4, #16]
 8004ff0:	f8cd a000 	str.w	sl, [sp]
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	aa03      	add	r2, sp, #12
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7ff fee2 	bl	8004dc4 <_printf_common>
 8005000:	3001      	adds	r0, #1
 8005002:	d14c      	bne.n	800509e <_printf_i+0x1fe>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	b004      	add	sp, #16
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	4835      	ldr	r0, [pc, #212]	; (80050e4 <_printf_i+0x244>)
 8005010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005014:	6829      	ldr	r1, [r5, #0]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f851 6b04 	ldr.w	r6, [r1], #4
 800501c:	6029      	str	r1, [r5, #0]
 800501e:	061d      	lsls	r5, r3, #24
 8005020:	d514      	bpl.n	800504c <_printf_i+0x1ac>
 8005022:	07df      	lsls	r7, r3, #31
 8005024:	bf44      	itt	mi
 8005026:	f043 0320 	orrmi.w	r3, r3, #32
 800502a:	6023      	strmi	r3, [r4, #0]
 800502c:	b91e      	cbnz	r6, 8005036 <_printf_i+0x196>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f023 0320 	bic.w	r3, r3, #32
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	2310      	movs	r3, #16
 8005038:	e7b0      	b.n	8004f9c <_printf_i+0xfc>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	f043 0320 	orr.w	r3, r3, #32
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	2378      	movs	r3, #120	; 0x78
 8005044:	4828      	ldr	r0, [pc, #160]	; (80050e8 <_printf_i+0x248>)
 8005046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800504a:	e7e3      	b.n	8005014 <_printf_i+0x174>
 800504c:	0659      	lsls	r1, r3, #25
 800504e:	bf48      	it	mi
 8005050:	b2b6      	uxthmi	r6, r6
 8005052:	e7e6      	b.n	8005022 <_printf_i+0x182>
 8005054:	4615      	mov	r5, r2
 8005056:	e7bb      	b.n	8004fd0 <_printf_i+0x130>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	6826      	ldr	r6, [r4, #0]
 800505c:	6961      	ldr	r1, [r4, #20]
 800505e:	1d18      	adds	r0, r3, #4
 8005060:	6028      	str	r0, [r5, #0]
 8005062:	0635      	lsls	r5, r6, #24
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	d501      	bpl.n	800506c <_printf_i+0x1cc>
 8005068:	6019      	str	r1, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0x1d2>
 800506c:	0670      	lsls	r0, r6, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0x1c8>
 8005070:	8019      	strh	r1, [r3, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	4615      	mov	r5, r2
 8005078:	e7ba      	b.n	8004ff0 <_printf_i+0x150>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	602a      	str	r2, [r5, #0]
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	2100      	movs	r1, #0
 8005086:	4628      	mov	r0, r5
 8005088:	f7fb f8b2 	bl	80001f0 <memchr>
 800508c:	b108      	cbz	r0, 8005092 <_printf_i+0x1f2>
 800508e:	1b40      	subs	r0, r0, r5
 8005090:	6060      	str	r0, [r4, #4]
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	2300      	movs	r3, #0
 8005098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509c:	e7a8      	b.n	8004ff0 <_printf_i+0x150>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4649      	mov	r1, r9
 80050a4:	4640      	mov	r0, r8
 80050a6:	47d0      	blx	sl
 80050a8:	3001      	adds	r0, #1
 80050aa:	d0ab      	beq.n	8005004 <_printf_i+0x164>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	079b      	lsls	r3, r3, #30
 80050b0:	d413      	bmi.n	80050da <_printf_i+0x23a>
 80050b2:	68e0      	ldr	r0, [r4, #12]
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	4298      	cmp	r0, r3
 80050b8:	bfb8      	it	lt
 80050ba:	4618      	movlt	r0, r3
 80050bc:	e7a4      	b.n	8005008 <_printf_i+0x168>
 80050be:	2301      	movs	r3, #1
 80050c0:	4632      	mov	r2, r6
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	47d0      	blx	sl
 80050c8:	3001      	adds	r0, #1
 80050ca:	d09b      	beq.n	8005004 <_printf_i+0x164>
 80050cc:	3501      	adds	r5, #1
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	9903      	ldr	r1, [sp, #12]
 80050d2:	1a5b      	subs	r3, r3, r1
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dcf2      	bgt.n	80050be <_printf_i+0x21e>
 80050d8:	e7eb      	b.n	80050b2 <_printf_i+0x212>
 80050da:	2500      	movs	r5, #0
 80050dc:	f104 0619 	add.w	r6, r4, #25
 80050e0:	e7f5      	b.n	80050ce <_printf_i+0x22e>
 80050e2:	bf00      	nop
 80050e4:	08007486 	.word	0x08007486
 80050e8:	08007497 	.word	0x08007497

080050ec <_sbrk_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d06      	ldr	r5, [pc, #24]	; (8005108 <_sbrk_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	f7fc fa02 	bl	8001500 <_sbrk>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_sbrk_r+0x1a>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_sbrk_r+0x1a>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	200004e8 	.word	0x200004e8

0800510c <_vsniprintf_r>:
 800510c:	b530      	push	{r4, r5, lr}
 800510e:	4614      	mov	r4, r2
 8005110:	2c00      	cmp	r4, #0
 8005112:	b09b      	sub	sp, #108	; 0x6c
 8005114:	4605      	mov	r5, r0
 8005116:	461a      	mov	r2, r3
 8005118:	da05      	bge.n	8005126 <_vsniprintf_r+0x1a>
 800511a:	238b      	movs	r3, #139	; 0x8b
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	b01b      	add	sp, #108	; 0x6c
 8005124:	bd30      	pop	{r4, r5, pc}
 8005126:	f44f 7302 	mov.w	r3, #520	; 0x208
 800512a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800512e:	bf14      	ite	ne
 8005130:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005134:	4623      	moveq	r3, r4
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800513e:	9100      	str	r1, [sp, #0]
 8005140:	9104      	str	r1, [sp, #16]
 8005142:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005146:	4669      	mov	r1, sp
 8005148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800514a:	f001 fa99 	bl	8006680 <_svfiprintf_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	bfbc      	itt	lt
 8005152:	238b      	movlt	r3, #139	; 0x8b
 8005154:	602b      	strlt	r3, [r5, #0]
 8005156:	2c00      	cmp	r4, #0
 8005158:	d0e3      	beq.n	8005122 <_vsniprintf_r+0x16>
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e7df      	b.n	8005122 <_vsniprintf_r+0x16>
	...

08005164 <vsniprintf>:
 8005164:	b507      	push	{r0, r1, r2, lr}
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	460a      	mov	r2, r1
 800516c:	4601      	mov	r1, r0
 800516e:	4803      	ldr	r0, [pc, #12]	; (800517c <vsniprintf+0x18>)
 8005170:	6800      	ldr	r0, [r0, #0]
 8005172:	f7ff ffcb 	bl	800510c <_vsniprintf_r>
 8005176:	b003      	add	sp, #12
 8005178:	f85d fb04 	ldr.w	pc, [sp], #4
 800517c:	2000004c 	.word	0x2000004c

08005180 <quorem>:
 8005180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	6903      	ldr	r3, [r0, #16]
 8005186:	690c      	ldr	r4, [r1, #16]
 8005188:	42a3      	cmp	r3, r4
 800518a:	4607      	mov	r7, r0
 800518c:	f2c0 8081 	blt.w	8005292 <quorem+0x112>
 8005190:	3c01      	subs	r4, #1
 8005192:	f101 0814 	add.w	r8, r1, #20
 8005196:	f100 0514 	add.w	r5, r0, #20
 800519a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a8:	3301      	adds	r3, #1
 80051aa:	429a      	cmp	r2, r3
 80051ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051b8:	d331      	bcc.n	800521e <quorem+0x9e>
 80051ba:	f04f 0e00 	mov.w	lr, #0
 80051be:	4640      	mov	r0, r8
 80051c0:	46ac      	mov	ip, r5
 80051c2:	46f2      	mov	sl, lr
 80051c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051c8:	b293      	uxth	r3, r2
 80051ca:	fb06 e303 	mla	r3, r6, r3, lr
 80051ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ebaa 0303 	sub.w	r3, sl, r3
 80051d8:	f8dc a000 	ldr.w	sl, [ip]
 80051dc:	0c12      	lsrs	r2, r2, #16
 80051de:	fa13 f38a 	uxtah	r3, r3, sl
 80051e2:	fb06 e202 	mla	r2, r6, r2, lr
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	9b00      	ldr	r3, [sp, #0]
 80051ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051ee:	b292      	uxth	r2, r2
 80051f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80051fc:	4581      	cmp	r9, r0
 80051fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005202:	f84c 3b04 	str.w	r3, [ip], #4
 8005206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800520a:	d2db      	bcs.n	80051c4 <quorem+0x44>
 800520c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005210:	b92b      	cbnz	r3, 800521e <quorem+0x9e>
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	3b04      	subs	r3, #4
 8005216:	429d      	cmp	r5, r3
 8005218:	461a      	mov	r2, r3
 800521a:	d32e      	bcc.n	800527a <quorem+0xfa>
 800521c:	613c      	str	r4, [r7, #16]
 800521e:	4638      	mov	r0, r7
 8005220:	f001 f8ba 	bl	8006398 <__mcmp>
 8005224:	2800      	cmp	r0, #0
 8005226:	db24      	blt.n	8005272 <quorem+0xf2>
 8005228:	3601      	adds	r6, #1
 800522a:	4628      	mov	r0, r5
 800522c:	f04f 0c00 	mov.w	ip, #0
 8005230:	f858 2b04 	ldr.w	r2, [r8], #4
 8005234:	f8d0 e000 	ldr.w	lr, [r0]
 8005238:	b293      	uxth	r3, r2
 800523a:	ebac 0303 	sub.w	r3, ip, r3
 800523e:	0c12      	lsrs	r2, r2, #16
 8005240:	fa13 f38e 	uxtah	r3, r3, lr
 8005244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005252:	45c1      	cmp	r9, r8
 8005254:	f840 3b04 	str.w	r3, [r0], #4
 8005258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800525c:	d2e8      	bcs.n	8005230 <quorem+0xb0>
 800525e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005266:	b922      	cbnz	r2, 8005272 <quorem+0xf2>
 8005268:	3b04      	subs	r3, #4
 800526a:	429d      	cmp	r5, r3
 800526c:	461a      	mov	r2, r3
 800526e:	d30a      	bcc.n	8005286 <quorem+0x106>
 8005270:	613c      	str	r4, [r7, #16]
 8005272:	4630      	mov	r0, r6
 8005274:	b003      	add	sp, #12
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	3b04      	subs	r3, #4
 800527e:	2a00      	cmp	r2, #0
 8005280:	d1cc      	bne.n	800521c <quorem+0x9c>
 8005282:	3c01      	subs	r4, #1
 8005284:	e7c7      	b.n	8005216 <quorem+0x96>
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	3b04      	subs	r3, #4
 800528a:	2a00      	cmp	r2, #0
 800528c:	d1f0      	bne.n	8005270 <quorem+0xf0>
 800528e:	3c01      	subs	r4, #1
 8005290:	e7eb      	b.n	800526a <quorem+0xea>
 8005292:	2000      	movs	r0, #0
 8005294:	e7ee      	b.n	8005274 <quorem+0xf4>
	...

08005298 <_dtoa_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	ed2d 8b04 	vpush	{d8-d9}
 80052a0:	ec57 6b10 	vmov	r6, r7, d0
 80052a4:	b093      	sub	sp, #76	; 0x4c
 80052a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052ac:	9106      	str	r1, [sp, #24]
 80052ae:	ee10 aa10 	vmov	sl, s0
 80052b2:	4604      	mov	r4, r0
 80052b4:	9209      	str	r2, [sp, #36]	; 0x24
 80052b6:	930c      	str	r3, [sp, #48]	; 0x30
 80052b8:	46bb      	mov	fp, r7
 80052ba:	b975      	cbnz	r5, 80052da <_dtoa_r+0x42>
 80052bc:	2010      	movs	r0, #16
 80052be:	f7ff f9a5 	bl	800460c <malloc>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6260      	str	r0, [r4, #36]	; 0x24
 80052c6:	b920      	cbnz	r0, 80052d2 <_dtoa_r+0x3a>
 80052c8:	4ba7      	ldr	r3, [pc, #668]	; (8005568 <_dtoa_r+0x2d0>)
 80052ca:	21ea      	movs	r1, #234	; 0xea
 80052cc:	48a7      	ldr	r0, [pc, #668]	; (800556c <_dtoa_r+0x2d4>)
 80052ce:	f001 fad7 	bl	8006880 <__assert_func>
 80052d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052d6:	6005      	str	r5, [r0, #0]
 80052d8:	60c5      	str	r5, [r0, #12]
 80052da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	b151      	cbz	r1, 80052f6 <_dtoa_r+0x5e>
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	604a      	str	r2, [r1, #4]
 80052e4:	2301      	movs	r3, #1
 80052e6:	4093      	lsls	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fe12 	bl	8005f14 <_Bfree>
 80052f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	1e3b      	subs	r3, r7, #0
 80052f8:	bfaa      	itet	ge
 80052fa:	2300      	movge	r3, #0
 80052fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005300:	f8c8 3000 	strge.w	r3, [r8]
 8005304:	4b9a      	ldr	r3, [pc, #616]	; (8005570 <_dtoa_r+0x2d8>)
 8005306:	bfbc      	itt	lt
 8005308:	2201      	movlt	r2, #1
 800530a:	f8c8 2000 	strlt.w	r2, [r8]
 800530e:	ea33 030b 	bics.w	r3, r3, fp
 8005312:	d11b      	bne.n	800534c <_dtoa_r+0xb4>
 8005314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005316:	f242 730f 	movw	r3, #9999	; 0x270f
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005320:	4333      	orrs	r3, r6
 8005322:	f000 8592 	beq.w	8005e4a <_dtoa_r+0xbb2>
 8005326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005328:	b963      	cbnz	r3, 8005344 <_dtoa_r+0xac>
 800532a:	4b92      	ldr	r3, [pc, #584]	; (8005574 <_dtoa_r+0x2dc>)
 800532c:	e022      	b.n	8005374 <_dtoa_r+0xdc>
 800532e:	4b92      	ldr	r3, [pc, #584]	; (8005578 <_dtoa_r+0x2e0>)
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	3308      	adds	r3, #8
 8005334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	9801      	ldr	r0, [sp, #4]
 800533a:	b013      	add	sp, #76	; 0x4c
 800533c:	ecbd 8b04 	vpop	{d8-d9}
 8005340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	4b8b      	ldr	r3, [pc, #556]	; (8005574 <_dtoa_r+0x2dc>)
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	3303      	adds	r3, #3
 800534a:	e7f3      	b.n	8005334 <_dtoa_r+0x9c>
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4650      	mov	r0, sl
 8005352:	4659      	mov	r1, fp
 8005354:	f7fb fbc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005358:	ec4b ab19 	vmov	d9, sl, fp
 800535c:	4680      	mov	r8, r0
 800535e:	b158      	cbz	r0, 8005378 <_dtoa_r+0xe0>
 8005360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005362:	2301      	movs	r3, #1
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 856b 	beq.w	8005e44 <_dtoa_r+0xbac>
 800536e:	4883      	ldr	r0, [pc, #524]	; (800557c <_dtoa_r+0x2e4>)
 8005370:	6018      	str	r0, [r3, #0]
 8005372:	1e43      	subs	r3, r0, #1
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	e7df      	b.n	8005338 <_dtoa_r+0xa0>
 8005378:	ec4b ab10 	vmov	d0, sl, fp
 800537c:	aa10      	add	r2, sp, #64	; 0x40
 800537e:	a911      	add	r1, sp, #68	; 0x44
 8005380:	4620      	mov	r0, r4
 8005382:	f001 f8af 	bl	80064e4 <__d2b>
 8005386:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800538a:	ee08 0a10 	vmov	s16, r0
 800538e:	2d00      	cmp	r5, #0
 8005390:	f000 8084 	beq.w	800549c <_dtoa_r+0x204>
 8005394:	ee19 3a90 	vmov	r3, s19
 8005398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053a0:	4656      	mov	r6, sl
 80053a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80053ae:	4b74      	ldr	r3, [pc, #464]	; (8005580 <_dtoa_r+0x2e8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	f7fa ff6f 	bl	8000298 <__aeabi_dsub>
 80053ba:	a365      	add	r3, pc, #404	; (adr r3, 8005550 <_dtoa_r+0x2b8>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fb f922 	bl	8000608 <__aeabi_dmul>
 80053c4:	a364      	add	r3, pc, #400	; (adr r3, 8005558 <_dtoa_r+0x2c0>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa ff67 	bl	800029c <__adddf3>
 80053ce:	4606      	mov	r6, r0
 80053d0:	4628      	mov	r0, r5
 80053d2:	460f      	mov	r7, r1
 80053d4:	f7fb f8ae 	bl	8000534 <__aeabi_i2d>
 80053d8:	a361      	add	r3, pc, #388	; (adr r3, 8005560 <_dtoa_r+0x2c8>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fb f913 	bl	8000608 <__aeabi_dmul>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fa ff57 	bl	800029c <__adddf3>
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	f7fb fbb9 	bl	8000b68 <__aeabi_d2iz>
 80053f6:	2200      	movs	r2, #0
 80053f8:	9000      	str	r0, [sp, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fb74 	bl	8000aec <__aeabi_dcmplt>
 8005404:	b150      	cbz	r0, 800541c <_dtoa_r+0x184>
 8005406:	9800      	ldr	r0, [sp, #0]
 8005408:	f7fb f894 	bl	8000534 <__aeabi_i2d>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fb fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005414:	b910      	cbnz	r0, 800541c <_dtoa_r+0x184>
 8005416:	9b00      	ldr	r3, [sp, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	9b00      	ldr	r3, [sp, #0]
 800541e:	2b16      	cmp	r3, #22
 8005420:	d85a      	bhi.n	80054d8 <_dtoa_r+0x240>
 8005422:	9a00      	ldr	r2, [sp, #0]
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <_dtoa_r+0x2ec>)
 8005426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	ec51 0b19 	vmov	r0, r1, d9
 8005432:	f7fb fb5b 	bl	8000aec <__aeabi_dcmplt>
 8005436:	2800      	cmp	r0, #0
 8005438:	d050      	beq.n	80054dc <_dtoa_r+0x244>
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	930b      	str	r3, [sp, #44]	; 0x2c
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	1b5d      	subs	r5, r3, r5
 8005448:	1e6b      	subs	r3, r5, #1
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	bf45      	ittet	mi
 800544e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005452:	9304      	strmi	r3, [sp, #16]
 8005454:	2300      	movpl	r3, #0
 8005456:	2300      	movmi	r3, #0
 8005458:	bf4c      	ite	mi
 800545a:	9305      	strmi	r3, [sp, #20]
 800545c:	9304      	strpl	r3, [sp, #16]
 800545e:	9b00      	ldr	r3, [sp, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db3d      	blt.n	80054e0 <_dtoa_r+0x248>
 8005464:	9b05      	ldr	r3, [sp, #20]
 8005466:	9a00      	ldr	r2, [sp, #0]
 8005468:	920a      	str	r2, [sp, #40]	; 0x28
 800546a:	4413      	add	r3, r2
 800546c:	9305      	str	r3, [sp, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	9307      	str	r3, [sp, #28]
 8005472:	9b06      	ldr	r3, [sp, #24]
 8005474:	2b09      	cmp	r3, #9
 8005476:	f200 8089 	bhi.w	800558c <_dtoa_r+0x2f4>
 800547a:	2b05      	cmp	r3, #5
 800547c:	bfc4      	itt	gt
 800547e:	3b04      	subgt	r3, #4
 8005480:	9306      	strgt	r3, [sp, #24]
 8005482:	9b06      	ldr	r3, [sp, #24]
 8005484:	f1a3 0302 	sub.w	r3, r3, #2
 8005488:	bfcc      	ite	gt
 800548a:	2500      	movgt	r5, #0
 800548c:	2501      	movle	r5, #1
 800548e:	2b03      	cmp	r3, #3
 8005490:	f200 8087 	bhi.w	80055a2 <_dtoa_r+0x30a>
 8005494:	e8df f003 	tbb	[pc, r3]
 8005498:	59383a2d 	.word	0x59383a2d
 800549c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054a0:	441d      	add	r5, r3
 80054a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	bfc1      	itttt	gt
 80054aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80054b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054ba:	bfda      	itte	le
 80054bc:	f1c3 0320 	rsble	r3, r3, #32
 80054c0:	fa06 f003 	lslle.w	r0, r6, r3
 80054c4:	4318      	orrgt	r0, r3
 80054c6:	f7fb f825 	bl	8000514 <__aeabi_ui2d>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4606      	mov	r6, r0
 80054ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054d2:	3d01      	subs	r5, #1
 80054d4:	930e      	str	r3, [sp, #56]	; 0x38
 80054d6:	e76a      	b.n	80053ae <_dtoa_r+0x116>
 80054d8:	2301      	movs	r3, #1
 80054da:	e7b2      	b.n	8005442 <_dtoa_r+0x1aa>
 80054dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80054de:	e7b1      	b.n	8005444 <_dtoa_r+0x1ac>
 80054e0:	9b04      	ldr	r3, [sp, #16]
 80054e2:	9a00      	ldr	r2, [sp, #0]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	4253      	negs	r3, r2
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	2300      	movs	r3, #0
 80054ee:	930a      	str	r3, [sp, #40]	; 0x28
 80054f0:	e7bf      	b.n	8005472 <_dtoa_r+0x1da>
 80054f2:	2300      	movs	r3, #0
 80054f4:	9308      	str	r3, [sp, #32]
 80054f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc55      	bgt.n	80055a8 <_dtoa_r+0x310>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005502:	461a      	mov	r2, r3
 8005504:	9209      	str	r2, [sp, #36]	; 0x24
 8005506:	e00c      	b.n	8005522 <_dtoa_r+0x28a>
 8005508:	2301      	movs	r3, #1
 800550a:	e7f3      	b.n	80054f4 <_dtoa_r+0x25c>
 800550c:	2300      	movs	r3, #0
 800550e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005510:	9308      	str	r3, [sp, #32]
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	4413      	add	r3, r2
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	9303      	str	r3, [sp, #12]
 800551e:	bfb8      	it	lt
 8005520:	2301      	movlt	r3, #1
 8005522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005524:	2200      	movs	r2, #0
 8005526:	6042      	str	r2, [r0, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	f102 0614 	add.w	r6, r2, #20
 800552e:	429e      	cmp	r6, r3
 8005530:	6841      	ldr	r1, [r0, #4]
 8005532:	d93d      	bls.n	80055b0 <_dtoa_r+0x318>
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fcad 	bl	8005e94 <_Balloc>
 800553a:	9001      	str	r0, [sp, #4]
 800553c:	2800      	cmp	r0, #0
 800553e:	d13b      	bne.n	80055b8 <_dtoa_r+0x320>
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <_dtoa_r+0x2f0>)
 8005542:	4602      	mov	r2, r0
 8005544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005548:	e6c0      	b.n	80052cc <_dtoa_r+0x34>
 800554a:	2301      	movs	r3, #1
 800554c:	e7df      	b.n	800550e <_dtoa_r+0x276>
 800554e:	bf00      	nop
 8005550:	636f4361 	.word	0x636f4361
 8005554:	3fd287a7 	.word	0x3fd287a7
 8005558:	8b60c8b3 	.word	0x8b60c8b3
 800555c:	3fc68a28 	.word	0x3fc68a28
 8005560:	509f79fb 	.word	0x509f79fb
 8005564:	3fd34413 	.word	0x3fd34413
 8005568:	080074b5 	.word	0x080074b5
 800556c:	080074cc 	.word	0x080074cc
 8005570:	7ff00000 	.word	0x7ff00000
 8005574:	080074b1 	.word	0x080074b1
 8005578:	080074a8 	.word	0x080074a8
 800557c:	08007485 	.word	0x08007485
 8005580:	3ff80000 	.word	0x3ff80000
 8005584:	080075c0 	.word	0x080075c0
 8005588:	08007527 	.word	0x08007527
 800558c:	2501      	movs	r5, #1
 800558e:	2300      	movs	r3, #0
 8005590:	9306      	str	r3, [sp, #24]
 8005592:	9508      	str	r5, [sp, #32]
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	2312      	movs	r3, #18
 80055a0:	e7b0      	b.n	8005504 <_dtoa_r+0x26c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	9308      	str	r3, [sp, #32]
 80055a6:	e7f5      	b.n	8005594 <_dtoa_r+0x2fc>
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055ae:	e7b8      	b.n	8005522 <_dtoa_r+0x28a>
 80055b0:	3101      	adds	r1, #1
 80055b2:	6041      	str	r1, [r0, #4]
 80055b4:	0052      	lsls	r2, r2, #1
 80055b6:	e7b8      	b.n	800552a <_dtoa_r+0x292>
 80055b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ba:	9a01      	ldr	r2, [sp, #4]
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	2b0e      	cmp	r3, #14
 80055c2:	f200 809d 	bhi.w	8005700 <_dtoa_r+0x468>
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	f000 809a 	beq.w	8005700 <_dtoa_r+0x468>
 80055cc:	9b00      	ldr	r3, [sp, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd32      	ble.n	8005638 <_dtoa_r+0x3a0>
 80055d2:	4ab7      	ldr	r2, [pc, #732]	; (80058b0 <_dtoa_r+0x618>)
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	05d8      	lsls	r0, r3, #23
 80055e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055e8:	d516      	bpl.n	8005618 <_dtoa_r+0x380>
 80055ea:	4bb2      	ldr	r3, [pc, #712]	; (80058b4 <_dtoa_r+0x61c>)
 80055ec:	ec51 0b19 	vmov	r0, r1, d9
 80055f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055f4:	f7fb f932 	bl	800085c <__aeabi_ddiv>
 80055f8:	f007 070f 	and.w	r7, r7, #15
 80055fc:	4682      	mov	sl, r0
 80055fe:	468b      	mov	fp, r1
 8005600:	2503      	movs	r5, #3
 8005602:	4eac      	ldr	r6, [pc, #688]	; (80058b4 <_dtoa_r+0x61c>)
 8005604:	b957      	cbnz	r7, 800561c <_dtoa_r+0x384>
 8005606:	4642      	mov	r2, r8
 8005608:	464b      	mov	r3, r9
 800560a:	4650      	mov	r0, sl
 800560c:	4659      	mov	r1, fp
 800560e:	f7fb f925 	bl	800085c <__aeabi_ddiv>
 8005612:	4682      	mov	sl, r0
 8005614:	468b      	mov	fp, r1
 8005616:	e028      	b.n	800566a <_dtoa_r+0x3d2>
 8005618:	2502      	movs	r5, #2
 800561a:	e7f2      	b.n	8005602 <_dtoa_r+0x36a>
 800561c:	07f9      	lsls	r1, r7, #31
 800561e:	d508      	bpl.n	8005632 <_dtoa_r+0x39a>
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005628:	f7fa ffee 	bl	8000608 <__aeabi_dmul>
 800562c:	3501      	adds	r5, #1
 800562e:	4680      	mov	r8, r0
 8005630:	4689      	mov	r9, r1
 8005632:	107f      	asrs	r7, r7, #1
 8005634:	3608      	adds	r6, #8
 8005636:	e7e5      	b.n	8005604 <_dtoa_r+0x36c>
 8005638:	f000 809b 	beq.w	8005772 <_dtoa_r+0x4da>
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	4f9d      	ldr	r7, [pc, #628]	; (80058b4 <_dtoa_r+0x61c>)
 8005640:	425e      	negs	r6, r3
 8005642:	4b9b      	ldr	r3, [pc, #620]	; (80058b0 <_dtoa_r+0x618>)
 8005644:	f006 020f 	and.w	r2, r6, #15
 8005648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	ec51 0b19 	vmov	r0, r1, d9
 8005654:	f7fa ffd8 	bl	8000608 <__aeabi_dmul>
 8005658:	1136      	asrs	r6, r6, #4
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	2300      	movs	r3, #0
 8005660:	2502      	movs	r5, #2
 8005662:	2e00      	cmp	r6, #0
 8005664:	d17a      	bne.n	800575c <_dtoa_r+0x4c4>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d3      	bne.n	8005612 <_dtoa_r+0x37a>
 800566a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8082 	beq.w	8005776 <_dtoa_r+0x4de>
 8005672:	4b91      	ldr	r3, [pc, #580]	; (80058b8 <_dtoa_r+0x620>)
 8005674:	2200      	movs	r2, #0
 8005676:	4650      	mov	r0, sl
 8005678:	4659      	mov	r1, fp
 800567a:	f7fb fa37 	bl	8000aec <__aeabi_dcmplt>
 800567e:	2800      	cmp	r0, #0
 8005680:	d079      	beq.n	8005776 <_dtoa_r+0x4de>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d076      	beq.n	8005776 <_dtoa_r+0x4de>
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd36      	ble.n	80056fc <_dtoa_r+0x464>
 800568e:	9b00      	ldr	r3, [sp, #0]
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	1e5f      	subs	r7, r3, #1
 8005696:	2200      	movs	r2, #0
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <_dtoa_r+0x624>)
 800569a:	f7fa ffb5 	bl	8000608 <__aeabi_dmul>
 800569e:	9e02      	ldr	r6, [sp, #8]
 80056a0:	4682      	mov	sl, r0
 80056a2:	468b      	mov	fp, r1
 80056a4:	3501      	adds	r5, #1
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7fa ff44 	bl	8000534 <__aeabi_i2d>
 80056ac:	4652      	mov	r2, sl
 80056ae:	465b      	mov	r3, fp
 80056b0:	f7fa ffaa 	bl	8000608 <__aeabi_dmul>
 80056b4:	4b82      	ldr	r3, [pc, #520]	; (80058c0 <_dtoa_r+0x628>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	f7fa fdf0 	bl	800029c <__adddf3>
 80056bc:	46d0      	mov	r8, sl
 80056be:	46d9      	mov	r9, fp
 80056c0:	4682      	mov	sl, r0
 80056c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d158      	bne.n	800577c <_dtoa_r+0x4e4>
 80056ca:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <_dtoa_r+0x62c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa fde1 	bl	8000298 <__aeabi_dsub>
 80056d6:	4652      	mov	r2, sl
 80056d8:	465b      	mov	r3, fp
 80056da:	4680      	mov	r8, r0
 80056dc:	4689      	mov	r9, r1
 80056de:	f7fb fa23 	bl	8000b28 <__aeabi_dcmpgt>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f040 8295 	bne.w	8005c12 <_dtoa_r+0x97a>
 80056e8:	4652      	mov	r2, sl
 80056ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fb f9fb 	bl	8000aec <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f040 8289 	bne.w	8005c0e <_dtoa_r+0x976>
 80056fc:	ec5b ab19 	vmov	sl, fp, d9
 8005700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005702:	2b00      	cmp	r3, #0
 8005704:	f2c0 8148 	blt.w	8005998 <_dtoa_r+0x700>
 8005708:	9a00      	ldr	r2, [sp, #0]
 800570a:	2a0e      	cmp	r2, #14
 800570c:	f300 8144 	bgt.w	8005998 <_dtoa_r+0x700>
 8005710:	4b67      	ldr	r3, [pc, #412]	; (80058b0 <_dtoa_r+0x618>)
 8005712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	f280 80d5 	bge.w	80058cc <_dtoa_r+0x634>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f300 80d1 	bgt.w	80058cc <_dtoa_r+0x634>
 800572a:	f040 826f 	bne.w	8005c0c <_dtoa_r+0x974>
 800572e:	4b65      	ldr	r3, [pc, #404]	; (80058c4 <_dtoa_r+0x62c>)
 8005730:	2200      	movs	r2, #0
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fa ff67 	bl	8000608 <__aeabi_dmul>
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	f7fb f9e9 	bl	8000b14 <__aeabi_dcmpge>
 8005742:	9e03      	ldr	r6, [sp, #12]
 8005744:	4637      	mov	r7, r6
 8005746:	2800      	cmp	r0, #0
 8005748:	f040 8245 	bne.w	8005bd6 <_dtoa_r+0x93e>
 800574c:	9d01      	ldr	r5, [sp, #4]
 800574e:	2331      	movs	r3, #49	; 0x31
 8005750:	f805 3b01 	strb.w	r3, [r5], #1
 8005754:	9b00      	ldr	r3, [sp, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	e240      	b.n	8005bde <_dtoa_r+0x946>
 800575c:	07f2      	lsls	r2, r6, #31
 800575e:	d505      	bpl.n	800576c <_dtoa_r+0x4d4>
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	f7fa ff50 	bl	8000608 <__aeabi_dmul>
 8005768:	3501      	adds	r5, #1
 800576a:	2301      	movs	r3, #1
 800576c:	1076      	asrs	r6, r6, #1
 800576e:	3708      	adds	r7, #8
 8005770:	e777      	b.n	8005662 <_dtoa_r+0x3ca>
 8005772:	2502      	movs	r5, #2
 8005774:	e779      	b.n	800566a <_dtoa_r+0x3d2>
 8005776:	9f00      	ldr	r7, [sp, #0]
 8005778:	9e03      	ldr	r6, [sp, #12]
 800577a:	e794      	b.n	80056a6 <_dtoa_r+0x40e>
 800577c:	9901      	ldr	r1, [sp, #4]
 800577e:	4b4c      	ldr	r3, [pc, #304]	; (80058b0 <_dtoa_r+0x618>)
 8005780:	4431      	add	r1, r6
 8005782:	910d      	str	r1, [sp, #52]	; 0x34
 8005784:	9908      	ldr	r1, [sp, #32]
 8005786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800578a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800578e:	2900      	cmp	r1, #0
 8005790:	d043      	beq.n	800581a <_dtoa_r+0x582>
 8005792:	494d      	ldr	r1, [pc, #308]	; (80058c8 <_dtoa_r+0x630>)
 8005794:	2000      	movs	r0, #0
 8005796:	f7fb f861 	bl	800085c <__aeabi_ddiv>
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	f7fa fd7b 	bl	8000298 <__aeabi_dsub>
 80057a2:	9d01      	ldr	r5, [sp, #4]
 80057a4:	4682      	mov	sl, r0
 80057a6:	468b      	mov	fp, r1
 80057a8:	4649      	mov	r1, r9
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7fb f9dc 	bl	8000b68 <__aeabi_d2iz>
 80057b0:	4606      	mov	r6, r0
 80057b2:	f7fa febf 	bl	8000534 <__aeabi_i2d>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fa fd6b 	bl	8000298 <__aeabi_dsub>
 80057c2:	3630      	adds	r6, #48	; 0x30
 80057c4:	f805 6b01 	strb.w	r6, [r5], #1
 80057c8:	4652      	mov	r2, sl
 80057ca:	465b      	mov	r3, fp
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	f7fb f98c 	bl	8000aec <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d163      	bne.n	80058a0 <_dtoa_r+0x608>
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	4936      	ldr	r1, [pc, #216]	; (80058b8 <_dtoa_r+0x620>)
 80057de:	2000      	movs	r0, #0
 80057e0:	f7fa fd5a 	bl	8000298 <__aeabi_dsub>
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	f7fb f980 	bl	8000aec <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 80b5 	bne.w	800595c <_dtoa_r+0x6c4>
 80057f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f4:	429d      	cmp	r5, r3
 80057f6:	d081      	beq.n	80056fc <_dtoa_r+0x464>
 80057f8:	4b30      	ldr	r3, [pc, #192]	; (80058bc <_dtoa_r+0x624>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	4650      	mov	r0, sl
 80057fe:	4659      	mov	r1, fp
 8005800:	f7fa ff02 	bl	8000608 <__aeabi_dmul>
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <_dtoa_r+0x624>)
 8005806:	4682      	mov	sl, r0
 8005808:	468b      	mov	fp, r1
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	2200      	movs	r2, #0
 8005810:	f7fa fefa 	bl	8000608 <__aeabi_dmul>
 8005814:	4680      	mov	r8, r0
 8005816:	4689      	mov	r9, r1
 8005818:	e7c6      	b.n	80057a8 <_dtoa_r+0x510>
 800581a:	4650      	mov	r0, sl
 800581c:	4659      	mov	r1, fp
 800581e:	f7fa fef3 	bl	8000608 <__aeabi_dmul>
 8005822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005824:	9d01      	ldr	r5, [sp, #4]
 8005826:	930f      	str	r3, [sp, #60]	; 0x3c
 8005828:	4682      	mov	sl, r0
 800582a:	468b      	mov	fp, r1
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	f7fb f99a 	bl	8000b68 <__aeabi_d2iz>
 8005834:	4606      	mov	r6, r0
 8005836:	f7fa fe7d 	bl	8000534 <__aeabi_i2d>
 800583a:	3630      	adds	r6, #48	; 0x30
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fa fd28 	bl	8000298 <__aeabi_dsub>
 8005848:	f805 6b01 	strb.w	r6, [r5], #1
 800584c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584e:	429d      	cmp	r5, r3
 8005850:	4680      	mov	r8, r0
 8005852:	4689      	mov	r9, r1
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	d124      	bne.n	80058a4 <_dtoa_r+0x60c>
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <_dtoa_r+0x630>)
 800585c:	4650      	mov	r0, sl
 800585e:	4659      	mov	r1, fp
 8005860:	f7fa fd1c 	bl	800029c <__adddf3>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f95c 	bl	8000b28 <__aeabi_dcmpgt>
 8005870:	2800      	cmp	r0, #0
 8005872:	d173      	bne.n	800595c <_dtoa_r+0x6c4>
 8005874:	4652      	mov	r2, sl
 8005876:	465b      	mov	r3, fp
 8005878:	4913      	ldr	r1, [pc, #76]	; (80058c8 <_dtoa_r+0x630>)
 800587a:	2000      	movs	r0, #0
 800587c:	f7fa fd0c 	bl	8000298 <__aeabi_dsub>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f930 	bl	8000aec <__aeabi_dcmplt>
 800588c:	2800      	cmp	r0, #0
 800588e:	f43f af35 	beq.w	80056fc <_dtoa_r+0x464>
 8005892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005894:	1e6b      	subs	r3, r5, #1
 8005896:	930f      	str	r3, [sp, #60]	; 0x3c
 8005898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d0f8      	beq.n	8005892 <_dtoa_r+0x5fa>
 80058a0:	9700      	str	r7, [sp, #0]
 80058a2:	e049      	b.n	8005938 <_dtoa_r+0x6a0>
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <_dtoa_r+0x624>)
 80058a6:	f7fa feaf 	bl	8000608 <__aeabi_dmul>
 80058aa:	4680      	mov	r8, r0
 80058ac:	4689      	mov	r9, r1
 80058ae:	e7bd      	b.n	800582c <_dtoa_r+0x594>
 80058b0:	080075c0 	.word	0x080075c0
 80058b4:	08007598 	.word	0x08007598
 80058b8:	3ff00000 	.word	0x3ff00000
 80058bc:	40240000 	.word	0x40240000
 80058c0:	401c0000 	.word	0x401c0000
 80058c4:	40140000 	.word	0x40140000
 80058c8:	3fe00000 	.word	0x3fe00000
 80058cc:	9d01      	ldr	r5, [sp, #4]
 80058ce:	4656      	mov	r6, sl
 80058d0:	465f      	mov	r7, fp
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa ffbf 	bl	800085c <__aeabi_ddiv>
 80058de:	f7fb f943 	bl	8000b68 <__aeabi_d2iz>
 80058e2:	4682      	mov	sl, r0
 80058e4:	f7fa fe26 	bl	8000534 <__aeabi_i2d>
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	f7fa fe8c 	bl	8000608 <__aeabi_dmul>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058fc:	f7fa fccc 	bl	8000298 <__aeabi_dsub>
 8005900:	f805 6b01 	strb.w	r6, [r5], #1
 8005904:	9e01      	ldr	r6, [sp, #4]
 8005906:	9f03      	ldr	r7, [sp, #12]
 8005908:	1bae      	subs	r6, r5, r6
 800590a:	42b7      	cmp	r7, r6
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	d135      	bne.n	800597e <_dtoa_r+0x6e6>
 8005912:	f7fa fcc3 	bl	800029c <__adddf3>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	4606      	mov	r6, r0
 800591c:	460f      	mov	r7, r1
 800591e:	f7fb f903 	bl	8000b28 <__aeabi_dcmpgt>
 8005922:	b9d0      	cbnz	r0, 800595a <_dtoa_r+0x6c2>
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fb f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005930:	b110      	cbz	r0, 8005938 <_dtoa_r+0x6a0>
 8005932:	f01a 0f01 	tst.w	sl, #1
 8005936:	d110      	bne.n	800595a <_dtoa_r+0x6c2>
 8005938:	4620      	mov	r0, r4
 800593a:	ee18 1a10 	vmov	r1, s16
 800593e:	f000 fae9 	bl	8005f14 <_Bfree>
 8005942:	2300      	movs	r3, #0
 8005944:	9800      	ldr	r0, [sp, #0]
 8005946:	702b      	strb	r3, [r5, #0]
 8005948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800594a:	3001      	adds	r0, #1
 800594c:	6018      	str	r0, [r3, #0]
 800594e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005950:	2b00      	cmp	r3, #0
 8005952:	f43f acf1 	beq.w	8005338 <_dtoa_r+0xa0>
 8005956:	601d      	str	r5, [r3, #0]
 8005958:	e4ee      	b.n	8005338 <_dtoa_r+0xa0>
 800595a:	9f00      	ldr	r7, [sp, #0]
 800595c:	462b      	mov	r3, r5
 800595e:	461d      	mov	r5, r3
 8005960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005964:	2a39      	cmp	r2, #57	; 0x39
 8005966:	d106      	bne.n	8005976 <_dtoa_r+0x6de>
 8005968:	9a01      	ldr	r2, [sp, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d1f7      	bne.n	800595e <_dtoa_r+0x6c6>
 800596e:	9901      	ldr	r1, [sp, #4]
 8005970:	2230      	movs	r2, #48	; 0x30
 8005972:	3701      	adds	r7, #1
 8005974:	700a      	strb	r2, [r1, #0]
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	3201      	adds	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e790      	b.n	80058a0 <_dtoa_r+0x608>
 800597e:	4ba6      	ldr	r3, [pc, #664]	; (8005c18 <_dtoa_r+0x980>)
 8005980:	2200      	movs	r2, #0
 8005982:	f7fa fe41 	bl	8000608 <__aeabi_dmul>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	f7fb f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005992:	2800      	cmp	r0, #0
 8005994:	d09d      	beq.n	80058d2 <_dtoa_r+0x63a>
 8005996:	e7cf      	b.n	8005938 <_dtoa_r+0x6a0>
 8005998:	9a08      	ldr	r2, [sp, #32]
 800599a:	2a00      	cmp	r2, #0
 800599c:	f000 80d7 	beq.w	8005b4e <_dtoa_r+0x8b6>
 80059a0:	9a06      	ldr	r2, [sp, #24]
 80059a2:	2a01      	cmp	r2, #1
 80059a4:	f300 80ba 	bgt.w	8005b1c <_dtoa_r+0x884>
 80059a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	f000 80b2 	beq.w	8005b14 <_dtoa_r+0x87c>
 80059b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059b4:	9e07      	ldr	r6, [sp, #28]
 80059b6:	9d04      	ldr	r5, [sp, #16]
 80059b8:	9a04      	ldr	r2, [sp, #16]
 80059ba:	441a      	add	r2, r3
 80059bc:	9204      	str	r2, [sp, #16]
 80059be:	9a05      	ldr	r2, [sp, #20]
 80059c0:	2101      	movs	r1, #1
 80059c2:	441a      	add	r2, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	9205      	str	r2, [sp, #20]
 80059c8:	f000 fb5c 	bl	8006084 <__i2b>
 80059cc:	4607      	mov	r7, r0
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	dd0c      	ble.n	80059ec <_dtoa_r+0x754>
 80059d2:	9b05      	ldr	r3, [sp, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dd09      	ble.n	80059ec <_dtoa_r+0x754>
 80059d8:	42ab      	cmp	r3, r5
 80059da:	9a04      	ldr	r2, [sp, #16]
 80059dc:	bfa8      	it	ge
 80059de:	462b      	movge	r3, r5
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	9204      	str	r2, [sp, #16]
 80059e4:	9a05      	ldr	r2, [sp, #20]
 80059e6:	1aed      	subs	r5, r5, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	b31b      	cbz	r3, 8005a38 <_dtoa_r+0x7a0>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80af 	beq.w	8005b56 <_dtoa_r+0x8be>
 80059f8:	2e00      	cmp	r6, #0
 80059fa:	dd13      	ble.n	8005a24 <_dtoa_r+0x78c>
 80059fc:	4639      	mov	r1, r7
 80059fe:	4632      	mov	r2, r6
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fbff 	bl	8006204 <__pow5mult>
 8005a06:	ee18 2a10 	vmov	r2, s16
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fb4e 	bl	80060b0 <__multiply>
 8005a14:	ee18 1a10 	vmov	r1, s16
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fa7a 	bl	8005f14 <_Bfree>
 8005a20:	ee08 8a10 	vmov	s16, r8
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	1b9a      	subs	r2, r3, r6
 8005a28:	d006      	beq.n	8005a38 <_dtoa_r+0x7a0>
 8005a2a:	ee18 1a10 	vmov	r1, s16
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fbe8 	bl	8006204 <__pow5mult>
 8005a34:	ee08 0a10 	vmov	s16, r0
 8005a38:	2101      	movs	r1, #1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 fb22 	bl	8006084 <__i2b>
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	4606      	mov	r6, r0
 8005a46:	f340 8088 	ble.w	8005b5a <_dtoa_r+0x8c2>
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fbd8 	bl	8006204 <__pow5mult>
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	4606      	mov	r6, r0
 8005a5a:	f340 8081 	ble.w	8005b60 <_dtoa_r+0x8c8>
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	6933      	ldr	r3, [r6, #16]
 8005a64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a68:	6918      	ldr	r0, [r3, #16]
 8005a6a:	f000 fabb 	bl	8005fe4 <__hi0bits>
 8005a6e:	f1c0 0020 	rsb	r0, r0, #32
 8005a72:	9b05      	ldr	r3, [sp, #20]
 8005a74:	4418      	add	r0, r3
 8005a76:	f010 001f 	ands.w	r0, r0, #31
 8005a7a:	f000 8092 	beq.w	8005ba2 <_dtoa_r+0x90a>
 8005a7e:	f1c0 0320 	rsb	r3, r0, #32
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	f340 808a 	ble.w	8005b9c <_dtoa_r+0x904>
 8005a88:	f1c0 001c 	rsb	r0, r0, #28
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	4403      	add	r3, r0
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	9b05      	ldr	r3, [sp, #20]
 8005a94:	4403      	add	r3, r0
 8005a96:	4405      	add	r5, r0
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	9b04      	ldr	r3, [sp, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd07      	ble.n	8005ab0 <_dtoa_r+0x818>
 8005aa0:	ee18 1a10 	vmov	r1, s16
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fc06 	bl	80062b8 <__lshift>
 8005aac:	ee08 0a10 	vmov	s16, r0
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd05      	ble.n	8005ac2 <_dtoa_r+0x82a>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fbfc 	bl	80062b8 <__lshift>
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d06e      	beq.n	8005ba6 <_dtoa_r+0x90e>
 8005ac8:	ee18 0a10 	vmov	r0, s16
 8005acc:	4631      	mov	r1, r6
 8005ace:	f000 fc63 	bl	8006398 <__mcmp>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	da67      	bge.n	8005ba6 <_dtoa_r+0x90e>
 8005ad6:	9b00      	ldr	r3, [sp, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	ee18 1a10 	vmov	r1, s16
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fa37 	bl	8005f58 <__multadd>
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	ee08 0a10 	vmov	s16, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 81b1 	beq.w	8005e58 <_dtoa_r+0xbc0>
 8005af6:	2300      	movs	r3, #0
 8005af8:	4639      	mov	r1, r7
 8005afa:	220a      	movs	r2, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fa2b 	bl	8005f58 <__multadd>
 8005b02:	9b02      	ldr	r3, [sp, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	4607      	mov	r7, r0
 8005b08:	f300 808e 	bgt.w	8005c28 <_dtoa_r+0x990>
 8005b0c:	9b06      	ldr	r3, [sp, #24]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	dc51      	bgt.n	8005bb6 <_dtoa_r+0x91e>
 8005b12:	e089      	b.n	8005c28 <_dtoa_r+0x990>
 8005b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b1a:	e74b      	b.n	80059b4 <_dtoa_r+0x71c>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	1e5e      	subs	r6, r3, #1
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	42b3      	cmp	r3, r6
 8005b24:	bfbf      	itttt	lt
 8005b26:	9b07      	ldrlt	r3, [sp, #28]
 8005b28:	9607      	strlt	r6, [sp, #28]
 8005b2a:	1af2      	sublt	r2, r6, r3
 8005b2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b2e:	bfb6      	itet	lt
 8005b30:	189b      	addlt	r3, r3, r2
 8005b32:	1b9e      	subge	r6, r3, r6
 8005b34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	bfb8      	it	lt
 8005b3a:	2600      	movlt	r6, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfb7      	itett	lt
 8005b40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b48:	1a9d      	sublt	r5, r3, r2
 8005b4a:	2300      	movlt	r3, #0
 8005b4c:	e734      	b.n	80059b8 <_dtoa_r+0x720>
 8005b4e:	9e07      	ldr	r6, [sp, #28]
 8005b50:	9d04      	ldr	r5, [sp, #16]
 8005b52:	9f08      	ldr	r7, [sp, #32]
 8005b54:	e73b      	b.n	80059ce <_dtoa_r+0x736>
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	e767      	b.n	8005a2a <_dtoa_r+0x792>
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	dc18      	bgt.n	8005b92 <_dtoa_r+0x8fa>
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	d115      	bne.n	8005b92 <_dtoa_r+0x8fa>
 8005b66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b6a:	b993      	cbnz	r3, 8005b92 <_dtoa_r+0x8fa>
 8005b6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b70:	0d1b      	lsrs	r3, r3, #20
 8005b72:	051b      	lsls	r3, r3, #20
 8005b74:	b183      	cbz	r3, 8005b98 <_dtoa_r+0x900>
 8005b76:	9b04      	ldr	r3, [sp, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	9b05      	ldr	r3, [sp, #20]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	f04f 0801 	mov.w	r8, #1
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f47f af6a 	bne.w	8005a62 <_dtoa_r+0x7ca>
 8005b8e:	2001      	movs	r0, #1
 8005b90:	e76f      	b.n	8005a72 <_dtoa_r+0x7da>
 8005b92:	f04f 0800 	mov.w	r8, #0
 8005b96:	e7f6      	b.n	8005b86 <_dtoa_r+0x8ee>
 8005b98:	4698      	mov	r8, r3
 8005b9a:	e7f4      	b.n	8005b86 <_dtoa_r+0x8ee>
 8005b9c:	f43f af7d 	beq.w	8005a9a <_dtoa_r+0x802>
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	301c      	adds	r0, #28
 8005ba4:	e772      	b.n	8005a8c <_dtoa_r+0x7f4>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc37      	bgt.n	8005c1c <_dtoa_r+0x984>
 8005bac:	9b06      	ldr	r3, [sp, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	dd34      	ble.n	8005c1c <_dtoa_r+0x984>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	b96b      	cbnz	r3, 8005bd6 <_dtoa_r+0x93e>
 8005bba:	4631      	mov	r1, r6
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f9ca 	bl	8005f58 <__multadd>
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	ee18 0a10 	vmov	r0, s16
 8005bcc:	f000 fbe4 	bl	8006398 <__mcmp>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f73f adbb 	bgt.w	800574c <_dtoa_r+0x4b4>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	9d01      	ldr	r5, [sp, #4]
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	4631      	mov	r1, r6
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 f995 	bl	8005f14 <_Bfree>
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	f43f aea4 	beq.w	8005938 <_dtoa_r+0x6a0>
 8005bf0:	f1b8 0f00 	cmp.w	r8, #0
 8005bf4:	d005      	beq.n	8005c02 <_dtoa_r+0x96a>
 8005bf6:	45b8      	cmp	r8, r7
 8005bf8:	d003      	beq.n	8005c02 <_dtoa_r+0x96a>
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 f989 	bl	8005f14 <_Bfree>
 8005c02:	4639      	mov	r1, r7
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 f985 	bl	8005f14 <_Bfree>
 8005c0a:	e695      	b.n	8005938 <_dtoa_r+0x6a0>
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	4637      	mov	r7, r6
 8005c10:	e7e1      	b.n	8005bd6 <_dtoa_r+0x93e>
 8005c12:	9700      	str	r7, [sp, #0]
 8005c14:	4637      	mov	r7, r6
 8005c16:	e599      	b.n	800574c <_dtoa_r+0x4b4>
 8005c18:	40240000 	.word	0x40240000
 8005c1c:	9b08      	ldr	r3, [sp, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80ca 	beq.w	8005db8 <_dtoa_r+0xb20>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	dd05      	ble.n	8005c38 <_dtoa_r+0x9a0>
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 fb41 	bl	80062b8 <__lshift>
 8005c36:	4607      	mov	r7, r0
 8005c38:	f1b8 0f00 	cmp.w	r8, #0
 8005c3c:	d05b      	beq.n	8005cf6 <_dtoa_r+0xa5e>
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f927 	bl	8005e94 <_Balloc>
 8005c46:	4605      	mov	r5, r0
 8005c48:	b928      	cbnz	r0, 8005c56 <_dtoa_r+0x9be>
 8005c4a:	4b87      	ldr	r3, [pc, #540]	; (8005e68 <_dtoa_r+0xbd0>)
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c52:	f7ff bb3b 	b.w	80052cc <_dtoa_r+0x34>
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	3202      	adds	r2, #2
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	f107 010c 	add.w	r1, r7, #12
 8005c60:	300c      	adds	r0, #12
 8005c62:	f7fe fce3 	bl	800462c <memcpy>
 8005c66:	2201      	movs	r2, #1
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fb24 	bl	80062b8 <__lshift>
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	f103 0901 	add.w	r9, r3, #1
 8005c76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	f00a 0301 	and.w	r3, sl, #1
 8005c82:	46b8      	mov	r8, r7
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	4607      	mov	r7, r0
 8005c88:	4631      	mov	r1, r6
 8005c8a:	ee18 0a10 	vmov	r0, s16
 8005c8e:	f7ff fa77 	bl	8005180 <quorem>
 8005c92:	4641      	mov	r1, r8
 8005c94:	9002      	str	r0, [sp, #8]
 8005c96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c9a:	ee18 0a10 	vmov	r0, s16
 8005c9e:	f000 fb7b 	bl	8006398 <__mcmp>
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	9003      	str	r0, [sp, #12]
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fb91 	bl	80063d0 <__mdiff>
 8005cae:	68c2      	ldr	r2, [r0, #12]
 8005cb0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	bb02      	cbnz	r2, 8005cfa <_dtoa_r+0xa62>
 8005cb8:	4601      	mov	r1, r0
 8005cba:	ee18 0a10 	vmov	r0, s16
 8005cbe:	f000 fb6b 	bl	8006398 <__mcmp>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	9207      	str	r2, [sp, #28]
 8005cca:	f000 f923 	bl	8005f14 <_Bfree>
 8005cce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005cd2:	ea43 0102 	orr.w	r1, r3, r2
 8005cd6:	9b04      	ldr	r3, [sp, #16]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	464d      	mov	r5, r9
 8005cdc:	d10f      	bne.n	8005cfe <_dtoa_r+0xa66>
 8005cde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ce2:	d02a      	beq.n	8005d3a <_dtoa_r+0xaa2>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd02      	ble.n	8005cf0 <_dtoa_r+0xa58>
 8005cea:	9b02      	ldr	r3, [sp, #8]
 8005cec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cf0:	f88b a000 	strb.w	sl, [fp]
 8005cf4:	e775      	b.n	8005be2 <_dtoa_r+0x94a>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	e7ba      	b.n	8005c70 <_dtoa_r+0x9d8>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	e7e2      	b.n	8005cc4 <_dtoa_r+0xa2c>
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	db04      	blt.n	8005d0e <_dtoa_r+0xa76>
 8005d04:	9906      	ldr	r1, [sp, #24]
 8005d06:	430b      	orrs	r3, r1
 8005d08:	9904      	ldr	r1, [sp, #16]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	d122      	bne.n	8005d54 <_dtoa_r+0xabc>
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	ddee      	ble.n	8005cf0 <_dtoa_r+0xa58>
 8005d12:	ee18 1a10 	vmov	r1, s16
 8005d16:	2201      	movs	r2, #1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 facd 	bl	80062b8 <__lshift>
 8005d1e:	4631      	mov	r1, r6
 8005d20:	ee08 0a10 	vmov	s16, r0
 8005d24:	f000 fb38 	bl	8006398 <__mcmp>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dc03      	bgt.n	8005d34 <_dtoa_r+0xa9c>
 8005d2c:	d1e0      	bne.n	8005cf0 <_dtoa_r+0xa58>
 8005d2e:	f01a 0f01 	tst.w	sl, #1
 8005d32:	d0dd      	beq.n	8005cf0 <_dtoa_r+0xa58>
 8005d34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d38:	d1d7      	bne.n	8005cea <_dtoa_r+0xa52>
 8005d3a:	2339      	movs	r3, #57	; 0x39
 8005d3c:	f88b 3000 	strb.w	r3, [fp]
 8005d40:	462b      	mov	r3, r5
 8005d42:	461d      	mov	r5, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d4a:	2a39      	cmp	r2, #57	; 0x39
 8005d4c:	d071      	beq.n	8005e32 <_dtoa_r+0xb9a>
 8005d4e:	3201      	adds	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e746      	b.n	8005be2 <_dtoa_r+0x94a>
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	dd07      	ble.n	8005d68 <_dtoa_r+0xad0>
 8005d58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d5c:	d0ed      	beq.n	8005d3a <_dtoa_r+0xaa2>
 8005d5e:	f10a 0301 	add.w	r3, sl, #1
 8005d62:	f88b 3000 	strb.w	r3, [fp]
 8005d66:	e73c      	b.n	8005be2 <_dtoa_r+0x94a>
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d6e:	4599      	cmp	r9, r3
 8005d70:	d047      	beq.n	8005e02 <_dtoa_r+0xb6a>
 8005d72:	ee18 1a10 	vmov	r1, s16
 8005d76:	2300      	movs	r3, #0
 8005d78:	220a      	movs	r2, #10
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 f8ec 	bl	8005f58 <__multadd>
 8005d80:	45b8      	cmp	r8, r7
 8005d82:	ee08 0a10 	vmov	s16, r0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f04f 020a 	mov.w	r2, #10
 8005d8e:	4641      	mov	r1, r8
 8005d90:	4620      	mov	r0, r4
 8005d92:	d106      	bne.n	8005da2 <_dtoa_r+0xb0a>
 8005d94:	f000 f8e0 	bl	8005f58 <__multadd>
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	f109 0901 	add.w	r9, r9, #1
 8005da0:	e772      	b.n	8005c88 <_dtoa_r+0x9f0>
 8005da2:	f000 f8d9 	bl	8005f58 <__multadd>
 8005da6:	4639      	mov	r1, r7
 8005da8:	4680      	mov	r8, r0
 8005daa:	2300      	movs	r3, #0
 8005dac:	220a      	movs	r2, #10
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f8d2 	bl	8005f58 <__multadd>
 8005db4:	4607      	mov	r7, r0
 8005db6:	e7f1      	b.n	8005d9c <_dtoa_r+0xb04>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	9d01      	ldr	r5, [sp, #4]
 8005dbe:	ee18 0a10 	vmov	r0, s16
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	f7ff f9dc 	bl	8005180 <quorem>
 8005dc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	f805 ab01 	strb.w	sl, [r5], #1
 8005dd2:	1aea      	subs	r2, r5, r3
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	dd09      	ble.n	8005dee <_dtoa_r+0xb56>
 8005dda:	ee18 1a10 	vmov	r1, s16
 8005dde:	2300      	movs	r3, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f8b8 	bl	8005f58 <__multadd>
 8005de8:	ee08 0a10 	vmov	s16, r0
 8005dec:	e7e7      	b.n	8005dbe <_dtoa_r+0xb26>
 8005dee:	9b02      	ldr	r3, [sp, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bfc8      	it	gt
 8005df4:	461d      	movgt	r5, r3
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	bfd8      	it	le
 8005dfa:	2501      	movle	r5, #1
 8005dfc:	441d      	add	r5, r3
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	ee18 1a10 	vmov	r1, s16
 8005e06:	2201      	movs	r2, #1
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fa55 	bl	80062b8 <__lshift>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	ee08 0a10 	vmov	s16, r0
 8005e14:	f000 fac0 	bl	8006398 <__mcmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	dc91      	bgt.n	8005d40 <_dtoa_r+0xaa8>
 8005e1c:	d102      	bne.n	8005e24 <_dtoa_r+0xb8c>
 8005e1e:	f01a 0f01 	tst.w	sl, #1
 8005e22:	d18d      	bne.n	8005d40 <_dtoa_r+0xaa8>
 8005e24:	462b      	mov	r3, r5
 8005e26:	461d      	mov	r5, r3
 8005e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e2c:	2a30      	cmp	r2, #48	; 0x30
 8005e2e:	d0fa      	beq.n	8005e26 <_dtoa_r+0xb8e>
 8005e30:	e6d7      	b.n	8005be2 <_dtoa_r+0x94a>
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d184      	bne.n	8005d42 <_dtoa_r+0xaaa>
 8005e38:	9b00      	ldr	r3, [sp, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2331      	movs	r3, #49	; 0x31
 8005e40:	7013      	strb	r3, [r2, #0]
 8005e42:	e6ce      	b.n	8005be2 <_dtoa_r+0x94a>
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <_dtoa_r+0xbd4>)
 8005e46:	f7ff ba95 	b.w	8005374 <_dtoa_r+0xdc>
 8005e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f47f aa6e 	bne.w	800532e <_dtoa_r+0x96>
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <_dtoa_r+0xbd8>)
 8005e54:	f7ff ba8e 	b.w	8005374 <_dtoa_r+0xdc>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dcae      	bgt.n	8005dbc <_dtoa_r+0xb24>
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	f73f aea8 	bgt.w	8005bb6 <_dtoa_r+0x91e>
 8005e66:	e7a9      	b.n	8005dbc <_dtoa_r+0xb24>
 8005e68:	08007527 	.word	0x08007527
 8005e6c:	08007484 	.word	0x08007484
 8005e70:	080074a8 	.word	0x080074a8

08005e74 <_localeconv_r>:
 8005e74:	4800      	ldr	r0, [pc, #0]	; (8005e78 <_localeconv_r+0x4>)
 8005e76:	4770      	bx	lr
 8005e78:	200001a0 	.word	0x200001a0

08005e7c <__malloc_lock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_lock+0x8>)
 8005e7e:	f000 bd30 	b.w	80068e2 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	200004ec 	.word	0x200004ec

08005e88 <__malloc_unlock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_unlock+0x8>)
 8005e8a:	f000 bd2b 	b.w	80068e4 <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200004ec 	.word	0x200004ec

08005e94 <_Balloc>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	b976      	cbnz	r6, 8005ebc <_Balloc+0x28>
 8005e9e:	2010      	movs	r0, #16
 8005ea0:	f7fe fbb4 	bl	800460c <malloc>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ea8:	b920      	cbnz	r0, 8005eb4 <_Balloc+0x20>
 8005eaa:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <_Balloc+0x78>)
 8005eac:	4818      	ldr	r0, [pc, #96]	; (8005f10 <_Balloc+0x7c>)
 8005eae:	2166      	movs	r1, #102	; 0x66
 8005eb0:	f000 fce6 	bl	8006880 <__assert_func>
 8005eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005eb8:	6006      	str	r6, [r0, #0]
 8005eba:	60c6      	str	r6, [r0, #12]
 8005ebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ebe:	68f3      	ldr	r3, [r6, #12]
 8005ec0:	b183      	cbz	r3, 8005ee4 <_Balloc+0x50>
 8005ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005eca:	b9b8      	cbnz	r0, 8005efc <_Balloc+0x68>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	fa01 f605 	lsl.w	r6, r1, r5
 8005ed2:	1d72      	adds	r2, r6, #5
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 fb60 	bl	800659c <_calloc_r>
 8005edc:	b160      	cbz	r0, 8005ef8 <_Balloc+0x64>
 8005ede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ee2:	e00e      	b.n	8005f02 <_Balloc+0x6e>
 8005ee4:	2221      	movs	r2, #33	; 0x21
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fb57 	bl	800659c <_calloc_r>
 8005eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef0:	60f0      	str	r0, [r6, #12]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e4      	bne.n	8005ec2 <_Balloc+0x2e>
 8005ef8:	2000      	movs	r0, #0
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	6802      	ldr	r2, [r0, #0]
 8005efe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f02:	2300      	movs	r3, #0
 8005f04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f08:	e7f7      	b.n	8005efa <_Balloc+0x66>
 8005f0a:	bf00      	nop
 8005f0c:	080074b5 	.word	0x080074b5
 8005f10:	08007538 	.word	0x08007538

08005f14 <_Bfree>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b976      	cbnz	r6, 8005f3c <_Bfree+0x28>
 8005f1e:	2010      	movs	r0, #16
 8005f20:	f7fe fb74 	bl	800460c <malloc>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6268      	str	r0, [r5, #36]	; 0x24
 8005f28:	b920      	cbnz	r0, 8005f34 <_Bfree+0x20>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <_Bfree+0x3c>)
 8005f2c:	4809      	ldr	r0, [pc, #36]	; (8005f54 <_Bfree+0x40>)
 8005f2e:	218a      	movs	r1, #138	; 0x8a
 8005f30:	f000 fca6 	bl	8006880 <__assert_func>
 8005f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f38:	6006      	str	r6, [r0, #0]
 8005f3a:	60c6      	str	r6, [r0, #12]
 8005f3c:	b13c      	cbz	r4, 8005f4e <_Bfree+0x3a>
 8005f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f48:	6021      	str	r1, [r4, #0]
 8005f4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	080074b5 	.word	0x080074b5
 8005f54:	08007538 	.word	0x08007538

08005f58 <__multadd>:
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	690d      	ldr	r5, [r1, #16]
 8005f5e:	4607      	mov	r7, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	461e      	mov	r6, r3
 8005f64:	f101 0c14 	add.w	ip, r1, #20
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005f6e:	b299      	uxth	r1, r3
 8005f70:	fb02 6101 	mla	r1, r2, r1, r6
 8005f74:	0c1e      	lsrs	r6, r3, #16
 8005f76:	0c0b      	lsrs	r3, r1, #16
 8005f78:	fb02 3306 	mla	r3, r2, r6, r3
 8005f7c:	b289      	uxth	r1, r1
 8005f7e:	3001      	adds	r0, #1
 8005f80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f84:	4285      	cmp	r5, r0
 8005f86:	f84c 1b04 	str.w	r1, [ip], #4
 8005f8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f8e:	dcec      	bgt.n	8005f6a <__multadd+0x12>
 8005f90:	b30e      	cbz	r6, 8005fd6 <__multadd+0x7e>
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc19      	bgt.n	8005fcc <__multadd+0x74>
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	3101      	adds	r1, #1
 8005f9e:	f7ff ff79 	bl	8005e94 <_Balloc>
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <__multadd+0x5a>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <__multadd+0x84>)
 8005faa:	480d      	ldr	r0, [pc, #52]	; (8005fe0 <__multadd+0x88>)
 8005fac:	21b5      	movs	r1, #181	; 0xb5
 8005fae:	f000 fc67 	bl	8006880 <__assert_func>
 8005fb2:	6922      	ldr	r2, [r4, #16]
 8005fb4:	3202      	adds	r2, #2
 8005fb6:	f104 010c 	add.w	r1, r4, #12
 8005fba:	0092      	lsls	r2, r2, #2
 8005fbc:	300c      	adds	r0, #12
 8005fbe:	f7fe fb35 	bl	800462c <memcpy>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7ff ffa5 	bl	8005f14 <_Bfree>
 8005fca:	4644      	mov	r4, r8
 8005fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	615e      	str	r6, [r3, #20]
 8005fd4:	6125      	str	r5, [r4, #16]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fdc:	08007527 	.word	0x08007527
 8005fe0:	08007538 	.word	0x08007538

08005fe4 <__hi0bits>:
 8005fe4:	0c03      	lsrs	r3, r0, #16
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	b9d3      	cbnz	r3, 8006020 <__hi0bits+0x3c>
 8005fea:	0400      	lsls	r0, r0, #16
 8005fec:	2310      	movs	r3, #16
 8005fee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ff2:	bf04      	itt	eq
 8005ff4:	0200      	lsleq	r0, r0, #8
 8005ff6:	3308      	addeq	r3, #8
 8005ff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ffc:	bf04      	itt	eq
 8005ffe:	0100      	lsleq	r0, r0, #4
 8006000:	3304      	addeq	r3, #4
 8006002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006006:	bf04      	itt	eq
 8006008:	0080      	lsleq	r0, r0, #2
 800600a:	3302      	addeq	r3, #2
 800600c:	2800      	cmp	r0, #0
 800600e:	db05      	blt.n	800601c <__hi0bits+0x38>
 8006010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006014:	f103 0301 	add.w	r3, r3, #1
 8006018:	bf08      	it	eq
 800601a:	2320      	moveq	r3, #32
 800601c:	4618      	mov	r0, r3
 800601e:	4770      	bx	lr
 8006020:	2300      	movs	r3, #0
 8006022:	e7e4      	b.n	8005fee <__hi0bits+0xa>

08006024 <__lo0bits>:
 8006024:	6803      	ldr	r3, [r0, #0]
 8006026:	f013 0207 	ands.w	r2, r3, #7
 800602a:	4601      	mov	r1, r0
 800602c:	d00b      	beq.n	8006046 <__lo0bits+0x22>
 800602e:	07da      	lsls	r2, r3, #31
 8006030:	d423      	bmi.n	800607a <__lo0bits+0x56>
 8006032:	0798      	lsls	r0, r3, #30
 8006034:	bf49      	itett	mi
 8006036:	085b      	lsrmi	r3, r3, #1
 8006038:	089b      	lsrpl	r3, r3, #2
 800603a:	2001      	movmi	r0, #1
 800603c:	600b      	strmi	r3, [r1, #0]
 800603e:	bf5c      	itt	pl
 8006040:	600b      	strpl	r3, [r1, #0]
 8006042:	2002      	movpl	r0, #2
 8006044:	4770      	bx	lr
 8006046:	b298      	uxth	r0, r3
 8006048:	b9a8      	cbnz	r0, 8006076 <__lo0bits+0x52>
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	2010      	movs	r0, #16
 800604e:	b2da      	uxtb	r2, r3
 8006050:	b90a      	cbnz	r2, 8006056 <__lo0bits+0x32>
 8006052:	3008      	adds	r0, #8
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	071a      	lsls	r2, r3, #28
 8006058:	bf04      	itt	eq
 800605a:	091b      	lsreq	r3, r3, #4
 800605c:	3004      	addeq	r0, #4
 800605e:	079a      	lsls	r2, r3, #30
 8006060:	bf04      	itt	eq
 8006062:	089b      	lsreq	r3, r3, #2
 8006064:	3002      	addeq	r0, #2
 8006066:	07da      	lsls	r2, r3, #31
 8006068:	d403      	bmi.n	8006072 <__lo0bits+0x4e>
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	f100 0001 	add.w	r0, r0, #1
 8006070:	d005      	beq.n	800607e <__lo0bits+0x5a>
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	4770      	bx	lr
 8006076:	4610      	mov	r0, r2
 8006078:	e7e9      	b.n	800604e <__lo0bits+0x2a>
 800607a:	2000      	movs	r0, #0
 800607c:	4770      	bx	lr
 800607e:	2020      	movs	r0, #32
 8006080:	4770      	bx	lr
	...

08006084 <__i2b>:
 8006084:	b510      	push	{r4, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	2101      	movs	r1, #1
 800608a:	f7ff ff03 	bl	8005e94 <_Balloc>
 800608e:	4602      	mov	r2, r0
 8006090:	b928      	cbnz	r0, 800609e <__i2b+0x1a>
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <__i2b+0x24>)
 8006094:	4805      	ldr	r0, [pc, #20]	; (80060ac <__i2b+0x28>)
 8006096:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800609a:	f000 fbf1 	bl	8006880 <__assert_func>
 800609e:	2301      	movs	r3, #1
 80060a0:	6144      	str	r4, [r0, #20]
 80060a2:	6103      	str	r3, [r0, #16]
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop
 80060a8:	08007527 	.word	0x08007527
 80060ac:	08007538 	.word	0x08007538

080060b0 <__multiply>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	4691      	mov	r9, r2
 80060b6:	690a      	ldr	r2, [r1, #16]
 80060b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bfb8      	it	lt
 80060c0:	460b      	movlt	r3, r1
 80060c2:	460c      	mov	r4, r1
 80060c4:	bfbc      	itt	lt
 80060c6:	464c      	movlt	r4, r9
 80060c8:	4699      	movlt	r9, r3
 80060ca:	6927      	ldr	r7, [r4, #16]
 80060cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	6861      	ldr	r1, [r4, #4]
 80060d4:	eb07 060a 	add.w	r6, r7, sl
 80060d8:	42b3      	cmp	r3, r6
 80060da:	b085      	sub	sp, #20
 80060dc:	bfb8      	it	lt
 80060de:	3101      	addlt	r1, #1
 80060e0:	f7ff fed8 	bl	8005e94 <_Balloc>
 80060e4:	b930      	cbnz	r0, 80060f4 <__multiply+0x44>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b44      	ldr	r3, [pc, #272]	; (80061fc <__multiply+0x14c>)
 80060ea:	4845      	ldr	r0, [pc, #276]	; (8006200 <__multiply+0x150>)
 80060ec:	f240 115d 	movw	r1, #349	; 0x15d
 80060f0:	f000 fbc6 	bl	8006880 <__assert_func>
 80060f4:	f100 0514 	add.w	r5, r0, #20
 80060f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060fc:	462b      	mov	r3, r5
 80060fe:	2200      	movs	r2, #0
 8006100:	4543      	cmp	r3, r8
 8006102:	d321      	bcc.n	8006148 <__multiply+0x98>
 8006104:	f104 0314 	add.w	r3, r4, #20
 8006108:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800610c:	f109 0314 	add.w	r3, r9, #20
 8006110:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006114:	9202      	str	r2, [sp, #8]
 8006116:	1b3a      	subs	r2, r7, r4
 8006118:	3a15      	subs	r2, #21
 800611a:	f022 0203 	bic.w	r2, r2, #3
 800611e:	3204      	adds	r2, #4
 8006120:	f104 0115 	add.w	r1, r4, #21
 8006124:	428f      	cmp	r7, r1
 8006126:	bf38      	it	cc
 8006128:	2204      	movcc	r2, #4
 800612a:	9201      	str	r2, [sp, #4]
 800612c:	9a02      	ldr	r2, [sp, #8]
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d80c      	bhi.n	800614e <__multiply+0x9e>
 8006134:	2e00      	cmp	r6, #0
 8006136:	dd03      	ble.n	8006140 <__multiply+0x90>
 8006138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05a      	beq.n	80061f6 <__multiply+0x146>
 8006140:	6106      	str	r6, [r0, #16]
 8006142:	b005      	add	sp, #20
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	f843 2b04 	str.w	r2, [r3], #4
 800614c:	e7d8      	b.n	8006100 <__multiply+0x50>
 800614e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006152:	f1ba 0f00 	cmp.w	sl, #0
 8006156:	d024      	beq.n	80061a2 <__multiply+0xf2>
 8006158:	f104 0e14 	add.w	lr, r4, #20
 800615c:	46a9      	mov	r9, r5
 800615e:	f04f 0c00 	mov.w	ip, #0
 8006162:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006166:	f8d9 1000 	ldr.w	r1, [r9]
 800616a:	fa1f fb82 	uxth.w	fp, r2
 800616e:	b289      	uxth	r1, r1
 8006170:	fb0a 110b 	mla	r1, sl, fp, r1
 8006174:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006178:	f8d9 2000 	ldr.w	r2, [r9]
 800617c:	4461      	add	r1, ip
 800617e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006182:	fb0a c20b 	mla	r2, sl, fp, ip
 8006186:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800618a:	b289      	uxth	r1, r1
 800618c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006190:	4577      	cmp	r7, lr
 8006192:	f849 1b04 	str.w	r1, [r9], #4
 8006196:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800619a:	d8e2      	bhi.n	8006162 <__multiply+0xb2>
 800619c:	9a01      	ldr	r2, [sp, #4]
 800619e:	f845 c002 	str.w	ip, [r5, r2]
 80061a2:	9a03      	ldr	r2, [sp, #12]
 80061a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061a8:	3304      	adds	r3, #4
 80061aa:	f1b9 0f00 	cmp.w	r9, #0
 80061ae:	d020      	beq.n	80061f2 <__multiply+0x142>
 80061b0:	6829      	ldr	r1, [r5, #0]
 80061b2:	f104 0c14 	add.w	ip, r4, #20
 80061b6:	46ae      	mov	lr, r5
 80061b8:	f04f 0a00 	mov.w	sl, #0
 80061bc:	f8bc b000 	ldrh.w	fp, [ip]
 80061c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061c4:	fb09 220b 	mla	r2, r9, fp, r2
 80061c8:	4492      	add	sl, r2
 80061ca:	b289      	uxth	r1, r1
 80061cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061d0:	f84e 1b04 	str.w	r1, [lr], #4
 80061d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061d8:	f8be 1000 	ldrh.w	r1, [lr]
 80061dc:	0c12      	lsrs	r2, r2, #16
 80061de:	fb09 1102 	mla	r1, r9, r2, r1
 80061e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061e6:	4567      	cmp	r7, ip
 80061e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061ec:	d8e6      	bhi.n	80061bc <__multiply+0x10c>
 80061ee:	9a01      	ldr	r2, [sp, #4]
 80061f0:	50a9      	str	r1, [r5, r2]
 80061f2:	3504      	adds	r5, #4
 80061f4:	e79a      	b.n	800612c <__multiply+0x7c>
 80061f6:	3e01      	subs	r6, #1
 80061f8:	e79c      	b.n	8006134 <__multiply+0x84>
 80061fa:	bf00      	nop
 80061fc:	08007527 	.word	0x08007527
 8006200:	08007538 	.word	0x08007538

08006204 <__pow5mult>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	4615      	mov	r5, r2
 800620a:	f012 0203 	ands.w	r2, r2, #3
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	d007      	beq.n	8006224 <__pow5mult+0x20>
 8006214:	4c25      	ldr	r4, [pc, #148]	; (80062ac <__pow5mult+0xa8>)
 8006216:	3a01      	subs	r2, #1
 8006218:	2300      	movs	r3, #0
 800621a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800621e:	f7ff fe9b 	bl	8005f58 <__multadd>
 8006222:	4607      	mov	r7, r0
 8006224:	10ad      	asrs	r5, r5, #2
 8006226:	d03d      	beq.n	80062a4 <__pow5mult+0xa0>
 8006228:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800622a:	b97c      	cbnz	r4, 800624c <__pow5mult+0x48>
 800622c:	2010      	movs	r0, #16
 800622e:	f7fe f9ed 	bl	800460c <malloc>
 8006232:	4602      	mov	r2, r0
 8006234:	6270      	str	r0, [r6, #36]	; 0x24
 8006236:	b928      	cbnz	r0, 8006244 <__pow5mult+0x40>
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <__pow5mult+0xac>)
 800623a:	481e      	ldr	r0, [pc, #120]	; (80062b4 <__pow5mult+0xb0>)
 800623c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006240:	f000 fb1e 	bl	8006880 <__assert_func>
 8006244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006248:	6004      	str	r4, [r0, #0]
 800624a:	60c4      	str	r4, [r0, #12]
 800624c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006254:	b94c      	cbnz	r4, 800626a <__pow5mult+0x66>
 8006256:	f240 2171 	movw	r1, #625	; 0x271
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ff12 	bl	8006084 <__i2b>
 8006260:	2300      	movs	r3, #0
 8006262:	f8c8 0008 	str.w	r0, [r8, #8]
 8006266:	4604      	mov	r4, r0
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	07eb      	lsls	r3, r5, #31
 8006270:	d50a      	bpl.n	8006288 <__pow5mult+0x84>
 8006272:	4639      	mov	r1, r7
 8006274:	4622      	mov	r2, r4
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ff1a 	bl	80060b0 <__multiply>
 800627c:	4639      	mov	r1, r7
 800627e:	4680      	mov	r8, r0
 8006280:	4630      	mov	r0, r6
 8006282:	f7ff fe47 	bl	8005f14 <_Bfree>
 8006286:	4647      	mov	r7, r8
 8006288:	106d      	asrs	r5, r5, #1
 800628a:	d00b      	beq.n	80062a4 <__pow5mult+0xa0>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	b938      	cbnz	r0, 80062a0 <__pow5mult+0x9c>
 8006290:	4622      	mov	r2, r4
 8006292:	4621      	mov	r1, r4
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ff0b 	bl	80060b0 <__multiply>
 800629a:	6020      	str	r0, [r4, #0]
 800629c:	f8c0 9000 	str.w	r9, [r0]
 80062a0:	4604      	mov	r4, r0
 80062a2:	e7e4      	b.n	800626e <__pow5mult+0x6a>
 80062a4:	4638      	mov	r0, r7
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	bf00      	nop
 80062ac:	08007688 	.word	0x08007688
 80062b0:	080074b5 	.word	0x080074b5
 80062b4:	08007538 	.word	0x08007538

080062b8 <__lshift>:
 80062b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	6849      	ldr	r1, [r1, #4]
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	4607      	mov	r7, r0
 80062ca:	4691      	mov	r9, r2
 80062cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062d0:	f108 0601 	add.w	r6, r8, #1
 80062d4:	42b3      	cmp	r3, r6
 80062d6:	db0b      	blt.n	80062f0 <__lshift+0x38>
 80062d8:	4638      	mov	r0, r7
 80062da:	f7ff fddb 	bl	8005e94 <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b948      	cbnz	r0, 80062f6 <__lshift+0x3e>
 80062e2:	4602      	mov	r2, r0
 80062e4:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <__lshift+0xd8>)
 80062e6:	482b      	ldr	r0, [pc, #172]	; (8006394 <__lshift+0xdc>)
 80062e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062ec:	f000 fac8 	bl	8006880 <__assert_func>
 80062f0:	3101      	adds	r1, #1
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	e7ee      	b.n	80062d4 <__lshift+0x1c>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f100 0114 	add.w	r1, r0, #20
 80062fc:	f100 0210 	add.w	r2, r0, #16
 8006300:	4618      	mov	r0, r3
 8006302:	4553      	cmp	r3, sl
 8006304:	db37      	blt.n	8006376 <__lshift+0xbe>
 8006306:	6920      	ldr	r0, [r4, #16]
 8006308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800630c:	f104 0314 	add.w	r3, r4, #20
 8006310:	f019 091f 	ands.w	r9, r9, #31
 8006314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006318:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800631c:	d02f      	beq.n	800637e <__lshift+0xc6>
 800631e:	f1c9 0e20 	rsb	lr, r9, #32
 8006322:	468a      	mov	sl, r1
 8006324:	f04f 0c00 	mov.w	ip, #0
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	fa02 f209 	lsl.w	r2, r2, r9
 800632e:	ea42 020c 	orr.w	r2, r2, ip
 8006332:	f84a 2b04 	str.w	r2, [sl], #4
 8006336:	f853 2b04 	ldr.w	r2, [r3], #4
 800633a:	4298      	cmp	r0, r3
 800633c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006340:	d8f2      	bhi.n	8006328 <__lshift+0x70>
 8006342:	1b03      	subs	r3, r0, r4
 8006344:	3b15      	subs	r3, #21
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	3304      	adds	r3, #4
 800634c:	f104 0215 	add.w	r2, r4, #21
 8006350:	4290      	cmp	r0, r2
 8006352:	bf38      	it	cc
 8006354:	2304      	movcc	r3, #4
 8006356:	f841 c003 	str.w	ip, [r1, r3]
 800635a:	f1bc 0f00 	cmp.w	ip, #0
 800635e:	d001      	beq.n	8006364 <__lshift+0xac>
 8006360:	f108 0602 	add.w	r6, r8, #2
 8006364:	3e01      	subs	r6, #1
 8006366:	4638      	mov	r0, r7
 8006368:	612e      	str	r6, [r5, #16]
 800636a:	4621      	mov	r1, r4
 800636c:	f7ff fdd2 	bl	8005f14 <_Bfree>
 8006370:	4628      	mov	r0, r5
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	f842 0f04 	str.w	r0, [r2, #4]!
 800637a:	3301      	adds	r3, #1
 800637c:	e7c1      	b.n	8006302 <__lshift+0x4a>
 800637e:	3904      	subs	r1, #4
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	f841 2f04 	str.w	r2, [r1, #4]!
 8006388:	4298      	cmp	r0, r3
 800638a:	d8f9      	bhi.n	8006380 <__lshift+0xc8>
 800638c:	e7ea      	b.n	8006364 <__lshift+0xac>
 800638e:	bf00      	nop
 8006390:	08007527 	.word	0x08007527
 8006394:	08007538 	.word	0x08007538

08006398 <__mcmp>:
 8006398:	b530      	push	{r4, r5, lr}
 800639a:	6902      	ldr	r2, [r0, #16]
 800639c:	690c      	ldr	r4, [r1, #16]
 800639e:	1b12      	subs	r2, r2, r4
 80063a0:	d10e      	bne.n	80063c0 <__mcmp+0x28>
 80063a2:	f100 0314 	add.w	r3, r0, #20
 80063a6:	3114      	adds	r1, #20
 80063a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	d003      	beq.n	80063c4 <__mcmp+0x2c>
 80063bc:	d305      	bcc.n	80063ca <__mcmp+0x32>
 80063be:	2201      	movs	r2, #1
 80063c0:	4610      	mov	r0, r2
 80063c2:	bd30      	pop	{r4, r5, pc}
 80063c4:	4283      	cmp	r3, r0
 80063c6:	d3f3      	bcc.n	80063b0 <__mcmp+0x18>
 80063c8:	e7fa      	b.n	80063c0 <__mcmp+0x28>
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295
 80063ce:	e7f7      	b.n	80063c0 <__mcmp+0x28>

080063d0 <__mdiff>:
 80063d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	460c      	mov	r4, r1
 80063d6:	4606      	mov	r6, r0
 80063d8:	4611      	mov	r1, r2
 80063da:	4620      	mov	r0, r4
 80063dc:	4690      	mov	r8, r2
 80063de:	f7ff ffdb 	bl	8006398 <__mcmp>
 80063e2:	1e05      	subs	r5, r0, #0
 80063e4:	d110      	bne.n	8006408 <__mdiff+0x38>
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff fd53 	bl	8005e94 <_Balloc>
 80063ee:	b930      	cbnz	r0, 80063fe <__mdiff+0x2e>
 80063f0:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <__mdiff+0x10c>)
 80063f2:	4602      	mov	r2, r0
 80063f4:	f240 2132 	movw	r1, #562	; 0x232
 80063f8:	4839      	ldr	r0, [pc, #228]	; (80064e0 <__mdiff+0x110>)
 80063fa:	f000 fa41 	bl	8006880 <__assert_func>
 80063fe:	2301      	movs	r3, #1
 8006400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006408:	bfa4      	itt	ge
 800640a:	4643      	movge	r3, r8
 800640c:	46a0      	movge	r8, r4
 800640e:	4630      	mov	r0, r6
 8006410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006414:	bfa6      	itte	ge
 8006416:	461c      	movge	r4, r3
 8006418:	2500      	movge	r5, #0
 800641a:	2501      	movlt	r5, #1
 800641c:	f7ff fd3a 	bl	8005e94 <_Balloc>
 8006420:	b920      	cbnz	r0, 800642c <__mdiff+0x5c>
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <__mdiff+0x10c>)
 8006424:	4602      	mov	r2, r0
 8006426:	f44f 7110 	mov.w	r1, #576	; 0x240
 800642a:	e7e5      	b.n	80063f8 <__mdiff+0x28>
 800642c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006430:	6926      	ldr	r6, [r4, #16]
 8006432:	60c5      	str	r5, [r0, #12]
 8006434:	f104 0914 	add.w	r9, r4, #20
 8006438:	f108 0514 	add.w	r5, r8, #20
 800643c:	f100 0e14 	add.w	lr, r0, #20
 8006440:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006444:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006448:	f108 0210 	add.w	r2, r8, #16
 800644c:	46f2      	mov	sl, lr
 800644e:	2100      	movs	r1, #0
 8006450:	f859 3b04 	ldr.w	r3, [r9], #4
 8006454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006458:	fa1f f883 	uxth.w	r8, r3
 800645c:	fa11 f18b 	uxtah	r1, r1, fp
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	eba1 0808 	sub.w	r8, r1, r8
 8006466:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800646a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800646e:	fa1f f888 	uxth.w	r8, r8
 8006472:	1419      	asrs	r1, r3, #16
 8006474:	454e      	cmp	r6, r9
 8006476:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800647a:	f84a 3b04 	str.w	r3, [sl], #4
 800647e:	d8e7      	bhi.n	8006450 <__mdiff+0x80>
 8006480:	1b33      	subs	r3, r6, r4
 8006482:	3b15      	subs	r3, #21
 8006484:	f023 0303 	bic.w	r3, r3, #3
 8006488:	3304      	adds	r3, #4
 800648a:	3415      	adds	r4, #21
 800648c:	42a6      	cmp	r6, r4
 800648e:	bf38      	it	cc
 8006490:	2304      	movcc	r3, #4
 8006492:	441d      	add	r5, r3
 8006494:	4473      	add	r3, lr
 8006496:	469e      	mov	lr, r3
 8006498:	462e      	mov	r6, r5
 800649a:	4566      	cmp	r6, ip
 800649c:	d30e      	bcc.n	80064bc <__mdiff+0xec>
 800649e:	f10c 0203 	add.w	r2, ip, #3
 80064a2:	1b52      	subs	r2, r2, r5
 80064a4:	f022 0203 	bic.w	r2, r2, #3
 80064a8:	3d03      	subs	r5, #3
 80064aa:	45ac      	cmp	ip, r5
 80064ac:	bf38      	it	cc
 80064ae:	2200      	movcc	r2, #0
 80064b0:	441a      	add	r2, r3
 80064b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064b6:	b17b      	cbz	r3, 80064d8 <__mdiff+0x108>
 80064b8:	6107      	str	r7, [r0, #16]
 80064ba:	e7a3      	b.n	8006404 <__mdiff+0x34>
 80064bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80064c0:	fa11 f288 	uxtah	r2, r1, r8
 80064c4:	1414      	asrs	r4, r2, #16
 80064c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064ca:	b292      	uxth	r2, r2
 80064cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064d0:	f84e 2b04 	str.w	r2, [lr], #4
 80064d4:	1421      	asrs	r1, r4, #16
 80064d6:	e7e0      	b.n	800649a <__mdiff+0xca>
 80064d8:	3f01      	subs	r7, #1
 80064da:	e7ea      	b.n	80064b2 <__mdiff+0xe2>
 80064dc:	08007527 	.word	0x08007527
 80064e0:	08007538 	.word	0x08007538

080064e4 <__d2b>:
 80064e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	4689      	mov	r9, r1
 80064ea:	2101      	movs	r1, #1
 80064ec:	ec57 6b10 	vmov	r6, r7, d0
 80064f0:	4690      	mov	r8, r2
 80064f2:	f7ff fccf 	bl	8005e94 <_Balloc>
 80064f6:	4604      	mov	r4, r0
 80064f8:	b930      	cbnz	r0, 8006508 <__d2b+0x24>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <__d2b+0xb0>)
 80064fe:	4826      	ldr	r0, [pc, #152]	; (8006598 <__d2b+0xb4>)
 8006500:	f240 310a 	movw	r1, #778	; 0x30a
 8006504:	f000 f9bc 	bl	8006880 <__assert_func>
 8006508:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800650c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006510:	bb35      	cbnz	r5, 8006560 <__d2b+0x7c>
 8006512:	2e00      	cmp	r6, #0
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	d028      	beq.n	800656a <__d2b+0x86>
 8006518:	4668      	mov	r0, sp
 800651a:	9600      	str	r6, [sp, #0]
 800651c:	f7ff fd82 	bl	8006024 <__lo0bits>
 8006520:	9900      	ldr	r1, [sp, #0]
 8006522:	b300      	cbz	r0, 8006566 <__d2b+0x82>
 8006524:	9a01      	ldr	r2, [sp, #4]
 8006526:	f1c0 0320 	rsb	r3, r0, #32
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	430b      	orrs	r3, r1
 8006530:	40c2      	lsrs	r2, r0
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	9201      	str	r2, [sp, #4]
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	61a3      	str	r3, [r4, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf14      	ite	ne
 800653e:	2202      	movne	r2, #2
 8006540:	2201      	moveq	r2, #1
 8006542:	6122      	str	r2, [r4, #16]
 8006544:	b1d5      	cbz	r5, 800657c <__d2b+0x98>
 8006546:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800654a:	4405      	add	r5, r0
 800654c:	f8c9 5000 	str.w	r5, [r9]
 8006550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006554:	f8c8 0000 	str.w	r0, [r8]
 8006558:	4620      	mov	r0, r4
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006564:	e7d5      	b.n	8006512 <__d2b+0x2e>
 8006566:	6161      	str	r1, [r4, #20]
 8006568:	e7e5      	b.n	8006536 <__d2b+0x52>
 800656a:	a801      	add	r0, sp, #4
 800656c:	f7ff fd5a 	bl	8006024 <__lo0bits>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	6163      	str	r3, [r4, #20]
 8006574:	2201      	movs	r2, #1
 8006576:	6122      	str	r2, [r4, #16]
 8006578:	3020      	adds	r0, #32
 800657a:	e7e3      	b.n	8006544 <__d2b+0x60>
 800657c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006584:	f8c9 0000 	str.w	r0, [r9]
 8006588:	6918      	ldr	r0, [r3, #16]
 800658a:	f7ff fd2b 	bl	8005fe4 <__hi0bits>
 800658e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006592:	e7df      	b.n	8006554 <__d2b+0x70>
 8006594:	08007527 	.word	0x08007527
 8006598:	08007538 	.word	0x08007538

0800659c <_calloc_r>:
 800659c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659e:	fba1 2402 	umull	r2, r4, r1, r2
 80065a2:	b94c      	cbnz	r4, 80065b8 <_calloc_r+0x1c>
 80065a4:	4611      	mov	r1, r2
 80065a6:	9201      	str	r2, [sp, #4]
 80065a8:	f7fe f8c2 	bl	8004730 <_malloc_r>
 80065ac:	9a01      	ldr	r2, [sp, #4]
 80065ae:	4605      	mov	r5, r0
 80065b0:	b930      	cbnz	r0, 80065c0 <_calloc_r+0x24>
 80065b2:	4628      	mov	r0, r5
 80065b4:	b003      	add	sp, #12
 80065b6:	bd30      	pop	{r4, r5, pc}
 80065b8:	220c      	movs	r2, #12
 80065ba:	6002      	str	r2, [r0, #0]
 80065bc:	2500      	movs	r5, #0
 80065be:	e7f8      	b.n	80065b2 <_calloc_r+0x16>
 80065c0:	4621      	mov	r1, r4
 80065c2:	f7fe f841 	bl	8004648 <memset>
 80065c6:	e7f4      	b.n	80065b2 <_calloc_r+0x16>

080065c8 <__ssputs_r>:
 80065c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	688e      	ldr	r6, [r1, #8]
 80065ce:	429e      	cmp	r6, r3
 80065d0:	4682      	mov	sl, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4690      	mov	r8, r2
 80065d6:	461f      	mov	r7, r3
 80065d8:	d838      	bhi.n	800664c <__ssputs_r+0x84>
 80065da:	898a      	ldrh	r2, [r1, #12]
 80065dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065e0:	d032      	beq.n	8006648 <__ssputs_r+0x80>
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	6909      	ldr	r1, [r1, #16]
 80065e6:	eba5 0901 	sub.w	r9, r5, r1
 80065ea:	6965      	ldr	r5, [r4, #20]
 80065ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065f4:	3301      	adds	r3, #1
 80065f6:	444b      	add	r3, r9
 80065f8:	106d      	asrs	r5, r5, #1
 80065fa:	429d      	cmp	r5, r3
 80065fc:	bf38      	it	cc
 80065fe:	461d      	movcc	r5, r3
 8006600:	0553      	lsls	r3, r2, #21
 8006602:	d531      	bpl.n	8006668 <__ssputs_r+0xa0>
 8006604:	4629      	mov	r1, r5
 8006606:	f7fe f893 	bl	8004730 <_malloc_r>
 800660a:	4606      	mov	r6, r0
 800660c:	b950      	cbnz	r0, 8006624 <__ssputs_r+0x5c>
 800660e:	230c      	movs	r3, #12
 8006610:	f8ca 3000 	str.w	r3, [sl]
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006624:	6921      	ldr	r1, [r4, #16]
 8006626:	464a      	mov	r2, r9
 8006628:	f7fe f800 	bl	800462c <memcpy>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	6126      	str	r6, [r4, #16]
 800663a:	6165      	str	r5, [r4, #20]
 800663c:	444e      	add	r6, r9
 800663e:	eba5 0509 	sub.w	r5, r5, r9
 8006642:	6026      	str	r6, [r4, #0]
 8006644:	60a5      	str	r5, [r4, #8]
 8006646:	463e      	mov	r6, r7
 8006648:	42be      	cmp	r6, r7
 800664a:	d900      	bls.n	800664e <__ssputs_r+0x86>
 800664c:	463e      	mov	r6, r7
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	4632      	mov	r2, r6
 8006652:	4641      	mov	r1, r8
 8006654:	f000 f959 	bl	800690a <memmove>
 8006658:	68a3      	ldr	r3, [r4, #8]
 800665a:	1b9b      	subs	r3, r3, r6
 800665c:	60a3      	str	r3, [r4, #8]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	4433      	add	r3, r6
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	2000      	movs	r0, #0
 8006666:	e7db      	b.n	8006620 <__ssputs_r+0x58>
 8006668:	462a      	mov	r2, r5
 800666a:	f000 f968 	bl	800693e <_realloc_r>
 800666e:	4606      	mov	r6, r0
 8006670:	2800      	cmp	r0, #0
 8006672:	d1e1      	bne.n	8006638 <__ssputs_r+0x70>
 8006674:	6921      	ldr	r1, [r4, #16]
 8006676:	4650      	mov	r0, sl
 8006678:	f7fd ffee 	bl	8004658 <_free_r>
 800667c:	e7c7      	b.n	800660e <__ssputs_r+0x46>
	...

08006680 <_svfiprintf_r>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	4698      	mov	r8, r3
 8006686:	898b      	ldrh	r3, [r1, #12]
 8006688:	061b      	lsls	r3, r3, #24
 800668a:	b09d      	sub	sp, #116	; 0x74
 800668c:	4607      	mov	r7, r0
 800668e:	460d      	mov	r5, r1
 8006690:	4614      	mov	r4, r2
 8006692:	d50e      	bpl.n	80066b2 <_svfiprintf_r+0x32>
 8006694:	690b      	ldr	r3, [r1, #16]
 8006696:	b963      	cbnz	r3, 80066b2 <_svfiprintf_r+0x32>
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	f7fe f849 	bl	8004730 <_malloc_r>
 800669e:	6028      	str	r0, [r5, #0]
 80066a0:	6128      	str	r0, [r5, #16]
 80066a2:	b920      	cbnz	r0, 80066ae <_svfiprintf_r+0x2e>
 80066a4:	230c      	movs	r3, #12
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	e0d1      	b.n	8006852 <_svfiprintf_r+0x1d2>
 80066ae:	2340      	movs	r3, #64	; 0x40
 80066b0:	616b      	str	r3, [r5, #20]
 80066b2:	2300      	movs	r3, #0
 80066b4:	9309      	str	r3, [sp, #36]	; 0x24
 80066b6:	2320      	movs	r3, #32
 80066b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c0:	2330      	movs	r3, #48	; 0x30
 80066c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800686c <_svfiprintf_r+0x1ec>
 80066c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ca:	f04f 0901 	mov.w	r9, #1
 80066ce:	4623      	mov	r3, r4
 80066d0:	469a      	mov	sl, r3
 80066d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d6:	b10a      	cbz	r2, 80066dc <_svfiprintf_r+0x5c>
 80066d8:	2a25      	cmp	r2, #37	; 0x25
 80066da:	d1f9      	bne.n	80066d0 <_svfiprintf_r+0x50>
 80066dc:	ebba 0b04 	subs.w	fp, sl, r4
 80066e0:	d00b      	beq.n	80066fa <_svfiprintf_r+0x7a>
 80066e2:	465b      	mov	r3, fp
 80066e4:	4622      	mov	r2, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	4638      	mov	r0, r7
 80066ea:	f7ff ff6d 	bl	80065c8 <__ssputs_r>
 80066ee:	3001      	adds	r0, #1
 80066f0:	f000 80aa 	beq.w	8006848 <_svfiprintf_r+0x1c8>
 80066f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f6:	445a      	add	r2, fp
 80066f8:	9209      	str	r2, [sp, #36]	; 0x24
 80066fa:	f89a 3000 	ldrb.w	r3, [sl]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80a2 	beq.w	8006848 <_svfiprintf_r+0x1c8>
 8006704:	2300      	movs	r3, #0
 8006706:	f04f 32ff 	mov.w	r2, #4294967295
 800670a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670e:	f10a 0a01 	add.w	sl, sl, #1
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	9307      	str	r3, [sp, #28]
 8006716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800671a:	931a      	str	r3, [sp, #104]	; 0x68
 800671c:	4654      	mov	r4, sl
 800671e:	2205      	movs	r2, #5
 8006720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006724:	4851      	ldr	r0, [pc, #324]	; (800686c <_svfiprintf_r+0x1ec>)
 8006726:	f7f9 fd63 	bl	80001f0 <memchr>
 800672a:	9a04      	ldr	r2, [sp, #16]
 800672c:	b9d8      	cbnz	r0, 8006766 <_svfiprintf_r+0xe6>
 800672e:	06d0      	lsls	r0, r2, #27
 8006730:	bf44      	itt	mi
 8006732:	2320      	movmi	r3, #32
 8006734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006738:	0711      	lsls	r1, r2, #28
 800673a:	bf44      	itt	mi
 800673c:	232b      	movmi	r3, #43	; 0x2b
 800673e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006742:	f89a 3000 	ldrb.w	r3, [sl]
 8006746:	2b2a      	cmp	r3, #42	; 0x2a
 8006748:	d015      	beq.n	8006776 <_svfiprintf_r+0xf6>
 800674a:	9a07      	ldr	r2, [sp, #28]
 800674c:	4654      	mov	r4, sl
 800674e:	2000      	movs	r0, #0
 8006750:	f04f 0c0a 	mov.w	ip, #10
 8006754:	4621      	mov	r1, r4
 8006756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675a:	3b30      	subs	r3, #48	; 0x30
 800675c:	2b09      	cmp	r3, #9
 800675e:	d94e      	bls.n	80067fe <_svfiprintf_r+0x17e>
 8006760:	b1b0      	cbz	r0, 8006790 <_svfiprintf_r+0x110>
 8006762:	9207      	str	r2, [sp, #28]
 8006764:	e014      	b.n	8006790 <_svfiprintf_r+0x110>
 8006766:	eba0 0308 	sub.w	r3, r0, r8
 800676a:	fa09 f303 	lsl.w	r3, r9, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	46a2      	mov	sl, r4
 8006774:	e7d2      	b.n	800671c <_svfiprintf_r+0x9c>
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	1d19      	adds	r1, r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	9103      	str	r1, [sp, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfbb      	ittet	lt
 8006782:	425b      	neglt	r3, r3
 8006784:	f042 0202 	orrlt.w	r2, r2, #2
 8006788:	9307      	strge	r3, [sp, #28]
 800678a:	9307      	strlt	r3, [sp, #28]
 800678c:	bfb8      	it	lt
 800678e:	9204      	strlt	r2, [sp, #16]
 8006790:	7823      	ldrb	r3, [r4, #0]
 8006792:	2b2e      	cmp	r3, #46	; 0x2e
 8006794:	d10c      	bne.n	80067b0 <_svfiprintf_r+0x130>
 8006796:	7863      	ldrb	r3, [r4, #1]
 8006798:	2b2a      	cmp	r3, #42	; 0x2a
 800679a:	d135      	bne.n	8006808 <_svfiprintf_r+0x188>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	9203      	str	r2, [sp, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bfb8      	it	lt
 80067a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ac:	3402      	adds	r4, #2
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800687c <_svfiprintf_r+0x1fc>
 80067b4:	7821      	ldrb	r1, [r4, #0]
 80067b6:	2203      	movs	r2, #3
 80067b8:	4650      	mov	r0, sl
 80067ba:	f7f9 fd19 	bl	80001f0 <memchr>
 80067be:	b140      	cbz	r0, 80067d2 <_svfiprintf_r+0x152>
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	eba0 000a 	sub.w	r0, r0, sl
 80067c6:	fa03 f000 	lsl.w	r0, r3, r0
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	4303      	orrs	r3, r0
 80067ce:	3401      	adds	r4, #1
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d6:	4826      	ldr	r0, [pc, #152]	; (8006870 <_svfiprintf_r+0x1f0>)
 80067d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067dc:	2206      	movs	r2, #6
 80067de:	f7f9 fd07 	bl	80001f0 <memchr>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d038      	beq.n	8006858 <_svfiprintf_r+0x1d8>
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <_svfiprintf_r+0x1f4>)
 80067e8:	bb1b      	cbnz	r3, 8006832 <_svfiprintf_r+0x1b2>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	3307      	adds	r3, #7
 80067ee:	f023 0307 	bic.w	r3, r3, #7
 80067f2:	3308      	adds	r3, #8
 80067f4:	9303      	str	r3, [sp, #12]
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	4433      	add	r3, r6
 80067fa:	9309      	str	r3, [sp, #36]	; 0x24
 80067fc:	e767      	b.n	80066ce <_svfiprintf_r+0x4e>
 80067fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006802:	460c      	mov	r4, r1
 8006804:	2001      	movs	r0, #1
 8006806:	e7a5      	b.n	8006754 <_svfiprintf_r+0xd4>
 8006808:	2300      	movs	r3, #0
 800680a:	3401      	adds	r4, #1
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	4619      	mov	r1, r3
 8006810:	f04f 0c0a 	mov.w	ip, #10
 8006814:	4620      	mov	r0, r4
 8006816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681a:	3a30      	subs	r2, #48	; 0x30
 800681c:	2a09      	cmp	r2, #9
 800681e:	d903      	bls.n	8006828 <_svfiprintf_r+0x1a8>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0c5      	beq.n	80067b0 <_svfiprintf_r+0x130>
 8006824:	9105      	str	r1, [sp, #20]
 8006826:	e7c3      	b.n	80067b0 <_svfiprintf_r+0x130>
 8006828:	fb0c 2101 	mla	r1, ip, r1, r2
 800682c:	4604      	mov	r4, r0
 800682e:	2301      	movs	r3, #1
 8006830:	e7f0      	b.n	8006814 <_svfiprintf_r+0x194>
 8006832:	ab03      	add	r3, sp, #12
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	462a      	mov	r2, r5
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <_svfiprintf_r+0x1f8>)
 800683a:	a904      	add	r1, sp, #16
 800683c:	4638      	mov	r0, r7
 800683e:	f7fe f88b 	bl	8004958 <_printf_float>
 8006842:	1c42      	adds	r2, r0, #1
 8006844:	4606      	mov	r6, r0
 8006846:	d1d6      	bne.n	80067f6 <_svfiprintf_r+0x176>
 8006848:	89ab      	ldrh	r3, [r5, #12]
 800684a:	065b      	lsls	r3, r3, #25
 800684c:	f53f af2c 	bmi.w	80066a8 <_svfiprintf_r+0x28>
 8006850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006852:	b01d      	add	sp, #116	; 0x74
 8006854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006858:	ab03      	add	r3, sp, #12
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	462a      	mov	r2, r5
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <_svfiprintf_r+0x1f8>)
 8006860:	a904      	add	r1, sp, #16
 8006862:	4638      	mov	r0, r7
 8006864:	f7fe fb1c 	bl	8004ea0 <_printf_i>
 8006868:	e7eb      	b.n	8006842 <_svfiprintf_r+0x1c2>
 800686a:	bf00      	nop
 800686c:	08007694 	.word	0x08007694
 8006870:	0800769e 	.word	0x0800769e
 8006874:	08004959 	.word	0x08004959
 8006878:	080065c9 	.word	0x080065c9
 800687c:	0800769a 	.word	0x0800769a

08006880 <__assert_func>:
 8006880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006882:	4614      	mov	r4, r2
 8006884:	461a      	mov	r2, r3
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <__assert_func+0x2c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4605      	mov	r5, r0
 800688c:	68d8      	ldr	r0, [r3, #12]
 800688e:	b14c      	cbz	r4, 80068a4 <__assert_func+0x24>
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <__assert_func+0x30>)
 8006892:	9100      	str	r1, [sp, #0]
 8006894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006898:	4906      	ldr	r1, [pc, #24]	; (80068b4 <__assert_func+0x34>)
 800689a:	462b      	mov	r3, r5
 800689c:	f000 f80e 	bl	80068bc <fiprintf>
 80068a0:	f000 faa4 	bl	8006dec <abort>
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <__assert_func+0x38>)
 80068a6:	461c      	mov	r4, r3
 80068a8:	e7f3      	b.n	8006892 <__assert_func+0x12>
 80068aa:	bf00      	nop
 80068ac:	2000004c 	.word	0x2000004c
 80068b0:	080076a5 	.word	0x080076a5
 80068b4:	080076b2 	.word	0x080076b2
 80068b8:	080076e0 	.word	0x080076e0

080068bc <fiprintf>:
 80068bc:	b40e      	push	{r1, r2, r3}
 80068be:	b503      	push	{r0, r1, lr}
 80068c0:	4601      	mov	r1, r0
 80068c2:	ab03      	add	r3, sp, #12
 80068c4:	4805      	ldr	r0, [pc, #20]	; (80068dc <fiprintf+0x20>)
 80068c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	f000 f88f 	bl	80069f0 <_vfiprintf_r>
 80068d2:	b002      	add	sp, #8
 80068d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d8:	b003      	add	sp, #12
 80068da:	4770      	bx	lr
 80068dc:	2000004c 	.word	0x2000004c

080068e0 <__retarget_lock_init_recursive>:
 80068e0:	4770      	bx	lr

080068e2 <__retarget_lock_acquire_recursive>:
 80068e2:	4770      	bx	lr

080068e4 <__retarget_lock_release_recursive>:
 80068e4:	4770      	bx	lr

080068e6 <__ascii_mbtowc>:
 80068e6:	b082      	sub	sp, #8
 80068e8:	b901      	cbnz	r1, 80068ec <__ascii_mbtowc+0x6>
 80068ea:	a901      	add	r1, sp, #4
 80068ec:	b142      	cbz	r2, 8006900 <__ascii_mbtowc+0x1a>
 80068ee:	b14b      	cbz	r3, 8006904 <__ascii_mbtowc+0x1e>
 80068f0:	7813      	ldrb	r3, [r2, #0]
 80068f2:	600b      	str	r3, [r1, #0]
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	1e10      	subs	r0, r2, #0
 80068f8:	bf18      	it	ne
 80068fa:	2001      	movne	r0, #1
 80068fc:	b002      	add	sp, #8
 80068fe:	4770      	bx	lr
 8006900:	4610      	mov	r0, r2
 8006902:	e7fb      	b.n	80068fc <__ascii_mbtowc+0x16>
 8006904:	f06f 0001 	mvn.w	r0, #1
 8006908:	e7f8      	b.n	80068fc <__ascii_mbtowc+0x16>

0800690a <memmove>:
 800690a:	4288      	cmp	r0, r1
 800690c:	b510      	push	{r4, lr}
 800690e:	eb01 0402 	add.w	r4, r1, r2
 8006912:	d902      	bls.n	800691a <memmove+0x10>
 8006914:	4284      	cmp	r4, r0
 8006916:	4623      	mov	r3, r4
 8006918:	d807      	bhi.n	800692a <memmove+0x20>
 800691a:	1e43      	subs	r3, r0, #1
 800691c:	42a1      	cmp	r1, r4
 800691e:	d008      	beq.n	8006932 <memmove+0x28>
 8006920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006924:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006928:	e7f8      	b.n	800691c <memmove+0x12>
 800692a:	4402      	add	r2, r0
 800692c:	4601      	mov	r1, r0
 800692e:	428a      	cmp	r2, r1
 8006930:	d100      	bne.n	8006934 <memmove+0x2a>
 8006932:	bd10      	pop	{r4, pc}
 8006934:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006938:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800693c:	e7f7      	b.n	800692e <memmove+0x24>

0800693e <_realloc_r>:
 800693e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006942:	4680      	mov	r8, r0
 8006944:	4614      	mov	r4, r2
 8006946:	460e      	mov	r6, r1
 8006948:	b921      	cbnz	r1, 8006954 <_realloc_r+0x16>
 800694a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	4611      	mov	r1, r2
 8006950:	f7fd beee 	b.w	8004730 <_malloc_r>
 8006954:	b92a      	cbnz	r2, 8006962 <_realloc_r+0x24>
 8006956:	f7fd fe7f 	bl	8004658 <_free_r>
 800695a:	4625      	mov	r5, r4
 800695c:	4628      	mov	r0, r5
 800695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006962:	f000 fc67 	bl	8007234 <_malloc_usable_size_r>
 8006966:	4284      	cmp	r4, r0
 8006968:	4607      	mov	r7, r0
 800696a:	d802      	bhi.n	8006972 <_realloc_r+0x34>
 800696c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006970:	d812      	bhi.n	8006998 <_realloc_r+0x5a>
 8006972:	4621      	mov	r1, r4
 8006974:	4640      	mov	r0, r8
 8006976:	f7fd fedb 	bl	8004730 <_malloc_r>
 800697a:	4605      	mov	r5, r0
 800697c:	2800      	cmp	r0, #0
 800697e:	d0ed      	beq.n	800695c <_realloc_r+0x1e>
 8006980:	42bc      	cmp	r4, r7
 8006982:	4622      	mov	r2, r4
 8006984:	4631      	mov	r1, r6
 8006986:	bf28      	it	cs
 8006988:	463a      	movcs	r2, r7
 800698a:	f7fd fe4f 	bl	800462c <memcpy>
 800698e:	4631      	mov	r1, r6
 8006990:	4640      	mov	r0, r8
 8006992:	f7fd fe61 	bl	8004658 <_free_r>
 8006996:	e7e1      	b.n	800695c <_realloc_r+0x1e>
 8006998:	4635      	mov	r5, r6
 800699a:	e7df      	b.n	800695c <_realloc_r+0x1e>

0800699c <__sfputc_r>:
 800699c:	6893      	ldr	r3, [r2, #8]
 800699e:	3b01      	subs	r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	b410      	push	{r4}
 80069a4:	6093      	str	r3, [r2, #8]
 80069a6:	da08      	bge.n	80069ba <__sfputc_r+0x1e>
 80069a8:	6994      	ldr	r4, [r2, #24]
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	db01      	blt.n	80069b2 <__sfputc_r+0x16>
 80069ae:	290a      	cmp	r1, #10
 80069b0:	d103      	bne.n	80069ba <__sfputc_r+0x1e>
 80069b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b6:	f000 b94b 	b.w	8006c50 <__swbuf_r>
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	1c58      	adds	r0, r3, #1
 80069be:	6010      	str	r0, [r2, #0]
 80069c0:	7019      	strb	r1, [r3, #0]
 80069c2:	4608      	mov	r0, r1
 80069c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <__sfputs_r>:
 80069ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	18d5      	adds	r5, r2, r3
 80069d4:	42ac      	cmp	r4, r5
 80069d6:	d101      	bne.n	80069dc <__sfputs_r+0x12>
 80069d8:	2000      	movs	r0, #0
 80069da:	e007      	b.n	80069ec <__sfputs_r+0x22>
 80069dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e0:	463a      	mov	r2, r7
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ffda 	bl	800699c <__sfputc_r>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d1f3      	bne.n	80069d4 <__sfputs_r+0xa>
 80069ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069f0 <_vfiprintf_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	460d      	mov	r5, r1
 80069f6:	b09d      	sub	sp, #116	; 0x74
 80069f8:	4614      	mov	r4, r2
 80069fa:	4698      	mov	r8, r3
 80069fc:	4606      	mov	r6, r0
 80069fe:	b118      	cbz	r0, 8006a08 <_vfiprintf_r+0x18>
 8006a00:	6983      	ldr	r3, [r0, #24]
 8006a02:	b90b      	cbnz	r3, 8006a08 <_vfiprintf_r+0x18>
 8006a04:	f000 fb14 	bl	8007030 <__sinit>
 8006a08:	4b89      	ldr	r3, [pc, #548]	; (8006c30 <_vfiprintf_r+0x240>)
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	d11b      	bne.n	8006a46 <_vfiprintf_r+0x56>
 8006a0e:	6875      	ldr	r5, [r6, #4]
 8006a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a12:	07d9      	lsls	r1, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_vfiprintf_r+0x32>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	059a      	lsls	r2, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_vfiprintf_r+0x32>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1e:	f7ff ff60 	bl	80068e2 <__retarget_lock_acquire_recursive>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	071b      	lsls	r3, r3, #28
 8006a26:	d501      	bpl.n	8006a2c <_vfiprintf_r+0x3c>
 8006a28:	692b      	ldr	r3, [r5, #16]
 8006a2a:	b9eb      	cbnz	r3, 8006a68 <_vfiprintf_r+0x78>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f000 f96e 	bl	8006d10 <__swsetup_r>
 8006a34:	b1c0      	cbz	r0, 8006a68 <_vfiprintf_r+0x78>
 8006a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a38:	07dc      	lsls	r4, r3, #31
 8006a3a:	d50e      	bpl.n	8006a5a <_vfiprintf_r+0x6a>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	b01d      	add	sp, #116	; 0x74
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	4b7b      	ldr	r3, [pc, #492]	; (8006c34 <_vfiprintf_r+0x244>)
 8006a48:	429d      	cmp	r5, r3
 8006a4a:	d101      	bne.n	8006a50 <_vfiprintf_r+0x60>
 8006a4c:	68b5      	ldr	r5, [r6, #8]
 8006a4e:	e7df      	b.n	8006a10 <_vfiprintf_r+0x20>
 8006a50:	4b79      	ldr	r3, [pc, #484]	; (8006c38 <_vfiprintf_r+0x248>)
 8006a52:	429d      	cmp	r5, r3
 8006a54:	bf08      	it	eq
 8006a56:	68f5      	ldreq	r5, [r6, #12]
 8006a58:	e7da      	b.n	8006a10 <_vfiprintf_r+0x20>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	0598      	lsls	r0, r3, #22
 8006a5e:	d4ed      	bmi.n	8006a3c <_vfiprintf_r+0x4c>
 8006a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a62:	f7ff ff3f 	bl	80068e4 <__retarget_lock_release_recursive>
 8006a66:	e7e9      	b.n	8006a3c <_vfiprintf_r+0x4c>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a76:	2330      	movs	r3, #48	; 0x30
 8006a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c3c <_vfiprintf_r+0x24c>
 8006a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a80:	f04f 0901 	mov.w	r9, #1
 8006a84:	4623      	mov	r3, r4
 8006a86:	469a      	mov	sl, r3
 8006a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a8c:	b10a      	cbz	r2, 8006a92 <_vfiprintf_r+0xa2>
 8006a8e:	2a25      	cmp	r2, #37	; 0x25
 8006a90:	d1f9      	bne.n	8006a86 <_vfiprintf_r+0x96>
 8006a92:	ebba 0b04 	subs.w	fp, sl, r4
 8006a96:	d00b      	beq.n	8006ab0 <_vfiprintf_r+0xc0>
 8006a98:	465b      	mov	r3, fp
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7ff ff93 	bl	80069ca <__sfputs_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f000 80aa 	beq.w	8006bfe <_vfiprintf_r+0x20e>
 8006aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aac:	445a      	add	r2, fp
 8006aae:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80a2 	beq.w	8006bfe <_vfiprintf_r+0x20e>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac4:	f10a 0a01 	add.w	sl, sl, #1
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	9307      	str	r3, [sp, #28]
 8006acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ad2:	4654      	mov	r4, sl
 8006ad4:	2205      	movs	r2, #5
 8006ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ada:	4858      	ldr	r0, [pc, #352]	; (8006c3c <_vfiprintf_r+0x24c>)
 8006adc:	f7f9 fb88 	bl	80001f0 <memchr>
 8006ae0:	9a04      	ldr	r2, [sp, #16]
 8006ae2:	b9d8      	cbnz	r0, 8006b1c <_vfiprintf_r+0x12c>
 8006ae4:	06d1      	lsls	r1, r2, #27
 8006ae6:	bf44      	itt	mi
 8006ae8:	2320      	movmi	r3, #32
 8006aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aee:	0713      	lsls	r3, r2, #28
 8006af0:	bf44      	itt	mi
 8006af2:	232b      	movmi	r3, #43	; 0x2b
 8006af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af8:	f89a 3000 	ldrb.w	r3, [sl]
 8006afc:	2b2a      	cmp	r3, #42	; 0x2a
 8006afe:	d015      	beq.n	8006b2c <_vfiprintf_r+0x13c>
 8006b00:	9a07      	ldr	r2, [sp, #28]
 8006b02:	4654      	mov	r4, sl
 8006b04:	2000      	movs	r0, #0
 8006b06:	f04f 0c0a 	mov.w	ip, #10
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b10:	3b30      	subs	r3, #48	; 0x30
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d94e      	bls.n	8006bb4 <_vfiprintf_r+0x1c4>
 8006b16:	b1b0      	cbz	r0, 8006b46 <_vfiprintf_r+0x156>
 8006b18:	9207      	str	r2, [sp, #28]
 8006b1a:	e014      	b.n	8006b46 <_vfiprintf_r+0x156>
 8006b1c:	eba0 0308 	sub.w	r3, r0, r8
 8006b20:	fa09 f303 	lsl.w	r3, r9, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	46a2      	mov	sl, r4
 8006b2a:	e7d2      	b.n	8006ad2 <_vfiprintf_r+0xe2>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	1d19      	adds	r1, r3, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	9103      	str	r1, [sp, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bfbb      	ittet	lt
 8006b38:	425b      	neglt	r3, r3
 8006b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3e:	9307      	strge	r3, [sp, #28]
 8006b40:	9307      	strlt	r3, [sp, #28]
 8006b42:	bfb8      	it	lt
 8006b44:	9204      	strlt	r2, [sp, #16]
 8006b46:	7823      	ldrb	r3, [r4, #0]
 8006b48:	2b2e      	cmp	r3, #46	; 0x2e
 8006b4a:	d10c      	bne.n	8006b66 <_vfiprintf_r+0x176>
 8006b4c:	7863      	ldrb	r3, [r4, #1]
 8006b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b50:	d135      	bne.n	8006bbe <_vfiprintf_r+0x1ce>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	9203      	str	r2, [sp, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bfb8      	it	lt
 8006b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b62:	3402      	adds	r4, #2
 8006b64:	9305      	str	r3, [sp, #20]
 8006b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c4c <_vfiprintf_r+0x25c>
 8006b6a:	7821      	ldrb	r1, [r4, #0]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	4650      	mov	r0, sl
 8006b70:	f7f9 fb3e 	bl	80001f0 <memchr>
 8006b74:	b140      	cbz	r0, 8006b88 <_vfiprintf_r+0x198>
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	eba0 000a 	sub.w	r0, r0, sl
 8006b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	4303      	orrs	r3, r0
 8006b84:	3401      	adds	r4, #1
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8c:	482c      	ldr	r0, [pc, #176]	; (8006c40 <_vfiprintf_r+0x250>)
 8006b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b92:	2206      	movs	r2, #6
 8006b94:	f7f9 fb2c 	bl	80001f0 <memchr>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d03f      	beq.n	8006c1c <_vfiprintf_r+0x22c>
 8006b9c:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <_vfiprintf_r+0x254>)
 8006b9e:	bb1b      	cbnz	r3, 8006be8 <_vfiprintf_r+0x1f8>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	3307      	adds	r3, #7
 8006ba4:	f023 0307 	bic.w	r3, r3, #7
 8006ba8:	3308      	adds	r3, #8
 8006baa:	9303      	str	r3, [sp, #12]
 8006bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bae:	443b      	add	r3, r7
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb2:	e767      	b.n	8006a84 <_vfiprintf_r+0x94>
 8006bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb8:	460c      	mov	r4, r1
 8006bba:	2001      	movs	r0, #1
 8006bbc:	e7a5      	b.n	8006b0a <_vfiprintf_r+0x11a>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	3401      	adds	r4, #1
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f04f 0c0a 	mov.w	ip, #10
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bd0:	3a30      	subs	r2, #48	; 0x30
 8006bd2:	2a09      	cmp	r2, #9
 8006bd4:	d903      	bls.n	8006bde <_vfiprintf_r+0x1ee>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0c5      	beq.n	8006b66 <_vfiprintf_r+0x176>
 8006bda:	9105      	str	r1, [sp, #20]
 8006bdc:	e7c3      	b.n	8006b66 <_vfiprintf_r+0x176>
 8006bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be2:	4604      	mov	r4, r0
 8006be4:	2301      	movs	r3, #1
 8006be6:	e7f0      	b.n	8006bca <_vfiprintf_r+0x1da>
 8006be8:	ab03      	add	r3, sp, #12
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <_vfiprintf_r+0x258>)
 8006bf0:	a904      	add	r1, sp, #16
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7fd feb0 	bl	8004958 <_printf_float>
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	1c78      	adds	r0, r7, #1
 8006bfc:	d1d6      	bne.n	8006bac <_vfiprintf_r+0x1bc>
 8006bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c00:	07d9      	lsls	r1, r3, #31
 8006c02:	d405      	bmi.n	8006c10 <_vfiprintf_r+0x220>
 8006c04:	89ab      	ldrh	r3, [r5, #12]
 8006c06:	059a      	lsls	r2, r3, #22
 8006c08:	d402      	bmi.n	8006c10 <_vfiprintf_r+0x220>
 8006c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c0c:	f7ff fe6a 	bl	80068e4 <__retarget_lock_release_recursive>
 8006c10:	89ab      	ldrh	r3, [r5, #12]
 8006c12:	065b      	lsls	r3, r3, #25
 8006c14:	f53f af12 	bmi.w	8006a3c <_vfiprintf_r+0x4c>
 8006c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c1a:	e711      	b.n	8006a40 <_vfiprintf_r+0x50>
 8006c1c:	ab03      	add	r3, sp, #12
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <_vfiprintf_r+0x258>)
 8006c24:	a904      	add	r1, sp, #16
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7fe f93a 	bl	8004ea0 <_printf_i>
 8006c2c:	e7e4      	b.n	8006bf8 <_vfiprintf_r+0x208>
 8006c2e:	bf00      	nop
 8006c30:	0800780c 	.word	0x0800780c
 8006c34:	0800782c 	.word	0x0800782c
 8006c38:	080077ec 	.word	0x080077ec
 8006c3c:	08007694 	.word	0x08007694
 8006c40:	0800769e 	.word	0x0800769e
 8006c44:	08004959 	.word	0x08004959
 8006c48:	080069cb 	.word	0x080069cb
 8006c4c:	0800769a 	.word	0x0800769a

08006c50 <__swbuf_r>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	460e      	mov	r6, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	4605      	mov	r5, r0
 8006c58:	b118      	cbz	r0, 8006c62 <__swbuf_r+0x12>
 8006c5a:	6983      	ldr	r3, [r0, #24]
 8006c5c:	b90b      	cbnz	r3, 8006c62 <__swbuf_r+0x12>
 8006c5e:	f000 f9e7 	bl	8007030 <__sinit>
 8006c62:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <__swbuf_r+0x98>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	d12b      	bne.n	8006cc0 <__swbuf_r+0x70>
 8006c68:	686c      	ldr	r4, [r5, #4]
 8006c6a:	69a3      	ldr	r3, [r4, #24]
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	071a      	lsls	r2, r3, #28
 8006c72:	d52f      	bpl.n	8006cd4 <__swbuf_r+0x84>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	b36b      	cbz	r3, 8006cd4 <__swbuf_r+0x84>
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	6820      	ldr	r0, [r4, #0]
 8006c7c:	1ac0      	subs	r0, r0, r3
 8006c7e:	6963      	ldr	r3, [r4, #20]
 8006c80:	b2f6      	uxtb	r6, r6
 8006c82:	4283      	cmp	r3, r0
 8006c84:	4637      	mov	r7, r6
 8006c86:	dc04      	bgt.n	8006c92 <__swbuf_r+0x42>
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f93c 	bl	8006f08 <_fflush_r>
 8006c90:	bb30      	cbnz	r0, 8006ce0 <__swbuf_r+0x90>
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	60a3      	str	r3, [r4, #8]
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	6022      	str	r2, [r4, #0]
 8006c9e:	701e      	strb	r6, [r3, #0]
 8006ca0:	6963      	ldr	r3, [r4, #20]
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	4283      	cmp	r3, r0
 8006ca6:	d004      	beq.n	8006cb2 <__swbuf_r+0x62>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	07db      	lsls	r3, r3, #31
 8006cac:	d506      	bpl.n	8006cbc <__swbuf_r+0x6c>
 8006cae:	2e0a      	cmp	r6, #10
 8006cb0:	d104      	bne.n	8006cbc <__swbuf_r+0x6c>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f927 	bl	8006f08 <_fflush_r>
 8006cba:	b988      	cbnz	r0, 8006ce0 <__swbuf_r+0x90>
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <__swbuf_r+0x9c>)
 8006cc2:	429c      	cmp	r4, r3
 8006cc4:	d101      	bne.n	8006cca <__swbuf_r+0x7a>
 8006cc6:	68ac      	ldr	r4, [r5, #8]
 8006cc8:	e7cf      	b.n	8006c6a <__swbuf_r+0x1a>
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <__swbuf_r+0xa0>)
 8006ccc:	429c      	cmp	r4, r3
 8006cce:	bf08      	it	eq
 8006cd0:	68ec      	ldreq	r4, [r5, #12]
 8006cd2:	e7ca      	b.n	8006c6a <__swbuf_r+0x1a>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 f81a 	bl	8006d10 <__swsetup_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d0cb      	beq.n	8006c78 <__swbuf_r+0x28>
 8006ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce4:	e7ea      	b.n	8006cbc <__swbuf_r+0x6c>
 8006ce6:	bf00      	nop
 8006ce8:	0800780c 	.word	0x0800780c
 8006cec:	0800782c 	.word	0x0800782c
 8006cf0:	080077ec 	.word	0x080077ec

08006cf4 <__ascii_wctomb>:
 8006cf4:	b149      	cbz	r1, 8006d0a <__ascii_wctomb+0x16>
 8006cf6:	2aff      	cmp	r2, #255	; 0xff
 8006cf8:	bf85      	ittet	hi
 8006cfa:	238a      	movhi	r3, #138	; 0x8a
 8006cfc:	6003      	strhi	r3, [r0, #0]
 8006cfe:	700a      	strbls	r2, [r1, #0]
 8006d00:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d04:	bf98      	it	ls
 8006d06:	2001      	movls	r0, #1
 8006d08:	4770      	bx	lr
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	4770      	bx	lr
	...

08006d10 <__swsetup_r>:
 8006d10:	4b32      	ldr	r3, [pc, #200]	; (8006ddc <__swsetup_r+0xcc>)
 8006d12:	b570      	push	{r4, r5, r6, lr}
 8006d14:	681d      	ldr	r5, [r3, #0]
 8006d16:	4606      	mov	r6, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	b125      	cbz	r5, 8006d26 <__swsetup_r+0x16>
 8006d1c:	69ab      	ldr	r3, [r5, #24]
 8006d1e:	b913      	cbnz	r3, 8006d26 <__swsetup_r+0x16>
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f985 	bl	8007030 <__sinit>
 8006d26:	4b2e      	ldr	r3, [pc, #184]	; (8006de0 <__swsetup_r+0xd0>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	d10f      	bne.n	8006d4c <__swsetup_r+0x3c>
 8006d2c:	686c      	ldr	r4, [r5, #4]
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	d42c      	bmi.n	8006d92 <__swsetup_r+0x82>
 8006d38:	06dd      	lsls	r5, r3, #27
 8006d3a:	d411      	bmi.n	8006d60 <__swsetup_r+0x50>
 8006d3c:	2309      	movs	r3, #9
 8006d3e:	6033      	str	r3, [r6, #0]
 8006d40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4a:	e03e      	b.n	8006dca <__swsetup_r+0xba>
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <__swsetup_r+0xd4>)
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d101      	bne.n	8006d56 <__swsetup_r+0x46>
 8006d52:	68ac      	ldr	r4, [r5, #8]
 8006d54:	e7eb      	b.n	8006d2e <__swsetup_r+0x1e>
 8006d56:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <__swsetup_r+0xd8>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	bf08      	it	eq
 8006d5c:	68ec      	ldreq	r4, [r5, #12]
 8006d5e:	e7e6      	b.n	8006d2e <__swsetup_r+0x1e>
 8006d60:	0758      	lsls	r0, r3, #29
 8006d62:	d512      	bpl.n	8006d8a <__swsetup_r+0x7a>
 8006d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d66:	b141      	cbz	r1, 8006d7a <__swsetup_r+0x6a>
 8006d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	d002      	beq.n	8006d76 <__swsetup_r+0x66>
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7fd fc71 	bl	8004658 <_free_r>
 8006d76:	2300      	movs	r3, #0
 8006d78:	6363      	str	r3, [r4, #52]	; 0x34
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	2300      	movs	r3, #0
 8006d84:	6063      	str	r3, [r4, #4]
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f043 0308 	orr.w	r3, r3, #8
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	b94b      	cbnz	r3, 8006daa <__swsetup_r+0x9a>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da0:	d003      	beq.n	8006daa <__swsetup_r+0x9a>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4630      	mov	r0, r6
 8006da6:	f000 fa05 	bl	80071b4 <__smakebuf_r>
 8006daa:	89a0      	ldrh	r0, [r4, #12]
 8006dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db0:	f010 0301 	ands.w	r3, r0, #1
 8006db4:	d00a      	beq.n	8006dcc <__swsetup_r+0xbc>
 8006db6:	2300      	movs	r3, #0
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	6963      	ldr	r3, [r4, #20]
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	61a3      	str	r3, [r4, #24]
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	b943      	cbnz	r3, 8006dd6 <__swsetup_r+0xc6>
 8006dc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dc8:	d1ba      	bne.n	8006d40 <__swsetup_r+0x30>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	0781      	lsls	r1, r0, #30
 8006dce:	bf58      	it	pl
 8006dd0:	6963      	ldrpl	r3, [r4, #20]
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	e7f4      	b.n	8006dc0 <__swsetup_r+0xb0>
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e7f7      	b.n	8006dca <__swsetup_r+0xba>
 8006dda:	bf00      	nop
 8006ddc:	2000004c 	.word	0x2000004c
 8006de0:	0800780c 	.word	0x0800780c
 8006de4:	0800782c 	.word	0x0800782c
 8006de8:	080077ec 	.word	0x080077ec

08006dec <abort>:
 8006dec:	b508      	push	{r3, lr}
 8006dee:	2006      	movs	r0, #6
 8006df0:	f000 fa50 	bl	8007294 <raise>
 8006df4:	2001      	movs	r0, #1
 8006df6:	f7fa fb0b 	bl	8001410 <_exit>
	...

08006dfc <__sflush_r>:
 8006dfc:	898a      	ldrh	r2, [r1, #12]
 8006dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	0710      	lsls	r0, r2, #28
 8006e06:	460c      	mov	r4, r1
 8006e08:	d458      	bmi.n	8006ebc <__sflush_r+0xc0>
 8006e0a:	684b      	ldr	r3, [r1, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc05      	bgt.n	8006e1c <__sflush_r+0x20>
 8006e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc02      	bgt.n	8006e1c <__sflush_r+0x20>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	d0f9      	beq.n	8006e16 <__sflush_r+0x1a>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e28:	682f      	ldr	r7, [r5, #0]
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	d032      	beq.n	8006e94 <__sflush_r+0x98>
 8006e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	075a      	lsls	r2, r3, #29
 8006e34:	d505      	bpl.n	8006e42 <__sflush_r+0x46>
 8006e36:	6863      	ldr	r3, [r4, #4]
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e3c:	b10b      	cbz	r3, 8006e42 <__sflush_r+0x46>
 8006e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	4602      	mov	r2, r0
 8006e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b0      	blx	r6
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	d106      	bne.n	8006e62 <__sflush_r+0x66>
 8006e54:	6829      	ldr	r1, [r5, #0]
 8006e56:	291d      	cmp	r1, #29
 8006e58:	d82c      	bhi.n	8006eb4 <__sflush_r+0xb8>
 8006e5a:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <__sflush_r+0x108>)
 8006e5c:	40ca      	lsrs	r2, r1
 8006e5e:	07d6      	lsls	r6, r2, #31
 8006e60:	d528      	bpl.n	8006eb4 <__sflush_r+0xb8>
 8006e62:	2200      	movs	r2, #0
 8006e64:	6062      	str	r2, [r4, #4]
 8006e66:	04d9      	lsls	r1, r3, #19
 8006e68:	6922      	ldr	r2, [r4, #16]
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	d504      	bpl.n	8006e78 <__sflush_r+0x7c>
 8006e6e:	1c42      	adds	r2, r0, #1
 8006e70:	d101      	bne.n	8006e76 <__sflush_r+0x7a>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	b903      	cbnz	r3, 8006e78 <__sflush_r+0x7c>
 8006e76:	6560      	str	r0, [r4, #84]	; 0x54
 8006e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e7a:	602f      	str	r7, [r5, #0]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d0ca      	beq.n	8006e16 <__sflush_r+0x1a>
 8006e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <__sflush_r+0x92>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7fd fbe5 	bl	8004658 <_free_r>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	6360      	str	r0, [r4, #52]	; 0x34
 8006e92:	e7c1      	b.n	8006e18 <__sflush_r+0x1c>
 8006e94:	6a21      	ldr	r1, [r4, #32]
 8006e96:	2301      	movs	r3, #1
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b0      	blx	r6
 8006e9c:	1c41      	adds	r1, r0, #1
 8006e9e:	d1c7      	bne.n	8006e30 <__sflush_r+0x34>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0c4      	beq.n	8006e30 <__sflush_r+0x34>
 8006ea6:	2b1d      	cmp	r3, #29
 8006ea8:	d001      	beq.n	8006eae <__sflush_r+0xb2>
 8006eaa:	2b16      	cmp	r3, #22
 8006eac:	d101      	bne.n	8006eb2 <__sflush_r+0xb6>
 8006eae:	602f      	str	r7, [r5, #0]
 8006eb0:	e7b1      	b.n	8006e16 <__sflush_r+0x1a>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	e7ad      	b.n	8006e18 <__sflush_r+0x1c>
 8006ebc:	690f      	ldr	r7, [r1, #16]
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	d0a9      	beq.n	8006e16 <__sflush_r+0x1a>
 8006ec2:	0793      	lsls	r3, r2, #30
 8006ec4:	680e      	ldr	r6, [r1, #0]
 8006ec6:	bf08      	it	eq
 8006ec8:	694b      	ldreq	r3, [r1, #20]
 8006eca:	600f      	str	r7, [r1, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	2300      	movne	r3, #0
 8006ed0:	eba6 0807 	sub.w	r8, r6, r7
 8006ed4:	608b      	str	r3, [r1, #8]
 8006ed6:	f1b8 0f00 	cmp.w	r8, #0
 8006eda:	dd9c      	ble.n	8006e16 <__sflush_r+0x1a>
 8006edc:	6a21      	ldr	r1, [r4, #32]
 8006ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b0      	blx	r6
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	dc06      	bgt.n	8006efa <__sflush_r+0xfe>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	e78e      	b.n	8006e18 <__sflush_r+0x1c>
 8006efa:	4407      	add	r7, r0
 8006efc:	eba8 0800 	sub.w	r8, r8, r0
 8006f00:	e7e9      	b.n	8006ed6 <__sflush_r+0xda>
 8006f02:	bf00      	nop
 8006f04:	20400001 	.word	0x20400001

08006f08 <_fflush_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b913      	cbnz	r3, 8006f18 <_fflush_r+0x10>
 8006f12:	2500      	movs	r5, #0
 8006f14:	4628      	mov	r0, r5
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	b118      	cbz	r0, 8006f22 <_fflush_r+0x1a>
 8006f1a:	6983      	ldr	r3, [r0, #24]
 8006f1c:	b90b      	cbnz	r3, 8006f22 <_fflush_r+0x1a>
 8006f1e:	f000 f887 	bl	8007030 <__sinit>
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <_fflush_r+0x6c>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	d11b      	bne.n	8006f60 <_fflush_r+0x58>
 8006f28:	686c      	ldr	r4, [r5, #4]
 8006f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <_fflush_r+0xa>
 8006f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f34:	07d0      	lsls	r0, r2, #31
 8006f36:	d404      	bmi.n	8006f42 <_fflush_r+0x3a>
 8006f38:	0599      	lsls	r1, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_fflush_r+0x3a>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3e:	f7ff fcd0 	bl	80068e2 <__retarget_lock_acquire_recursive>
 8006f42:	4628      	mov	r0, r5
 8006f44:	4621      	mov	r1, r4
 8006f46:	f7ff ff59 	bl	8006dfc <__sflush_r>
 8006f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f4c:	07da      	lsls	r2, r3, #31
 8006f4e:	4605      	mov	r5, r0
 8006f50:	d4e0      	bmi.n	8006f14 <_fflush_r+0xc>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	d4dd      	bmi.n	8006f14 <_fflush_r+0xc>
 8006f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5a:	f7ff fcc3 	bl	80068e4 <__retarget_lock_release_recursive>
 8006f5e:	e7d9      	b.n	8006f14 <_fflush_r+0xc>
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <_fflush_r+0x70>)
 8006f62:	429c      	cmp	r4, r3
 8006f64:	d101      	bne.n	8006f6a <_fflush_r+0x62>
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	e7df      	b.n	8006f2a <_fflush_r+0x22>
 8006f6a:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <_fflush_r+0x74>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	bf08      	it	eq
 8006f70:	68ec      	ldreq	r4, [r5, #12]
 8006f72:	e7da      	b.n	8006f2a <_fflush_r+0x22>
 8006f74:	0800780c 	.word	0x0800780c
 8006f78:	0800782c 	.word	0x0800782c
 8006f7c:	080077ec 	.word	0x080077ec

08006f80 <std>:
 8006f80:	2300      	movs	r3, #0
 8006f82:	b510      	push	{r4, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	e9c0 3300 	strd	r3, r3, [r0]
 8006f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8e:	6083      	str	r3, [r0, #8]
 8006f90:	8181      	strh	r1, [r0, #12]
 8006f92:	6643      	str	r3, [r0, #100]	; 0x64
 8006f94:	81c2      	strh	r2, [r0, #14]
 8006f96:	6183      	str	r3, [r0, #24]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	305c      	adds	r0, #92	; 0x5c
 8006f9e:	f7fd fb53 	bl	8004648 <memset>
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x38>)
 8006fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x3c>)
 8006fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x40>)
 8006fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x44>)
 8006fb0:	6224      	str	r4, [r4, #32]
 8006fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	080072cd 	.word	0x080072cd
 8006fbc:	080072ef 	.word	0x080072ef
 8006fc0:	08007327 	.word	0x08007327
 8006fc4:	0800734b 	.word	0x0800734b

08006fc8 <_cleanup_r>:
 8006fc8:	4901      	ldr	r1, [pc, #4]	; (8006fd0 <_cleanup_r+0x8>)
 8006fca:	f000 b8af 	b.w	800712c <_fwalk_reent>
 8006fce:	bf00      	nop
 8006fd0:	08006f09 	.word	0x08006f09

08006fd4 <__sfmoreglue>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	2268      	movs	r2, #104	; 0x68
 8006fd8:	1e4d      	subs	r5, r1, #1
 8006fda:	4355      	muls	r5, r2
 8006fdc:	460e      	mov	r6, r1
 8006fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fe2:	f7fd fba5 	bl	8004730 <_malloc_r>
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	b140      	cbz	r0, 8006ffc <__sfmoreglue+0x28>
 8006fea:	2100      	movs	r1, #0
 8006fec:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff0:	300c      	adds	r0, #12
 8006ff2:	60a0      	str	r0, [r4, #8]
 8006ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff8:	f7fd fb26 	bl	8004648 <memset>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f7ff bc6e 	b.w	80068e2 <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	200004ed 	.word	0x200004ed

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sfp_lock_release+0x8>)
 800700e:	f7ff bc69 	b.w	80068e4 <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	200004ed 	.word	0x200004ed

08007018 <__sinit_lock_acquire>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_acquire+0x8>)
 800701a:	f7ff bc62 	b.w	80068e2 <__retarget_lock_acquire_recursive>
 800701e:	bf00      	nop
 8007020:	200004ee 	.word	0x200004ee

08007024 <__sinit_lock_release>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__sinit_lock_release+0x8>)
 8007026:	f7ff bc5d 	b.w	80068e4 <__retarget_lock_release_recursive>
 800702a:	bf00      	nop
 800702c:	200004ee 	.word	0x200004ee

08007030 <__sinit>:
 8007030:	b510      	push	{r4, lr}
 8007032:	4604      	mov	r4, r0
 8007034:	f7ff fff0 	bl	8007018 <__sinit_lock_acquire>
 8007038:	69a3      	ldr	r3, [r4, #24]
 800703a:	b11b      	cbz	r3, 8007044 <__sinit+0x14>
 800703c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007040:	f7ff bff0 	b.w	8007024 <__sinit_lock_release>
 8007044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007048:	6523      	str	r3, [r4, #80]	; 0x50
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <__sinit+0x68>)
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <__sinit+0x6c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	62a2      	str	r2, [r4, #40]	; 0x28
 8007052:	42a3      	cmp	r3, r4
 8007054:	bf04      	itt	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	61a3      	streq	r3, [r4, #24]
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f820 	bl	80070a0 <__sfp>
 8007060:	6060      	str	r0, [r4, #4]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f81c 	bl	80070a0 <__sfp>
 8007068:	60a0      	str	r0, [r4, #8]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f818 	bl	80070a0 <__sfp>
 8007070:	2200      	movs	r2, #0
 8007072:	60e0      	str	r0, [r4, #12]
 8007074:	2104      	movs	r1, #4
 8007076:	6860      	ldr	r0, [r4, #4]
 8007078:	f7ff ff82 	bl	8006f80 <std>
 800707c:	68a0      	ldr	r0, [r4, #8]
 800707e:	2201      	movs	r2, #1
 8007080:	2109      	movs	r1, #9
 8007082:	f7ff ff7d 	bl	8006f80 <std>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	2202      	movs	r2, #2
 800708a:	2112      	movs	r1, #18
 800708c:	f7ff ff78 	bl	8006f80 <std>
 8007090:	2301      	movs	r3, #1
 8007092:	61a3      	str	r3, [r4, #24]
 8007094:	e7d2      	b.n	800703c <__sinit+0xc>
 8007096:	bf00      	nop
 8007098:	08007470 	.word	0x08007470
 800709c:	08006fc9 	.word	0x08006fc9

080070a0 <__sfp>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	4607      	mov	r7, r0
 80070a4:	f7ff ffac 	bl	8007000 <__sfp_lock_acquire>
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <__sfp+0x84>)
 80070aa:	681e      	ldr	r6, [r3, #0]
 80070ac:	69b3      	ldr	r3, [r6, #24]
 80070ae:	b913      	cbnz	r3, 80070b6 <__sfp+0x16>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ffbd 	bl	8007030 <__sinit>
 80070b6:	3648      	adds	r6, #72	; 0x48
 80070b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070bc:	3b01      	subs	r3, #1
 80070be:	d503      	bpl.n	80070c8 <__sfp+0x28>
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	b30b      	cbz	r3, 8007108 <__sfp+0x68>
 80070c4:	6836      	ldr	r6, [r6, #0]
 80070c6:	e7f7      	b.n	80070b8 <__sfp+0x18>
 80070c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070cc:	b9d5      	cbnz	r5, 8007104 <__sfp+0x64>
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <__sfp+0x88>)
 80070d0:	60e3      	str	r3, [r4, #12]
 80070d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d6:	6665      	str	r5, [r4, #100]	; 0x64
 80070d8:	f7ff fc02 	bl	80068e0 <__retarget_lock_init_recursive>
 80070dc:	f7ff ff96 	bl	800700c <__sfp_lock_release>
 80070e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e8:	6025      	str	r5, [r4, #0]
 80070ea:	61a5      	str	r5, [r4, #24]
 80070ec:	2208      	movs	r2, #8
 80070ee:	4629      	mov	r1, r5
 80070f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f4:	f7fd faa8 	bl	8004648 <memset>
 80070f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007100:	4620      	mov	r0, r4
 8007102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007104:	3468      	adds	r4, #104	; 0x68
 8007106:	e7d9      	b.n	80070bc <__sfp+0x1c>
 8007108:	2104      	movs	r1, #4
 800710a:	4638      	mov	r0, r7
 800710c:	f7ff ff62 	bl	8006fd4 <__sfmoreglue>
 8007110:	4604      	mov	r4, r0
 8007112:	6030      	str	r0, [r6, #0]
 8007114:	2800      	cmp	r0, #0
 8007116:	d1d5      	bne.n	80070c4 <__sfp+0x24>
 8007118:	f7ff ff78 	bl	800700c <__sfp_lock_release>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	e7ee      	b.n	8007100 <__sfp+0x60>
 8007122:	bf00      	nop
 8007124:	08007470 	.word	0x08007470
 8007128:	ffff0001 	.word	0xffff0001

0800712c <_fwalk_reent>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4606      	mov	r6, r0
 8007132:	4688      	mov	r8, r1
 8007134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007138:	2700      	movs	r7, #0
 800713a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713e:	f1b9 0901 	subs.w	r9, r9, #1
 8007142:	d505      	bpl.n	8007150 <_fwalk_reent+0x24>
 8007144:	6824      	ldr	r4, [r4, #0]
 8007146:	2c00      	cmp	r4, #0
 8007148:	d1f7      	bne.n	800713a <_fwalk_reent+0xe>
 800714a:	4638      	mov	r0, r7
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007150:	89ab      	ldrh	r3, [r5, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d907      	bls.n	8007166 <_fwalk_reent+0x3a>
 8007156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800715a:	3301      	adds	r3, #1
 800715c:	d003      	beq.n	8007166 <_fwalk_reent+0x3a>
 800715e:	4629      	mov	r1, r5
 8007160:	4630      	mov	r0, r6
 8007162:	47c0      	blx	r8
 8007164:	4307      	orrs	r7, r0
 8007166:	3568      	adds	r5, #104	; 0x68
 8007168:	e7e9      	b.n	800713e <_fwalk_reent+0x12>

0800716a <__swhatbuf_r>:
 800716a:	b570      	push	{r4, r5, r6, lr}
 800716c:	460e      	mov	r6, r1
 800716e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007172:	2900      	cmp	r1, #0
 8007174:	b096      	sub	sp, #88	; 0x58
 8007176:	4614      	mov	r4, r2
 8007178:	461d      	mov	r5, r3
 800717a:	da08      	bge.n	800718e <__swhatbuf_r+0x24>
 800717c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	061a      	lsls	r2, r3, #24
 8007186:	d410      	bmi.n	80071aa <__swhatbuf_r+0x40>
 8007188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718c:	e00e      	b.n	80071ac <__swhatbuf_r+0x42>
 800718e:	466a      	mov	r2, sp
 8007190:	f000 f902 	bl	8007398 <_fstat_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	dbf1      	blt.n	800717c <__swhatbuf_r+0x12>
 8007198:	9a01      	ldr	r2, [sp, #4]
 800719a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800719e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a2:	425a      	negs	r2, r3
 80071a4:	415a      	adcs	r2, r3
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	e7ee      	b.n	8007188 <__swhatbuf_r+0x1e>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	2000      	movs	r0, #0
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	b016      	add	sp, #88	; 0x58
 80071b2:	bd70      	pop	{r4, r5, r6, pc}

080071b4 <__smakebuf_r>:
 80071b4:	898b      	ldrh	r3, [r1, #12]
 80071b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b8:	079d      	lsls	r5, r3, #30
 80071ba:	4606      	mov	r6, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	d507      	bpl.n	80071d0 <__smakebuf_r+0x1c>
 80071c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	2301      	movs	r3, #1
 80071ca:	6163      	str	r3, [r4, #20]
 80071cc:	b002      	add	sp, #8
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	ab01      	add	r3, sp, #4
 80071d2:	466a      	mov	r2, sp
 80071d4:	f7ff ffc9 	bl	800716a <__swhatbuf_r>
 80071d8:	9900      	ldr	r1, [sp, #0]
 80071da:	4605      	mov	r5, r0
 80071dc:	4630      	mov	r0, r6
 80071de:	f7fd faa7 	bl	8004730 <_malloc_r>
 80071e2:	b948      	cbnz	r0, 80071f8 <__smakebuf_r+0x44>
 80071e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e8:	059a      	lsls	r2, r3, #22
 80071ea:	d4ef      	bmi.n	80071cc <__smakebuf_r+0x18>
 80071ec:	f023 0303 	bic.w	r3, r3, #3
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	e7e3      	b.n	80071c0 <__smakebuf_r+0xc>
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <__smakebuf_r+0x7c>)
 80071fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	6020      	str	r0, [r4, #0]
 8007200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	6163      	str	r3, [r4, #20]
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	6120      	str	r0, [r4, #16]
 800720e:	b15b      	cbz	r3, 8007228 <__smakebuf_r+0x74>
 8007210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007214:	4630      	mov	r0, r6
 8007216:	f000 f8d1 	bl	80073bc <_isatty_r>
 800721a:	b128      	cbz	r0, 8007228 <__smakebuf_r+0x74>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	89a0      	ldrh	r0, [r4, #12]
 800722a:	4305      	orrs	r5, r0
 800722c:	81a5      	strh	r5, [r4, #12]
 800722e:	e7cd      	b.n	80071cc <__smakebuf_r+0x18>
 8007230:	08006fc9 	.word	0x08006fc9

08007234 <_malloc_usable_size_r>:
 8007234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007238:	1f18      	subs	r0, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfbc      	itt	lt
 800723e:	580b      	ldrlt	r3, [r1, r0]
 8007240:	18c0      	addlt	r0, r0, r3
 8007242:	4770      	bx	lr

08007244 <_raise_r>:
 8007244:	291f      	cmp	r1, #31
 8007246:	b538      	push	{r3, r4, r5, lr}
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	d904      	bls.n	8007258 <_raise_r+0x14>
 800724e:	2316      	movs	r3, #22
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800725a:	b112      	cbz	r2, 8007262 <_raise_r+0x1e>
 800725c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007260:	b94b      	cbnz	r3, 8007276 <_raise_r+0x32>
 8007262:	4620      	mov	r0, r4
 8007264:	f000 f830 	bl	80072c8 <_getpid_r>
 8007268:	462a      	mov	r2, r5
 800726a:	4601      	mov	r1, r0
 800726c:	4620      	mov	r0, r4
 800726e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007272:	f000 b817 	b.w	80072a4 <_kill_r>
 8007276:	2b01      	cmp	r3, #1
 8007278:	d00a      	beq.n	8007290 <_raise_r+0x4c>
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	d103      	bne.n	8007286 <_raise_r+0x42>
 800727e:	2316      	movs	r3, #22
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	2001      	movs	r0, #1
 8007284:	e7e7      	b.n	8007256 <_raise_r+0x12>
 8007286:	2400      	movs	r4, #0
 8007288:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800728c:	4628      	mov	r0, r5
 800728e:	4798      	blx	r3
 8007290:	2000      	movs	r0, #0
 8007292:	e7e0      	b.n	8007256 <_raise_r+0x12>

08007294 <raise>:
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <raise+0xc>)
 8007296:	4601      	mov	r1, r0
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	f7ff bfd3 	b.w	8007244 <_raise_r>
 800729e:	bf00      	nop
 80072a0:	2000004c 	.word	0x2000004c

080072a4 <_kill_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	; (80072c4 <_kill_r+0x20>)
 80072a8:	2300      	movs	r3, #0
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	f7fa f89d 	bl	80013f0 <_kill>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d102      	bne.n	80072c0 <_kill_r+0x1c>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	b103      	cbz	r3, 80072c0 <_kill_r+0x1c>
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
 80072c2:	bf00      	nop
 80072c4:	200004e8 	.word	0x200004e8

080072c8 <_getpid_r>:
 80072c8:	f7fa b88a 	b.w	80013e0 <_getpid>

080072cc <__sread>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	460c      	mov	r4, r1
 80072d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d4:	f000 f894 	bl	8007400 <_read_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	bfab      	itete	ge
 80072dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072de:	89a3      	ldrhlt	r3, [r4, #12]
 80072e0:	181b      	addge	r3, r3, r0
 80072e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072e6:	bfac      	ite	ge
 80072e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ea:	81a3      	strhlt	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__swrite>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	461f      	mov	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	05db      	lsls	r3, r3, #23
 80072f8:	4605      	mov	r5, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4616      	mov	r6, r2
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1e>
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	2302      	movs	r3, #2
 8007306:	2200      	movs	r2, #0
 8007308:	f000 f868 	bl	80073dc <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	4632      	mov	r2, r6
 800731a:	463b      	mov	r3, r7
 800731c:	4628      	mov	r0, r5
 800731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	f000 b817 	b.w	8007354 <_write_r>

08007326 <__sseek>:
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732e:	f000 f855 	bl	80073dc <_lseek_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	bf15      	itete	ne
 8007338:	6560      	strne	r0, [r4, #84]	; 0x54
 800733a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800733e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007342:	81a3      	strheq	r3, [r4, #12]
 8007344:	bf18      	it	ne
 8007346:	81a3      	strhne	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__sclose>:
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 b813 	b.w	8007378 <_close_r>
	...

08007354 <_write_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d07      	ldr	r5, [pc, #28]	; (8007374 <_write_r+0x20>)
 8007358:	4604      	mov	r4, r0
 800735a:	4608      	mov	r0, r1
 800735c:	4611      	mov	r1, r2
 800735e:	2200      	movs	r2, #0
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	f7fa f87b 	bl	800145e <_write>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d102      	bne.n	8007372 <_write_r+0x1e>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b103      	cbz	r3, 8007372 <_write_r+0x1e>
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	200004e8 	.word	0x200004e8

08007378 <_close_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d06      	ldr	r5, [pc, #24]	; (8007394 <_close_r+0x1c>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7fa f887 	bl	8001496 <_close>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_close_r+0x1a>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_close_r+0x1a>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	200004e8 	.word	0x200004e8

08007398 <_fstat_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d07      	ldr	r5, [pc, #28]	; (80073b8 <_fstat_r+0x20>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f7fa f882 	bl	80014ae <_fstat>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d102      	bne.n	80073b4 <_fstat_r+0x1c>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	b103      	cbz	r3, 80073b4 <_fstat_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	200004e8 	.word	0x200004e8

080073bc <_isatty_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_isatty_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa f881 	bl	80014ce <_isatty>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_isatty_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_isatty_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	200004e8 	.word	0x200004e8

080073dc <_lseek_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d07      	ldr	r5, [pc, #28]	; (80073fc <_lseek_r+0x20>)
 80073e0:	4604      	mov	r4, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	602a      	str	r2, [r5, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7fa f87a 	bl	80014e4 <_lseek>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_lseek_r+0x1e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_lseek_r+0x1e>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200004e8 	.word	0x200004e8

08007400 <_read_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_read_r+0x20>)
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	2200      	movs	r2, #0
 800740c:	602a      	str	r2, [r5, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f7fa f808 	bl	8001424 <_read>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_read_r+0x1e>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_read_r+0x1e>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	200004e8 	.word	0x200004e8

08007424 <_init>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr

08007430 <_fini>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	bf00      	nop
 8007434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007436:	bc08      	pop	{r3}
 8007438:	469e      	mov	lr, r3
 800743a:	4770      	bx	lr
