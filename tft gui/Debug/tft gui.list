
tft gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  080090e0  080090e0  000190e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d4  080098d4  00022c2c  2**0
                  CONTENTS
  4 .ARM          00000008  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098dc  080098dc  00022c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002c2c  20000000  080098e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20002c2c  0800c510  00022c2c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f94  0800c510  00022f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022c2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001033d  00000000  00000000  00022c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bb  00000000  00000000  00032f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019519  00000000  00000000  00037068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001223a  00000000  00000000  00050581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009667b  00000000  00000000  000627bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  000f8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002c2c 	.word	0x20002c2c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090c8 	.word	0x080090c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002c30 	.word	0x20002c30
 80001dc:	080090c8 	.word	0x080090c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec2:	f000 fd8b 	bl	80019dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ec6:	f000 f867 	bl	8000f98 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	LCD_Begin();
 8000eca:	f003 fecb 	bl	8004c64 <LCD_Begin>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ece:	f000 f979 	bl	80011c4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ed2:	f000 f94d 	bl	8001170 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000ed6:	f000 f8cb 	bl	8001070 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000eda:	f000 f91b 	bl	8001114 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	uart_print_config(9600);
 8000ede:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000ee2:	f003 fbbb 	bl	800465c <uart_print_config>
	print("Working\n");
 8000ee6:	4825      	ldr	r0, [pc, #148]	; (8000f7c <main+0xc0>)
 8000ee8:	f003 fb94 	bl	8004614 <print>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

	uint8_t mlx90614_wrokingFlag = 1, status = 0;
 8000eec:	2301      	movs	r3, #1
 8000eee:	737b      	strb	r3, [r7, #13]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	733b      	strb	r3, [r7, #12]

	if (!(mlx90614_init())) {
 8000ef4:	f003 fc42 	bl	800477c <mlx90614_init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <main+0x52>
		print("Error in MLX90614 INIT\n");
 8000f04:	481e      	ldr	r0, [pc, #120]	; (8000f80 <main+0xc4>)
 8000f06:	f003 fb85 	bl	8004614 <print>
		mlx90614_wrokingFlag = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	737b      	strb	r3, [r7, #13]
	}

//	LCD_FillScreen(BLACK);

	HMS_bgdisplay();
 8000f0e:	f000 f9c7 	bl	80012a0 <HMS_bgdisplay>
//	HAL_ADC_Start(&hadc1);

	uint16_t i = 0, j = 0, start = 0, end = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	81fb      	strh	r3, [r7, #14]
 8000f16:	2300      	movs	r3, #0
 8000f18:	817b      	strh	r3, [r7, #10]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	813b      	strh	r3, [r7, #8]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	80fb      	strh	r3, [r7, #6]
//		end = HAL_GetTick();
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 100);
//		adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);

		adcData = fakeECGData[i];
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <main+0xc8>)
 8000f26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <main+0xcc>)
 8000f2c:	801a      	strh	r2, [r3, #0]
		i = (i + 1) % 5000;
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <main+0xd0>)
 8000f34:	fb82 1203 	smull	r1, r2, r2, r3
 8000f38:	12d1      	asrs	r1, r2, #11
 8000f3a:	17da      	asrs	r2, r3, #31
 8000f3c:	1a8a      	subs	r2, r1, r2
 8000f3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f42:	fb01 f202 	mul.w	r2, r1, r2
 8000f46:	1a9a      	subs	r2, r3, r2
 8000f48:	4613      	mov	r3, r2
 8000f4a:	81fb      	strh	r3, [r7, #14]
		LCD_DrawGraph(adcData);
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <main+0xcc>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fa83 	bl	800145c <LCD_DrawGraph>

		status = mlx90614_getObject1(&temp);
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <main+0xd4>)
 8000f58:	f003 fd1a 	bl	8004990 <mlx90614_getObject1>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	733b      	strb	r3, [r7, #12]
		if (status == 1) {
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1dd      	bne.n	8000f22 <main+0x66>
			print("Temp in Celsius: = %0.2f\n", temp);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <main+0xd4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff faf4 	bl	8000558 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <main+0xd8>)
 8000f76:	f003 fb4d 	bl	8004614 <print>
	while (1) {
 8000f7a:	e7d2      	b.n	8000f22 <main+0x66>
 8000f7c:	080090e0 	.word	0x080090e0
 8000f80:	080090ec 	.word	0x080090ec
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20002d34 	.word	0x20002d34
 8000f8c:	68db8bad 	.word	0x68db8bad
 8000f90:	20002d30 	.word	0x20002d30
 8000f94:	08009104 	.word	0x08009104

08000f98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 f96a 	bl	8006280 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd4>)
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800100c:	2310      	movs	r3, #16
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001010:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001016:	2304      	movs	r3, #4
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	4618      	mov	r0, r3
 8001024:	f002 f94e 	bl	80032c4 <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
		Error_Handler();
 800102e:	f000 faa7 	bl	8001580 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fbb0 	bl	80037b4 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc6>
		Error_Handler();
 800105a:	f000 fa91 	bl	8001580 <Error_Handler>
	}
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC1_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC1_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC1_Init+0x98>)
 800108a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ADC1_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC1_Init+0xa0>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC1_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC1_Init+0x98>)
 80010d2:	f000 fcf5 	bl	8001ac0 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x70>
		Error_Handler();
 80010dc:	f000 fa50 	bl	8001580 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 80010e0:	230e      	movs	r3, #14
 80010e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC1_Init+0x98>)
 80010f2:	f000 fd29 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x90>
		Error_Handler();
 80010fc:	f000 fa40 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002c48 	.word	0x20002c48
 800110c:	40012000 	.word	0x40012000
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2C1_Init+0x50>)
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <MX_I2C1_Init+0x54>)
 800111c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_I2C1_Init+0x50>)
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_I2C1_Init+0x58>)
 8001122:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_I2C1_Init+0x50>)
 8001132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001136:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_I2C1_Init+0x50>)
 8001152:	f001 f99b 	bl	800248c <HAL_I2C_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800115c:	f000 fa10 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20002c90 	.word	0x20002c90
 8001168:	40005400 	.word	0x40005400
 800116c:	000186a0 	.word	0x000186a0

08001170 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f002 fd24 	bl	8003bf4 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80011b2:	f000 f9e5 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20002ce4 	.word	0x20002ce4
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <MX_GPIO_Init+0xd0>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a25      	ldr	r2, [pc, #148]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <MX_GPIO_Init+0xd0>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_GPIO_Init+0xd0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001250:	f001 f902 	bl	8002458 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800125a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800125e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_GPIO_Init+0xd8>)
 800126c:	f000 ff70 	bl	8002150 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001270:	2320      	movs	r3, #32
 8001272:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001288:	f000 ff62 	bl	8002150 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020800 	.word	0x40020800

080012a0 <HMS_bgdisplay>:

/* USER CODE BEGIN 4 */
void HMS_bgdisplay(void) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af08      	add	r7, sp, #32

	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012ae:	22f0      	movs	r2, #240	; 0xf0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f004 ff87 	bl	80061c6 <colorgradient>

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 80012b8:	2305      	movs	r3, #5
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	e019      	b.n	80012f2 <HMS_bgdisplay+0x52>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 80012be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80012da:	b29b      	uxth	r3, r3
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	f003 fefd 	bl	80050e6 <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e2      	bne.n	80012be <HMS_bgdisplay+0x1e>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 80012f8:	2305      	movs	r3, #5
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001300:	22f0      	movs	r2, #240	; 0xf0
 8001302:	216a      	movs	r1, #106	; 0x6a
 8001304:	2000      	movs	r0, #0
 8001306:	f003 fbd3 	bl	8004ab0 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 800130a:	2305      	movs	r3, #5
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	22f0      	movs	r2, #240	; 0xf0
 8001314:	21d4      	movs	r1, #212	; 0xd4
 8001316:	2000      	movs	r0, #0
 8001318:	f003 fbca 	bl	8004ab0 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 800131c:	2302      	movs	r3, #2
 800131e:	9307      	str	r3, [sp, #28]
 8001320:	2302      	movs	r3, #2
 8001322:	9306      	str	r3, [sp, #24]
 8001324:	2302      	movs	r3, #2
 8001326:	9305      	str	r3, [sp, #20]
 8001328:	2300      	movs	r3, #0
 800132a:	9304      	str	r3, [sp, #16]
 800132c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	230a      	movs	r3, #10
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2342      	movs	r3, #66	; 0x42
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	23c8      	movs	r3, #200	; 0xc8
 8001342:	2214      	movs	r2, #20
 8001344:	2114      	movs	r1, #20
 8001346:	483e      	ldr	r0, [pc, #248]	; (8001440 <HMS_bgdisplay+0x1a0>)
 8001348:	f003 fb4e 	bl	80049e8 <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 800134c:	2002      	movs	r0, #2
 800134e:	f004 fd89 	bl	8005e64 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8001352:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800135a:	f004 fd99 	bl	8005e90 <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 800135e:	2119      	movs	r1, #25
 8001360:	2058      	movs	r0, #88	; 0x58
 8001362:	f004 fd67 	bl	8005e34 <LCD_SetCursor>
	LCD_Printf("Health");
 8001366:	4837      	ldr	r0, [pc, #220]	; (8001444 <HMS_bgdisplay+0x1a4>)
 8001368:	f004 fc7c 	bl	8005c64 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 800136c:	212d      	movs	r1, #45	; 0x2d
 800136e:	203f      	movs	r0, #63	; 0x3f
 8001370:	f004 fd60 	bl	8005e34 <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8001374:	4834      	ldr	r0, [pc, #208]	; (8001448 <HMS_bgdisplay+0x1a8>)
 8001376:	f004 fc75 	bl	8005c64 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 800137a:	2141      	movs	r1, #65	; 0x41
 800137c:	2058      	movs	r0, #88	; 0x58
 800137e:	f004 fd59 	bl	8005e34 <LCD_SetCursor>
	LCD_Printf("System");
 8001382:	4832      	ldr	r0, [pc, #200]	; (800144c <HMS_bgdisplay+0x1ac>)
 8001384:	f004 fc6e 	bl	8005c64 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 8001388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	2305      	movs	r3, #5
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2319      	movs	r3, #25
 8001394:	22cd      	movs	r2, #205	; 0xcd
 8001396:	2179      	movs	r1, #121	; 0x79
 8001398:	200f      	movs	r0, #15
 800139a:	f004 fabf 	bl	800591c <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 800139e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80013a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013a6:	f004 fd73 	bl	8005e90 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 80013aa:	217e      	movs	r1, #126	; 0x7e
 80013ac:	2014      	movs	r0, #20
 80013ae:	f004 fd41 	bl	8005e34 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f004 fd56 	bl	8005e64 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 80013b8:	4825      	ldr	r0, [pc, #148]	; (8001450 <HMS_bgdisplay+0x1b0>)
 80013ba:	f004 fc53 	bl	8005c64 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 80013be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2305      	movs	r3, #5
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2319      	movs	r3, #25
 80013ca:	22cd      	movs	r2, #205	; 0xcd
 80013cc:	2197      	movs	r1, #151	; 0x97
 80013ce:	200f      	movs	r0, #15
 80013d0:	f004 faa4 	bl	800591c <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 80013d4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80013d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013dc:	f004 fd58 	bl	8005e90 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 80013e0:	219c      	movs	r1, #156	; 0x9c
 80013e2:	2014      	movs	r0, #20
 80013e4:	f004 fd26 	bl	8005e34 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80013e8:	2002      	movs	r0, #2
 80013ea:	f004 fd3b 	bl	8005e64 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <HMS_bgdisplay+0x1b4>)
 80013f0:	f004 fc38 	bl	8005c64 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 80013f4:	231f      	movs	r3, #31
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2305      	movs	r3, #5
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2319      	movs	r3, #25
 80013fe:	22cd      	movs	r2, #205	; 0xcd
 8001400:	21b5      	movs	r1, #181	; 0xb5
 8001402:	200f      	movs	r0, #15
 8001404:	f004 fa8a 	bl	800591c <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 8001408:	211f      	movs	r1, #31
 800140a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800140e:	f004 fd3f 	bl	8005e90 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 8001412:	21ba      	movs	r1, #186	; 0xba
 8001414:	2014      	movs	r0, #20
 8001416:	f004 fd0d 	bl	8005e34 <LCD_SetCursor>
	LCD_SetTextSize(2);
 800141a:	2002      	movs	r0, #2
 800141c:	f004 fd22 	bl	8005e64 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <HMS_bgdisplay+0x1b8>)
 8001422:	f004 fc1f 	bl	8005c64 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2346      	movs	r3, #70	; 0x46
 800142e:	22cd      	movs	r2, #205	; 0xcd
 8001430:	21e8      	movs	r1, #232	; 0xe8
 8001432:	2014      	movs	r0, #20
 8001434:	f004 f9ca 	bl	80057cc <LCD_FillRect>

	//===============================================================//

}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	08009120 	.word	0x08009120
 8001444:	08009124 	.word	0x08009124
 8001448:	0800912c 	.word	0x0800912c
 800144c:	08009138 	.word	0x08009138
 8001450:	08009140 	.word	0x08009140
 8001454:	0800914c 	.word	0x0800914c
 8001458:	08009154 	.word	0x08009154

0800145c <LCD_DrawGraph>:

void LCD_DrawGraph(uint16_t value) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b087      	sub	sp, #28
 8001460:	af02      	add	r7, sp, #8
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]

	graph_y_prevVal = graph_y;
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <LCD_DrawGraph+0x118>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a43      	ldr	r2, [pc, #268]	; (8001578 <LCD_DrawGraph+0x11c>)
 800146c:	6013      	str	r3, [r2, #0]
//	uint16_t mapVar = adcArr[adcArrTail];
//	adcArrTail = (adcArrTail + 1) % adcArrLen;
	uint16_t mapVar = value;
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	81fb      	strh	r3, [r7, #14]
	uint8_t graphRefreshRate = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	737b      	strb	r3, [r7, #13]
	if (mapVar > 3000)
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800147c:	4293      	cmp	r3, r2
 800147e:	d903      	bls.n	8001488 <LCD_DrawGraph+0x2c>
		mapVar = 3000;
 8001480:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	e006      	b.n	8001496 <LCD_DrawGraph+0x3a>
	else if (mapVar < 1000)
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148e:	d202      	bcs.n	8001496 <LCD_DrawGraph+0x3a>
		mapVar = 1000;
 8001490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001494:	81fb      	strh	r3, [r7, #14]
	graph_y = map(mapVar, 0, 4095, 243, 293);
 8001496:	89f8      	ldrh	r0, [r7, #14]
 8001498:	f240 1325 	movw	r3, #293	; 0x125
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	23f3      	movs	r3, #243	; 0xf3
 80014a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014a4:	2100      	movs	r1, #0
 80014a6:	f002 fe67 	bl	8004178 <map>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <LCD_DrawGraph+0x118>)
 80014b0:	601a      	str	r2, [r3, #0]

	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal,
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <LCD_DrawGraph+0x120>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b218      	sxth	r0, r3
 80014b8:	23f2      	movs	r3, #242	; 0xf2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <LCD_DrawGraph+0x11c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b219      	sxth	r1, r3
			graph_x + graphRefreshRate_peak, graph_y0 + graph_y, RED);
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <LCD_DrawGraph+0x120>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal,
 80014d2:	b21c      	sxth	r4, r3
			graph_x + graphRefreshRate_peak, graph_y0 + graph_y, RED);
 80014d4:	23f2      	movs	r3, #242	; 0xf2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <LCD_DrawGraph+0x118>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal,
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014e8:	9200      	str	r2, [sp, #0]
 80014ea:	4622      	mov	r2, r4
 80014ec:	f003 fcbe 	bl	8004e6c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal - 1,
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <LCD_DrawGraph+0x120>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b218      	sxth	r0, r3
 80014f6:	23f2      	movs	r3, #242	; 0xf2
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <LCD_DrawGraph+0x11c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b219      	sxth	r1, r3
			graph_x + graphRefreshRate_peak, graph_y0 + graph_y - 1, RED);
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <LCD_DrawGraph+0x120>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3302      	adds	r3, #2
 8001512:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal - 1,
 8001514:	b21c      	sxth	r4, r3
			graph_x + graphRefreshRate_peak, graph_y0 + graph_y - 1, RED);
 8001516:	23f2      	movs	r3, #242	; 0xf2
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <LCD_DrawGraph+0x118>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + graph_y_prevVal - 1,
 8001528:	b21b      	sxth	r3, r3
 800152a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	4622      	mov	r2, r4
 8001532:	f003 fc9b 	bl	8004e6c <LCD_DrawLine>

	int a = graph_x;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <LCD_DrawGraph+0x120>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60bb      	str	r3, [r7, #8]
	if (a + graphRefreshRate_peak >= graph_x2) {
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3302      	adds	r3, #2
 8001540:	22af      	movs	r2, #175	; 0xaf
 8001542:	4293      	cmp	r3, r2
 8001544:	db0c      	blt.n	8001560 <LCD_DrawGraph+0x104>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 80, 70, WHITE);
 8001546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2346      	movs	r3, #70	; 0x46
 800154e:	22a0      	movs	r2, #160	; 0xa0
 8001550:	21e8      	movs	r1, #232	; 0xe8
 8001552:	2014      	movs	r0, #20
 8001554:	f004 f93a 	bl	80057cc <LCD_FillRect>
		graph_x = graph_x0;
 8001558:	221e      	movs	r2, #30
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <LCD_DrawGraph+0x120>)
 800155c:	601a      	str	r2, [r3, #0]
	} else {
		graph_x += graphRefreshRate_peak;
	}

}
 800155e:	e004      	b.n	800156a <LCD_DrawGraph+0x10e>
		graph_x += graphRefreshRate_peak;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <LCD_DrawGraph+0x120>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3302      	adds	r3, #2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <LCD_DrawGraph+0x120>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20002d28 	.word	0x20002d28
 8001578:	20002d2c 	.word	0x20002d2c
 800157c:	20002a0c 	.word	0x20002a0c

08001580 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ca:	2007      	movs	r0, #7
 80015cc:	f000 fd8c 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_ADC_MspInit+0x7c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d127      	bne.n	800164e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_ADC_MspInit+0x80>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <HAL_ADC_MspInit+0x80>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_ADC_MspInit+0x80>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_ADC_MspInit+0x80>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_ADC_MspInit+0x80>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_ADC_MspInit+0x80>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001636:	2310      	movs	r3, #16
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	2303      	movs	r3, #3
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_ADC_MspInit+0x84>)
 800164a:	f000 fd81 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40012000 	.word	0x40012000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020800 	.word	0x40020800

08001664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0x84>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12c      	bne.n	80016e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_I2C_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b4:	2304      	movs	r3, #4
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <HAL_I2C_MspInit+0x8c>)
 80016c0:	f000 fd46 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400

080016f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_UART_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x88>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_UART_MspInit+0x88>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x88>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_UART_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_UART_MspInit+0x88>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_UART_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_UART_MspInit+0x8c>)
 800176a:	f000 fcf1 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40004400 	.word	0x40004400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 f956 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017f2:	f004 fd1b 	bl	800622c <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
	return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800181a:	e7fe      	b.n	800181a <_exit+0x12>

0800181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
	}

return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
	}
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f004 fc80 	bl	800622c <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20018000 	.word	0x20018000
 8001958:	00000400 	.word	0x00000400
 800195c:	20002d38 	.word	0x20002d38
 8001960:	20002f98 	.word	0x20002f98

08001964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b2:	f7ff ffd7 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f004 fc3f 	bl	8006238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff fa7f 	bl	8000ebc <main>
  bx  lr    
 80019be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20002c2c 	.word	0x20002c2c
  ldr r2, =_sidata
 80019cc:	080098e4 	.word	0x080098e4
  ldr r2, =_sbss
 80019d0:	20002c2c 	.word	0x20002c2c
  ldr r4, =_ebss
 80019d4:	20002f94 	.word	0x20002f94

080019d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_Init+0x40>)
 80019e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_Init+0x40>)
 80019f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x40>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 fb6f 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fdbc 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fb79 	bl	8002136 <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 fb4f 	bl	80020fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20002a10 	.word	0x20002a10
 8001a78:	20002a18 	.word	0x20002a18
 8001a7c:	20002a14 	.word	0x20002a14

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20002a18 	.word	0x20002a18
 8001aa4:	20002d3c 	.word	0x20002d3c

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20002d3c 	.word	0x20002d3c

08001ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e033      	b.n	8001b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd7c 	bl	80015dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b06:	f023 0302 	bic.w	r3, r3, #2
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93a 	bl	8001d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	e001      	b.n	8001b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e105      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x228>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	d925      	bls.n	8001bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3b1e      	subs	r3, #30
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4403      	add	r3, r0
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	e022      	b.n	8001c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4403      	add	r3, r0
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d824      	bhi.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b05      	subs	r3, #5
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
 8001c56:	e04c      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d824      	bhi.n	8001caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b23      	subs	r3, #35	; 0x23
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	400a      	ands	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b23      	subs	r3, #35	; 0x23
 8001c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca8:	e023      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b41      	subs	r3, #65	; 0x41
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b41      	subs	r3, #65	; 0x41
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_ADC_ConfigChannel+0x234>)
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_ADC_ConfigChannel+0x238>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d109      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1cc>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_ADC_ConfigChannel+0x238>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d123      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x21e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d003      	beq.n	8001d2e <HAL_ADC_ConfigChannel+0x1e6>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d11b      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d111      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_ADC_ConfigChannel+0x23c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_ADC_ConfigChannel+0x240>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	0c9a      	lsrs	r2, r3, #18
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40012300 	.word	0x40012300
 8001d80:	40012000 	.word	0x40012000
 8001d84:	20002a10 	.word	0x20002a10
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d94:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <ADC_Init+0x1f0>)
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	021a      	lsls	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <ADC_Init+0x1f4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e00f      	b.n	8001e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0202 	bic.w	r2, r2, #2
 8001e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	035a      	lsls	r2, r3, #13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e007      	b.n	8001f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	051a      	lsls	r2, r3, #20
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f42:	025a      	lsls	r2, r3, #9
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	029a      	lsls	r2, r3, #10
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ff8e 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff47 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff5c 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff8e 	bl	800203c <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffb0 	bl	80020a4 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e159      	b.n	8002420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8148 	bne.w	800241a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a2 	beq.w	800241a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_GPIO_Init+0x2ec>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x202>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a48      	ldr	r2, [pc, #288]	; (8002444 <HAL_GPIO_Init+0x2f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x1fe>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <HAL_GPIO_Init+0x2f8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x1fa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a46      	ldr	r2, [pc, #280]	; (800244c <HAL_GPIO_Init+0x2fc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x1f6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a45      	ldr	r2, [pc, #276]	; (8002450 <HAL_GPIO_Init+0x300>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x1f2>
 800233e:	2304      	movs	r3, #4
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002342:	2307      	movs	r3, #7
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	; (800243c <HAL_GPIO_Init+0x2ec>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x304>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f aea2 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002474:	e003      	b.n	800247e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	041a      	lsls	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	619a      	str	r2, [r3, #24]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e12b      	b.n	80026f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f8d6 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f0:	f001 fb58 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a81      	ldr	r2, [pc, #516]	; (8002700 <HAL_I2C_Init+0x274>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d807      	bhi.n	8002510 <HAL_I2C_Init+0x84>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a80      	ldr	r2, [pc, #512]	; (8002704 <HAL_I2C_Init+0x278>)
 8002504:	4293      	cmp	r3, r2
 8002506:	bf94      	ite	ls
 8002508:	2301      	movls	r3, #1
 800250a:	2300      	movhi	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e006      	b.n	800251e <HAL_I2C_Init+0x92>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <HAL_I2C_Init+0x27c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0e7      	b.n	80026f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4a78      	ldr	r2, [pc, #480]	; (800270c <HAL_I2C_Init+0x280>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0c9b      	lsrs	r3, r3, #18
 8002530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_I2C_Init+0x274>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d802      	bhi.n	8002560 <HAL_I2C_Init+0xd4>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3301      	adds	r3, #1
 800255e:	e009      	b.n	8002574 <HAL_I2C_Init+0xe8>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a69      	ldr	r2, [pc, #420]	; (8002710 <HAL_I2C_Init+0x284>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	3301      	adds	r3, #1
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	495c      	ldr	r1, [pc, #368]	; (8002700 <HAL_I2C_Init+0x274>)
 8002590:	428b      	cmp	r3, r1
 8002592:	d819      	bhi.n	80025c8 <HAL_I2C_Init+0x13c>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e59      	subs	r1, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025a8:	400b      	ands	r3, r1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_I2C_Init+0x138>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e59      	subs	r1, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c2:	e051      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 80025c4:	2304      	movs	r3, #4
 80025c6:	e04f      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_I2C_Init+0x168>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e012      	b.n	800261a <HAL_I2C_Init+0x18e>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1e58      	subs	r0, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	0099      	lsls	r1, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	fbb0 f3f3 	udiv	r3, r0, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Init+0x196>
 800261e:	2301      	movs	r3, #1
 8002620:	e022      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10e      	bne.n	8002648 <HAL_I2C_Init+0x1bc>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1e58      	subs	r0, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	440b      	add	r3, r1
 8002638:	fbb0 f3f3 	udiv	r3, r0, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002646:	e00f      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	0099      	lsls	r1, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	6809      	ldr	r1, [r1, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6911      	ldr	r1, [r2, #16]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	000186a0 	.word	0x000186a0
 8002704:	001e847f 	.word	0x001e847f
 8002708:	003d08ff 	.word	0x003d08ff
 800270c:	431bde83 	.word	0x431bde83
 8002710:	10624dd3 	.word	0x10624dd3

08002714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800272e:	f7ff f9bb 	bl	8001aa8 <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b20      	cmp	r3, #32
 800273e:	f040 8208 	bne.w	8002b52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2319      	movs	r3, #25
 8002748:	2201      	movs	r2, #1
 800274a:	497b      	ldr	r1, [pc, #492]	; (8002938 <HAL_I2C_Mem_Read+0x224>)
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fc1d 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
 800275a:	e1fb      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_I2C_Mem_Read+0x56>
 8002766:	2302      	movs	r3, #2
 8002768:	e1f4      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d007      	beq.n	8002790 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2222      	movs	r2, #34	; 0x22
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a5b      	ldr	r2, [pc, #364]	; (800293c <HAL_I2C_Mem_Read+0x228>)
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d2:	88f8      	ldrh	r0, [r7, #6]
 80027d4:	893a      	ldrh	r2, [r7, #8]
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4603      	mov	r3, r0
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 faea 	bl	8002dbc <I2C_RequestMemoryRead>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1b0      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d113      	bne.n	8002822 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e184      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	2b01      	cmp	r3, #1
 8002828:	d11b      	bne.n	8002862 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e164      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b02      	cmp	r3, #2
 8002868:	d11b      	bne.n	80028a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	e144      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028b8:	e138      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	2b03      	cmp	r3, #3
 80028c0:	f200 80f1 	bhi.w	8002aa6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d123      	bne.n	8002914 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fc72 	bl	80031ba <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e139      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002912:	e10b      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b02      	cmp	r3, #2
 800291a:	d14e      	bne.n	80029ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	2200      	movs	r2, #0
 8002924:	4906      	ldr	r1, [pc, #24]	; (8002940 <HAL_I2C_Mem_Read+0x22c>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fb30 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e10e      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
 8002936:	bf00      	nop
 8002938:	00100002 	.word	0x00100002
 800293c:	ffff0000 	.word	0xffff0000
 8002940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b8:	e0b8      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	2200      	movs	r2, #0
 80029c2:	4966      	ldr	r1, [pc, #408]	; (8002b5c <HAL_I2C_Mem_Read+0x448>)
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fae1 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0bf      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	494f      	ldr	r1, [pc, #316]	; (8002b5c <HAL_I2C_Mem_Read+0x448>)
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fab3 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e091      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa4:	e042      	b.n	8002b2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fb85 	bl	80031ba <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e04c      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d118      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f aec2 	bne.w	80028ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	00010004 	.word	0x00010004

08002b60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7fe ff9a 	bl	8001aa8 <HAL_GetTick>
 8002b74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 8111 	bne.w	8002daa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2319      	movs	r3, #25
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4988      	ldr	r1, [pc, #544]	; (8002db4 <HAL_I2C_IsDeviceReady+0x254>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f9fa 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e104      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2C_IsDeviceReady+0x50>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0fd      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d007      	beq.n	8002bd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2224      	movs	r2, #36	; 0x24
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a70      	ldr	r2, [pc, #448]	; (8002db8 <HAL_I2C_IsDeviceReady+0x258>)
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f9b8 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d103      	bne.n	8002c3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b6      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff2b 	bl	8001aa8 <HAL_GetTick>
 8002c52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c82:	e025      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe ff10 	bl	8001aa8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <HAL_I2C_IsDeviceReady+0x13a>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	22a0      	movs	r2, #160	; 0xa0
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2ba0      	cmp	r3, #160	; 0xa0
 8002cda:	d005      	beq.n	8002ce8 <HAL_I2C_IsDeviceReady+0x188>
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_I2C_IsDeviceReady+0x188>
 8002ce2:	7dbb      	ldrb	r3, [r7, #22]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0cd      	beq.n	8002c84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d129      	bne.n	8002d52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2319      	movs	r3, #25
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4921      	ldr	r1, [pc, #132]	; (8002db4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f92c 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e036      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e02c      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	490f      	ldr	r1, [pc, #60]	; (8002db4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f908 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e012      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f4ff af32 	bcc.w	8002bfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	00100002 	.word	0x00100002
 8002db8:	ffff0000 	.word	0xffff0000

08002dbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002de4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8c2 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d103      	bne.n	8002e26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0aa      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2a:	897b      	ldrh	r3, [r7, #10]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	4952      	ldr	r1, [pc, #328]	; (8002f88 <I2C_RequestMemoryRead+0x1cc>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f8fa 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e097      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f964 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e076      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e021      	b.n	8002ee8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f93e 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e050      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f923 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e035      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f82b 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00d      	beq.n	8002f58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4a:	d103      	bne.n	8002f54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e013      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	6a3a      	ldr	r2, [r7, #32]
 8002f6c:	4906      	ldr	r1, [pc, #24]	; (8002f88 <I2C_RequestMemoryRead+0x1cc>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f863 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00010002 	.word	0x00010002

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e025      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fd7f 	bl	8001aa8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	e00c      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d0b6      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003048:	e051      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d123      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e046      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fcfd 	bl	8001aa8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e020      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18d      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f88d 	bl	8003266 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02d      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d021      	beq.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fca3 	bl	8001aa8 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d1ca      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031c6:	e042      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d119      	bne.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0210 	mvn.w	r2, #16
 80031de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e029      	b.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fc4d 	bl	8001aa8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d1b5      	bne.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d11b      	bne.n	80032b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e267      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d075      	beq.n	80033ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00c      	beq.n	8003308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d112      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b7e      	ldr	r3, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d157      	bne.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e242      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x74>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6c      	ldr	r2, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 800335c:	4b69      	ldr	r3, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fb94 	bl	8001aa8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fb90 	bl	8001aa8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e207      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xc0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fb80 	bl	8001aa8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fb7c 	bl	8001aa8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1f3      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1c7      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x244>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fb35 	bl	8001aa8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe fb31 	bl	8001aa8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1a8      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x244>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe fb14 	bl	8001aa8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe fb10 	bl	8001aa8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e187      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x248>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe faf4 	bl	8001aa8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe faf0 	bl	8001aa8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e167      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x200>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x248>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fadd 	bl	8001aa8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe fad9 	bl	8001aa8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e150      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7c      	ldr	r2, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b7a      	ldr	r3, [pc, #488]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b77      	ldr	r3, [pc, #476]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b74      	ldr	r3, [pc, #464]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a73      	ldr	r2, [pc, #460]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fa99 	bl	8001aa8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fa95 	bl	8001aa8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e10c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x2ea>
 80035a0:	4b64      	ldr	r3, [pc, #400]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a63      	ldr	r2, [pc, #396]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x30c>
 80035b6:	4b5f      	ldr	r3, [pc, #380]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a5e      	ldr	r2, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035d0:	4b58      	ldr	r3, [pc, #352]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a57      	ldr	r2, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a54      	ldr	r2, [pc, #336]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe fa5a 	bl	8001aa8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa56 	bl	8001aa8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0cb      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b49      	ldr	r3, [pc, #292]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x334>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7fe fa44 	bl	8001aa8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fa40 	bl	8001aa8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0b5      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a38      	ldr	r2, [pc, #224]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a1 	beq.w	80037a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d05c      	beq.n	8003728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d141      	bne.n	80036fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x478>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fa14 	bl	8001aa8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fa10 	bl	8001aa8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e087      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	491b      	ldr	r1, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x478>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe f9e9 	bl	8001aa8 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe f9e5 	bl	8001aa8 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e05c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x416>
 80036f8:	e054      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe f9d2 	bl	8001aa8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe f9ce 	bl	8001aa8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e045      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x444>
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e038      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	40007000 	.word	0x40007000
 800373c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d028      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d121      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0cc      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d90c      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800382a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d044      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e06f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e067      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fe f900 	bl	8001aa8 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe f8fc 	bl	8001aa8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e04f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d20c      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe f860 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00
 8003970:	40023800 	.word	0x40023800
 8003974:	0800915c 	.word	0x0800915c
 8003978:	20002a10 	.word	0x20002a10
 800397c:	20002a14 	.word	0x20002a14

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b094      	sub	sp, #80	; 0x50
 8003986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	2300      	movs	r3, #0
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003990:	2300      	movs	r3, #0
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003998:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d00d      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x40>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	f200 80e1 	bhi.w	8003b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x3a>
 80039b2:	e0db      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b73      	ldr	r3, [pc, #460]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039b8:	e0db      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ba:	4b73      	ldr	r3, [pc, #460]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039be:	e0d8      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c0:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ca:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d063      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
 80039ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	f04f 0000 	mov.w	r0, #0
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	0159      	lsls	r1, r3, #5
 8003a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a04:	0150      	lsls	r0, r2, #5
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	1a51      	subs	r1, r2, r1
 8003a0e:	6139      	str	r1, [r7, #16]
 8003a10:	4629      	mov	r1, r5
 8003a12:	eb63 0301 	sbc.w	r3, r3, r1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a24:	4659      	mov	r1, fp
 8003a26:	018b      	lsls	r3, r1, #6
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a2e:	4651      	mov	r1, sl
 8003a30:	018a      	lsls	r2, r1, #6
 8003a32:	4651      	mov	r1, sl
 8003a34:	ebb2 0801 	subs.w	r8, r2, r1
 8003a38:	4659      	mov	r1, fp
 8003a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a52:	4690      	mov	r8, r2
 8003a54:	4699      	mov	r9, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	eb18 0303 	adds.w	r3, r8, r3
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	462b      	mov	r3, r5
 8003a60:	eb49 0303 	adc.w	r3, r9, r3
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a72:	4629      	mov	r1, r5
 8003a74:	024b      	lsls	r3, r1, #9
 8003a76:	4621      	mov	r1, r4
 8003a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	024a      	lsls	r2, r1, #9
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	2200      	movs	r2, #0
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a90:	f7fd f892 	bl	8000bb8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	e058      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	f04f 0000 	mov.w	r0, #0
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	0159      	lsls	r1, r3, #5
 8003ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aca:	0150      	lsls	r0, r2, #5
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003af0:	ebb2 040a 	subs.w	r4, r2, sl
 8003af4:	eb63 050b 	sbc.w	r5, r3, fp
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	00eb      	lsls	r3, r5, #3
 8003b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b06:	00e2      	lsls	r2, r4, #3
 8003b08:	4614      	mov	r4, r2
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	4643      	mov	r3, r8
 8003b0e:	18e3      	adds	r3, r4, r3
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	464b      	mov	r3, r9
 8003b14:	eb45 0303 	adc.w	r3, r5, r3
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b26:	4629      	mov	r1, r5
 8003b28:	028b      	lsls	r3, r1, #10
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b30:	4621      	mov	r1, r4
 8003b32:	028a      	lsls	r2, r1, #10
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	61fa      	str	r2, [r7, #28]
 8003b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b44:	f7fd f838 	bl	8000bb8 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b6a:	e002      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3750      	adds	r7, #80	; 0x50
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	007a1200 	.word	0x007a1200

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20002a10 	.word	0x20002a10

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800916c 	.word	0x0800916c

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bd0:	f7ff ffdc 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0b5b      	lsrs	r3, r3, #13
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	0800916c 	.word	0x0800916c

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e03f      	b.n	8003c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fd6a 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f829 	bl	8003c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b0c0      	sub	sp, #256	; 0x100
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	68d9      	ldr	r1, [r3, #12]
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	ea40 0301 	orr.w	r3, r0, r1
 8003cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ce8:	f021 010c 	bic.w	r1, r1, #12
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	6999      	ldr	r1, [r3, #24]
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	ea40 0301 	orr.w	r3, r0, r1
 8003d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b8f      	ldr	r3, [pc, #572]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d005      	beq.n	8003d30 <UART_SetConfig+0xa0>
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b8d      	ldr	r3, [pc, #564]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d104      	bne.n	8003d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7ff ff4c 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8003d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d38:	e003      	b.n	8003d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7ff ff33 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8003d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	f040 810c 	bne.w	8003f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d72:	4621      	mov	r1, r4
 8003d74:	eb12 0801 	adds.w	r8, r2, r1
 8003d78:	4629      	mov	r1, r5
 8003d7a:	eb43 0901 	adc.w	r9, r3, r1
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d92:	4690      	mov	r8, r2
 8003d94:	4699      	mov	r9, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	eb18 0303 	adds.w	r3, r8, r3
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003da0:	462b      	mov	r3, r5
 8003da2:	eb49 0303 	adc.w	r3, r9, r3
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	18db      	adds	r3, r3, r3
 8003dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
 8003dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dd4:	f7fc fef0 	bl	8000bb8 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003dde:	fba3 2302 	umull	r2, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	011c      	lsls	r4, r3, #4
 8003de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e00:	415b      	adcs	r3, r3
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e08:	4641      	mov	r1, r8
 8003e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e0e:	4649      	mov	r1, r9
 8003e10:	eb43 0b01 	adc.w	fp, r3, r1
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e28:	4692      	mov	sl, r2
 8003e2a:	469b      	mov	fp, r3
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e36:	464b      	mov	r3, r9
 8003e38:	eb4b 0303 	adc.w	r3, fp, r3
 8003e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e54:	460b      	mov	r3, r1
 8003e56:	18db      	adds	r3, r3, r3
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e6a:	f7fc fea5 	bl	8000bb8 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003e76:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2264      	movs	r2, #100	; 0x64
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	1acb      	subs	r3, r1, r3
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e98:	441c      	add	r4, r3
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	1851      	adds	r1, r2, r1
 8003ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	414b      	adcs	r3, r1
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	00cb      	lsls	r3, r1, #3
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ede:	4651      	mov	r1, sl
 8003ee0:	00ca      	lsls	r2, r1, #3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f10:	460b      	mov	r3, r1
 8003f12:	18db      	adds	r3, r3, r3
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f16:	4613      	mov	r3, r2
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f26:	f7fc fe47 	bl	8000bb8 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 0207 	and.w	r2, r3, #7
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4422      	add	r2, r4
 8003f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f58:	e105      	b.n	8004166 <UART_SetConfig+0x4d6>
 8003f5a:	bf00      	nop
 8003f5c:	40011000 	.word	0x40011000
 8003f60:	40011400 	.word	0x40011400
 8003f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f7a:	4642      	mov	r2, r8
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	6239      	str	r1, [r7, #32]
 8003f82:	415b      	adcs	r3, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	1854      	adds	r4, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb43 0501 	adc.w	r5, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	00eb      	lsls	r3, r5, #3
 8003f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa2:	00e2      	lsls	r2, r4, #3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	4643      	mov	r3, r8
 8003faa:	18e3      	adds	r3, r4, r3
 8003fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	eb45 0303 	adc.w	r3, r5, r3
 8003fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	008a      	lsls	r2, r1, #2
 8003fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fe8:	f7fc fde6 	bl	8000bb8 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b60      	ldr	r3, [pc, #384]	; (8004174 <UART_SetConfig+0x4e4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	61b9      	str	r1, [r7, #24]
 8004014:	415b      	adcs	r3, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401c:	4641      	mov	r1, r8
 800401e:	1851      	adds	r1, r2, r1
 8004020:	6139      	str	r1, [r7, #16]
 8004022:	4649      	mov	r1, r9
 8004024:	414b      	adcs	r3, r1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004034:	4659      	mov	r1, fp
 8004036:	00cb      	lsls	r3, r1, #3
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403e:	4651      	mov	r1, sl
 8004040:	00ca      	lsls	r2, r1, #3
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	4603      	mov	r3, r0
 8004048:	4642      	mov	r2, r8
 800404a:	189b      	adds	r3, r3, r2
 800404c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004050:	464b      	mov	r3, r9
 8004052:	460a      	mov	r2, r1
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	67bb      	str	r3, [r7, #120]	; 0x78
 8004066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004074:	4649      	mov	r1, r9
 8004076:	008b      	lsls	r3, r1, #2
 8004078:	4641      	mov	r1, r8
 800407a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800407e:	4641      	mov	r1, r8
 8004080:	008a      	lsls	r2, r1, #2
 8004082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004086:	f7fc fd97 	bl	8000bb8 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <UART_SetConfig+0x4e4>)
 8004090:	fba3 1302 	umull	r1, r3, r3, r2
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	2164      	movs	r1, #100	; 0x64
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	3332      	adds	r3, #50	; 0x32
 80040a2:	4a34      	ldr	r2, [pc, #208]	; (8004174 <UART_SetConfig+0x4e4>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ae:	441c      	add	r4, r3
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	673b      	str	r3, [r7, #112]	; 0x70
 80040b8:	677a      	str	r2, [r7, #116]	; 0x74
 80040ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040be:	4642      	mov	r2, r8
 80040c0:	464b      	mov	r3, r9
 80040c2:	1891      	adds	r1, r2, r2
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	415b      	adcs	r3, r3
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ce:	4641      	mov	r1, r8
 80040d0:	1851      	adds	r1, r2, r1
 80040d2:	6039      	str	r1, [r7, #0]
 80040d4:	4649      	mov	r1, r9
 80040d6:	414b      	adcs	r3, r1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e6:	4659      	mov	r1, fp
 80040e8:	00cb      	lsls	r3, r1, #3
 80040ea:	4651      	mov	r1, sl
 80040ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f0:	4651      	mov	r1, sl
 80040f2:	00ca      	lsls	r2, r1, #3
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	4642      	mov	r2, r8
 80040fc:	189b      	adds	r3, r3, r2
 80040fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004100:	464b      	mov	r3, r9
 8004102:	460a      	mov	r2, r1
 8004104:	eb42 0303 	adc.w	r3, r2, r3
 8004108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	663b      	str	r3, [r7, #96]	; 0x60
 8004114:	667a      	str	r2, [r7, #100]	; 0x64
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004122:	4649      	mov	r1, r9
 8004124:	008b      	lsls	r3, r1, #2
 8004126:	4641      	mov	r1, r8
 8004128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412c:	4641      	mov	r1, r8
 800412e:	008a      	lsls	r2, r1, #2
 8004130:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004134:	f7fc fd40 	bl	8000bb8 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <UART_SetConfig+0x4e4>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a08      	ldr	r2, [pc, #32]	; (8004174 <UART_SetConfig+0x4e4>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4422      	add	r2, r4
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004172:	bf00      	nop
 8004174:	51eb851f 	.word	0x51eb851f

08004178 <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8004178:	b490      	push	{r4, r7}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4623      	mov	r3, r4
 8004188:	80fb      	strh	r3, [r7, #6]
 800418a:	4603      	mov	r3, r0
 800418c:	80bb      	strh	r3, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	807b      	strh	r3, [r7, #2]
 8004192:	4613      	mov	r3, r2
 8004194:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	88bb      	ldrh	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	8a39      	ldrh	r1, [r7, #16]
 800419e:	883a      	ldrh	r2, [r7, #0]
 80041a0:	1a8a      	subs	r2, r1, r2
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	8879      	ldrh	r1, [r7, #2]
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	1ac9      	subs	r1, r1, r3
 80041ac:	883b      	ldrh	r3, [r7, #0]
 80041ae:	440b      	add	r3, r1
 80041b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80041b4:	b29b      	uxth	r3, r3
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc90      	pop	{r4, r7}
 80041be:	4770      	bx	lr

080041c0 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <gpio_clk_en+0x78>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d106      	bne.n	80041de <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 80041d0:	4b1a      	ldr	r3, [pc, #104]	; (800423c <gpio_clk_en+0x7c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <gpio_clk_en+0x7c>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 80041dc:	e026      	b.n	800422c <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a17      	ldr	r2, [pc, #92]	; (8004240 <gpio_clk_en+0x80>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d106      	bne.n	80041f4 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <gpio_clk_en+0x7c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <gpio_clk_en+0x7c>)
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80041f2:	e01b      	b.n	800422c <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <gpio_clk_en+0x84>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d106      	bne.n	800420a <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <gpio_clk_en+0x7c>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	4a0e      	ldr	r2, [pc, #56]	; (800423c <gpio_clk_en+0x7c>)
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004208:	e010      	b.n	800422c <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <gpio_clk_en+0x88>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d106      	bne.n	8004220 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <gpio_clk_en+0x7c>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <gpio_clk_en+0x7c>)
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800421e:	e005      	b.n	800422c <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <gpio_clk_en+0x7c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <gpio_clk_en+0x7c>)
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40020000 	.word	0x40020000
 800423c:	40023800 	.word	0x40023800
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00

0800424c <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d117      	bne.n	8004290 <gpio_config+0x44>
		gpio_clk_en(port);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ffad 	bl	80041c0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f846 	bl	80042fc <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f85b 	bl	8004330 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f870 	bl	8004364 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f885 	bl	8004398 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 800428e:	e031      	b.n	80042f4 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <gpio_config+0x66>
		gpio_clk_en(port);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff92 	bl	80041c0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f82b 	bl	80042fc <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f85a 	bl	8004364 <gpio_PUPD>
}
 80042b0:	e020      	b.n	80042f4 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d112      	bne.n	80042de <gpio_config+0x92>
		gpio_clk_en(port);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff81 	bl	80041c0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f81a 	bl	80042fc <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f849 	bl	8004364 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f85e 	bl	8004398 <gpio_PHPL_OD>
}
 80042dc:	e00a      	b.n	80042f4 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d107      	bne.n	80042f4 <gpio_config+0xa8>
		gpio_clk_en(port);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff ff6b 	bl	80041c0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f804 	bl	80042fc <gpio_moder>
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <gpio_moder+0x30>)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	431a      	orrs	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20002a1c 	.word	0x20002a1c

08004330 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	4907      	ldr	r1, [pc, #28]	; (8004360 <gpio_speed+0x30>)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	431a      	orrs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20002a1c 	.word	0x20002a1c

08004364 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4907      	ldr	r1, [pc, #28]	; (8004394 <gpio_PUPD+0x30>)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	60da      	str	r2, [r3, #12]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	20002a1c 	.word	0x20002a1c

08004398 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	d80a      	bhi.n	80043ea <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 80043e8:	e00a      	b.n	8004400 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3b08      	subs	r3, #8
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8004420:	2201      	movs	r2, #1
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	461a      	mov	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 800442e:	e007      	b.n	8004440 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3310      	adds	r3, #16
 8004434:	2201      	movs	r2, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	619a      	str	r2, [r3, #24]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f818 	bl	8004490 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f842 	bl	80044f4 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8004470:	69f9      	ldr	r1, [r7, #28]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f884 	bl	8004580 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004480:	f043 030c 	orr.w	r3, r3, #12
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	60d3      	str	r3, [r2, #12]

}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <USART_CLK_EN+0x54>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d106      	bne.n	80044ae <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <USART_CLK_EN+0x58>)
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <USART_CLK_EN+0x58>)
 80044a6:	f043 0310 	orr.w	r3, r3, #16
 80044aa:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 80044ac:	e014      	b.n	80044d8 <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <USART_CLK_EN+0x5c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d106      	bne.n	80044c4 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <USART_CLK_EN+0x58>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <USART_CLK_EN+0x58>)
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80044c2:	e009      	b.n	80044d8 <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <USART_CLK_EN+0x60>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d105      	bne.n	80044d8 <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <USART_CLK_EN+0x58>)
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <USART_CLK_EN+0x58>)
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40011000 	.word	0x40011000
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40004400 	.word	0x40004400
 80044f0:	40011400 	.word	0x40011400

080044f4 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004502:	2300      	movs	r3, #0
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	2300      	movs	r3, #0
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2302      	movs	r3, #2
 800450c:	2202      	movs	r2, #2
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f7ff fe9b 	bl	800424c <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004516:	2300      	movs	r3, #0
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2302      	movs	r3, #2
 8004520:	2202      	movs	r2, #2
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fe91 	bl	800424c <gpio_config>

	if (usart == USART1) {
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a11      	ldr	r2, [pc, #68]	; (8004574 <USART_PIN_CONFIG+0x80>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01b      	beq.n	800456a <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a10      	ldr	r2, [pc, #64]	; (8004578 <USART_PIN_CONFIG+0x84>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d117      	bne.n	800456a <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a0f      	ldr	r2, [pc, #60]	; (800457c <USART_PIN_CONFIG+0x88>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d107      	bne.n	8004552 <USART_PIN_CONFIG+0x5e>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d104      	bne.n	8004552 <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 8004548:	2207      	movs	r2, #7
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	68b8      	ldr	r0, [r7, #8]
 800454e:	f7ff ff38 	bl	80043c2 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a09      	ldr	r2, [pc, #36]	; (800457c <USART_PIN_CONFIG+0x88>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d107      	bne.n	800456a <USART_PIN_CONFIG+0x76>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d104      	bne.n	800456a <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 8004560:	2207      	movs	r2, #7
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff2c 	bl	80043c2 <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40011000 	.word	0x40011000
 8004578:	40004400 	.word	0x40004400
 800457c:	40020000 	.word	0x40020000

08004580 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <USART_BDR_SEL+0x30>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20002a10 	.word	0x20002a10

080045b4 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e017      	b.n	80045fc <USART_WRITE+0x48>
		if (len == 1) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d103      	bne.n	80045da <USART_WRITE+0x26>
			usart->DR = ch;
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e006      	b.n	80045e8 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 80045e8:	bf00      	nop
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f9      	beq.n	80045ea <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	3301      	adds	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d8e3      	bhi.n	80045cc <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004614:	b40f      	push	{r0, r1, r2, r3}
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800462a:	480a      	ldr	r0, [pc, #40]	; (8004654 <print+0x40>)
 800462c:	f002 fac6 	bl	8006bbc <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <print+0x40>)
 8004632:	f7fb fdd5 	bl	80001e0 <strlen>
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	2364      	movs	r3, #100	; 0x64
 800463e:	4905      	ldr	r1, [pc, #20]	; (8004654 <print+0x40>)
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <print+0x44>)
 8004642:	f7ff ffb7 	bl	80045b4 <USART_WRITE>

}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004650:	b004      	add	sp, #16
 8004652:	4770      	bx	lr
 8004654:	20002d40 	.word	0x20002d40
 8004658:	40004400 	.word	0x40004400

0800465c <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	2303      	movs	r3, #3
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2302      	movs	r3, #2
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <uart_print_config+0x24>)
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <uart_print_config+0x24>)
 8004672:	4804      	ldr	r0, [pc, #16]	; (8004684 <uart_print_config+0x28>)
 8004674:	f7ff feea 	bl	800444c <USART_INIT>
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40020000 	.word	0x40020000
 8004684:	40004400 	.word	0x40004400

08004688 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af04      	add	r7, sp, #16
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	b29a      	uxth	r2, r3
 8004698:	2364      	movs	r3, #100	; 0x64
 800469a:	9302      	str	r3, [sp, #8]
 800469c:	2303      	movs	r3, #3
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2301      	movs	r3, #1
 80046a8:	21b4      	movs	r1, #180	; 0xb4
 80046aa:	480b      	ldr	r0, [pc, #44]	; (80046d8 <mlx90614_read16+0x50>)
 80046ac:	f7fe f832 	bl	8002714 <HAL_I2C_Mem_Read>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <mlx90614_read16+0x32>
    return false;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e009      	b.n	80046ce <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80046ba:	7b3b      	ldrb	r3, [r7, #12]
 80046bc:	b21a      	sxth	r2, r3
 80046be:	7b7b      	ldrb	r3, [r7, #13]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b21a      	sxth	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	801a      	strh	r2, [r3, #0]
  return true;
 80046cc:	2301      	movs	r3, #1
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20002c90 	.word	0x20002c90

080046dc <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <mlx90614_calcTemperature+0x90>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 80046ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fa:	edc7 7a03 	vstr	s15, [r7, #12]
 80046fe:	e02b      	b.n	8004758 <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8004700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004770 <mlx90614_calcTemperature+0x94>
 8004710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004714:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <mlx90614_calcTemperature+0x90>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d01b      	beq.n	8004758 <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 8004720:	edd7 7a03 	vldr	s15, [r7, #12]
 8004724:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004774 <mlx90614_calcTemperature+0x98>
 8004728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800472c:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <mlx90614_calcTemperature+0x90>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d10f      	bne.n	8004758 <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8004738:	edd7 7a03 	vldr	s15, [r7, #12]
 800473c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004740:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004744:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800474c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004778 <mlx90614_calcTemperature+0x9c>
 8004750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004754:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	ee07 3a90 	vmov	s15, r3
}
 800475e:	eeb0 0a67 	vmov.f32	s0, s15
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20002e40 	.word	0x20002e40
 8004770:	3ca3d70a 	.word	0x3ca3d70a
 8004774:	43889333 	.word	0x43889333
 8004778:	42000000 	.word	0x42000000

0800477c <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 8004780:	2234      	movs	r2, #52	; 0x34
 8004782:	2100      	movs	r1, #0
 8004784:	4821      	ldr	r0, [pc, #132]	; (800480c <mlx90614_init+0x90>)
 8004786:	f001 fd7b 	bl	8006280 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <mlx90614_init+0x90>)
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 8004790:	2364      	movs	r3, #100	; 0x64
 8004792:	2201      	movs	r2, #1
 8004794:	21b4      	movs	r1, #180	; 0xb4
 8004796:	481e      	ldr	r0, [pc, #120]	; (8004810 <mlx90614_init+0x94>)
 8004798:	f7fe f9e2 	bl	8002b60 <HAL_I2C_IsDeviceReady>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <mlx90614_init+0x2a>
    return false;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e030      	b.n	8004808 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80047a6:	491b      	ldr	r1, [pc, #108]	; (8004814 <mlx90614_init+0x98>)
 80047a8:	2025      	movs	r0, #37	; 0x25
 80047aa:	f7ff ff6d 	bl	8004688 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80047ae:	2000      	movs	r0, #0
 80047b0:	f000 f832 	bl	8004818 <mlx90614_readID>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f083 0301 	eor.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <mlx90614_init+0x48>
    return false;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e021      	b.n	8004808 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 80047c4:	2000      	movs	r0, #0
 80047c6:	f000 f861 	bl	800488c <mlx90614_getEmissivity>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <mlx90614_init+0x5e>
    return false;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e016      	b.n	8004808 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 80047da:	2000      	movs	r0, #0
 80047dc:	f000 f890 	bl	8004900 <mlx90614_getMax>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f083 0301 	eor.w	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <mlx90614_init+0x74>
    return false;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e00b      	b.n	8004808 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 80047f0:	2000      	movs	r0, #0
 80047f2:	f000 f8a9 	bl	8004948 <mlx90614_getMin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f083 0301 	eor.w	r3, r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <mlx90614_init+0x8a>
    return false;
 8004802:	2300      	movs	r3, #0
 8004804:	e000      	b.n	8004808 <mlx90614_init+0x8c>

  return true;
 8004806:	2301      	movs	r3, #1
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20002e40 	.word	0x20002e40
 8004810:	20002c90 	.word	0x20002c90
 8004814:	20002e70 	.word	0x20002e70

08004818 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e028      	b.n	8004878 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	333c      	adds	r3, #60	; 0x3c
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f107 020a 	add.w	r2, r7, #10
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff25 	bl	8004688 <mlx90614_read16>
 800483e:	4603      	mov	r3, r0
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <mlx90614_readID+0x36>
			return false;
 800484a:	2300      	movs	r3, #0
 800484c:	e018      	b.n	8004880 <mlx90614_readID+0x68>
    if(id != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d006      	beq.n	8004862 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004860:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 8004862:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004866:	b299      	uxth	r1, r3
 8004868:	4a07      	ldr	r2, [pc, #28]	; (8004888 <mlx90614_readID+0x70>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3314      	adds	r3, #20
 800486e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b03      	cmp	r3, #3
 800487c:	ddd3      	ble.n	8004826 <mlx90614_readID+0xe>
	}
	return true;
 800487e:	2301      	movs	r3, #1
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20002e40 	.word	0x20002e40

0800488c <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8004894:	4917      	ldr	r1, [pc, #92]	; (80048f4 <mlx90614_getEmissivity+0x68>)
 8004896:	2024      	movs	r0, #36	; 0x24
 8004898:	f7ff fef6 	bl	8004688 <mlx90614_read16>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d022      	beq.n	80048e8 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <mlx90614_getEmissivity+0x6c>)
 80048a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048b2:	eddf 6a12 	vldr	s13, [pc, #72]	; 80048fc <mlx90614_getEmissivity+0x70>
 80048b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <mlx90614_getEmissivity+0x6c>)
 80048bc:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <mlx90614_getEmissivity+0x6c>)
 80048c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048d6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80048fc <mlx90614_getEmissivity+0x70>
 80048da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <mlx90614_getEmissivity+0x5e>
	}
	return false;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20002e42 	.word	0x20002e42
 80048f8:	20002e40 	.word	0x20002e40
 80048fc:	477fff00 	.word	0x477fff00

08004900 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8004908:	490d      	ldr	r1, [pc, #52]	; (8004940 <mlx90614_getMax+0x40>)
 800490a:	2020      	movs	r0, #32
 800490c:	f7ff febc 	bl	8004688 <mlx90614_read16>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <mlx90614_getMax+0x44>)
 800491e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <mlx90614_getMax+0x36>
	}
	return false;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20002e4a 	.word	0x20002e4a
 8004944:	20002e40 	.word	0x20002e40

08004948 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8004950:	490d      	ldr	r1, [pc, #52]	; (8004988 <mlx90614_getMin+0x40>)
 8004952:	2021      	movs	r0, #33	; 0x21
 8004954:	f7ff fe98 	bl	8004688 <mlx90614_read16>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <mlx90614_getMin+0x44>)
 8004966:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <mlx90614_getMin+0x36>
	}
	return false;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20002e4c 	.word	0x20002e4c
 800498c:	20002e40 	.word	0x20002e40

08004990 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 8004998:	4911      	ldr	r1, [pc, #68]	; (80049e0 <mlx90614_getObject1+0x50>)
 800499a:	2007      	movs	r0, #7
 800499c:	f7ff fe74 	bl	8004688 <mlx90614_read16>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <mlx90614_getObject1+0x54>)
 80049a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da01      	bge.n	80049b4 <mlx90614_getObject1+0x24>
			return false;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e010      	b.n	80049d6 <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <mlx90614_getObject1+0x54>)
 80049bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fe8b 	bl	80046dc <mlx90614_calcTemperature>
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <mlx90614_getObject1+0x46>
	}
	return false;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20002e46 	.word	0x20002e46
 80049e4:	20002e40 	.word	0x20002e40

080049e8 <LCD_DrawButton1>:
#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw,
		uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 8004a02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d113      	bne.n	8004a32 <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	3305      	adds	r3, #5
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	b218      	sxth	r0, r3
 8004a12:	893b      	ldrh	r3, [r7, #8]
 8004a14:	3305      	adds	r3, #5
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	b219      	sxth	r1, r3
 8004a1a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	f000 ff75 	bl	800591c <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8004a32:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004a36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a3a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004a3e:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004a42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f000 ff65 	bl	800591c <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8004a52:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a5a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004a5e:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	f000 fb7a 	bl	8005168 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8004a74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a84:	4413      	add	r3, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f001 f9d4 	bl	8005e34 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8004a8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f9e7 	bl	8005e64 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8004a96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f9f7 	bl	8005e90 <LCD_SetTextColor>
	LCD_Printf(c);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f001 f8de 	bl	8005c64 <LCD_Printf>

}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}

08004ab0 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color,
		int16_t BorderSize) {
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	80fb      	strh	r3, [r7, #6]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	80bb      	strh	r3, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	807b      	strh	r3, [r7, #2]
 8004aca:	4613      	mov	r3, r2
 8004acc:	803b      	strh	r3, [r7, #0]

	for (uint8_t i = 0; i < BorderSize; i++) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e00f      	b.n	8004af4 <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	88bb      	ldrh	r3, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b219      	sxth	r1, r3
 8004ae0:	883b      	ldrh	r3, [r7, #0]
 8004ae2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ae6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004aea:	f000 fa61 	bl	8004fb0 <LCD_DrawFastHLine>
	for (uint8_t i = 0; i < BorderSize; i++) {
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	3301      	adds	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	dbea      	blt.n	8004ad4 <LCD_DrawHBorder+0x24>
	}

}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	t *= 20;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8004b1c:	e003      	b.n	8004b26 <delay+0x1e>
		__asm("nop");
 8004b1e:	bf00      	nop
	for (; t > 0; t--) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f8      	bne.n	8004b1e <delay+0x16>
	}
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af02      	add	r7, sp, #8

	gpio_clk_en(PORTB);
 8004b42:	4845      	ldr	r0, [pc, #276]	; (8004c58 <GPIO_Init+0x11c>)
 8004b44:	f7ff fb3c 	bl	80041c0 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	2201      	movs	r2, #1
 8004b54:	2101      	movs	r1, #1
 8004b56:	4841      	ldr	r0, [pc, #260]	; (8004c5c <GPIO_Init+0x120>)
 8004b58:	f7ff fb78 	bl	800424c <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	2201      	movs	r2, #1
 8004b68:	2107      	movs	r1, #7
 8004b6a:	483c      	ldr	r0, [pc, #240]	; (8004c5c <GPIO_Init+0x120>)
 8004b6c:	f7ff fb6e 	bl	800424c <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004b70:	2300      	movs	r3, #0
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	2300      	movs	r3, #0
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4838      	ldr	r0, [pc, #224]	; (8004c60 <GPIO_Init+0x124>)
 8004b80:	f7ff fb64 	bl	800424c <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004b84:	2300      	movs	r3, #0
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2201      	movs	r2, #1
 8004b90:	2101      	movs	r1, #1
 8004b92:	4833      	ldr	r0, [pc, #204]	; (8004c60 <GPIO_Init+0x124>)
 8004b94:	f7ff fb5a 	bl	800424c <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	482e      	ldr	r0, [pc, #184]	; (8004c60 <GPIO_Init+0x124>)
 8004ba8:	f7ff fb50 	bl	800424c <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004bac:	2300      	movs	r3, #0
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	2108      	movs	r1, #8
 8004bba:	4829      	ldr	r0, [pc, #164]	; (8004c60 <GPIO_Init+0x124>)
 8004bbc:	f7ff fb46 	bl	800424c <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2201      	movs	r2, #1
 8004bcc:	2109      	movs	r1, #9
 8004bce:	4824      	ldr	r0, [pc, #144]	; (8004c60 <GPIO_Init+0x124>)
 8004bd0:	f7ff fb3c 	bl	800424c <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2201      	movs	r2, #1
 8004be0:	210a      	movs	r1, #10
 8004be2:	481f      	ldr	r0, [pc, #124]	; (8004c60 <GPIO_Init+0x124>)
 8004be4:	f7ff fb32 	bl	800424c <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
//	PORTB->MODER &= ~((1 << 0) | (1 << 3) | (1 << 4) | (1 << 5) | (1 << 10));
	PORTB->MODER = 0;
 8004be8:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <GPIO_Init+0x11c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
	gpio_config(PORTB, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4816      	ldr	r0, [pc, #88]	; (8004c58 <GPIO_Init+0x11c>)
 8004bfe:	f7ff fb25 	bl	800424c <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004c02:	2300      	movs	r3, #0
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2103      	movs	r1, #3
 8004c10:	4811      	ldr	r0, [pc, #68]	; (8004c58 <GPIO_Init+0x11c>)
 8004c12:	f7ff fb1b 	bl	800424c <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004c16:	2300      	movs	r3, #0
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2201      	movs	r2, #1
 8004c22:	2104      	movs	r1, #4
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <GPIO_Init+0x11c>)
 8004c26:	f7ff fb11 	bl	800424c <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	2201      	movs	r2, #1
 8004c36:	2105      	movs	r1, #5
 8004c38:	4807      	ldr	r0, [pc, #28]	; (8004c58 <GPIO_Init+0x11c>)
 8004c3a:	f7ff fb07 	bl	800424c <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	2201      	movs	r2, #1
 8004c4a:	210a      	movs	r1, #10
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <GPIO_Init+0x11c>)
 8004c4e:	f7ff fafd 	bl	800424c <gpio_config>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8004c52:	bf00      	nop
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020000 	.word	0x40020000

08004c64 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <LCD_Begin+0xc0>)
 8004c6c:	22f0      	movs	r2, #240	; 0xf0
 8004c6e:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <LCD_Begin+0xc4>)
 8004c72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c76:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <LCD_Begin+0xc8>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <LCD_Begin+0xcc>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <LCD_Begin+0xcc>)
 8004c86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004c8a:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <LCD_Begin+0xd0>)
 8004c8c:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8004c8e:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <LCD_Begin+0xd4>)
 8004c90:	2204      	movs	r2, #4
 8004c92:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8004c94:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <LCD_Begin+0xd8>)
 8004c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <LCD_Begin+0xd8>)
 8004c9e:	881a      	ldrh	r2, [r3, #0]
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <LCD_Begin+0xdc>)
 8004ca2:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8004ca4:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <LCD_Begin+0xe0>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8004cae:	f7ff ff45 	bl	8004b3c <GPIO_Init>

	LCD_Reset();
 8004cb2:	f001 f86b 	bl	8005d8c <LCD_Reset>

	LCD_CS_LOW();
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4823      	ldr	r0, [pc, #140]	; (8004d48 <LCD_Begin+0xe4>)
 8004cbc:	f7ff fba6 	bl	800440c <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8004cc0:	e01d      	b.n	8004cfe <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	71fa      	strb	r2, [r7, #7]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <LCD_Begin+0xe8>)
 8004ccc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004cd0:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	71fa      	strb	r2, [r7, #7]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <LCD_Begin+0xe8>)
 8004cdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004ce0:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8004ce2:	88bb      	ldrh	r3, [r7, #4]
 8004ce4:	2bff      	cmp	r3, #255	; 0xff
 8004ce6:	d104      	bne.n	8004cf2 <LCD_Begin+0x8e>
			delay(d);
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff0c 	bl	8004b08 <delay>
 8004cf0:	e005      	b.n	8004cfe <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	88bb      	ldrh	r3, [r7, #4]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fa03 	bl	8006104 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	2b83      	cmp	r3, #131	; 0x83
 8004d02:	d9de      	bls.n	8004cc2 <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <LCD_Begin+0xc8>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f8d9 	bl	8005ec0 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8004d0e:	f240 133f 	movw	r3, #319	; 0x13f
 8004d12:	22ef      	movs	r2, #239	; 0xef
 8004d14:	2100      	movs	r1, #0
 8004d16:	2000      	movs	r0, #0
 8004d18:	f001 f908 	bl	8005f2c <LCD_SetAddrWindow>
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20002e74 	.word	0x20002e74
 8004d28:	20002e76 	.word	0x20002e76
 8004d2c:	20002e81 	.word	0x20002e81
 8004d30:	20002e78 	.word	0x20002e78
 8004d34:	20002e7a 	.word	0x20002e7a
 8004d38:	20002e80 	.word	0x20002e80
 8004d3c:	20002e7e 	.word	0x20002e7e
 8004d40:	20002e7c 	.word	0x20002e7c
 8004d44:	20002e82 	.word	0x20002e82
 8004d48:	40020400 	.word	0x40020400
 8004d4c:	080093f4 	.word	0x080093f4

08004d50 <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	71bb      	strb	r3, [r7, #6]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	79bb      	ldrb	r3, [r7, #6]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	797b      	ldrb	r3, [r7, #5]
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	b29b      	uxth	r3, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
 8004da6:	460b      	mov	r3, r1
 8004da8:	80bb      	strh	r3, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8004dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db52      	blt.n	8004e5c <LCD_DrawPixel+0xc0>
 8004db6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	db4e      	blt.n	8004e5c <LCD_DrawPixel+0xc0>
 8004dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc2:	2bef      	cmp	r3, #239	; 0xef
 8004dc4:	dc4a      	bgt.n	8004e5c <LCD_DrawPixel+0xc0>
 8004dc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004dca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004dce:	da45      	bge.n	8004e5c <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4823      	ldr	r0, [pc, #140]	; (8004e64 <LCD_DrawPixel+0xc8>)
 8004dd6:	f7ff fb19 	bl	800440c <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <LCD_DrawPixel+0xcc>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d01c      	beq.n	8004e1c <LCD_DrawPixel+0x80>
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	dc25      	bgt.n	8004e32 <LCD_DrawPixel+0x96>
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d002      	beq.n	8004df0 <LCD_DrawPixel+0x54>
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d00a      	beq.n	8004e04 <LCD_DrawPixel+0x68>
 8004dee:	e020      	b.n	8004e32 <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8004df4:	88bb      	ldrh	r3, [r7, #4]
 8004df6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	80fb      	strh	r3, [r7, #6]
		y = t;
 8004dfe:	89fb      	ldrh	r3, [r7, #14]
 8004e00:	80bb      	strh	r3, [r7, #4]
		break;
 8004e02:	e016      	b.n	8004e32 <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8004e0e:	88bb      	ldrh	r3, [r7, #4]
 8004e10:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004e14:	3301      	adds	r3, #1
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	80bb      	strh	r3, [r7, #4]
		break;
 8004e1a:	e00a      	b.n	8004e32 <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	81fb      	strh	r3, [r7, #14]
		x = y;
 8004e20:	88bb      	ldrh	r3, [r7, #4]
 8004e22:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	80bb      	strh	r3, [r7, #4]
		break;
 8004e30:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	4619      	mov	r1, r3
 8004e36:	2020      	movs	r0, #32
 8004e38:	f001 f964 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8004e3c:	88bb      	ldrh	r3, [r7, #4]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	2021      	movs	r0, #33	; 0x21
 8004e42:	f001 f95f 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2022      	movs	r0, #34	; 0x22
 8004e4c:	f001 f95a 	bl	8006104 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8004e50:	2201      	movs	r2, #1
 8004e52:	2100      	movs	r1, #0
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <LCD_DrawPixel+0xc8>)
 8004e56:	f7ff fad9 	bl	800440c <gpio_write>
 8004e5a:	e000      	b.n	8004e5e <LCD_DrawPixel+0xc2>
		return;
 8004e5c:	bf00      	nop
}
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40020400 	.word	0x40020400
 8004e68:	20002e81 	.word	0x20002e81

08004e6c <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b089      	sub	sp, #36	; 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	80fb      	strh	r3, [r7, #6]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80bb      	strh	r3, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	807b      	strh	r3, [r7, #2]
 8004e86:	4613      	mov	r3, r2
 8004e88:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8004e8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004e98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004e9c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea4:	1acb      	subs	r3, r1, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfb8      	it	lt
 8004eaa:	425b      	neglt	r3, r3
 8004eac:	429a      	cmp	r2, r3
 8004eae:	bfcc      	ite	gt
 8004eb0:	2301      	movgt	r3, #1
 8004eb2:	2300      	movle	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8004eb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <LCD_DrawLine+0x6c>
		swap(x1, y1);
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	833b      	strh	r3, [r7, #24]
 8004ec4:	88bb      	ldrh	r3, [r7, #4]
 8004ec6:	80fb      	strh	r3, [r7, #6]
 8004ec8:	8b3b      	ldrh	r3, [r7, #24]
 8004eca:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	82fb      	strh	r3, [r7, #22]
 8004ed0:	883b      	ldrh	r3, [r7, #0]
 8004ed2:	807b      	strh	r3, [r7, #2]
 8004ed4:	8afb      	ldrh	r3, [r7, #22]
 8004ed6:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 8004ed8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	dd0b      	ble.n	8004efc <LCD_DrawLine+0x90>
		swap(x1, x2);
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	82bb      	strh	r3, [r7, #20]
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	80fb      	strh	r3, [r7, #6]
 8004eec:	8abb      	ldrh	r3, [r7, #20]
 8004eee:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	827b      	strh	r3, [r7, #18]
 8004ef4:	883b      	ldrh	r3, [r7, #0]
 8004ef6:	80bb      	strh	r3, [r7, #4]
 8004ef8:	8a7b      	ldrh	r3, [r7, #18]
 8004efa:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8004f06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bfb8      	it	lt
 8004f14:	425b      	neglt	r3, r3
 8004f16:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8004f18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f1c:	0fda      	lsrs	r2, r3, #31
 8004f1e:	4413      	add	r3, r2
 8004f20:	105b      	asrs	r3, r3, #1
 8004f22:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 8004f24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004f28:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	da02      	bge.n	8004f36 <LCD_DrawLine+0xca>
		ystep = 1;
 8004f30:	2301      	movs	r3, #1
 8004f32:	83bb      	strh	r3, [r7, #28]
 8004f34:	e031      	b.n	8004f9a <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 8004f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f3a:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 8004f3c:	e02d      	b.n	8004f9a <LCD_DrawLine+0x12e>
		if (steep) {
 8004f3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 8004f46:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004f48:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004f4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff23 	bl	8004d9c <LCD_DrawPixel>
 8004f56:	e007      	b.n	8004f68 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 8004f58:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004f5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff ff1a 	bl	8004d9c <LCD_DrawPixel>
		}
		err -= dy;
 8004f68:	8bfa      	ldrh	r2, [r7, #30]
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8004f72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da09      	bge.n	8004f8e <LCD_DrawLine+0x122>
			y1 += ystep;
 8004f7a:	88ba      	ldrh	r2, [r7, #4]
 8004f7c:	8bbb      	ldrh	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8004f84:	8bfa      	ldrh	r2, [r7, #30]
 8004f86:	8a3b      	ldrh	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 8004f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	80fb      	strh	r3, [r7, #6]
 8004f9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	ddcb      	ble.n	8004f3e <LCD_DrawLine+0xd2>
		}
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3724      	adds	r7, #36	; 0x24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	80fb      	strh	r3, [r7, #6]
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	80bb      	strh	r3, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	807b      	strh	r3, [r7, #2]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8004fce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dd5a      	ble.n	800508c <LCD_DrawFastHLine+0xdc>
 8004fd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db56      	blt.n	800508c <LCD_DrawFastHLine+0xdc>
 8004fde:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <LCD_DrawFastHLine+0xe4>)
 8004fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	da4f      	bge.n	800508c <LCD_DrawFastHLine+0xdc>
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <LCD_DrawFastHLine+0xe8>)
 8004fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	da48      	bge.n	800508c <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	4413      	add	r3, r2
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8005006:	81fb      	strh	r3, [r7, #14]
 8005008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db3d      	blt.n	800508c <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 8005010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005014:	2b00      	cmp	r3, #0
 8005016:	da06      	bge.n	8005026 <LCD_DrawFastHLine+0x76>
		length += x;
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	4413      	add	r3, r2
 800501e:	b29b      	uxth	r3, r3
 8005020:	807b      	strh	r3, [r7, #2]
		x = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 8005026:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <LCD_DrawFastHLine+0xe8>)
 8005028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800502c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005030:	429a      	cmp	r2, r3
 8005032:	db0d      	blt.n	8005050 <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 8005034:	4b18      	ldr	r3, [pc, #96]	; (8005098 <LCD_DrawFastHLine+0xe8>)
 8005036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 8005042:	89fa      	ldrh	r2, [r7, #14]
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8005050:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005054:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005058:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800505c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005060:	f000 ff64 	bl	8005f2c <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8005064:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005068:	883b      	ldrh	r3, [r7, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fcbb 	bl	80059e8 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <LCD_DrawFastHLine+0xe8>)
 8005074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <LCD_DrawFastHLine+0xe4>)
 800507c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005080:	3b01      	subs	r3, #1
 8005082:	2100      	movs	r1, #0
 8005084:	2000      	movs	r0, #0
 8005086:	f000 ff51 	bl	8005f2c <LCD_SetAddrWindow>
 800508a:	e000      	b.n	800508e <LCD_DrawFastHLine+0xde>
		return;
 800508c:	bf00      	nop

}
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	bd90      	pop	{r4, r7, pc}
 8005094:	20002e76 	.word	0x20002e76
 8005098:	20002e74 	.word	0x20002e74

0800509c <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b085      	sub	sp, #20
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	4623      	mov	r3, r4
 80050ac:	80fb      	strh	r3, [r7, #6]
 80050ae:	4603      	mov	r3, r0
 80050b0:	80bb      	strh	r3, [r7, #4]
 80050b2:	460b      	mov	r3, r1
 80050b4:	807b      	strh	r3, [r7, #2]
 80050b6:	4613      	mov	r3, r2
 80050b8:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 80050ba:	88ba      	ldrh	r2, [r7, #4]
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	4413      	add	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	b21c      	sxth	r4, r3
 80050c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80050d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80050d4:	883b      	ldrh	r3, [r7, #0]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	4623      	mov	r3, r4
 80050da:	f7ff fec7 	bl	8004e6c <LCD_DrawLine>
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd90      	pop	{r4, r7, pc}

080050e6 <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80050e6:	b590      	push	{r4, r7, lr}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	4604      	mov	r4, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	461a      	mov	r2, r3
 80050f4:	4623      	mov	r3, r4
 80050f6:	80fb      	strh	r3, [r7, #6]
 80050f8:	4603      	mov	r3, r0
 80050fa:	80bb      	strh	r3, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
 8005100:	4613      	mov	r3, r2
 8005102:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 8005104:	8b3b      	ldrh	r3, [r7, #24]
 8005106:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800510a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800510e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005112:	f7ff ff4d 	bl	8004fb0 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 8005116:	88ba      	ldrh	r2, [r7, #4]
 8005118:	883b      	ldrh	r3, [r7, #0]
 800511a:	4413      	add	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29b      	uxth	r3, r3
 8005122:	b219      	sxth	r1, r3
 8005124:	8b3b      	ldrh	r3, [r7, #24]
 8005126:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800512a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800512e:	f7ff ff3f 	bl	8004fb0 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 8005132:	8b3b      	ldrh	r3, [r7, #24]
 8005134:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005138:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800513c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005140:	f7ff ffac 	bl	800509c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	4413      	add	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	b218      	sxth	r0, r3
 8005152:	8b3b      	ldrh	r3, [r7, #24]
 8005154:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005158:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800515c:	f7ff ff9e 	bl	800509c <LCD_DrawFastVLine>
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}

08005168 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b085      	sub	sp, #20
 800516c:	af02      	add	r7, sp, #8
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4623      	mov	r3, r4
 8005178:	80fb      	strh	r3, [r7, #6]
 800517a:	4603      	mov	r3, r0
 800517c:	80bb      	strh	r3, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	807b      	strh	r3, [r7, #2]
 8005182:	4613      	mov	r3, r2
 8005184:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	8b3b      	ldrh	r3, [r7, #24]
 800518a:	4413      	add	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	b218      	sxth	r0, r3
 8005190:	887a      	ldrh	r2, [r7, #2]
 8005192:	8b3b      	ldrh	r3, [r7, #24]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	b21a      	sxth	r2, r3
 800519e:	8bbb      	ldrh	r3, [r7, #28]
 80051a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80051a4:	f7ff ff04 	bl	8004fb0 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	8b3b      	ldrh	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b218      	sxth	r0, r3
 80051b2:	88ba      	ldrh	r2, [r7, #4]
 80051b4:	883b      	ldrh	r3, [r7, #0]
 80051b6:	4413      	add	r3, r2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	b219      	sxth	r1, r3
 80051c0:	887a      	ldrh	r2, [r7, #2]
 80051c2:	8b3b      	ldrh	r3, [r7, #24]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	8bbb      	ldrh	r3, [r7, #28]
 80051d0:	f7ff feee 	bl	8004fb0 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 80051d4:	88ba      	ldrh	r2, [r7, #4]
 80051d6:	8b3b      	ldrh	r3, [r7, #24]
 80051d8:	4413      	add	r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	b219      	sxth	r1, r3
 80051de:	883a      	ldrh	r2, [r7, #0]
 80051e0:	8b3b      	ldrh	r3, [r7, #24]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b21a      	sxth	r2, r3
 80051ec:	8bbb      	ldrh	r3, [r7, #28]
 80051ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80051f2:	f7ff ff53 	bl	800509c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	4413      	add	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	b218      	sxth	r0, r3
 8005204:	88ba      	ldrh	r2, [r7, #4]
 8005206:	8b3b      	ldrh	r3, [r7, #24]
 8005208:	4413      	add	r3, r2
 800520a:	b29b      	uxth	r3, r3
 800520c:	b219      	sxth	r1, r3
 800520e:	883a      	ldrh	r2, [r7, #0]
 8005210:	8b3b      	ldrh	r3, [r7, #24]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	b29b      	uxth	r3, r3
 800521a:	b21a      	sxth	r2, r3
 800521c:	8bbb      	ldrh	r3, [r7, #28]
 800521e:	f7ff ff3d 	bl	800509c <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	8b3b      	ldrh	r3, [r7, #24]
 8005226:	4413      	add	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	b218      	sxth	r0, r3
 800522c:	88ba      	ldrh	r2, [r7, #4]
 800522e:	8b3b      	ldrh	r3, [r7, #24]
 8005230:	4413      	add	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	b219      	sxth	r1, r3
 8005236:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800523a:	8bbb      	ldrh	r3, [r7, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2301      	movs	r3, #1
 8005240:	f000 f84b 	bl	80052da <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	4413      	add	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	8b3b      	ldrh	r3, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	b218      	sxth	r0, r3
 8005258:	88ba      	ldrh	r2, [r7, #4]
 800525a:	8b3b      	ldrh	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	b219      	sxth	r1, r3
 8005262:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005266:	8bbb      	ldrh	r3, [r7, #28]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	2302      	movs	r3, #2
 800526c:	f000 f835 	bl	80052da <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	4413      	add	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	8b3b      	ldrh	r3, [r7, #24]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29b      	uxth	r3, r3
 8005282:	b218      	sxth	r0, r3
 8005284:	88ba      	ldrh	r2, [r7, #4]
 8005286:	883b      	ldrh	r3, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	8b3b      	ldrh	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	b219      	sxth	r1, r3
 8005298:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800529c:	8bbb      	ldrh	r3, [r7, #28]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	2304      	movs	r3, #4
 80052a2:	f000 f81a 	bl	80052da <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	8b3b      	ldrh	r3, [r7, #24]
 80052aa:	4413      	add	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	b218      	sxth	r0, r3
 80052b0:	88ba      	ldrh	r2, [r7, #4]
 80052b2:	883b      	ldrh	r3, [r7, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	8b3b      	ldrh	r3, [r7, #24]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b219      	sxth	r1, r3
 80052c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80052c8:	8bbb      	ldrh	r3, [r7, #28]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2308      	movs	r3, #8
 80052ce:	f000 f804 	bl	80052da <LCD_DrawCircleHelper>
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}

080052da <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 80052da:	b590      	push	{r4, r7, lr}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	4604      	mov	r4, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	461a      	mov	r2, r3
 80052e8:	4623      	mov	r3, r4
 80052ea:	80fb      	strh	r3, [r7, #6]
 80052ec:	4603      	mov	r3, r0
 80052ee:	80bb      	strh	r3, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	f1c3 0301 	rsb	r3, r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005306:	887b      	ldrh	r3, [r7, #2]
 8005308:	461a      	mov	r2, r3
 800530a:	03d2      	lsls	r2, r2, #15
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005318:	887b      	ldrh	r3, [r7, #2]
 800531a:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800531c:	e0a5      	b.n	800546a <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 800531e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db0e      	blt.n	8005344 <LCD_DrawCircleHelper+0x6a>
			y--;
 8005326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005332:	8a7b      	ldrh	r3, [r7, #18]
 8005334:	3302      	adds	r3, #2
 8005336:	b29b      	uxth	r3, r3
 8005338:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800533a:	8afa      	ldrh	r2, [r7, #22]
 800533c:	8a7b      	ldrh	r3, [r7, #18]
 800533e:	4413      	add	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005344:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005348:	b29b      	uxth	r3, r3
 800534a:	3301      	adds	r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005350:	8abb      	ldrh	r3, [r7, #20]
 8005352:	3302      	adds	r3, #2
 8005354:	b29b      	uxth	r3, r3
 8005356:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005358:	8afa      	ldrh	r2, [r7, #22]
 800535a:	8abb      	ldrh	r3, [r7, #20]
 800535c:	4413      	add	r3, r2
 800535e:	b29b      	uxth	r3, r3
 8005360:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8005362:	787b      	ldrb	r3, [r7, #1]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	8a3b      	ldrh	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	b218      	sxth	r0, r3
 8005376:	88ba      	ldrh	r2, [r7, #4]
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	4413      	add	r3, r2
 800537c:	b29b      	uxth	r3, r3
 800537e:	b21b      	sxth	r3, r3
 8005380:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005382:	4619      	mov	r1, r3
 8005384:	f7ff fd0a 	bl	8004d9c <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	89fb      	ldrh	r3, [r7, #14]
 800538c:	4413      	add	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	b218      	sxth	r0, r3
 8005392:	88ba      	ldrh	r2, [r7, #4]
 8005394:	8a3b      	ldrh	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	b21b      	sxth	r3, r3
 800539c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800539e:	4619      	mov	r1, r3
 80053a0:	f7ff fcfc 	bl	8004d9c <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 80053a4:	787b      	ldrb	r3, [r7, #1]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	8a3b      	ldrh	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	b218      	sxth	r0, r3
 80053b8:	88ba      	ldrh	r2, [r7, #4]
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7ff fce9 	bl	8004d9c <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	4413      	add	r3, r2
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b218      	sxth	r0, r3
 80053d4:	88ba      	ldrh	r2, [r7, #4]
 80053d6:	8a3b      	ldrh	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	b21b      	sxth	r3, r3
 80053de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7ff fcdb 	bl	8004d9c <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 80053e6:	787b      	ldrb	r3, [r7, #1]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	89fb      	ldrh	r3, [r7, #14]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	b218      	sxth	r0, r3
 80053fa:	88ba      	ldrh	r2, [r7, #4]
 80053fc:	8a3b      	ldrh	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	b21b      	sxth	r3, r3
 8005404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005406:	4619      	mov	r1, r3
 8005408:	f7ff fcc8 	bl	8004d9c <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	8a3b      	ldrh	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	b218      	sxth	r0, r3
 8005416:	88ba      	ldrh	r2, [r7, #4]
 8005418:	89fb      	ldrh	r3, [r7, #14]
 800541a:	4413      	add	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	b21b      	sxth	r3, r3
 8005420:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005422:	4619      	mov	r1, r3
 8005424:	f7ff fcba 	bl	8004d9c <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01b      	beq.n	800546a <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	b29b      	uxth	r3, r3
 800543a:	b218      	sxth	r0, r3
 800543c:	88ba      	ldrh	r2, [r7, #4]
 800543e:	8a3b      	ldrh	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	b29b      	uxth	r3, r3
 8005444:	b21b      	sxth	r3, r3
 8005446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005448:	4619      	mov	r1, r3
 800544a:	f7ff fca7 	bl	8004d9c <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	8a3b      	ldrh	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	b218      	sxth	r0, r3
 8005458:	88ba      	ldrh	r2, [r7, #4]
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	b29b      	uxth	r3, r3
 8005460:	b21b      	sxth	r3, r3
 8005462:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005464:	4619      	mov	r1, r3
 8005466:	f7ff fc99 	bl	8004d9c <LCD_DrawPixel>
	while (x < y) {
 800546a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800546e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005472:	429a      	cmp	r2, r3
 8005474:	f6ff af53 	blt.w	800531e <LCD_DrawCircleHelper+0x44>
		}
	}
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}
	...

08005484 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b087      	sub	sp, #28
 8005488:	af02      	add	r7, sp, #8
 800548a:	4604      	mov	r4, r0
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4623      	mov	r3, r4
 8005494:	80fb      	strh	r3, [r7, #6]
 8005496:	4603      	mov	r3, r0
 8005498:	80bb      	strh	r3, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
 800549e:	4613      	mov	r3, r2
 80054a0:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 80054a2:	4b6e      	ldr	r3, [pc, #440]	; (800565c <LCD_DrawChar+0x1d8>)
 80054a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f280 80d0 	bge.w	8005652 <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 80054b2:	4b6b      	ldr	r3, [pc, #428]	; (8005660 <LCD_DrawChar+0x1dc>)
 80054b4:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80054b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	f280 80c8 	bge.w	8005652 <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 80054c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80054c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80054ca:	4613      	mov	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f340 80bc 	ble.w	8005652 <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 80054da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f340 80b3 	ble.w	8005652 <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e0a9      	b.n	8005646 <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d102      	bne.n	8005500 <LCD_DrawChar+0x7c>
			line = 0x0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73bb      	strb	r3, [r7, #14]
 80054fe:	e09c      	b.n	800563a <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550c:	4413      	add	r3, r2
 800550e:	4a55      	ldr	r2, [pc, #340]	; (8005664 <LCD_DrawChar+0x1e0>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
 8005512:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8005514:	2300      	movs	r3, #0
 8005516:	737b      	strb	r3, [r7, #13]
 8005518:	e08a      	b.n	8005630 <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d03c      	beq.n	800559e <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 8005524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005528:	2b01      	cmp	r3, #1
 800552a:	d112      	bne.n	8005552 <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 800552c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005530:	b29a      	uxth	r2, r3
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	4413      	add	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	b218      	sxth	r0, r3
 800553a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800553e:	b29a      	uxth	r2, r3
 8005540:	88bb      	ldrh	r3, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	b21b      	sxth	r3, r3
 8005548:	883a      	ldrh	r2, [r7, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	f7ff fc26 	bl	8004d9c <LCD_DrawPixel>
 8005550:	e065      	b.n	800561e <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	b29a      	uxth	r2, r3
 8005558:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800555c:	b29b      	uxth	r3, r3
 800555e:	fb12 f303 	smulbb	r3, r2, r3
 8005562:	b29a      	uxth	r2, r3
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	4413      	add	r3, r2
 8005568:	b29b      	uxth	r3, r3
 800556a:	b218      	sxth	r0, r3
 800556c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005570:	b29a      	uxth	r2, r3
 8005572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005576:	b29b      	uxth	r3, r3
 8005578:	fb12 f303 	smulbb	r3, r2, r3
 800557c:	b29a      	uxth	r2, r3
 800557e:	88bb      	ldrh	r3, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	b29b      	uxth	r3, r3
 8005584:	b219      	sxth	r1, r3
 8005586:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800558a:	b21a      	sxth	r2, r3
 800558c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005590:	b21c      	sxth	r4, r3
 8005592:	883b      	ldrh	r3, [r7, #0]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4623      	mov	r3, r4
 8005598:	f000 f918 	bl	80057cc <LCD_FillRect>
 800559c:	e03f      	b.n	800561e <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 800559e:	8c3a      	ldrh	r2, [r7, #32]
 80055a0:	883b      	ldrh	r3, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d03b      	beq.n	800561e <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 80055a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d112      	bne.n	80055d4 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 80055ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	4413      	add	r3, r2
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	b218      	sxth	r0, r3
 80055bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	88bb      	ldrh	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	8c3a      	ldrh	r2, [r7, #32]
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7ff fbe5 	bl	8004d9c <LCD_DrawPixel>
 80055d2:	e024      	b.n	800561e <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 80055d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055de:	b29b      	uxth	r3, r3
 80055e0:	fb12 f303 	smulbb	r3, r2, r3
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	4413      	add	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	b218      	sxth	r0, r3
 80055ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	fb12 f303 	smulbb	r3, r2, r3
 80055fe:	b29a      	uxth	r2, r3
 8005600:	88bb      	ldrh	r3, [r7, #4]
 8005602:	4413      	add	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	b219      	sxth	r1, r3
 8005608:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800560c:	b21a      	sxth	r2, r3
 800560e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005612:	b21c      	sxth	r4, r3
 8005614:	8c3b      	ldrh	r3, [r7, #32]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	4623      	mov	r3, r4
 800561a:	f000 f8d7 	bl	80057cc <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8005624:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3301      	adds	r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	737b      	strb	r3, [r7, #13]
 8005630:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005634:	2b07      	cmp	r3, #7
 8005636:	f77f af70 	ble.w	800551a <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 800563a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	3301      	adds	r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	73fb      	strb	r3, [r7, #15]
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564a:	2b05      	cmp	r3, #5
 800564c:	f77f af51 	ble.w	80054f2 <LCD_DrawChar+0x6e>
 8005650:	e000      	b.n	8005654 <LCD_DrawChar+0x1d0>
		return;
 8005652:	bf00      	nop
			}
		}
	}
}
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	bf00      	nop
 800565c:	20002e74 	.word	0x20002e74
 8005660:	20002e76 	.word	0x20002e76
 8005664:	08009174 	.word	0x08009174

08005668 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	80fb      	strh	r3, [r7, #6]
 800567a:	4603      	mov	r3, r0
 800567c:	80bb      	strh	r3, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]
 8005682:	4613      	mov	r3, r2
 8005684:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8005686:	887b      	ldrh	r3, [r7, #2]
 8005688:	f1c3 0301 	rsb	r3, r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005690:	2301      	movs	r3, #1
 8005692:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	461a      	mov	r2, r3
 8005698:	03d2      	lsls	r2, r2, #15
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	b29b      	uxth	r3, r3
 80056a0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80056a6:	887b      	ldrh	r3, [r7, #2]
 80056a8:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80056aa:	e083      	b.n	80057b4 <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 80056ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db0e      	blt.n	80056d2 <LCD_FillCircleHelper+0x6a>
			y--;
 80056b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80056c0:	8a7b      	ldrh	r3, [r7, #18]
 80056c2:	3302      	adds	r3, #2
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80056c8:	8afa      	ldrh	r2, [r7, #22]
 80056ca:	8a7b      	ldrh	r3, [r7, #18]
 80056cc:	4413      	add	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80056d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3301      	adds	r3, #1
 80056da:	b29b      	uxth	r3, r3
 80056dc:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80056de:	8abb      	ldrh	r3, [r7, #20]
 80056e0:	3302      	adds	r3, #2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80056e6:	8afa      	ldrh	r2, [r7, #22]
 80056e8:	8abb      	ldrh	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 80056f0:	787b      	ldrb	r3, [r7, #1]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02b      	beq.n	8005752 <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	8a3b      	ldrh	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	b218      	sxth	r0, r3
 8005704:	88ba      	ldrh	r2, [r7, #4]
 8005706:	89fb      	ldrh	r3, [r7, #14]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	b219      	sxth	r1, r3
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005716:	4413      	add	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	3301      	adds	r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	b21a      	sxth	r2, r3
 8005720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005722:	f7ff fcbb 	bl	800509c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	89fb      	ldrh	r3, [r7, #14]
 800572a:	4413      	add	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	b218      	sxth	r0, r3
 8005730:	88ba      	ldrh	r2, [r7, #4]
 8005732:	8a3b      	ldrh	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	b219      	sxth	r1, r3
 800573a:	8a3b      	ldrh	r3, [r7, #16]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005742:	4413      	add	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	3301      	adds	r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	b21a      	sxth	r2, r3
 800574c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800574e:	f7ff fca5 	bl	800509c <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8005752:	787b      	ldrb	r3, [r7, #1]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02b      	beq.n	80057b4 <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	8a3b      	ldrh	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	b29b      	uxth	r3, r3
 8005764:	b218      	sxth	r0, r3
 8005766:	88ba      	ldrh	r2, [r7, #4]
 8005768:	89fb      	ldrh	r3, [r7, #14]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	b219      	sxth	r1, r3
 8005770:	89fb      	ldrh	r3, [r7, #14]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005778:	4413      	add	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	3301      	adds	r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	b21a      	sxth	r2, r3
 8005782:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005784:	f7ff fc8a 	bl	800509c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	b218      	sxth	r0, r3
 8005792:	88ba      	ldrh	r2, [r7, #4]
 8005794:	8a3b      	ldrh	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b29b      	uxth	r3, r3
 800579a:	b219      	sxth	r1, r3
 800579c:	8a3b      	ldrh	r3, [r7, #16]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057a4:	4413      	add	r3, r2
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b21a      	sxth	r2, r3
 80057ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057b0:	f7ff fc74 	bl	800509c <LCD_DrawFastVLine>
	while (x < y) {
 80057b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80057b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057bc:	429a      	cmp	r2, r3
 80057be:	f6ff af75 	blt.w	80056ac <LCD_FillCircleHelper+0x44>
		}
	}
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	80fb      	strh	r3, [r7, #6]
 80057de:	4603      	mov	r3, r0
 80057e0:	80bb      	strh	r3, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	807b      	strh	r3, [r7, #2]
 80057e6:	4613      	mov	r3, r2
 80057e8:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80057ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f340 808b 	ble.w	800590a <LCD_FillRect+0x13e>
 80057f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f340 8086 	ble.w	800590a <LCD_FillRect+0x13e>
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <LCD_FillRect+0x148>)
 8005800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005804:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005808:	429a      	cmp	r2, r3
 800580a:	da7e      	bge.n	800590a <LCD_FillRect+0x13e>
 800580c:	4b42      	ldr	r3, [pc, #264]	; (8005918 <LCD_FillRect+0x14c>)
 800580e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005812:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	da77      	bge.n	800590a <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	4413      	add	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	81fb      	strh	r3, [r7, #14]
 8005828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db6c      	blt.n	800590a <LCD_FillRect+0x13e>
 8005830:	88ba      	ldrh	r2, [r7, #4]
 8005832:	883b      	ldrh	r3, [r7, #0]
 8005834:	4413      	add	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	81bb      	strh	r3, [r7, #12]
 800583e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db61      	blt.n	800590a <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8005846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	da06      	bge.n	800585c <LCD_FillRect+0x90>
		w += x;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	4413      	add	r3, r2
 8005854:	b29b      	uxth	r3, r3
 8005856:	807b      	strh	r3, [r7, #2]
		x = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 800585c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	da06      	bge.n	8005872 <LCD_FillRect+0xa6>
		h += y1;
 8005864:	883a      	ldrh	r2, [r7, #0]
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <LCD_FillRect+0x148>)
 8005874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005878:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800587c:	429a      	cmp	r2, r3
 800587e:	db0d      	blt.n	800589c <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8005880:	4b24      	ldr	r3, [pc, #144]	; (8005914 <LCD_FillRect+0x148>)
 8005882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 800588e:	89fa      	ldrh	r2, [r7, #14]
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b29b      	uxth	r3, r3
 8005896:	3301      	adds	r3, #1
 8005898:	b29b      	uxth	r3, r3
 800589a:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <LCD_FillRect+0x14c>)
 800589e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	db0d      	blt.n	80058c6 <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <LCD_FillRect+0x14c>)
 80058ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 80058b8:	89ba      	ldrh	r2, [r7, #12]
 80058ba:	88bb      	ldrh	r3, [r7, #4]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 80058c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80058d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058d6:	f000 fb29 	bl	8005f2c <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 80058da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80058e2:	fb03 f202 	mul.w	r2, r3, r2
 80058e6:	8c3b      	ldrh	r3, [r7, #32]
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f87c 	bl	80059e8 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <LCD_FillRect+0x148>)
 80058f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f6:	1e5a      	subs	r2, r3, #1
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <LCD_FillRect+0x14c>)
 80058fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058fe:	3b01      	subs	r3, #1
 8005900:	2100      	movs	r1, #0
 8005902:	2000      	movs	r0, #0
 8005904:	f000 fb12 	bl	8005f2c <LCD_SetAddrWindow>
 8005908:	e000      	b.n	800590c <LCD_FillRect+0x140>
		return;
 800590a:	bf00      	nop
}
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	20002e74 	.word	0x20002e74
 8005918:	20002e76 	.word	0x20002e76

0800591c <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b085      	sub	sp, #20
 8005920:	af02      	add	r7, sp, #8
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	80fb      	strh	r3, [r7, #6]
 800592e:	4603      	mov	r3, r0
 8005930:	80bb      	strh	r3, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	807b      	strh	r3, [r7, #2]
 8005936:	4613      	mov	r3, r2
 8005938:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	8b3b      	ldrh	r3, [r7, #24]
 800593e:	4413      	add	r3, r2
 8005940:	b29b      	uxth	r3, r3
 8005942:	b218      	sxth	r0, r3
 8005944:	887a      	ldrh	r2, [r7, #2]
 8005946:	8b3b      	ldrh	r3, [r7, #24]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	b21a      	sxth	r2, r3
 8005952:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800595a:	8bbb      	ldrh	r3, [r7, #28]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	4623      	mov	r3, r4
 8005960:	f7ff ff34 	bl	80057cc <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	4413      	add	r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	8b3b      	ldrh	r3, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	b218      	sxth	r0, r3
 8005978:	88ba      	ldrh	r2, [r7, #4]
 800597a:	8b3b      	ldrh	r3, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	b219      	sxth	r1, r3
 8005982:	883a      	ldrh	r2, [r7, #0]
 8005984:	8b3b      	ldrh	r3, [r7, #24]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	b29b      	uxth	r3, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29b      	uxth	r3, r3
 8005992:	b21b      	sxth	r3, r3
 8005994:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005998:	8bba      	ldrh	r2, [r7, #28]
 800599a:	9201      	str	r2, [sp, #4]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2301      	movs	r3, #1
 80059a0:	4622      	mov	r2, r4
 80059a2:	f7ff fe61 	bl	8005668 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	8b3b      	ldrh	r3, [r7, #24]
 80059aa:	4413      	add	r3, r2
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	b218      	sxth	r0, r3
 80059b0:	88ba      	ldrh	r2, [r7, #4]
 80059b2:	8b3b      	ldrh	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	b219      	sxth	r1, r3
 80059ba:	883a      	ldrh	r2, [r7, #0]
 80059bc:	8b3b      	ldrh	r3, [r7, #24]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80059d0:	8bba      	ldrh	r2, [r7, #28]
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2302      	movs	r3, #2
 80059d8:	4622      	mov	r2, r4
 80059da:	f7ff fe45 	bl	8005668 <LCD_FillCircleHelper>
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd90      	pop	{r4, r7, pc}
	...

080059e8 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	733b      	strb	r3, [r7, #12]
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	4895      	ldr	r0, [pc, #596]	; (8005c5c <LCD_Flood+0x274>)
 8005a06:	f7fe fd01 	bl	800440c <gpio_write>
	LCD_CD_LOW();
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4894      	ldr	r0, [pc, #592]	; (8005c60 <LCD_Flood+0x278>)
 8005a10:	f7fe fcfc 	bl	800440c <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8005a14:	2000      	movs	r0, #0
 8005a16:	f000 fb19 	bl	800604c <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8005a1a:	2022      	movs	r0, #34	; 0x22
 8005a1c:	f000 fb16 	bl	800604c <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8005a20:	2201      	movs	r2, #1
 8005a22:	2104      	movs	r1, #4
 8005a24:	488e      	ldr	r0, [pc, #568]	; (8005c60 <LCD_Flood+0x278>)
 8005a26:	f7fe fcf1 	bl	800440c <gpio_write>
	LCD_Write8(hi);
 8005a2a:	7b3b      	ldrb	r3, [r7, #12]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fb0d 	bl	800604c <LCD_Write8>
	LCD_Write8(lo);
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fb09 	bl	800604c <LCD_Write8>
	len--;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8005a46:	7b3a      	ldrb	r2, [r7, #12]
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	f040 80e4 	bne.w	8005c18 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8005a50:	e088      	b.n	8005b64 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8005a52:	2310      	movs	r3, #16
 8005a54:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8005a56:	2200      	movs	r2, #0
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4881      	ldr	r0, [pc, #516]	; (8005c60 <LCD_Flood+0x278>)
 8005a5c:	f7fe fcd6 	bl	800440c <gpio_write>
 8005a60:	2001      	movs	r0, #1
 8005a62:	f7ff f851 	bl	8004b08 <delay>
 8005a66:	2201      	movs	r2, #1
 8005a68:	2101      	movs	r1, #1
 8005a6a:	487d      	ldr	r0, [pc, #500]	; (8005c60 <LCD_Flood+0x278>)
 8005a6c:	f7fe fcce 	bl	800440c <gpio_write>
 8005a70:	2001      	movs	r0, #1
 8005a72:	f7ff f849 	bl	8004b08 <delay>
				LCD_WR_STROBE();
 8005a76:	2200      	movs	r2, #0
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4879      	ldr	r0, [pc, #484]	; (8005c60 <LCD_Flood+0x278>)
 8005a7c:	f7fe fcc6 	bl	800440c <gpio_write>
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7ff f841 	bl	8004b08 <delay>
 8005a86:	2201      	movs	r2, #1
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4875      	ldr	r0, [pc, #468]	; (8005c60 <LCD_Flood+0x278>)
 8005a8c:	f7fe fcbe 	bl	800440c <gpio_write>
 8005a90:	2001      	movs	r0, #1
 8005a92:	f7ff f839 	bl	8004b08 <delay>
				LCD_WR_STROBE();
 8005a96:	2200      	movs	r2, #0
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4871      	ldr	r0, [pc, #452]	; (8005c60 <LCD_Flood+0x278>)
 8005a9c:	f7fe fcb6 	bl	800440c <gpio_write>
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f7ff f831 	bl	8004b08 <delay>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	486d      	ldr	r0, [pc, #436]	; (8005c60 <LCD_Flood+0x278>)
 8005aac:	f7fe fcae 	bl	800440c <gpio_write>
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	f7ff f829 	bl	8004b08 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4869      	ldr	r0, [pc, #420]	; (8005c60 <LCD_Flood+0x278>)
 8005abc:	f7fe fca6 	bl	800440c <gpio_write>
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f7ff f821 	bl	8004b08 <delay>
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2101      	movs	r1, #1
 8005aca:	4865      	ldr	r0, [pc, #404]	; (8005c60 <LCD_Flood+0x278>)
 8005acc:	f7fe fc9e 	bl	800440c <gpio_write>
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f7ff f819 	bl	8004b08 <delay>
				LCD_WR_STROBE();
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4861      	ldr	r0, [pc, #388]	; (8005c60 <LCD_Flood+0x278>)
 8005adc:	f7fe fc96 	bl	800440c <gpio_write>
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7ff f811 	bl	8004b08 <delay>
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	2101      	movs	r1, #1
 8005aea:	485d      	ldr	r0, [pc, #372]	; (8005c60 <LCD_Flood+0x278>)
 8005aec:	f7fe fc8e 	bl	800440c <gpio_write>
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7ff f809 	bl	8004b08 <delay>
				LCD_WR_STROBE();
 8005af6:	2200      	movs	r2, #0
 8005af8:	2101      	movs	r1, #1
 8005afa:	4859      	ldr	r0, [pc, #356]	; (8005c60 <LCD_Flood+0x278>)
 8005afc:	f7fe fc86 	bl	800440c <gpio_write>
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7ff f801 	bl	8004b08 <delay>
 8005b06:	2201      	movs	r2, #1
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4855      	ldr	r0, [pc, #340]	; (8005c60 <LCD_Flood+0x278>)
 8005b0c:	f7fe fc7e 	bl	800440c <gpio_write>
 8005b10:	2001      	movs	r0, #1
 8005b12:	f7fe fff9 	bl	8004b08 <delay>
				LCD_WR_STROBE();
 8005b16:	2200      	movs	r2, #0
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4851      	ldr	r0, [pc, #324]	; (8005c60 <LCD_Flood+0x278>)
 8005b1c:	f7fe fc76 	bl	800440c <gpio_write>
 8005b20:	2001      	movs	r0, #1
 8005b22:	f7fe fff1 	bl	8004b08 <delay>
 8005b26:	2201      	movs	r2, #1
 8005b28:	2101      	movs	r1, #1
 8005b2a:	484d      	ldr	r0, [pc, #308]	; (8005c60 <LCD_Flood+0x278>)
 8005b2c:	f7fe fc6e 	bl	800440c <gpio_write>
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fe ffe9 	bl	8004b08 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8005b36:	2200      	movs	r2, #0
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4849      	ldr	r0, [pc, #292]	; (8005c60 <LCD_Flood+0x278>)
 8005b3c:	f7fe fc66 	bl	800440c <gpio_write>
 8005b40:	2001      	movs	r0, #1
 8005b42:	f7fe ffe1 	bl	8004b08 <delay>
 8005b46:	2201      	movs	r2, #1
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4845      	ldr	r0, [pc, #276]	; (8005c60 <LCD_Flood+0x278>)
 8005b4c:	f7fe fc5e 	bl	800440c <gpio_write>
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fe ffd9 	bl	8004b08 <delay>
			} while (--i);
 8005b56:	7b7b      	ldrb	r3, [r7, #13]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	737b      	strb	r3, [r7, #13]
 8005b5c:	7b7b      	ldrb	r3, [r7, #13]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f47f af79 	bne.w	8005a56 <LCD_Flood+0x6e>
		while (blocks--) {
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	81fa      	strh	r2, [r7, #14]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f47f af71 	bne.w	8005a52 <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	737b      	strb	r3, [r7, #13]
 8005b7a:	e01f      	b.n	8005bbc <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4837      	ldr	r0, [pc, #220]	; (8005c60 <LCD_Flood+0x278>)
 8005b82:	f7fe fc43 	bl	800440c <gpio_write>
 8005b86:	2001      	movs	r0, #1
 8005b88:	f7fe ffbe 	bl	8004b08 <delay>
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4833      	ldr	r0, [pc, #204]	; (8005c60 <LCD_Flood+0x278>)
 8005b92:	f7fe fc3b 	bl	800440c <gpio_write>
 8005b96:	2001      	movs	r0, #1
 8005b98:	f7fe ffb6 	bl	8004b08 <delay>
			LCD_WR_STROBE();
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	482f      	ldr	r0, [pc, #188]	; (8005c60 <LCD_Flood+0x278>)
 8005ba2:	f7fe fc33 	bl	800440c <gpio_write>
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f7fe ffae 	bl	8004b08 <delay>
 8005bac:	2201      	movs	r2, #1
 8005bae:	2101      	movs	r1, #1
 8005bb0:	482b      	ldr	r0, [pc, #172]	; (8005c60 <LCD_Flood+0x278>)
 8005bb2:	f7fe fc2b 	bl	800440c <gpio_write>
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	f7fe ffa6 	bl	8004b08 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8005bbc:	7b7b      	ldrb	r3, [r7, #13]
 8005bbe:	1e5a      	subs	r2, r3, #1
 8005bc0:	737a      	strb	r2, [r7, #13]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1da      	bne.n	8005b7c <LCD_Flood+0x194>
 8005bc6:	e03f      	b.n	8005c48 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8005bc8:	2310      	movs	r3, #16
 8005bca:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8005bcc:	7b3b      	ldrb	r3, [r7, #12]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa3c 	bl	800604c <LCD_Write8>
				LCD_Write8(lo);
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fa38 	bl	800604c <LCD_Write8>
				LCD_Write8(hi);
 8005bdc:	7b3b      	ldrb	r3, [r7, #12]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fa34 	bl	800604c <LCD_Write8>
				LCD_Write8(lo);
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa30 	bl	800604c <LCD_Write8>
				LCD_Write8(hi);
 8005bec:	7b3b      	ldrb	r3, [r7, #12]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa2c 	bl	800604c <LCD_Write8>
				LCD_Write8(lo);
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fa28 	bl	800604c <LCD_Write8>
				LCD_Write8(hi);
 8005bfc:	7b3b      	ldrb	r3, [r7, #12]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fa24 	bl	800604c <LCD_Write8>
				LCD_Write8(lo);
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa20 	bl	800604c <LCD_Write8>
			} while (--i);
 8005c0c:	7b7b      	ldrb	r3, [r7, #13]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	737b      	strb	r3, [r7, #13]
 8005c12:	7b7b      	ldrb	r3, [r7, #13]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1d9      	bne.n	8005bcc <LCD_Flood+0x1e4>
		while (blocks--) {
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	81fa      	strh	r2, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1d2      	bne.n	8005bc8 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2a:	737b      	strb	r3, [r7, #13]
 8005c2c:	e007      	b.n	8005c3e <LCD_Flood+0x256>
			LCD_Write8(hi);
 8005c2e:	7b3b      	ldrb	r3, [r7, #12]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fa0b 	bl	800604c <LCD_Write8>
			LCD_Write8(lo);
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fa07 	bl	800604c <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8005c3e:	7b7b      	ldrb	r3, [r7, #13]
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	737a      	strb	r2, [r7, #13]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f2      	bne.n	8005c2e <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4803      	ldr	r0, [pc, #12]	; (8005c5c <LCD_Flood+0x274>)
 8005c4e:	f7fe fbdd 	bl	800440c <gpio_write>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40020400 	.word	0x40020400
 8005c60:	40020000 	.word	0x40020000

08005c64 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8005c64:	b40f      	push	{r0, r1, r2, r3}
 8005c66:	b5b0      	push	{r4, r5, r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005c6c:	f107 031c 	add.w	r3, r7, #28
 8005c70:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	483d      	ldr	r0, [pc, #244]	; (8005d6c <LCD_Printf+0x108>)
 8005c78:	f000 ffc4 	bl	8006c04 <vsiprintf>
	va_end(lst);

	p = buf;
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <LCD_Printf+0x108>)
 8005c7e:	607b      	str	r3, [r7, #4]
	while (*p) {
 8005c80:	e068      	b.n	8005d54 <LCD_Printf+0xf0>
		if (*p == '\n') {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b0a      	cmp	r3, #10
 8005c88:	d111      	bne.n	8005cae <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <LCD_Printf+0x10c>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <LCD_Printf+0x110>)
 8005c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	b21a      	sxth	r2, r3
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <LCD_Printf+0x110>)
 8005ca4:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8005ca6:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <LCD_Printf+0x114>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e04f      	b.n	8005d4e <LCD_Printf+0xea>
		} else if (*p == '\r') {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b0d      	cmp	r3, #13
 8005cb4:	d04b      	beq.n	8005d4e <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <LCD_Printf+0x114>)
 8005cb8:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005cbc:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <LCD_Printf+0x110>)
 8005cbe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	781c      	ldrb	r4, [r3, #0]
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <LCD_Printf+0x118>)
 8005cc8:	881d      	ldrh	r5, [r3, #0]
 8005cca:	4b2d      	ldr	r3, [pc, #180]	; (8005d80 <LCD_Printf+0x11c>)
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <LCD_Printf+0x10c>)
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	4622      	mov	r2, r4
 8005cda:	f7ff fbd3 	bl	8005484 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <LCD_Printf+0x10c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	0052      	lsls	r2, r2, #1
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <LCD_Printf+0x114>)
 8005cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <LCD_Printf+0x114>)
 8005cfe:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8005d00:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <LCD_Printf+0x120>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d022      	beq.n	8005d4e <LCD_Printf+0xea>
 8005d08:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <LCD_Printf+0x114>)
 8005d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <LCD_Printf+0x124>)
 8005d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d16:	4618      	mov	r0, r3
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <LCD_Printf+0x10c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4613      	mov	r3, r2
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4403      	add	r3, r0
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	dd10      	ble.n	8005d4e <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <LCD_Printf+0x10c>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <LCD_Printf+0x110>)
 8005d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	b21a      	sxth	r2, r3
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <LCD_Printf+0x110>)
 8005d46:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <LCD_Printf+0x114>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3301      	adds	r3, #1
 8005d52:	607b      	str	r3, [r7, #4]
	while (*p) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d192      	bne.n	8005c82 <LCD_Printf+0x1e>
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005d68:	b004      	add	sp, #16
 8005d6a:	4770      	bx	lr
 8005d6c:	20002e84 	.word	0x20002e84
 8005d70:	20002e80 	.word	0x20002e80
 8005d74:	20002e7a 	.word	0x20002e7a
 8005d78:	20002e78 	.word	0x20002e78
 8005d7c:	20002e7c 	.word	0x20002e7c
 8005d80:	20002e7e 	.word	0x20002e7e
 8005d84:	20002e82 	.word	0x20002e82
 8005d88:	20002e74 	.word	0x20002e74

08005d8c <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8005d92:	2201      	movs	r2, #1
 8005d94:	2100      	movs	r1, #0
 8005d96:	4824      	ldr	r0, [pc, #144]	; (8005e28 <LCD_Reset+0x9c>)
 8005d98:	f7fe fb38 	bl	800440c <gpio_write>
	LCD_WR_HIGH();
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4822      	ldr	r0, [pc, #136]	; (8005e2c <LCD_Reset+0xa0>)
 8005da2:	f7fe fb33 	bl	800440c <gpio_write>
	LCD_RD_HIGH();
 8005da6:	2201      	movs	r2, #1
 8005da8:	2100      	movs	r1, #0
 8005daa:	4820      	ldr	r0, [pc, #128]	; (8005e2c <LCD_Reset+0xa0>)
 8005dac:	f7fe fb2e 	bl	800440c <gpio_write>

	LCD_RST_LOW();
 8005db0:	2200      	movs	r2, #0
 8005db2:	2101      	movs	r1, #1
 8005db4:	481e      	ldr	r0, [pc, #120]	; (8005e30 <LCD_Reset+0xa4>)
 8005db6:	f7fe fb29 	bl	800440c <gpio_write>
	delay(100);
 8005dba:	2064      	movs	r0, #100	; 0x64
 8005dbc:	f7fe fea4 	bl	8004b08 <delay>
	LCD_RST_HIGH();
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	481a      	ldr	r0, [pc, #104]	; (8005e30 <LCD_Reset+0xa4>)
 8005dc6:	f7fe fb21 	bl	800440c <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4816      	ldr	r0, [pc, #88]	; (8005e28 <LCD_Reset+0x9c>)
 8005dd0:	f7fe fb1c 	bl	800440c <gpio_write>

	LCD_CD_LOW();
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	4814      	ldr	r0, [pc, #80]	; (8005e2c <LCD_Reset+0xa0>)
 8005dda:	f7fe fb17 	bl	800440c <gpio_write>
	LCD_Write8(0x00);
 8005dde:	2000      	movs	r0, #0
 8005de0:	f000 f934 	bl	800604c <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	71fb      	strb	r3, [r7, #7]
 8005de8:	e012      	b.n	8005e10 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 8005dea:	2200      	movs	r2, #0
 8005dec:	2101      	movs	r1, #1
 8005dee:	480f      	ldr	r0, [pc, #60]	; (8005e2c <LCD_Reset+0xa0>)
 8005df0:	f7fe fb0c 	bl	800440c <gpio_write>
 8005df4:	2001      	movs	r0, #1
 8005df6:	f7fe fe87 	bl	8004b08 <delay>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	480b      	ldr	r0, [pc, #44]	; (8005e2c <LCD_Reset+0xa0>)
 8005e00:	f7fe fb04 	bl	800440c <gpio_write>
 8005e04:	2001      	movs	r0, #1
 8005e06:	f7fe fe7f 	bl	8004b08 <delay>
	for (uint8_t i = 0; i < 3; i++)
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	71fb      	strb	r3, [r7, #7]
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d9e9      	bls.n	8005dea <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 8005e16:	2201      	movs	r2, #1
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4803      	ldr	r0, [pc, #12]	; (8005e28 <LCD_Reset+0x9c>)
 8005e1c:	f7fe faf6 	bl	800440c <gpio_write>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40020400 	.word	0x40020400
 8005e2c:	40020000 	.word	0x40020000
 8005e30:	40020800 	.word	0x40020800

08005e34 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <LCD_SetCursor+0x28>)
 8005e44:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <LCD_SetCursor+0x2c>)
 8005e4c:	801a      	strh	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20002e78 	.word	0x20002e78
 8005e60:	20002e7a 	.word	0x20002e7a

08005e64 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <LCD_SetTextSize+0x14>
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	e000      	b.n	8005e7a <LCD_SetTextSize+0x16>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <LCD_SetTextSize+0x28>)
 8005e7c:	7013      	strb	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20002e80 	.word	0x20002e80

08005e90 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	460a      	mov	r2, r1
 8005e9a:	80fb      	strh	r3, [r7, #6]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8005ea0:	4a05      	ldr	r2, [pc, #20]	; (8005eb8 <LCD_SetTextColor+0x28>)
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8005ea6:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <LCD_SetTextColor+0x2c>)
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	8013      	strh	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	20002e7c 	.word	0x20002e7c
 8005ebc:	20002e7e 	.word	0x20002e7e

08005ec0 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <LCD_SetRotation+0x60>)
 8005ed4:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <LCD_SetRotation+0x60>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d81a      	bhi.n	8005f14 <LCD_SetRotation+0x54>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <LCD_SetRotation+0x24>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005ef5 	.word	0x08005ef5
 8005ef0:	08005f05 	.word	0x08005f05
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <LCD_SetRotation+0x64>)
 8005ef6:	22f0      	movs	r2, #240	; 0xf0
 8005ef8:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <LCD_SetRotation+0x68>)
 8005efc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f00:	801a      	strh	r2, [r3, #0]
		break;
 8005f02:	e007      	b.n	8005f14 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <LCD_SetRotation+0x64>)
 8005f06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f0a:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <LCD_SetRotation+0x68>)
 8005f0e:	22f0      	movs	r2, #240	; 0xf0
 8005f10:	801a      	strh	r2, [r3, #0]
		break;
 8005f12:	bf00      	nop
	}
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	20002e81 	.word	0x20002e81
 8005f24:	20002e74 	.word	0x20002e74
 8005f28:	20002e76 	.word	0x20002e76

08005f2c <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4841      	ldr	r0, [pc, #260]	; (8006044 <LCD_SetAddrWindow+0x118>)
 8005f40:	f7fe fa64 	bl	800440c <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8005f44:	4b40      	ldr	r3, [pc, #256]	; (8006048 <LCD_SetAddrWindow+0x11c>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d038      	beq.n	8005fbe <LCD_SetAddrWindow+0x92>
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	dc03      	bgt.n	8005f58 <LCD_SetAddrWindow+0x2c>
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d006      	beq.n	8005f62 <LCD_SetAddrWindow+0x36>
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d017      	beq.n	8005f88 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	61fb      	str	r3, [r7, #28]
		y = y1;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	61bb      	str	r3, [r7, #24]
		break;
 8005f60:	e042      	b.n	8005fe8 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005f70:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005f7c:	607b      	str	r3, [r7, #4]
		x = x2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	61fb      	str	r3, [r7, #28]
		y = y1;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	61bb      	str	r3, [r7, #24]
		break;
 8005f86:	e02f      	b.n	8005fe8 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005f92:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005f9a:	607b      	str	r3, [r7, #4]
		t = y1;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	603b      	str	r3, [r7, #0]
		x = x2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	61fb      	str	r3, [r7, #28]
		y = y2;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	61bb      	str	r3, [r7, #24]
		break;
 8005fbc:	e014      	b.n	8005fe8 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005fda:	3301      	adds	r3, #1
 8005fdc:	603b      	str	r3, [r7, #0]
		x = x1;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	61fb      	str	r3, [r7, #28]
		y = y2;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	61bb      	str	r3, [r7, #24]
		break;
 8005fe6:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	2050      	movs	r0, #80	; 0x50
 8005ff0:	f000 f888 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	2051      	movs	r0, #81	; 0x51
 8005ffc:	f000 f882 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	b29b      	uxth	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	2052      	movs	r0, #82	; 0x52
 8006008:	f000 f87c 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	4619      	mov	r1, r3
 8006012:	2053      	movs	r0, #83	; 0x53
 8006014:	f000 f876 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	b29b      	uxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	2020      	movs	r0, #32
 8006020:	f000 f870 	bl	8006104 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	b29b      	uxth	r3, r3
 8006028:	4619      	mov	r1, r3
 800602a:	2021      	movs	r0, #33	; 0x21
 800602c:	f000 f86a 	bl	8006104 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8006030:	2201      	movs	r2, #1
 8006032:	2100      	movs	r1, #0
 8006034:	4803      	ldr	r0, [pc, #12]	; (8006044 <LCD_SetAddrWindow+0x118>)
 8006036:	f7fe f9e9 	bl	800440c <gpio_write>
}
 800603a:	bf00      	nop
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40020400 	.word	0x40020400
 8006048:	20002e81 	.word	0x20002e81

0800604c <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <LCD_Write8+0xac>)
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800605e:	4013      	ands	r3, r2
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	0252      	lsls	r2, r2, #9
 8006064:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006068:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006072:	431a      	orrs	r2, r3
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800607c:	491e      	ldr	r1, [pc, #120]	; (80060f8 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800607e:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8006080:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8006082:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <LCD_Write8+0xb0>)
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 800608a:	4013      	ands	r3, r2
 800608c:	79fa      	ldrb	r2, [r7, #7]
 800608e:	f002 0208 	and.w	r2, r2, #8
 8006092:	431a      	orrs	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	105b      	asrs	r3, r3, #1
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	431a      	orrs	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80060b0:	4912      	ldr	r1, [pc, #72]	; (80060fc <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80060b2:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80060b4:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <LCD_Write8+0xb4>)
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80060be:	4013      	ands	r3, r2
 80060c0:	79fa      	ldrb	r2, [r7, #7]
 80060c2:	0192      	lsls	r2, r2, #6
 80060c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80060c8:	490d      	ldr	r1, [pc, #52]	; (8006100 <LCD_Write8+0xb4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80060ce:	2200      	movs	r2, #0
 80060d0:	2101      	movs	r1, #1
 80060d2:	4809      	ldr	r0, [pc, #36]	; (80060f8 <LCD_Write8+0xac>)
 80060d4:	f7fe f99a 	bl	800440c <gpio_write>
 80060d8:	2001      	movs	r0, #1
 80060da:	f7fe fd15 	bl	8004b08 <delay>
 80060de:	2201      	movs	r2, #1
 80060e0:	2101      	movs	r1, #1
 80060e2:	4805      	ldr	r0, [pc, #20]	; (80060f8 <LCD_Write8+0xac>)
 80060e4:	f7fe f992 	bl	800440c <gpio_write>
 80060e8:	2001      	movs	r0, #1
 80060ea:	f7fe fd0d 	bl	8004b08 <delay>
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40020000 	.word	0x40020000
 80060fc:	40020400 	.word	0x40020400
 8006100:	40020800 	.word	0x40020800

08006104 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	460a      	mov	r2, r1
 800610e:	80fb      	strh	r3, [r7, #6]
 8006110:	4613      	mov	r3, r2
 8006112:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	b29b      	uxth	r3, r3
 800611a:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8006120:	2200      	movs	r2, #0
 8006122:	2104      	movs	r1, #4
 8006124:	4810      	ldr	r0, [pc, #64]	; (8006168 <LCD_WriteRegister16+0x64>)
 8006126:	f7fe f971 	bl	800440c <gpio_write>
	LCD_Write8(hi);
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff8d 	bl	800604c <LCD_Write8>
	LCD_Write8(lo);
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff ff89 	bl	800604c <LCD_Write8>
	hi = (d) >> 8;
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b29b      	uxth	r3, r3
 8006140:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 8006142:	88bb      	ldrh	r3, [r7, #4]
 8006144:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 8006146:	2201      	movs	r2, #1
 8006148:	2104      	movs	r1, #4
 800614a:	4807      	ldr	r0, [pc, #28]	; (8006168 <LCD_WriteRegister16+0x64>)
 800614c:	f7fe f95e 	bl	800440c <gpio_write>
	LCD_Write8(hi);
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff ff7a 	bl	800604c <LCD_Write8>
	LCD_Write8(lo);
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ff76 	bl	800604c <LCD_Write8>
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40020000 	.word	0x40020000

0800616c <temp2color>:
void printstr(uint8_t *str) {
	while (*str)
		write(*str++);
}

uint16_t temp2color(int degree, int lo, int hi) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	b298      	uxth	r0, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	b299      	uxth	r1, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	b29a      	uxth	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	23ff      	movs	r3, #255	; 0xff
 800618a:	f7fd fff5 	bl	8004178 <map>
 800618e:	4603      	mov	r3, r0
 8006190:	75fb      	strb	r3, [r7, #23]
	g = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	b298      	uxth	r0, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	b299      	uxth	r1, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	23ff      	movs	r3, #255	; 0xff
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	f7fd ffe6 	bl	8004178 <map>
 80061ac:	4603      	mov	r3, r0
 80061ae:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 80061b0:	7d7a      	ldrb	r2, [r7, #21]
 80061b2:	7db9      	ldrb	r1, [r7, #22]
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fdca 	bl	8004d50 <LCD_Color565>
 80061bc:	4603      	mov	r3, r0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 80061c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c8:	b087      	sub	sp, #28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e01e      	b.n	8006218 <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3301      	adds	r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b21c      	sxth	r4, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	b21d      	sxth	r5, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b02      	subs	r3, #2
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	b21e      	sxth	r6, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	2100      	movs	r1, #0
 8006200:	6978      	ldr	r0, [r7, #20]
 8006202:	f7ff ffb3 	bl	800616c <temp2color>
 8006206:	4603      	mov	r3, r0
 8006208:	4632      	mov	r2, r6
 800620a:	4629      	mov	r1, r5
 800620c:	4620      	mov	r0, r4
 800620e:	f7fe fecf 	bl	8004fb0 <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	3301      	adds	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	429a      	cmp	r2, r3
 8006220:	dbdb      	blt.n	80061da <colorgradient+0x14>
	}
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800622c <__errno>:
 800622c:	4b01      	ldr	r3, [pc, #4]	; (8006234 <__errno+0x8>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20002a5c 	.word	0x20002a5c

08006238 <__libc_init_array>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4d0d      	ldr	r5, [pc, #52]	; (8006270 <__libc_init_array+0x38>)
 800623c:	4c0d      	ldr	r4, [pc, #52]	; (8006274 <__libc_init_array+0x3c>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	2600      	movs	r6, #0
 8006244:	42a6      	cmp	r6, r4
 8006246:	d109      	bne.n	800625c <__libc_init_array+0x24>
 8006248:	4d0b      	ldr	r5, [pc, #44]	; (8006278 <__libc_init_array+0x40>)
 800624a:	4c0c      	ldr	r4, [pc, #48]	; (800627c <__libc_init_array+0x44>)
 800624c:	f002 ff3c 	bl	80090c8 <_init>
 8006250:	1b64      	subs	r4, r4, r5
 8006252:	10a4      	asrs	r4, r4, #2
 8006254:	2600      	movs	r6, #0
 8006256:	42a6      	cmp	r6, r4
 8006258:	d105      	bne.n	8006266 <__libc_init_array+0x2e>
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006260:	4798      	blx	r3
 8006262:	3601      	adds	r6, #1
 8006264:	e7ee      	b.n	8006244 <__libc_init_array+0xc>
 8006266:	f855 3b04 	ldr.w	r3, [r5], #4
 800626a:	4798      	blx	r3
 800626c:	3601      	adds	r6, #1
 800626e:	e7f2      	b.n	8006256 <__libc_init_array+0x1e>
 8006270:	080098dc 	.word	0x080098dc
 8006274:	080098dc 	.word	0x080098dc
 8006278:	080098dc 	.word	0x080098dc
 800627c:	080098e0 	.word	0x080098e0

08006280 <memset>:
 8006280:	4402      	add	r2, r0
 8006282:	4603      	mov	r3, r0
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	f803 1b01 	strb.w	r1, [r3], #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <__cvt>:
 8006290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	ec55 4b10 	vmov	r4, r5, d0
 8006298:	2d00      	cmp	r5, #0
 800629a:	460e      	mov	r6, r1
 800629c:	4619      	mov	r1, r3
 800629e:	462b      	mov	r3, r5
 80062a0:	bfbb      	ittet	lt
 80062a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062a6:	461d      	movlt	r5, r3
 80062a8:	2300      	movge	r3, #0
 80062aa:	232d      	movlt	r3, #45	; 0x2d
 80062ac:	700b      	strb	r3, [r1, #0]
 80062ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062b4:	4691      	mov	r9, r2
 80062b6:	f023 0820 	bic.w	r8, r3, #32
 80062ba:	bfbc      	itt	lt
 80062bc:	4622      	movlt	r2, r4
 80062be:	4614      	movlt	r4, r2
 80062c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062c4:	d005      	beq.n	80062d2 <__cvt+0x42>
 80062c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062ca:	d100      	bne.n	80062ce <__cvt+0x3e>
 80062cc:	3601      	adds	r6, #1
 80062ce:	2102      	movs	r1, #2
 80062d0:	e000      	b.n	80062d4 <__cvt+0x44>
 80062d2:	2103      	movs	r1, #3
 80062d4:	ab03      	add	r3, sp, #12
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	ab02      	add	r3, sp, #8
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	ec45 4b10 	vmov	d0, r4, r5
 80062e0:	4653      	mov	r3, sl
 80062e2:	4632      	mov	r2, r6
 80062e4:	f000 fd24 	bl	8006d30 <_dtoa_r>
 80062e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062ec:	4607      	mov	r7, r0
 80062ee:	d102      	bne.n	80062f6 <__cvt+0x66>
 80062f0:	f019 0f01 	tst.w	r9, #1
 80062f4:	d022      	beq.n	800633c <__cvt+0xac>
 80062f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062fa:	eb07 0906 	add.w	r9, r7, r6
 80062fe:	d110      	bne.n	8006322 <__cvt+0x92>
 8006300:	783b      	ldrb	r3, [r7, #0]
 8006302:	2b30      	cmp	r3, #48	; 0x30
 8006304:	d10a      	bne.n	800631c <__cvt+0x8c>
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	4620      	mov	r0, r4
 800630c:	4629      	mov	r1, r5
 800630e:	f7fa fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006312:	b918      	cbnz	r0, 800631c <__cvt+0x8c>
 8006314:	f1c6 0601 	rsb	r6, r6, #1
 8006318:	f8ca 6000 	str.w	r6, [sl]
 800631c:	f8da 3000 	ldr.w	r3, [sl]
 8006320:	4499      	add	r9, r3
 8006322:	2200      	movs	r2, #0
 8006324:	2300      	movs	r3, #0
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7fa fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800632e:	b108      	cbz	r0, 8006334 <__cvt+0xa4>
 8006330:	f8cd 900c 	str.w	r9, [sp, #12]
 8006334:	2230      	movs	r2, #48	; 0x30
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	454b      	cmp	r3, r9
 800633a:	d307      	bcc.n	800634c <__cvt+0xbc>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006340:	1bdb      	subs	r3, r3, r7
 8006342:	4638      	mov	r0, r7
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	b004      	add	sp, #16
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	9103      	str	r1, [sp, #12]
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e7f0      	b.n	8006336 <__cvt+0xa6>

08006354 <__exponent>:
 8006354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006356:	4603      	mov	r3, r0
 8006358:	2900      	cmp	r1, #0
 800635a:	bfb8      	it	lt
 800635c:	4249      	neglt	r1, r1
 800635e:	f803 2b02 	strb.w	r2, [r3], #2
 8006362:	bfb4      	ite	lt
 8006364:	222d      	movlt	r2, #45	; 0x2d
 8006366:	222b      	movge	r2, #43	; 0x2b
 8006368:	2909      	cmp	r1, #9
 800636a:	7042      	strb	r2, [r0, #1]
 800636c:	dd2a      	ble.n	80063c4 <__exponent+0x70>
 800636e:	f10d 0407 	add.w	r4, sp, #7
 8006372:	46a4      	mov	ip, r4
 8006374:	270a      	movs	r7, #10
 8006376:	46a6      	mov	lr, r4
 8006378:	460a      	mov	r2, r1
 800637a:	fb91 f6f7 	sdiv	r6, r1, r7
 800637e:	fb07 1516 	mls	r5, r7, r6, r1
 8006382:	3530      	adds	r5, #48	; 0x30
 8006384:	2a63      	cmp	r2, #99	; 0x63
 8006386:	f104 34ff 	add.w	r4, r4, #4294967295
 800638a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800638e:	4631      	mov	r1, r6
 8006390:	dcf1      	bgt.n	8006376 <__exponent+0x22>
 8006392:	3130      	adds	r1, #48	; 0x30
 8006394:	f1ae 0502 	sub.w	r5, lr, #2
 8006398:	f804 1c01 	strb.w	r1, [r4, #-1]
 800639c:	1c44      	adds	r4, r0, #1
 800639e:	4629      	mov	r1, r5
 80063a0:	4561      	cmp	r1, ip
 80063a2:	d30a      	bcc.n	80063ba <__exponent+0x66>
 80063a4:	f10d 0209 	add.w	r2, sp, #9
 80063a8:	eba2 020e 	sub.w	r2, r2, lr
 80063ac:	4565      	cmp	r5, ip
 80063ae:	bf88      	it	hi
 80063b0:	2200      	movhi	r2, #0
 80063b2:	4413      	add	r3, r2
 80063b4:	1a18      	subs	r0, r3, r0
 80063b6:	b003      	add	sp, #12
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063c2:	e7ed      	b.n	80063a0 <__exponent+0x4c>
 80063c4:	2330      	movs	r3, #48	; 0x30
 80063c6:	3130      	adds	r1, #48	; 0x30
 80063c8:	7083      	strb	r3, [r0, #2]
 80063ca:	70c1      	strb	r1, [r0, #3]
 80063cc:	1d03      	adds	r3, r0, #4
 80063ce:	e7f1      	b.n	80063b4 <__exponent+0x60>

080063d0 <_printf_float>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	ed2d 8b02 	vpush	{d8}
 80063d8:	b08d      	sub	sp, #52	; 0x34
 80063da:	460c      	mov	r4, r1
 80063dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063e0:	4616      	mov	r6, r2
 80063e2:	461f      	mov	r7, r3
 80063e4:	4605      	mov	r5, r0
 80063e6:	f001 fa91 	bl	800790c <_localeconv_r>
 80063ea:	f8d0 a000 	ldr.w	sl, [r0]
 80063ee:	4650      	mov	r0, sl
 80063f0:	f7f9 fef6 	bl	80001e0 <strlen>
 80063f4:	2300      	movs	r3, #0
 80063f6:	930a      	str	r3, [sp, #40]	; 0x28
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006404:	3307      	adds	r3, #7
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	f103 0208 	add.w	r2, r3, #8
 800640e:	f8c8 2000 	str.w	r2, [r8]
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800641a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800641e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006422:	9307      	str	r3, [sp, #28]
 8006424:	f8cd 8018 	str.w	r8, [sp, #24]
 8006428:	ee08 0a10 	vmov	s16, r0
 800642c:	4b9f      	ldr	r3, [pc, #636]	; (80066ac <_printf_float+0x2dc>)
 800642e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006432:	f04f 32ff 	mov.w	r2, #4294967295
 8006436:	f7fa fb81 	bl	8000b3c <__aeabi_dcmpun>
 800643a:	bb88      	cbnz	r0, 80064a0 <_printf_float+0xd0>
 800643c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006440:	4b9a      	ldr	r3, [pc, #616]	; (80066ac <_printf_float+0x2dc>)
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	f7fa fb5b 	bl	8000b00 <__aeabi_dcmple>
 800644a:	bb48      	cbnz	r0, 80064a0 <_printf_float+0xd0>
 800644c:	2200      	movs	r2, #0
 800644e:	2300      	movs	r3, #0
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fb4a 	bl	8000aec <__aeabi_dcmplt>
 8006458:	b110      	cbz	r0, 8006460 <_printf_float+0x90>
 800645a:	232d      	movs	r3, #45	; 0x2d
 800645c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006460:	4b93      	ldr	r3, [pc, #588]	; (80066b0 <_printf_float+0x2e0>)
 8006462:	4894      	ldr	r0, [pc, #592]	; (80066b4 <_printf_float+0x2e4>)
 8006464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006468:	bf94      	ite	ls
 800646a:	4698      	movls	r8, r3
 800646c:	4680      	movhi	r8, r0
 800646e:	2303      	movs	r3, #3
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	f023 0204 	bic.w	r2, r3, #4
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	9700      	str	r7, [sp, #0]
 8006480:	4633      	mov	r3, r6
 8006482:	aa0b      	add	r2, sp, #44	; 0x2c
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f9d8 	bl	800683c <_printf_common>
 800648c:	3001      	adds	r0, #1
 800648e:	f040 8090 	bne.w	80065b2 <_printf_float+0x1e2>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	b00d      	add	sp, #52	; 0x34
 8006498:	ecbd 8b02 	vpop	{d8}
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	4640      	mov	r0, r8
 80064a6:	4649      	mov	r1, r9
 80064a8:	f7fa fb48 	bl	8000b3c <__aeabi_dcmpun>
 80064ac:	b140      	cbz	r0, 80064c0 <_printf_float+0xf0>
 80064ae:	464b      	mov	r3, r9
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbc      	itt	lt
 80064b4:	232d      	movlt	r3, #45	; 0x2d
 80064b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ba:	487f      	ldr	r0, [pc, #508]	; (80066b8 <_printf_float+0x2e8>)
 80064bc:	4b7f      	ldr	r3, [pc, #508]	; (80066bc <_printf_float+0x2ec>)
 80064be:	e7d1      	b.n	8006464 <_printf_float+0x94>
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064c6:	9206      	str	r2, [sp, #24]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	d13f      	bne.n	800654c <_printf_float+0x17c>
 80064cc:	2306      	movs	r3, #6
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	6861      	ldr	r1, [r4, #4]
 80064d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064d8:	2300      	movs	r3, #0
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	ab0a      	add	r3, sp, #40	; 0x28
 80064de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064e2:	ab09      	add	r3, sp, #36	; 0x24
 80064e4:	ec49 8b10 	vmov	d0, r8, r9
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064f0:	4628      	mov	r0, r5
 80064f2:	f7ff fecd 	bl	8006290 <__cvt>
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064fa:	2b47      	cmp	r3, #71	; 0x47
 80064fc:	4680      	mov	r8, r0
 80064fe:	d108      	bne.n	8006512 <_printf_float+0x142>
 8006500:	1cc8      	adds	r0, r1, #3
 8006502:	db02      	blt.n	800650a <_printf_float+0x13a>
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	4299      	cmp	r1, r3
 8006508:	dd41      	ble.n	800658e <_printf_float+0x1be>
 800650a:	f1ab 0b02 	sub.w	fp, fp, #2
 800650e:	fa5f fb8b 	uxtb.w	fp, fp
 8006512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006516:	d820      	bhi.n	800655a <_printf_float+0x18a>
 8006518:	3901      	subs	r1, #1
 800651a:	465a      	mov	r2, fp
 800651c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006520:	9109      	str	r1, [sp, #36]	; 0x24
 8006522:	f7ff ff17 	bl	8006354 <__exponent>
 8006526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006528:	1813      	adds	r3, r2, r0
 800652a:	2a01      	cmp	r2, #1
 800652c:	4681      	mov	r9, r0
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	dc02      	bgt.n	8006538 <_printf_float+0x168>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	07d2      	lsls	r2, r2, #31
 8006536:	d501      	bpl.n	800653c <_printf_float+0x16c>
 8006538:	3301      	adds	r3, #1
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006540:	2b00      	cmp	r3, #0
 8006542:	d09c      	beq.n	800647e <_printf_float+0xae>
 8006544:	232d      	movs	r3, #45	; 0x2d
 8006546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800654a:	e798      	b.n	800647e <_printf_float+0xae>
 800654c:	9a06      	ldr	r2, [sp, #24]
 800654e:	2a47      	cmp	r2, #71	; 0x47
 8006550:	d1be      	bne.n	80064d0 <_printf_float+0x100>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1bc      	bne.n	80064d0 <_printf_float+0x100>
 8006556:	2301      	movs	r3, #1
 8006558:	e7b9      	b.n	80064ce <_printf_float+0xfe>
 800655a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800655e:	d118      	bne.n	8006592 <_printf_float+0x1c2>
 8006560:	2900      	cmp	r1, #0
 8006562:	6863      	ldr	r3, [r4, #4]
 8006564:	dd0b      	ble.n	800657e <_printf_float+0x1ae>
 8006566:	6121      	str	r1, [r4, #16]
 8006568:	b913      	cbnz	r3, 8006570 <_printf_float+0x1a0>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	07d0      	lsls	r0, r2, #31
 800656e:	d502      	bpl.n	8006576 <_printf_float+0x1a6>
 8006570:	3301      	adds	r3, #1
 8006572:	440b      	add	r3, r1
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	65a1      	str	r1, [r4, #88]	; 0x58
 8006578:	f04f 0900 	mov.w	r9, #0
 800657c:	e7de      	b.n	800653c <_printf_float+0x16c>
 800657e:	b913      	cbnz	r3, 8006586 <_printf_float+0x1b6>
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	07d2      	lsls	r2, r2, #31
 8006584:	d501      	bpl.n	800658a <_printf_float+0x1ba>
 8006586:	3302      	adds	r3, #2
 8006588:	e7f4      	b.n	8006574 <_printf_float+0x1a4>
 800658a:	2301      	movs	r3, #1
 800658c:	e7f2      	b.n	8006574 <_printf_float+0x1a4>
 800658e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006594:	4299      	cmp	r1, r3
 8006596:	db05      	blt.n	80065a4 <_printf_float+0x1d4>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	6121      	str	r1, [r4, #16]
 800659c:	07d8      	lsls	r0, r3, #31
 800659e:	d5ea      	bpl.n	8006576 <_printf_float+0x1a6>
 80065a0:	1c4b      	adds	r3, r1, #1
 80065a2:	e7e7      	b.n	8006574 <_printf_float+0x1a4>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	bfd4      	ite	le
 80065a8:	f1c1 0202 	rsble	r2, r1, #2
 80065ac:	2201      	movgt	r2, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	e7e0      	b.n	8006574 <_printf_float+0x1a4>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	055a      	lsls	r2, r3, #21
 80065b6:	d407      	bmi.n	80065c8 <_printf_float+0x1f8>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	4642      	mov	r2, r8
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	d12c      	bne.n	8006620 <_printf_float+0x250>
 80065c6:	e764      	b.n	8006492 <_printf_float+0xc2>
 80065c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065cc:	f240 80e0 	bls.w	8006790 <_printf_float+0x3c0>
 80065d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	f7fa fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d034      	beq.n	800664a <_printf_float+0x27a>
 80065e0:	4a37      	ldr	r2, [pc, #220]	; (80066c0 <_printf_float+0x2f0>)
 80065e2:	2301      	movs	r3, #1
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f af51 	beq.w	8006492 <_printf_float+0xc2>
 80065f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f4:	429a      	cmp	r2, r3
 80065f6:	db02      	blt.n	80065fe <_printf_float+0x22e>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07d8      	lsls	r0, r3, #31
 80065fc:	d510      	bpl.n	8006620 <_printf_float+0x250>
 80065fe:	ee18 3a10 	vmov	r3, s16
 8006602:	4652      	mov	r2, sl
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af41 	beq.w	8006492 <_printf_float+0xc2>
 8006610:	f04f 0800 	mov.w	r8, #0
 8006614:	f104 091a 	add.w	r9, r4, #26
 8006618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661a:	3b01      	subs	r3, #1
 800661c:	4543      	cmp	r3, r8
 800661e:	dc09      	bgt.n	8006634 <_printf_float+0x264>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	079b      	lsls	r3, r3, #30
 8006624:	f100 8105 	bmi.w	8006832 <_printf_float+0x462>
 8006628:	68e0      	ldr	r0, [r4, #12]
 800662a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800662c:	4298      	cmp	r0, r3
 800662e:	bfb8      	it	lt
 8006630:	4618      	movlt	r0, r3
 8006632:	e730      	b.n	8006496 <_printf_float+0xc6>
 8006634:	2301      	movs	r3, #1
 8006636:	464a      	mov	r2, r9
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af27 	beq.w	8006492 <_printf_float+0xc2>
 8006644:	f108 0801 	add.w	r8, r8, #1
 8006648:	e7e6      	b.n	8006618 <_printf_float+0x248>
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	dc39      	bgt.n	80066c4 <_printf_float+0x2f4>
 8006650:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <_printf_float+0x2f0>)
 8006652:	2301      	movs	r3, #1
 8006654:	4631      	mov	r1, r6
 8006656:	4628      	mov	r0, r5
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	f43f af19 	beq.w	8006492 <_printf_float+0xc2>
 8006660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006664:	4313      	orrs	r3, r2
 8006666:	d102      	bne.n	800666e <_printf_float+0x29e>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	d5d8      	bpl.n	8006620 <_printf_float+0x250>
 800666e:	ee18 3a10 	vmov	r3, s16
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af09 	beq.w	8006492 <_printf_float+0xc2>
 8006680:	f04f 0900 	mov.w	r9, #0
 8006684:	f104 0a1a 	add.w	sl, r4, #26
 8006688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668a:	425b      	negs	r3, r3
 800668c:	454b      	cmp	r3, r9
 800668e:	dc01      	bgt.n	8006694 <_printf_float+0x2c4>
 8006690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006692:	e792      	b.n	80065ba <_printf_float+0x1ea>
 8006694:	2301      	movs	r3, #1
 8006696:	4652      	mov	r2, sl
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f aef7 	beq.w	8006492 <_printf_float+0xc2>
 80066a4:	f109 0901 	add.w	r9, r9, #1
 80066a8:	e7ee      	b.n	8006688 <_printf_float+0x2b8>
 80066aa:	bf00      	nop
 80066ac:	7fefffff 	.word	0x7fefffff
 80066b0:	08009500 	.word	0x08009500
 80066b4:	08009504 	.word	0x08009504
 80066b8:	0800950c 	.word	0x0800950c
 80066bc:	08009508 	.word	0x08009508
 80066c0:	08009510 	.word	0x08009510
 80066c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066c8:	429a      	cmp	r2, r3
 80066ca:	bfa8      	it	ge
 80066cc:	461a      	movge	r2, r3
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	4691      	mov	r9, r2
 80066d2:	dc37      	bgt.n	8006744 <_printf_float+0x374>
 80066d4:	f04f 0b00 	mov.w	fp, #0
 80066d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066dc:	f104 021a 	add.w	r2, r4, #26
 80066e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066e2:	9305      	str	r3, [sp, #20]
 80066e4:	eba3 0309 	sub.w	r3, r3, r9
 80066e8:	455b      	cmp	r3, fp
 80066ea:	dc33      	bgt.n	8006754 <_printf_float+0x384>
 80066ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066f0:	429a      	cmp	r2, r3
 80066f2:	db3b      	blt.n	800676c <_printf_float+0x39c>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	07da      	lsls	r2, r3, #31
 80066f8:	d438      	bmi.n	800676c <_printf_float+0x39c>
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	9a05      	ldr	r2, [sp, #20]
 80066fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006700:	1a9a      	subs	r2, r3, r2
 8006702:	eba3 0901 	sub.w	r9, r3, r1
 8006706:	4591      	cmp	r9, r2
 8006708:	bfa8      	it	ge
 800670a:	4691      	movge	r9, r2
 800670c:	f1b9 0f00 	cmp.w	r9, #0
 8006710:	dc35      	bgt.n	800677e <_printf_float+0x3ae>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671a:	f104 0a1a 	add.w	sl, r4, #26
 800671e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	eba3 0309 	sub.w	r3, r3, r9
 8006728:	4543      	cmp	r3, r8
 800672a:	f77f af79 	ble.w	8006620 <_printf_float+0x250>
 800672e:	2301      	movs	r3, #1
 8006730:	4652      	mov	r2, sl
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	f43f aeaa 	beq.w	8006492 <_printf_float+0xc2>
 800673e:	f108 0801 	add.w	r8, r8, #1
 8006742:	e7ec      	b.n	800671e <_printf_float+0x34e>
 8006744:	4613      	mov	r3, r2
 8006746:	4631      	mov	r1, r6
 8006748:	4642      	mov	r2, r8
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	d1c0      	bne.n	80066d4 <_printf_float+0x304>
 8006752:	e69e      	b.n	8006492 <_printf_float+0xc2>
 8006754:	2301      	movs	r3, #1
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	9205      	str	r2, [sp, #20]
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f ae97 	beq.w	8006492 <_printf_float+0xc2>
 8006764:	9a05      	ldr	r2, [sp, #20]
 8006766:	f10b 0b01 	add.w	fp, fp, #1
 800676a:	e7b9      	b.n	80066e0 <_printf_float+0x310>
 800676c:	ee18 3a10 	vmov	r3, s16
 8006770:	4652      	mov	r2, sl
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d1be      	bne.n	80066fa <_printf_float+0x32a>
 800677c:	e689      	b.n	8006492 <_printf_float+0xc2>
 800677e:	9a05      	ldr	r2, [sp, #20]
 8006780:	464b      	mov	r3, r9
 8006782:	4442      	add	r2, r8
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c1      	bne.n	8006712 <_printf_float+0x342>
 800678e:	e680      	b.n	8006492 <_printf_float+0xc2>
 8006790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006792:	2a01      	cmp	r2, #1
 8006794:	dc01      	bgt.n	800679a <_printf_float+0x3ca>
 8006796:	07db      	lsls	r3, r3, #31
 8006798:	d538      	bpl.n	800680c <_printf_float+0x43c>
 800679a:	2301      	movs	r3, #1
 800679c:	4642      	mov	r2, r8
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f ae74 	beq.w	8006492 <_printf_float+0xc2>
 80067aa:	ee18 3a10 	vmov	r3, s16
 80067ae:	4652      	mov	r2, sl
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f ae6b 	beq.w	8006492 <_printf_float+0xc2>
 80067bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067c0:	2200      	movs	r2, #0
 80067c2:	2300      	movs	r3, #0
 80067c4:	f7fa f988 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c8:	b9d8      	cbnz	r0, 8006802 <_printf_float+0x432>
 80067ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067cc:	f108 0201 	add.w	r2, r8, #1
 80067d0:	3b01      	subs	r3, #1
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	d10e      	bne.n	80067fa <_printf_float+0x42a>
 80067dc:	e659      	b.n	8006492 <_printf_float+0xc2>
 80067de:	2301      	movs	r3, #1
 80067e0:	4652      	mov	r2, sl
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f ae52 	beq.w	8006492 <_printf_float+0xc2>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	4543      	cmp	r3, r8
 80067f8:	dcf1      	bgt.n	80067de <_printf_float+0x40e>
 80067fa:	464b      	mov	r3, r9
 80067fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006800:	e6dc      	b.n	80065bc <_printf_float+0x1ec>
 8006802:	f04f 0800 	mov.w	r8, #0
 8006806:	f104 0a1a 	add.w	sl, r4, #26
 800680a:	e7f2      	b.n	80067f2 <_printf_float+0x422>
 800680c:	2301      	movs	r3, #1
 800680e:	4642      	mov	r2, r8
 8006810:	e7df      	b.n	80067d2 <_printf_float+0x402>
 8006812:	2301      	movs	r3, #1
 8006814:	464a      	mov	r2, r9
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae38 	beq.w	8006492 <_printf_float+0xc2>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800682a:	1a5b      	subs	r3, r3, r1
 800682c:	4543      	cmp	r3, r8
 800682e:	dcf0      	bgt.n	8006812 <_printf_float+0x442>
 8006830:	e6fa      	b.n	8006628 <_printf_float+0x258>
 8006832:	f04f 0800 	mov.w	r8, #0
 8006836:	f104 0919 	add.w	r9, r4, #25
 800683a:	e7f4      	b.n	8006826 <_printf_float+0x456>

0800683c <_printf_common>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	4616      	mov	r6, r2
 8006842:	4699      	mov	r9, r3
 8006844:	688a      	ldr	r2, [r1, #8]
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800684c:	4293      	cmp	r3, r2
 800684e:	bfb8      	it	lt
 8006850:	4613      	movlt	r3, r2
 8006852:	6033      	str	r3, [r6, #0]
 8006854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006858:	4607      	mov	r7, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b10a      	cbz	r2, 8006862 <_printf_common+0x26>
 800685e:	3301      	adds	r3, #1
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	0699      	lsls	r1, r3, #26
 8006866:	bf42      	ittt	mi
 8006868:	6833      	ldrmi	r3, [r6, #0]
 800686a:	3302      	addmi	r3, #2
 800686c:	6033      	strmi	r3, [r6, #0]
 800686e:	6825      	ldr	r5, [r4, #0]
 8006870:	f015 0506 	ands.w	r5, r5, #6
 8006874:	d106      	bne.n	8006884 <_printf_common+0x48>
 8006876:	f104 0a19 	add.w	sl, r4, #25
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	6832      	ldr	r2, [r6, #0]
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	42ab      	cmp	r3, r5
 8006882:	dc26      	bgt.n	80068d2 <_printf_common+0x96>
 8006884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006888:	1e13      	subs	r3, r2, #0
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	bf18      	it	ne
 800688e:	2301      	movne	r3, #1
 8006890:	0692      	lsls	r2, r2, #26
 8006892:	d42b      	bmi.n	80068ec <_printf_common+0xb0>
 8006894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006898:	4649      	mov	r1, r9
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d01e      	beq.n	80068e0 <_printf_common+0xa4>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	68e5      	ldr	r5, [r4, #12]
 80068a6:	6832      	ldr	r2, [r6, #0]
 80068a8:	f003 0306 	and.w	r3, r3, #6
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	bf08      	it	eq
 80068b0:	1aad      	subeq	r5, r5, r2
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	bf0c      	ite	eq
 80068b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068bc:	2500      	movne	r5, #0
 80068be:	4293      	cmp	r3, r2
 80068c0:	bfc4      	itt	gt
 80068c2:	1a9b      	subgt	r3, r3, r2
 80068c4:	18ed      	addgt	r5, r5, r3
 80068c6:	2600      	movs	r6, #0
 80068c8:	341a      	adds	r4, #26
 80068ca:	42b5      	cmp	r5, r6
 80068cc:	d11a      	bne.n	8006904 <_printf_common+0xc8>
 80068ce:	2000      	movs	r0, #0
 80068d0:	e008      	b.n	80068e4 <_printf_common+0xa8>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4652      	mov	r2, sl
 80068d6:	4649      	mov	r1, r9
 80068d8:	4638      	mov	r0, r7
 80068da:	47c0      	blx	r8
 80068dc:	3001      	adds	r0, #1
 80068de:	d103      	bne.n	80068e8 <_printf_common+0xac>
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e8:	3501      	adds	r5, #1
 80068ea:	e7c6      	b.n	800687a <_printf_common+0x3e>
 80068ec:	18e1      	adds	r1, r4, r3
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	2030      	movs	r0, #48	; 0x30
 80068f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f6:	4422      	add	r2, r4
 80068f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006900:	3302      	adds	r3, #2
 8006902:	e7c7      	b.n	8006894 <_printf_common+0x58>
 8006904:	2301      	movs	r3, #1
 8006906:	4622      	mov	r2, r4
 8006908:	4649      	mov	r1, r9
 800690a:	4638      	mov	r0, r7
 800690c:	47c0      	blx	r8
 800690e:	3001      	adds	r0, #1
 8006910:	d0e6      	beq.n	80068e0 <_printf_common+0xa4>
 8006912:	3601      	adds	r6, #1
 8006914:	e7d9      	b.n	80068ca <_printf_common+0x8e>
	...

08006918 <_printf_i>:
 8006918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	7e0f      	ldrb	r7, [r1, #24]
 800691e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006920:	2f78      	cmp	r7, #120	; 0x78
 8006922:	4691      	mov	r9, r2
 8006924:	4680      	mov	r8, r0
 8006926:	460c      	mov	r4, r1
 8006928:	469a      	mov	sl, r3
 800692a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800692e:	d807      	bhi.n	8006940 <_printf_i+0x28>
 8006930:	2f62      	cmp	r7, #98	; 0x62
 8006932:	d80a      	bhi.n	800694a <_printf_i+0x32>
 8006934:	2f00      	cmp	r7, #0
 8006936:	f000 80d8 	beq.w	8006aea <_printf_i+0x1d2>
 800693a:	2f58      	cmp	r7, #88	; 0x58
 800693c:	f000 80a3 	beq.w	8006a86 <_printf_i+0x16e>
 8006940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006948:	e03a      	b.n	80069c0 <_printf_i+0xa8>
 800694a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800694e:	2b15      	cmp	r3, #21
 8006950:	d8f6      	bhi.n	8006940 <_printf_i+0x28>
 8006952:	a101      	add	r1, pc, #4	; (adr r1, 8006958 <_printf_i+0x40>)
 8006954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006958:	080069b1 	.word	0x080069b1
 800695c:	080069c5 	.word	0x080069c5
 8006960:	08006941 	.word	0x08006941
 8006964:	08006941 	.word	0x08006941
 8006968:	08006941 	.word	0x08006941
 800696c:	08006941 	.word	0x08006941
 8006970:	080069c5 	.word	0x080069c5
 8006974:	08006941 	.word	0x08006941
 8006978:	08006941 	.word	0x08006941
 800697c:	08006941 	.word	0x08006941
 8006980:	08006941 	.word	0x08006941
 8006984:	08006ad1 	.word	0x08006ad1
 8006988:	080069f5 	.word	0x080069f5
 800698c:	08006ab3 	.word	0x08006ab3
 8006990:	08006941 	.word	0x08006941
 8006994:	08006941 	.word	0x08006941
 8006998:	08006af3 	.word	0x08006af3
 800699c:	08006941 	.word	0x08006941
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	08006941 	.word	0x08006941
 80069a8:	08006941 	.word	0x08006941
 80069ac:	08006abb 	.word	0x08006abb
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	1d1a      	adds	r2, r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	602a      	str	r2, [r5, #0]
 80069b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0a3      	b.n	8006b0c <_printf_i+0x1f4>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	6829      	ldr	r1, [r5, #0]
 80069c8:	0606      	lsls	r6, r0, #24
 80069ca:	f101 0304 	add.w	r3, r1, #4
 80069ce:	d50a      	bpl.n	80069e6 <_printf_i+0xce>
 80069d0:	680e      	ldr	r6, [r1, #0]
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	da03      	bge.n	80069e0 <_printf_i+0xc8>
 80069d8:	232d      	movs	r3, #45	; 0x2d
 80069da:	4276      	negs	r6, r6
 80069dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e0:	485e      	ldr	r0, [pc, #376]	; (8006b5c <_printf_i+0x244>)
 80069e2:	230a      	movs	r3, #10
 80069e4:	e019      	b.n	8006a1a <_printf_i+0x102>
 80069e6:	680e      	ldr	r6, [r1, #0]
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069ee:	bf18      	it	ne
 80069f0:	b236      	sxthne	r6, r6
 80069f2:	e7ef      	b.n	80069d4 <_printf_i+0xbc>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	6820      	ldr	r0, [r4, #0]
 80069f8:	1d19      	adds	r1, r3, #4
 80069fa:	6029      	str	r1, [r5, #0]
 80069fc:	0601      	lsls	r1, r0, #24
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0xec>
 8006a00:	681e      	ldr	r6, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <_printf_i+0xf2>
 8006a04:	0646      	lsls	r6, r0, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0xe8>
 8006a08:	881e      	ldrh	r6, [r3, #0]
 8006a0a:	4854      	ldr	r0, [pc, #336]	; (8006b5c <_printf_i+0x244>)
 8006a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a0e:	bf0c      	ite	eq
 8006a10:	2308      	moveq	r3, #8
 8006a12:	230a      	movne	r3, #10
 8006a14:	2100      	movs	r1, #0
 8006a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a1a:	6865      	ldr	r5, [r4, #4]
 8006a1c:	60a5      	str	r5, [r4, #8]
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	bfa2      	ittt	ge
 8006a22:	6821      	ldrge	r1, [r4, #0]
 8006a24:	f021 0104 	bicge.w	r1, r1, #4
 8006a28:	6021      	strge	r1, [r4, #0]
 8006a2a:	b90e      	cbnz	r6, 8006a30 <_printf_i+0x118>
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	d04d      	beq.n	8006acc <_printf_i+0x1b4>
 8006a30:	4615      	mov	r5, r2
 8006a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a36:	fb03 6711 	mls	r7, r3, r1, r6
 8006a3a:	5dc7      	ldrb	r7, [r0, r7]
 8006a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a40:	4637      	mov	r7, r6
 8006a42:	42bb      	cmp	r3, r7
 8006a44:	460e      	mov	r6, r1
 8006a46:	d9f4      	bls.n	8006a32 <_printf_i+0x11a>
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d10b      	bne.n	8006a64 <_printf_i+0x14c>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07de      	lsls	r6, r3, #31
 8006a50:	d508      	bpl.n	8006a64 <_printf_i+0x14c>
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6861      	ldr	r1, [r4, #4]
 8006a56:	4299      	cmp	r1, r3
 8006a58:	bfde      	ittt	le
 8006a5a:	2330      	movle	r3, #48	; 0x30
 8006a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a64:	1b52      	subs	r2, r2, r5
 8006a66:	6122      	str	r2, [r4, #16]
 8006a68:	f8cd a000 	str.w	sl, [sp]
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	aa03      	add	r2, sp, #12
 8006a70:	4621      	mov	r1, r4
 8006a72:	4640      	mov	r0, r8
 8006a74:	f7ff fee2 	bl	800683c <_printf_common>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d14c      	bne.n	8006b16 <_printf_i+0x1fe>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	b004      	add	sp, #16
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a86:	4835      	ldr	r0, [pc, #212]	; (8006b5c <_printf_i+0x244>)
 8006a88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a8c:	6829      	ldr	r1, [r5, #0]
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a94:	6029      	str	r1, [r5, #0]
 8006a96:	061d      	lsls	r5, r3, #24
 8006a98:	d514      	bpl.n	8006ac4 <_printf_i+0x1ac>
 8006a9a:	07df      	lsls	r7, r3, #31
 8006a9c:	bf44      	itt	mi
 8006a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa2:	6023      	strmi	r3, [r4, #0]
 8006aa4:	b91e      	cbnz	r6, 8006aae <_printf_i+0x196>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f023 0320 	bic.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	2310      	movs	r3, #16
 8006ab0:	e7b0      	b.n	8006a14 <_printf_i+0xfc>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	f043 0320 	orr.w	r3, r3, #32
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	2378      	movs	r3, #120	; 0x78
 8006abc:	4828      	ldr	r0, [pc, #160]	; (8006b60 <_printf_i+0x248>)
 8006abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ac2:	e7e3      	b.n	8006a8c <_printf_i+0x174>
 8006ac4:	0659      	lsls	r1, r3, #25
 8006ac6:	bf48      	it	mi
 8006ac8:	b2b6      	uxthmi	r6, r6
 8006aca:	e7e6      	b.n	8006a9a <_printf_i+0x182>
 8006acc:	4615      	mov	r5, r2
 8006ace:	e7bb      	b.n	8006a48 <_printf_i+0x130>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	6826      	ldr	r6, [r4, #0]
 8006ad4:	6961      	ldr	r1, [r4, #20]
 8006ad6:	1d18      	adds	r0, r3, #4
 8006ad8:	6028      	str	r0, [r5, #0]
 8006ada:	0635      	lsls	r5, r6, #24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0x1cc>
 8006ae0:	6019      	str	r1, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0x1d2>
 8006ae4:	0670      	lsls	r0, r6, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0x1c8>
 8006ae8:	8019      	strh	r1, [r3, #0]
 8006aea:	2300      	movs	r3, #0
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	4615      	mov	r5, r2
 8006af0:	e7ba      	b.n	8006a68 <_printf_i+0x150>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	1d1a      	adds	r2, r3, #4
 8006af6:	602a      	str	r2, [r5, #0]
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	6862      	ldr	r2, [r4, #4]
 8006afc:	2100      	movs	r1, #0
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7f9 fb76 	bl	80001f0 <memchr>
 8006b04:	b108      	cbz	r0, 8006b0a <_printf_i+0x1f2>
 8006b06:	1b40      	subs	r0, r0, r5
 8006b08:	6060      	str	r0, [r4, #4]
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b14:	e7a8      	b.n	8006a68 <_printf_i+0x150>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	47d0      	blx	sl
 8006b20:	3001      	adds	r0, #1
 8006b22:	d0ab      	beq.n	8006a7c <_printf_i+0x164>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	079b      	lsls	r3, r3, #30
 8006b28:	d413      	bmi.n	8006b52 <_printf_i+0x23a>
 8006b2a:	68e0      	ldr	r0, [r4, #12]
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	bfb8      	it	lt
 8006b32:	4618      	movlt	r0, r3
 8006b34:	e7a4      	b.n	8006a80 <_printf_i+0x168>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	47d0      	blx	sl
 8006b40:	3001      	adds	r0, #1
 8006b42:	d09b      	beq.n	8006a7c <_printf_i+0x164>
 8006b44:	3501      	adds	r5, #1
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	9903      	ldr	r1, [sp, #12]
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dcf2      	bgt.n	8006b36 <_printf_i+0x21e>
 8006b50:	e7eb      	b.n	8006b2a <_printf_i+0x212>
 8006b52:	2500      	movs	r5, #0
 8006b54:	f104 0619 	add.w	r6, r4, #25
 8006b58:	e7f5      	b.n	8006b46 <_printf_i+0x22e>
 8006b5a:	bf00      	nop
 8006b5c:	08009512 	.word	0x08009512
 8006b60:	08009523 	.word	0x08009523

08006b64 <_vsniprintf_r>:
 8006b64:	b530      	push	{r4, r5, lr}
 8006b66:	4614      	mov	r4, r2
 8006b68:	2c00      	cmp	r4, #0
 8006b6a:	b09b      	sub	sp, #108	; 0x6c
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	da05      	bge.n	8006b7e <_vsniprintf_r+0x1a>
 8006b72:	238b      	movs	r3, #139	; 0x8b
 8006b74:	6003      	str	r3, [r0, #0]
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7a:	b01b      	add	sp, #108	; 0x6c
 8006b7c:	bd30      	pop	{r4, r5, pc}
 8006b7e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b86:	bf14      	ite	ne
 8006b88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b8c:	4623      	moveq	r3, r4
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b96:	9100      	str	r1, [sp, #0]
 8006b98:	9104      	str	r1, [sp, #16]
 8006b9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006b9e:	4669      	mov	r1, sp
 8006ba0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ba2:	f001 fba3 	bl	80082ec <_svfiprintf_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	bfbc      	itt	lt
 8006baa:	238b      	movlt	r3, #139	; 0x8b
 8006bac:	602b      	strlt	r3, [r5, #0]
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d0e3      	beq.n	8006b7a <_vsniprintf_r+0x16>
 8006bb2:	9b00      	ldr	r3, [sp, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e7df      	b.n	8006b7a <_vsniprintf_r+0x16>
	...

08006bbc <vsniprintf>:
 8006bbc:	b507      	push	{r0, r1, r2, lr}
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	4803      	ldr	r0, [pc, #12]	; (8006bd4 <vsniprintf+0x18>)
 8006bc8:	6800      	ldr	r0, [r0, #0]
 8006bca:	f7ff ffcb 	bl	8006b64 <_vsniprintf_r>
 8006bce:	b003      	add	sp, #12
 8006bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd4:	20002a5c 	.word	0x20002a5c

08006bd8 <_vsiprintf_r>:
 8006bd8:	b500      	push	{lr}
 8006bda:	b09b      	sub	sp, #108	; 0x6c
 8006bdc:	9100      	str	r1, [sp, #0]
 8006bde:	9104      	str	r1, [sp, #16]
 8006be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be4:	9105      	str	r1, [sp, #20]
 8006be6:	9102      	str	r1, [sp, #8]
 8006be8:	4905      	ldr	r1, [pc, #20]	; (8006c00 <_vsiprintf_r+0x28>)
 8006bea:	9103      	str	r1, [sp, #12]
 8006bec:	4669      	mov	r1, sp
 8006bee:	f001 fb7d 	bl	80082ec <_svfiprintf_r>
 8006bf2:	9b00      	ldr	r3, [sp, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	b01b      	add	sp, #108	; 0x6c
 8006bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bfe:	bf00      	nop
 8006c00:	ffff0208 	.word	0xffff0208

08006c04 <vsiprintf>:
 8006c04:	4613      	mov	r3, r2
 8006c06:	460a      	mov	r2, r1
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4802      	ldr	r0, [pc, #8]	; (8006c14 <vsiprintf+0x10>)
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f7ff bfe3 	b.w	8006bd8 <_vsiprintf_r>
 8006c12:	bf00      	nop
 8006c14:	20002a5c 	.word	0x20002a5c

08006c18 <quorem>:
 8006c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	6903      	ldr	r3, [r0, #16]
 8006c1e:	690c      	ldr	r4, [r1, #16]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	4607      	mov	r7, r0
 8006c24:	f2c0 8081 	blt.w	8006d2a <quorem+0x112>
 8006c28:	3c01      	subs	r4, #1
 8006c2a:	f101 0814 	add.w	r8, r1, #20
 8006c2e:	f100 0514 	add.w	r5, r0, #20
 8006c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c40:	3301      	adds	r3, #1
 8006c42:	429a      	cmp	r2, r3
 8006c44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c50:	d331      	bcc.n	8006cb6 <quorem+0x9e>
 8006c52:	f04f 0e00 	mov.w	lr, #0
 8006c56:	4640      	mov	r0, r8
 8006c58:	46ac      	mov	ip, r5
 8006c5a:	46f2      	mov	sl, lr
 8006c5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c60:	b293      	uxth	r3, r2
 8006c62:	fb06 e303 	mla	r3, r6, r3, lr
 8006c66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c70:	f8dc a000 	ldr.w	sl, [ip]
 8006c74:	0c12      	lsrs	r2, r2, #16
 8006c76:	fa13 f38a 	uxtah	r3, r3, sl
 8006c7a:	fb06 e202 	mla	r2, r6, r2, lr
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	9b00      	ldr	r3, [sp, #0]
 8006c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c86:	b292      	uxth	r2, r2
 8006c88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c90:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c94:	4581      	cmp	r9, r0
 8006c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9a:	f84c 3b04 	str.w	r3, [ip], #4
 8006c9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ca2:	d2db      	bcs.n	8006c5c <quorem+0x44>
 8006ca4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ca8:	b92b      	cbnz	r3, 8006cb6 <quorem+0x9e>
 8006caa:	9b01      	ldr	r3, [sp, #4]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	429d      	cmp	r5, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	d32e      	bcc.n	8006d12 <quorem+0xfa>
 8006cb4:	613c      	str	r4, [r7, #16]
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f001 f8c4 	bl	8007e44 <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	db24      	blt.n	8006d0a <quorem+0xf2>
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f04f 0c00 	mov.w	ip, #0
 8006cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ccc:	f8d0 e000 	ldr.w	lr, [r0]
 8006cd0:	b293      	uxth	r3, r2
 8006cd2:	ebac 0303 	sub.w	r3, ip, r3
 8006cd6:	0c12      	lsrs	r2, r2, #16
 8006cd8:	fa13 f38e 	uxtah	r3, r3, lr
 8006cdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cea:	45c1      	cmp	r9, r8
 8006cec:	f840 3b04 	str.w	r3, [r0], #4
 8006cf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cf4:	d2e8      	bcs.n	8006cc8 <quorem+0xb0>
 8006cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cfe:	b922      	cbnz	r2, 8006d0a <quorem+0xf2>
 8006d00:	3b04      	subs	r3, #4
 8006d02:	429d      	cmp	r5, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	d30a      	bcc.n	8006d1e <quorem+0x106>
 8006d08:	613c      	str	r4, [r7, #16]
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d1cc      	bne.n	8006cb4 <quorem+0x9c>
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	e7c7      	b.n	8006cae <quorem+0x96>
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d1f0      	bne.n	8006d08 <quorem+0xf0>
 8006d26:	3c01      	subs	r4, #1
 8006d28:	e7eb      	b.n	8006d02 <quorem+0xea>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e7ee      	b.n	8006d0c <quorem+0xf4>
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b04 	vpush	{d8-d9}
 8006d38:	ec57 6b10 	vmov	r6, r7, d0
 8006d3c:	b093      	sub	sp, #76	; 0x4c
 8006d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d44:	9106      	str	r1, [sp, #24]
 8006d46:	ee10 aa10 	vmov	sl, s0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d50:	46bb      	mov	fp, r7
 8006d52:	b975      	cbnz	r5, 8006d72 <_dtoa_r+0x42>
 8006d54:	2010      	movs	r0, #16
 8006d56:	f000 fddd 	bl	8007914 <malloc>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8006d5e:	b920      	cbnz	r0, 8006d6a <_dtoa_r+0x3a>
 8006d60:	4ba7      	ldr	r3, [pc, #668]	; (8007000 <_dtoa_r+0x2d0>)
 8006d62:	21ea      	movs	r1, #234	; 0xea
 8006d64:	48a7      	ldr	r0, [pc, #668]	; (8007004 <_dtoa_r+0x2d4>)
 8006d66:	f001 fbd1 	bl	800850c <__assert_func>
 8006d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6e:	6005      	str	r5, [r0, #0]
 8006d70:	60c5      	str	r5, [r0, #12]
 8006d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	b151      	cbz	r1, 8006d8e <_dtoa_r+0x5e>
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	604a      	str	r2, [r1, #4]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4093      	lsls	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fe1c 	bl	80079c0 <_Bfree>
 8006d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	1e3b      	subs	r3, r7, #0
 8006d90:	bfaa      	itet	ge
 8006d92:	2300      	movge	r3, #0
 8006d94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d98:	f8c8 3000 	strge.w	r3, [r8]
 8006d9c:	4b9a      	ldr	r3, [pc, #616]	; (8007008 <_dtoa_r+0x2d8>)
 8006d9e:	bfbc      	itt	lt
 8006da0:	2201      	movlt	r2, #1
 8006da2:	f8c8 2000 	strlt.w	r2, [r8]
 8006da6:	ea33 030b 	bics.w	r3, r3, fp
 8006daa:	d11b      	bne.n	8006de4 <_dtoa_r+0xb4>
 8006dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db8:	4333      	orrs	r3, r6
 8006dba:	f000 8592 	beq.w	80078e2 <_dtoa_r+0xbb2>
 8006dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc0:	b963      	cbnz	r3, 8006ddc <_dtoa_r+0xac>
 8006dc2:	4b92      	ldr	r3, [pc, #584]	; (800700c <_dtoa_r+0x2dc>)
 8006dc4:	e022      	b.n	8006e0c <_dtoa_r+0xdc>
 8006dc6:	4b92      	ldr	r3, [pc, #584]	; (8007010 <_dtoa_r+0x2e0>)
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	9801      	ldr	r0, [sp, #4]
 8006dd2:	b013      	add	sp, #76	; 0x4c
 8006dd4:	ecbd 8b04 	vpop	{d8-d9}
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	4b8b      	ldr	r3, [pc, #556]	; (800700c <_dtoa_r+0x2dc>)
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	3303      	adds	r3, #3
 8006de2:	e7f3      	b.n	8006dcc <_dtoa_r+0x9c>
 8006de4:	2200      	movs	r2, #0
 8006de6:	2300      	movs	r3, #0
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	f7f9 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8006df0:	ec4b ab19 	vmov	d9, sl, fp
 8006df4:	4680      	mov	r8, r0
 8006df6:	b158      	cbz	r0, 8006e10 <_dtoa_r+0xe0>
 8006df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 856b 	beq.w	80078dc <_dtoa_r+0xbac>
 8006e06:	4883      	ldr	r0, [pc, #524]	; (8007014 <_dtoa_r+0x2e4>)
 8006e08:	6018      	str	r0, [r3, #0]
 8006e0a:	1e43      	subs	r3, r0, #1
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	e7df      	b.n	8006dd0 <_dtoa_r+0xa0>
 8006e10:	ec4b ab10 	vmov	d0, sl, fp
 8006e14:	aa10      	add	r2, sp, #64	; 0x40
 8006e16:	a911      	add	r1, sp, #68	; 0x44
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 f8b9 	bl	8007f90 <__d2b>
 8006e1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e22:	ee08 0a10 	vmov	s16, r0
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	f000 8084 	beq.w	8006f34 <_dtoa_r+0x204>
 8006e2c:	ee19 3a90 	vmov	r3, s19
 8006e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e38:	4656      	mov	r6, sl
 8006e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006e46:	4b74      	ldr	r3, [pc, #464]	; (8007018 <_dtoa_r+0x2e8>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 fa23 	bl	8000298 <__aeabi_dsub>
 8006e52:	a365      	add	r3, pc, #404	; (adr r3, 8006fe8 <_dtoa_r+0x2b8>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fbd6 	bl	8000608 <__aeabi_dmul>
 8006e5c:	a364      	add	r3, pc, #400	; (adr r3, 8006ff0 <_dtoa_r+0x2c0>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4606      	mov	r6, r0
 8006e68:	4628      	mov	r0, r5
 8006e6a:	460f      	mov	r7, r1
 8006e6c:	f7f9 fb62 	bl	8000534 <__aeabi_i2d>
 8006e70:	a361      	add	r3, pc, #388	; (adr r3, 8006ff8 <_dtoa_r+0x2c8>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fbc7 	bl	8000608 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4639      	mov	r1, r7
 8006e82:	f7f9 fa0b 	bl	800029c <__adddf3>
 8006e86:	4606      	mov	r6, r0
 8006e88:	460f      	mov	r7, r1
 8006e8a:	f7f9 fe6d 	bl	8000b68 <__aeabi_d2iz>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	9000      	str	r0, [sp, #0]
 8006e92:	2300      	movs	r3, #0
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 fe28 	bl	8000aec <__aeabi_dcmplt>
 8006e9c:	b150      	cbz	r0, 8006eb4 <_dtoa_r+0x184>
 8006e9e:	9800      	ldr	r0, [sp, #0]
 8006ea0:	f7f9 fb48 	bl	8000534 <__aeabi_i2d>
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	f7f9 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eac:	b910      	cbnz	r0, 8006eb4 <_dtoa_r+0x184>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b16      	cmp	r3, #22
 8006eb8:	d85a      	bhi.n	8006f70 <_dtoa_r+0x240>
 8006eba:	9a00      	ldr	r2, [sp, #0]
 8006ebc:	4b57      	ldr	r3, [pc, #348]	; (800701c <_dtoa_r+0x2ec>)
 8006ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	ec51 0b19 	vmov	r0, r1, d9
 8006eca:	f7f9 fe0f 	bl	8000aec <__aeabi_dcmplt>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d050      	beq.n	8006f74 <_dtoa_r+0x244>
 8006ed2:	9b00      	ldr	r3, [sp, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ede:	1b5d      	subs	r5, r3, r5
 8006ee0:	1e6b      	subs	r3, r5, #1
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	bf45      	ittet	mi
 8006ee6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006eea:	9304      	strmi	r3, [sp, #16]
 8006eec:	2300      	movpl	r3, #0
 8006eee:	2300      	movmi	r3, #0
 8006ef0:	bf4c      	ite	mi
 8006ef2:	9305      	strmi	r3, [sp, #20]
 8006ef4:	9304      	strpl	r3, [sp, #16]
 8006ef6:	9b00      	ldr	r3, [sp, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db3d      	blt.n	8006f78 <_dtoa_r+0x248>
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	9a00      	ldr	r2, [sp, #0]
 8006f00:	920a      	str	r2, [sp, #40]	; 0x28
 8006f02:	4413      	add	r3, r2
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	f200 8089 	bhi.w	8007024 <_dtoa_r+0x2f4>
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	bfc4      	itt	gt
 8006f16:	3b04      	subgt	r3, #4
 8006f18:	9306      	strgt	r3, [sp, #24]
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f20:	bfcc      	ite	gt
 8006f22:	2500      	movgt	r5, #0
 8006f24:	2501      	movle	r5, #1
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	f200 8087 	bhi.w	800703a <_dtoa_r+0x30a>
 8006f2c:	e8df f003 	tbb	[pc, r3]
 8006f30:	59383a2d 	.word	0x59383a2d
 8006f34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f38:	441d      	add	r5, r3
 8006f3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	bfc1      	itttt	gt
 8006f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006f4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f52:	bfda      	itte	le
 8006f54:	f1c3 0320 	rsble	r3, r3, #32
 8006f58:	fa06 f003 	lslle.w	r0, r6, r3
 8006f5c:	4318      	orrgt	r0, r3
 8006f5e:	f7f9 fad9 	bl	8000514 <__aeabi_ui2d>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4606      	mov	r6, r0
 8006f66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f6a:	3d01      	subs	r5, #1
 8006f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6e:	e76a      	b.n	8006e46 <_dtoa_r+0x116>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e7b2      	b.n	8006eda <_dtoa_r+0x1aa>
 8006f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f76:	e7b1      	b.n	8006edc <_dtoa_r+0x1ac>
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	9a00      	ldr	r2, [sp, #0]
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	4253      	negs	r3, r2
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	2300      	movs	r3, #0
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
 8006f88:	e7bf      	b.n	8006f0a <_dtoa_r+0x1da>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc55      	bgt.n	8007040 <_dtoa_r+0x310>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f9e:	e00c      	b.n	8006fba <_dtoa_r+0x28a>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7f3      	b.n	8006f8c <_dtoa_r+0x25c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	4413      	add	r3, r2
 8006fae:	9302      	str	r3, [sp, #8]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	bfb8      	it	lt
 8006fb8:	2301      	movlt	r3, #1
 8006fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	6042      	str	r2, [r0, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	f102 0614 	add.w	r6, r2, #20
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	6841      	ldr	r1, [r0, #4]
 8006fca:	d93d      	bls.n	8007048 <_dtoa_r+0x318>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fcb7 	bl	8007940 <_Balloc>
 8006fd2:	9001      	str	r0, [sp, #4]
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d13b      	bne.n	8007050 <_dtoa_r+0x320>
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <_dtoa_r+0x2f0>)
 8006fda:	4602      	mov	r2, r0
 8006fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fe0:	e6c0      	b.n	8006d64 <_dtoa_r+0x34>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7df      	b.n	8006fa6 <_dtoa_r+0x276>
 8006fe6:	bf00      	nop
 8006fe8:	636f4361 	.word	0x636f4361
 8006fec:	3fd287a7 	.word	0x3fd287a7
 8006ff0:	8b60c8b3 	.word	0x8b60c8b3
 8006ff4:	3fc68a28 	.word	0x3fc68a28
 8006ff8:	509f79fb 	.word	0x509f79fb
 8006ffc:	3fd34413 	.word	0x3fd34413
 8007000:	08009541 	.word	0x08009541
 8007004:	08009558 	.word	0x08009558
 8007008:	7ff00000 	.word	0x7ff00000
 800700c:	0800953d 	.word	0x0800953d
 8007010:	08009534 	.word	0x08009534
 8007014:	08009511 	.word	0x08009511
 8007018:	3ff80000 	.word	0x3ff80000
 800701c:	08009648 	.word	0x08009648
 8007020:	080095b3 	.word	0x080095b3
 8007024:	2501      	movs	r5, #1
 8007026:	2300      	movs	r3, #0
 8007028:	9306      	str	r3, [sp, #24]
 800702a:	9508      	str	r5, [sp, #32]
 800702c:	f04f 33ff 	mov.w	r3, #4294967295
 8007030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	2312      	movs	r3, #18
 8007038:	e7b0      	b.n	8006f9c <_dtoa_r+0x26c>
 800703a:	2301      	movs	r3, #1
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	e7f5      	b.n	800702c <_dtoa_r+0x2fc>
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007046:	e7b8      	b.n	8006fba <_dtoa_r+0x28a>
 8007048:	3101      	adds	r1, #1
 800704a:	6041      	str	r1, [r0, #4]
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	e7b8      	b.n	8006fc2 <_dtoa_r+0x292>
 8007050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	2b0e      	cmp	r3, #14
 800705a:	f200 809d 	bhi.w	8007198 <_dtoa_r+0x468>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f000 809a 	beq.w	8007198 <_dtoa_r+0x468>
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	dd32      	ble.n	80070d0 <_dtoa_r+0x3a0>
 800706a:	4ab7      	ldr	r2, [pc, #732]	; (8007348 <_dtoa_r+0x618>)
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007078:	9b00      	ldr	r3, [sp, #0]
 800707a:	05d8      	lsls	r0, r3, #23
 800707c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007080:	d516      	bpl.n	80070b0 <_dtoa_r+0x380>
 8007082:	4bb2      	ldr	r3, [pc, #712]	; (800734c <_dtoa_r+0x61c>)
 8007084:	ec51 0b19 	vmov	r0, r1, d9
 8007088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800708c:	f7f9 fbe6 	bl	800085c <__aeabi_ddiv>
 8007090:	f007 070f 	and.w	r7, r7, #15
 8007094:	4682      	mov	sl, r0
 8007096:	468b      	mov	fp, r1
 8007098:	2503      	movs	r5, #3
 800709a:	4eac      	ldr	r6, [pc, #688]	; (800734c <_dtoa_r+0x61c>)
 800709c:	b957      	cbnz	r7, 80070b4 <_dtoa_r+0x384>
 800709e:	4642      	mov	r2, r8
 80070a0:	464b      	mov	r3, r9
 80070a2:	4650      	mov	r0, sl
 80070a4:	4659      	mov	r1, fp
 80070a6:	f7f9 fbd9 	bl	800085c <__aeabi_ddiv>
 80070aa:	4682      	mov	sl, r0
 80070ac:	468b      	mov	fp, r1
 80070ae:	e028      	b.n	8007102 <_dtoa_r+0x3d2>
 80070b0:	2502      	movs	r5, #2
 80070b2:	e7f2      	b.n	800709a <_dtoa_r+0x36a>
 80070b4:	07f9      	lsls	r1, r7, #31
 80070b6:	d508      	bpl.n	80070ca <_dtoa_r+0x39a>
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070c0:	f7f9 faa2 	bl	8000608 <__aeabi_dmul>
 80070c4:	3501      	adds	r5, #1
 80070c6:	4680      	mov	r8, r0
 80070c8:	4689      	mov	r9, r1
 80070ca:	107f      	asrs	r7, r7, #1
 80070cc:	3608      	adds	r6, #8
 80070ce:	e7e5      	b.n	800709c <_dtoa_r+0x36c>
 80070d0:	f000 809b 	beq.w	800720a <_dtoa_r+0x4da>
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	4f9d      	ldr	r7, [pc, #628]	; (800734c <_dtoa_r+0x61c>)
 80070d8:	425e      	negs	r6, r3
 80070da:	4b9b      	ldr	r3, [pc, #620]	; (8007348 <_dtoa_r+0x618>)
 80070dc:	f006 020f 	and.w	r2, r6, #15
 80070e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	ec51 0b19 	vmov	r0, r1, d9
 80070ec:	f7f9 fa8c 	bl	8000608 <__aeabi_dmul>
 80070f0:	1136      	asrs	r6, r6, #4
 80070f2:	4682      	mov	sl, r0
 80070f4:	468b      	mov	fp, r1
 80070f6:	2300      	movs	r3, #0
 80070f8:	2502      	movs	r5, #2
 80070fa:	2e00      	cmp	r6, #0
 80070fc:	d17a      	bne.n	80071f4 <_dtoa_r+0x4c4>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1d3      	bne.n	80070aa <_dtoa_r+0x37a>
 8007102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8082 	beq.w	800720e <_dtoa_r+0x4de>
 800710a:	4b91      	ldr	r3, [pc, #580]	; (8007350 <_dtoa_r+0x620>)
 800710c:	2200      	movs	r2, #0
 800710e:	4650      	mov	r0, sl
 8007110:	4659      	mov	r1, fp
 8007112:	f7f9 fceb 	bl	8000aec <__aeabi_dcmplt>
 8007116:	2800      	cmp	r0, #0
 8007118:	d079      	beq.n	800720e <_dtoa_r+0x4de>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d076      	beq.n	800720e <_dtoa_r+0x4de>
 8007120:	9b02      	ldr	r3, [sp, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	dd36      	ble.n	8007194 <_dtoa_r+0x464>
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	1e5f      	subs	r7, r3, #1
 800712e:	2200      	movs	r2, #0
 8007130:	4b88      	ldr	r3, [pc, #544]	; (8007354 <_dtoa_r+0x624>)
 8007132:	f7f9 fa69 	bl	8000608 <__aeabi_dmul>
 8007136:	9e02      	ldr	r6, [sp, #8]
 8007138:	4682      	mov	sl, r0
 800713a:	468b      	mov	fp, r1
 800713c:	3501      	adds	r5, #1
 800713e:	4628      	mov	r0, r5
 8007140:	f7f9 f9f8 	bl	8000534 <__aeabi_i2d>
 8007144:	4652      	mov	r2, sl
 8007146:	465b      	mov	r3, fp
 8007148:	f7f9 fa5e 	bl	8000608 <__aeabi_dmul>
 800714c:	4b82      	ldr	r3, [pc, #520]	; (8007358 <_dtoa_r+0x628>)
 800714e:	2200      	movs	r2, #0
 8007150:	f7f9 f8a4 	bl	800029c <__adddf3>
 8007154:	46d0      	mov	r8, sl
 8007156:	46d9      	mov	r9, fp
 8007158:	4682      	mov	sl, r0
 800715a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800715e:	2e00      	cmp	r6, #0
 8007160:	d158      	bne.n	8007214 <_dtoa_r+0x4e4>
 8007162:	4b7e      	ldr	r3, [pc, #504]	; (800735c <_dtoa_r+0x62c>)
 8007164:	2200      	movs	r2, #0
 8007166:	4640      	mov	r0, r8
 8007168:	4649      	mov	r1, r9
 800716a:	f7f9 f895 	bl	8000298 <__aeabi_dsub>
 800716e:	4652      	mov	r2, sl
 8007170:	465b      	mov	r3, fp
 8007172:	4680      	mov	r8, r0
 8007174:	4689      	mov	r9, r1
 8007176:	f7f9 fcd7 	bl	8000b28 <__aeabi_dcmpgt>
 800717a:	2800      	cmp	r0, #0
 800717c:	f040 8295 	bne.w	80076aa <_dtoa_r+0x97a>
 8007180:	4652      	mov	r2, sl
 8007182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 8289 	bne.w	80076a6 <_dtoa_r+0x976>
 8007194:	ec5b ab19 	vmov	sl, fp, d9
 8007198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800719a:	2b00      	cmp	r3, #0
 800719c:	f2c0 8148 	blt.w	8007430 <_dtoa_r+0x700>
 80071a0:	9a00      	ldr	r2, [sp, #0]
 80071a2:	2a0e      	cmp	r2, #14
 80071a4:	f300 8144 	bgt.w	8007430 <_dtoa_r+0x700>
 80071a8:	4b67      	ldr	r3, [pc, #412]	; (8007348 <_dtoa_r+0x618>)
 80071aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f280 80d5 	bge.w	8007364 <_dtoa_r+0x634>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f300 80d1 	bgt.w	8007364 <_dtoa_r+0x634>
 80071c2:	f040 826f 	bne.w	80076a4 <_dtoa_r+0x974>
 80071c6:	4b65      	ldr	r3, [pc, #404]	; (800735c <_dtoa_r+0x62c>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	4640      	mov	r0, r8
 80071cc:	4649      	mov	r1, r9
 80071ce:	f7f9 fa1b 	bl	8000608 <__aeabi_dmul>
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	f7f9 fc9d 	bl	8000b14 <__aeabi_dcmpge>
 80071da:	9e03      	ldr	r6, [sp, #12]
 80071dc:	4637      	mov	r7, r6
 80071de:	2800      	cmp	r0, #0
 80071e0:	f040 8245 	bne.w	800766e <_dtoa_r+0x93e>
 80071e4:	9d01      	ldr	r5, [sp, #4]
 80071e6:	2331      	movs	r3, #49	; 0x31
 80071e8:	f805 3b01 	strb.w	r3, [r5], #1
 80071ec:	9b00      	ldr	r3, [sp, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	e240      	b.n	8007676 <_dtoa_r+0x946>
 80071f4:	07f2      	lsls	r2, r6, #31
 80071f6:	d505      	bpl.n	8007204 <_dtoa_r+0x4d4>
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	3501      	adds	r5, #1
 8007202:	2301      	movs	r3, #1
 8007204:	1076      	asrs	r6, r6, #1
 8007206:	3708      	adds	r7, #8
 8007208:	e777      	b.n	80070fa <_dtoa_r+0x3ca>
 800720a:	2502      	movs	r5, #2
 800720c:	e779      	b.n	8007102 <_dtoa_r+0x3d2>
 800720e:	9f00      	ldr	r7, [sp, #0]
 8007210:	9e03      	ldr	r6, [sp, #12]
 8007212:	e794      	b.n	800713e <_dtoa_r+0x40e>
 8007214:	9901      	ldr	r1, [sp, #4]
 8007216:	4b4c      	ldr	r3, [pc, #304]	; (8007348 <_dtoa_r+0x618>)
 8007218:	4431      	add	r1, r6
 800721a:	910d      	str	r1, [sp, #52]	; 0x34
 800721c:	9908      	ldr	r1, [sp, #32]
 800721e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007226:	2900      	cmp	r1, #0
 8007228:	d043      	beq.n	80072b2 <_dtoa_r+0x582>
 800722a:	494d      	ldr	r1, [pc, #308]	; (8007360 <_dtoa_r+0x630>)
 800722c:	2000      	movs	r0, #0
 800722e:	f7f9 fb15 	bl	800085c <__aeabi_ddiv>
 8007232:	4652      	mov	r2, sl
 8007234:	465b      	mov	r3, fp
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	9d01      	ldr	r5, [sp, #4]
 800723c:	4682      	mov	sl, r0
 800723e:	468b      	mov	fp, r1
 8007240:	4649      	mov	r1, r9
 8007242:	4640      	mov	r0, r8
 8007244:	f7f9 fc90 	bl	8000b68 <__aeabi_d2iz>
 8007248:	4606      	mov	r6, r0
 800724a:	f7f9 f973 	bl	8000534 <__aeabi_i2d>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 f81f 	bl	8000298 <__aeabi_dsub>
 800725a:	3630      	adds	r6, #48	; 0x30
 800725c:	f805 6b01 	strb.w	r6, [r5], #1
 8007260:	4652      	mov	r2, sl
 8007262:	465b      	mov	r3, fp
 8007264:	4680      	mov	r8, r0
 8007266:	4689      	mov	r9, r1
 8007268:	f7f9 fc40 	bl	8000aec <__aeabi_dcmplt>
 800726c:	2800      	cmp	r0, #0
 800726e:	d163      	bne.n	8007338 <_dtoa_r+0x608>
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	4936      	ldr	r1, [pc, #216]	; (8007350 <_dtoa_r+0x620>)
 8007276:	2000      	movs	r0, #0
 8007278:	f7f9 f80e 	bl	8000298 <__aeabi_dsub>
 800727c:	4652      	mov	r2, sl
 800727e:	465b      	mov	r3, fp
 8007280:	f7f9 fc34 	bl	8000aec <__aeabi_dcmplt>
 8007284:	2800      	cmp	r0, #0
 8007286:	f040 80b5 	bne.w	80073f4 <_dtoa_r+0x6c4>
 800728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800728c:	429d      	cmp	r5, r3
 800728e:	d081      	beq.n	8007194 <_dtoa_r+0x464>
 8007290:	4b30      	ldr	r3, [pc, #192]	; (8007354 <_dtoa_r+0x624>)
 8007292:	2200      	movs	r2, #0
 8007294:	4650      	mov	r0, sl
 8007296:	4659      	mov	r1, fp
 8007298:	f7f9 f9b6 	bl	8000608 <__aeabi_dmul>
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <_dtoa_r+0x624>)
 800729e:	4682      	mov	sl, r0
 80072a0:	468b      	mov	fp, r1
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	2200      	movs	r2, #0
 80072a8:	f7f9 f9ae 	bl	8000608 <__aeabi_dmul>
 80072ac:	4680      	mov	r8, r0
 80072ae:	4689      	mov	r9, r1
 80072b0:	e7c6      	b.n	8007240 <_dtoa_r+0x510>
 80072b2:	4650      	mov	r0, sl
 80072b4:	4659      	mov	r1, fp
 80072b6:	f7f9 f9a7 	bl	8000608 <__aeabi_dmul>
 80072ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072bc:	9d01      	ldr	r5, [sp, #4]
 80072be:	930f      	str	r3, [sp, #60]	; 0x3c
 80072c0:	4682      	mov	sl, r0
 80072c2:	468b      	mov	fp, r1
 80072c4:	4649      	mov	r1, r9
 80072c6:	4640      	mov	r0, r8
 80072c8:	f7f9 fc4e 	bl	8000b68 <__aeabi_d2iz>
 80072cc:	4606      	mov	r6, r0
 80072ce:	f7f9 f931 	bl	8000534 <__aeabi_i2d>
 80072d2:	3630      	adds	r6, #48	; 0x30
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4640      	mov	r0, r8
 80072da:	4649      	mov	r1, r9
 80072dc:	f7f8 ffdc 	bl	8000298 <__aeabi_dsub>
 80072e0:	f805 6b01 	strb.w	r6, [r5], #1
 80072e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e6:	429d      	cmp	r5, r3
 80072e8:	4680      	mov	r8, r0
 80072ea:	4689      	mov	r9, r1
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	d124      	bne.n	800733c <_dtoa_r+0x60c>
 80072f2:	4b1b      	ldr	r3, [pc, #108]	; (8007360 <_dtoa_r+0x630>)
 80072f4:	4650      	mov	r0, sl
 80072f6:	4659      	mov	r1, fp
 80072f8:	f7f8 ffd0 	bl	800029c <__adddf3>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4640      	mov	r0, r8
 8007302:	4649      	mov	r1, r9
 8007304:	f7f9 fc10 	bl	8000b28 <__aeabi_dcmpgt>
 8007308:	2800      	cmp	r0, #0
 800730a:	d173      	bne.n	80073f4 <_dtoa_r+0x6c4>
 800730c:	4652      	mov	r2, sl
 800730e:	465b      	mov	r3, fp
 8007310:	4913      	ldr	r1, [pc, #76]	; (8007360 <_dtoa_r+0x630>)
 8007312:	2000      	movs	r0, #0
 8007314:	f7f8 ffc0 	bl	8000298 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8007324:	2800      	cmp	r0, #0
 8007326:	f43f af35 	beq.w	8007194 <_dtoa_r+0x464>
 800732a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800732c:	1e6b      	subs	r3, r5, #1
 800732e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d0f8      	beq.n	800732a <_dtoa_r+0x5fa>
 8007338:	9700      	str	r7, [sp, #0]
 800733a:	e049      	b.n	80073d0 <_dtoa_r+0x6a0>
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <_dtoa_r+0x624>)
 800733e:	f7f9 f963 	bl	8000608 <__aeabi_dmul>
 8007342:	4680      	mov	r8, r0
 8007344:	4689      	mov	r9, r1
 8007346:	e7bd      	b.n	80072c4 <_dtoa_r+0x594>
 8007348:	08009648 	.word	0x08009648
 800734c:	08009620 	.word	0x08009620
 8007350:	3ff00000 	.word	0x3ff00000
 8007354:	40240000 	.word	0x40240000
 8007358:	401c0000 	.word	0x401c0000
 800735c:	40140000 	.word	0x40140000
 8007360:	3fe00000 	.word	0x3fe00000
 8007364:	9d01      	ldr	r5, [sp, #4]
 8007366:	4656      	mov	r6, sl
 8007368:	465f      	mov	r7, fp
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 fa73 	bl	800085c <__aeabi_ddiv>
 8007376:	f7f9 fbf7 	bl	8000b68 <__aeabi_d2iz>
 800737a:	4682      	mov	sl, r0
 800737c:	f7f9 f8da 	bl	8000534 <__aeabi_i2d>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f9 f940 	bl	8000608 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007394:	f7f8 ff80 	bl	8000298 <__aeabi_dsub>
 8007398:	f805 6b01 	strb.w	r6, [r5], #1
 800739c:	9e01      	ldr	r6, [sp, #4]
 800739e:	9f03      	ldr	r7, [sp, #12]
 80073a0:	1bae      	subs	r6, r5, r6
 80073a2:	42b7      	cmp	r7, r6
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	d135      	bne.n	8007416 <_dtoa_r+0x6e6>
 80073aa:	f7f8 ff77 	bl	800029c <__adddf3>
 80073ae:	4642      	mov	r2, r8
 80073b0:	464b      	mov	r3, r9
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	f7f9 fbb7 	bl	8000b28 <__aeabi_dcmpgt>
 80073ba:	b9d0      	cbnz	r0, 80073f2 <_dtoa_r+0x6c2>
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f9 fb88 	bl	8000ad8 <__aeabi_dcmpeq>
 80073c8:	b110      	cbz	r0, 80073d0 <_dtoa_r+0x6a0>
 80073ca:	f01a 0f01 	tst.w	sl, #1
 80073ce:	d110      	bne.n	80073f2 <_dtoa_r+0x6c2>
 80073d0:	4620      	mov	r0, r4
 80073d2:	ee18 1a10 	vmov	r1, s16
 80073d6:	f000 faf3 	bl	80079c0 <_Bfree>
 80073da:	2300      	movs	r3, #0
 80073dc:	9800      	ldr	r0, [sp, #0]
 80073de:	702b      	strb	r3, [r5, #0]
 80073e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e2:	3001      	adds	r0, #1
 80073e4:	6018      	str	r0, [r3, #0]
 80073e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f43f acf1 	beq.w	8006dd0 <_dtoa_r+0xa0>
 80073ee:	601d      	str	r5, [r3, #0]
 80073f0:	e4ee      	b.n	8006dd0 <_dtoa_r+0xa0>
 80073f2:	9f00      	ldr	r7, [sp, #0]
 80073f4:	462b      	mov	r3, r5
 80073f6:	461d      	mov	r5, r3
 80073f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073fc:	2a39      	cmp	r2, #57	; 0x39
 80073fe:	d106      	bne.n	800740e <_dtoa_r+0x6de>
 8007400:	9a01      	ldr	r2, [sp, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d1f7      	bne.n	80073f6 <_dtoa_r+0x6c6>
 8007406:	9901      	ldr	r1, [sp, #4]
 8007408:	2230      	movs	r2, #48	; 0x30
 800740a:	3701      	adds	r7, #1
 800740c:	700a      	strb	r2, [r1, #0]
 800740e:	781a      	ldrb	r2, [r3, #0]
 8007410:	3201      	adds	r2, #1
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	e790      	b.n	8007338 <_dtoa_r+0x608>
 8007416:	4ba6      	ldr	r3, [pc, #664]	; (80076b0 <_dtoa_r+0x980>)
 8007418:	2200      	movs	r2, #0
 800741a:	f7f9 f8f5 	bl	8000608 <__aeabi_dmul>
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	f7f9 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800742a:	2800      	cmp	r0, #0
 800742c:	d09d      	beq.n	800736a <_dtoa_r+0x63a>
 800742e:	e7cf      	b.n	80073d0 <_dtoa_r+0x6a0>
 8007430:	9a08      	ldr	r2, [sp, #32]
 8007432:	2a00      	cmp	r2, #0
 8007434:	f000 80d7 	beq.w	80075e6 <_dtoa_r+0x8b6>
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	2a01      	cmp	r2, #1
 800743c:	f300 80ba 	bgt.w	80075b4 <_dtoa_r+0x884>
 8007440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007442:	2a00      	cmp	r2, #0
 8007444:	f000 80b2 	beq.w	80075ac <_dtoa_r+0x87c>
 8007448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800744c:	9e07      	ldr	r6, [sp, #28]
 800744e:	9d04      	ldr	r5, [sp, #16]
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	441a      	add	r2, r3
 8007454:	9204      	str	r2, [sp, #16]
 8007456:	9a05      	ldr	r2, [sp, #20]
 8007458:	2101      	movs	r1, #1
 800745a:	441a      	add	r2, r3
 800745c:	4620      	mov	r0, r4
 800745e:	9205      	str	r2, [sp, #20]
 8007460:	f000 fb66 	bl	8007b30 <__i2b>
 8007464:	4607      	mov	r7, r0
 8007466:	2d00      	cmp	r5, #0
 8007468:	dd0c      	ble.n	8007484 <_dtoa_r+0x754>
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd09      	ble.n	8007484 <_dtoa_r+0x754>
 8007470:	42ab      	cmp	r3, r5
 8007472:	9a04      	ldr	r2, [sp, #16]
 8007474:	bfa8      	it	ge
 8007476:	462b      	movge	r3, r5
 8007478:	1ad2      	subs	r2, r2, r3
 800747a:	9204      	str	r2, [sp, #16]
 800747c:	9a05      	ldr	r2, [sp, #20]
 800747e:	1aed      	subs	r5, r5, r3
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	b31b      	cbz	r3, 80074d0 <_dtoa_r+0x7a0>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80af 	beq.w	80075ee <_dtoa_r+0x8be>
 8007490:	2e00      	cmp	r6, #0
 8007492:	dd13      	ble.n	80074bc <_dtoa_r+0x78c>
 8007494:	4639      	mov	r1, r7
 8007496:	4632      	mov	r2, r6
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fc09 	bl	8007cb0 <__pow5mult>
 800749e:	ee18 2a10 	vmov	r2, s16
 80074a2:	4601      	mov	r1, r0
 80074a4:	4607      	mov	r7, r0
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fb58 	bl	8007b5c <__multiply>
 80074ac:	ee18 1a10 	vmov	r1, s16
 80074b0:	4680      	mov	r8, r0
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fa84 	bl	80079c0 <_Bfree>
 80074b8:	ee08 8a10 	vmov	s16, r8
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	1b9a      	subs	r2, r3, r6
 80074c0:	d006      	beq.n	80074d0 <_dtoa_r+0x7a0>
 80074c2:	ee18 1a10 	vmov	r1, s16
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 fbf2 	bl	8007cb0 <__pow5mult>
 80074cc:	ee08 0a10 	vmov	s16, r0
 80074d0:	2101      	movs	r1, #1
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fb2c 	bl	8007b30 <__i2b>
 80074d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	4606      	mov	r6, r0
 80074de:	f340 8088 	ble.w	80075f2 <_dtoa_r+0x8c2>
 80074e2:	461a      	mov	r2, r3
 80074e4:	4601      	mov	r1, r0
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 fbe2 	bl	8007cb0 <__pow5mult>
 80074ec:	9b06      	ldr	r3, [sp, #24]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	4606      	mov	r6, r0
 80074f2:	f340 8081 	ble.w	80075f8 <_dtoa_r+0x8c8>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	6933      	ldr	r3, [r6, #16]
 80074fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007500:	6918      	ldr	r0, [r3, #16]
 8007502:	f000 fac5 	bl	8007a90 <__hi0bits>
 8007506:	f1c0 0020 	rsb	r0, r0, #32
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	4418      	add	r0, r3
 800750e:	f010 001f 	ands.w	r0, r0, #31
 8007512:	f000 8092 	beq.w	800763a <_dtoa_r+0x90a>
 8007516:	f1c0 0320 	rsb	r3, r0, #32
 800751a:	2b04      	cmp	r3, #4
 800751c:	f340 808a 	ble.w	8007634 <_dtoa_r+0x904>
 8007520:	f1c0 001c 	rsb	r0, r0, #28
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	4403      	add	r3, r0
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	9b05      	ldr	r3, [sp, #20]
 800752c:	4403      	add	r3, r0
 800752e:	4405      	add	r5, r0
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dd07      	ble.n	8007548 <_dtoa_r+0x818>
 8007538:	ee18 1a10 	vmov	r1, s16
 800753c:	461a      	mov	r2, r3
 800753e:	4620      	mov	r0, r4
 8007540:	f000 fc10 	bl	8007d64 <__lshift>
 8007544:	ee08 0a10 	vmov	s16, r0
 8007548:	9b05      	ldr	r3, [sp, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	dd05      	ble.n	800755a <_dtoa_r+0x82a>
 800754e:	4631      	mov	r1, r6
 8007550:	461a      	mov	r2, r3
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fc06 	bl	8007d64 <__lshift>
 8007558:	4606      	mov	r6, r0
 800755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d06e      	beq.n	800763e <_dtoa_r+0x90e>
 8007560:	ee18 0a10 	vmov	r0, s16
 8007564:	4631      	mov	r1, r6
 8007566:	f000 fc6d 	bl	8007e44 <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	da67      	bge.n	800763e <_dtoa_r+0x90e>
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	3b01      	subs	r3, #1
 8007572:	ee18 1a10 	vmov	r1, s16
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	220a      	movs	r2, #10
 800757a:	2300      	movs	r3, #0
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fa41 	bl	8007a04 <__multadd>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	ee08 0a10 	vmov	s16, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 81b1 	beq.w	80078f0 <_dtoa_r+0xbc0>
 800758e:	2300      	movs	r3, #0
 8007590:	4639      	mov	r1, r7
 8007592:	220a      	movs	r2, #10
 8007594:	4620      	mov	r0, r4
 8007596:	f000 fa35 	bl	8007a04 <__multadd>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	4607      	mov	r7, r0
 80075a0:	f300 808e 	bgt.w	80076c0 <_dtoa_r+0x990>
 80075a4:	9b06      	ldr	r3, [sp, #24]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dc51      	bgt.n	800764e <_dtoa_r+0x91e>
 80075aa:	e089      	b.n	80076c0 <_dtoa_r+0x990>
 80075ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075b2:	e74b      	b.n	800744c <_dtoa_r+0x71c>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	1e5e      	subs	r6, r3, #1
 80075b8:	9b07      	ldr	r3, [sp, #28]
 80075ba:	42b3      	cmp	r3, r6
 80075bc:	bfbf      	itttt	lt
 80075be:	9b07      	ldrlt	r3, [sp, #28]
 80075c0:	9607      	strlt	r6, [sp, #28]
 80075c2:	1af2      	sublt	r2, r6, r3
 80075c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075c6:	bfb6      	itet	lt
 80075c8:	189b      	addlt	r3, r3, r2
 80075ca:	1b9e      	subge	r6, r3, r6
 80075cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	bfb8      	it	lt
 80075d2:	2600      	movlt	r6, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bfb7      	itett	lt
 80075d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80075dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80075e0:	1a9d      	sublt	r5, r3, r2
 80075e2:	2300      	movlt	r3, #0
 80075e4:	e734      	b.n	8007450 <_dtoa_r+0x720>
 80075e6:	9e07      	ldr	r6, [sp, #28]
 80075e8:	9d04      	ldr	r5, [sp, #16]
 80075ea:	9f08      	ldr	r7, [sp, #32]
 80075ec:	e73b      	b.n	8007466 <_dtoa_r+0x736>
 80075ee:	9a07      	ldr	r2, [sp, #28]
 80075f0:	e767      	b.n	80074c2 <_dtoa_r+0x792>
 80075f2:	9b06      	ldr	r3, [sp, #24]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	dc18      	bgt.n	800762a <_dtoa_r+0x8fa>
 80075f8:	f1ba 0f00 	cmp.w	sl, #0
 80075fc:	d115      	bne.n	800762a <_dtoa_r+0x8fa>
 80075fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007602:	b993      	cbnz	r3, 800762a <_dtoa_r+0x8fa>
 8007604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	051b      	lsls	r3, r3, #20
 800760c:	b183      	cbz	r3, 8007630 <_dtoa_r+0x900>
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	3301      	adds	r3, #1
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	3301      	adds	r3, #1
 8007618:	9305      	str	r3, [sp, #20]
 800761a:	f04f 0801 	mov.w	r8, #1
 800761e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	f47f af6a 	bne.w	80074fa <_dtoa_r+0x7ca>
 8007626:	2001      	movs	r0, #1
 8007628:	e76f      	b.n	800750a <_dtoa_r+0x7da>
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	e7f6      	b.n	800761e <_dtoa_r+0x8ee>
 8007630:	4698      	mov	r8, r3
 8007632:	e7f4      	b.n	800761e <_dtoa_r+0x8ee>
 8007634:	f43f af7d 	beq.w	8007532 <_dtoa_r+0x802>
 8007638:	4618      	mov	r0, r3
 800763a:	301c      	adds	r0, #28
 800763c:	e772      	b.n	8007524 <_dtoa_r+0x7f4>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	dc37      	bgt.n	80076b4 <_dtoa_r+0x984>
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	2b02      	cmp	r3, #2
 8007648:	dd34      	ble.n	80076b4 <_dtoa_r+0x984>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	9302      	str	r3, [sp, #8]
 800764e:	9b02      	ldr	r3, [sp, #8]
 8007650:	b96b      	cbnz	r3, 800766e <_dtoa_r+0x93e>
 8007652:	4631      	mov	r1, r6
 8007654:	2205      	movs	r2, #5
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f9d4 	bl	8007a04 <__multadd>
 800765c:	4601      	mov	r1, r0
 800765e:	4606      	mov	r6, r0
 8007660:	ee18 0a10 	vmov	r0, s16
 8007664:	f000 fbee 	bl	8007e44 <__mcmp>
 8007668:	2800      	cmp	r0, #0
 800766a:	f73f adbb 	bgt.w	80071e4 <_dtoa_r+0x4b4>
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	9d01      	ldr	r5, [sp, #4]
 8007672:	43db      	mvns	r3, r3
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	4631      	mov	r1, r6
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f99f 	bl	80079c0 <_Bfree>
 8007682:	2f00      	cmp	r7, #0
 8007684:	f43f aea4 	beq.w	80073d0 <_dtoa_r+0x6a0>
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	d005      	beq.n	800769a <_dtoa_r+0x96a>
 800768e:	45b8      	cmp	r8, r7
 8007690:	d003      	beq.n	800769a <_dtoa_r+0x96a>
 8007692:	4641      	mov	r1, r8
 8007694:	4620      	mov	r0, r4
 8007696:	f000 f993 	bl	80079c0 <_Bfree>
 800769a:	4639      	mov	r1, r7
 800769c:	4620      	mov	r0, r4
 800769e:	f000 f98f 	bl	80079c0 <_Bfree>
 80076a2:	e695      	b.n	80073d0 <_dtoa_r+0x6a0>
 80076a4:	2600      	movs	r6, #0
 80076a6:	4637      	mov	r7, r6
 80076a8:	e7e1      	b.n	800766e <_dtoa_r+0x93e>
 80076aa:	9700      	str	r7, [sp, #0]
 80076ac:	4637      	mov	r7, r6
 80076ae:	e599      	b.n	80071e4 <_dtoa_r+0x4b4>
 80076b0:	40240000 	.word	0x40240000
 80076b4:	9b08      	ldr	r3, [sp, #32]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80ca 	beq.w	8007850 <_dtoa_r+0xb20>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	dd05      	ble.n	80076d0 <_dtoa_r+0x9a0>
 80076c4:	4639      	mov	r1, r7
 80076c6:	462a      	mov	r2, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fb4b 	bl	8007d64 <__lshift>
 80076ce:	4607      	mov	r7, r0
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	d05b      	beq.n	800778e <_dtoa_r+0xa5e>
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 f931 	bl	8007940 <_Balloc>
 80076de:	4605      	mov	r5, r0
 80076e0:	b928      	cbnz	r0, 80076ee <_dtoa_r+0x9be>
 80076e2:	4b87      	ldr	r3, [pc, #540]	; (8007900 <_dtoa_r+0xbd0>)
 80076e4:	4602      	mov	r2, r0
 80076e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076ea:	f7ff bb3b 	b.w	8006d64 <_dtoa_r+0x34>
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	3202      	adds	r2, #2
 80076f2:	0092      	lsls	r2, r2, #2
 80076f4:	f107 010c 	add.w	r1, r7, #12
 80076f8:	300c      	adds	r0, #12
 80076fa:	f000 f913 	bl	8007924 <memcpy>
 80076fe:	2201      	movs	r2, #1
 8007700:	4629      	mov	r1, r5
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fb2e 	bl	8007d64 <__lshift>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f103 0901 	add.w	r9, r3, #1
 800770e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007712:	4413      	add	r3, r2
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	f00a 0301 	and.w	r3, sl, #1
 800771a:	46b8      	mov	r8, r7
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	4607      	mov	r7, r0
 8007720:	4631      	mov	r1, r6
 8007722:	ee18 0a10 	vmov	r0, s16
 8007726:	f7ff fa77 	bl	8006c18 <quorem>
 800772a:	4641      	mov	r1, r8
 800772c:	9002      	str	r0, [sp, #8]
 800772e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007732:	ee18 0a10 	vmov	r0, s16
 8007736:	f000 fb85 	bl	8007e44 <__mcmp>
 800773a:	463a      	mov	r2, r7
 800773c:	9003      	str	r0, [sp, #12]
 800773e:	4631      	mov	r1, r6
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fb9b 	bl	8007e7c <__mdiff>
 8007746:	68c2      	ldr	r2, [r0, #12]
 8007748:	f109 3bff 	add.w	fp, r9, #4294967295
 800774c:	4605      	mov	r5, r0
 800774e:	bb02      	cbnz	r2, 8007792 <_dtoa_r+0xa62>
 8007750:	4601      	mov	r1, r0
 8007752:	ee18 0a10 	vmov	r0, s16
 8007756:	f000 fb75 	bl	8007e44 <__mcmp>
 800775a:	4602      	mov	r2, r0
 800775c:	4629      	mov	r1, r5
 800775e:	4620      	mov	r0, r4
 8007760:	9207      	str	r2, [sp, #28]
 8007762:	f000 f92d 	bl	80079c0 <_Bfree>
 8007766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800776a:	ea43 0102 	orr.w	r1, r3, r2
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	430b      	orrs	r3, r1
 8007772:	464d      	mov	r5, r9
 8007774:	d10f      	bne.n	8007796 <_dtoa_r+0xa66>
 8007776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800777a:	d02a      	beq.n	80077d2 <_dtoa_r+0xaa2>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd02      	ble.n	8007788 <_dtoa_r+0xa58>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007788:	f88b a000 	strb.w	sl, [fp]
 800778c:	e775      	b.n	800767a <_dtoa_r+0x94a>
 800778e:	4638      	mov	r0, r7
 8007790:	e7ba      	b.n	8007708 <_dtoa_r+0x9d8>
 8007792:	2201      	movs	r2, #1
 8007794:	e7e2      	b.n	800775c <_dtoa_r+0xa2c>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	db04      	blt.n	80077a6 <_dtoa_r+0xa76>
 800779c:	9906      	ldr	r1, [sp, #24]
 800779e:	430b      	orrs	r3, r1
 80077a0:	9904      	ldr	r1, [sp, #16]
 80077a2:	430b      	orrs	r3, r1
 80077a4:	d122      	bne.n	80077ec <_dtoa_r+0xabc>
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	ddee      	ble.n	8007788 <_dtoa_r+0xa58>
 80077aa:	ee18 1a10 	vmov	r1, s16
 80077ae:	2201      	movs	r2, #1
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fad7 	bl	8007d64 <__lshift>
 80077b6:	4631      	mov	r1, r6
 80077b8:	ee08 0a10 	vmov	s16, r0
 80077bc:	f000 fb42 	bl	8007e44 <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	dc03      	bgt.n	80077cc <_dtoa_r+0xa9c>
 80077c4:	d1e0      	bne.n	8007788 <_dtoa_r+0xa58>
 80077c6:	f01a 0f01 	tst.w	sl, #1
 80077ca:	d0dd      	beq.n	8007788 <_dtoa_r+0xa58>
 80077cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077d0:	d1d7      	bne.n	8007782 <_dtoa_r+0xa52>
 80077d2:	2339      	movs	r3, #57	; 0x39
 80077d4:	f88b 3000 	strb.w	r3, [fp]
 80077d8:	462b      	mov	r3, r5
 80077da:	461d      	mov	r5, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077e2:	2a39      	cmp	r2, #57	; 0x39
 80077e4:	d071      	beq.n	80078ca <_dtoa_r+0xb9a>
 80077e6:	3201      	adds	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	e746      	b.n	800767a <_dtoa_r+0x94a>
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	dd07      	ble.n	8007800 <_dtoa_r+0xad0>
 80077f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077f4:	d0ed      	beq.n	80077d2 <_dtoa_r+0xaa2>
 80077f6:	f10a 0301 	add.w	r3, sl, #1
 80077fa:	f88b 3000 	strb.w	r3, [fp]
 80077fe:	e73c      	b.n	800767a <_dtoa_r+0x94a>
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007806:	4599      	cmp	r9, r3
 8007808:	d047      	beq.n	800789a <_dtoa_r+0xb6a>
 800780a:	ee18 1a10 	vmov	r1, s16
 800780e:	2300      	movs	r3, #0
 8007810:	220a      	movs	r2, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f000 f8f6 	bl	8007a04 <__multadd>
 8007818:	45b8      	cmp	r8, r7
 800781a:	ee08 0a10 	vmov	s16, r0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	f04f 020a 	mov.w	r2, #10
 8007826:	4641      	mov	r1, r8
 8007828:	4620      	mov	r0, r4
 800782a:	d106      	bne.n	800783a <_dtoa_r+0xb0a>
 800782c:	f000 f8ea 	bl	8007a04 <__multadd>
 8007830:	4680      	mov	r8, r0
 8007832:	4607      	mov	r7, r0
 8007834:	f109 0901 	add.w	r9, r9, #1
 8007838:	e772      	b.n	8007720 <_dtoa_r+0x9f0>
 800783a:	f000 f8e3 	bl	8007a04 <__multadd>
 800783e:	4639      	mov	r1, r7
 8007840:	4680      	mov	r8, r0
 8007842:	2300      	movs	r3, #0
 8007844:	220a      	movs	r2, #10
 8007846:	4620      	mov	r0, r4
 8007848:	f000 f8dc 	bl	8007a04 <__multadd>
 800784c:	4607      	mov	r7, r0
 800784e:	e7f1      	b.n	8007834 <_dtoa_r+0xb04>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	9302      	str	r3, [sp, #8]
 8007854:	9d01      	ldr	r5, [sp, #4]
 8007856:	ee18 0a10 	vmov	r0, s16
 800785a:	4631      	mov	r1, r6
 800785c:	f7ff f9dc 	bl	8006c18 <quorem>
 8007860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	f805 ab01 	strb.w	sl, [r5], #1
 800786a:	1aea      	subs	r2, r5, r3
 800786c:	9b02      	ldr	r3, [sp, #8]
 800786e:	4293      	cmp	r3, r2
 8007870:	dd09      	ble.n	8007886 <_dtoa_r+0xb56>
 8007872:	ee18 1a10 	vmov	r1, s16
 8007876:	2300      	movs	r3, #0
 8007878:	220a      	movs	r2, #10
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f8c2 	bl	8007a04 <__multadd>
 8007880:	ee08 0a10 	vmov	s16, r0
 8007884:	e7e7      	b.n	8007856 <_dtoa_r+0xb26>
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bfc8      	it	gt
 800788c:	461d      	movgt	r5, r3
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	bfd8      	it	le
 8007892:	2501      	movle	r5, #1
 8007894:	441d      	add	r5, r3
 8007896:	f04f 0800 	mov.w	r8, #0
 800789a:	ee18 1a10 	vmov	r1, s16
 800789e:	2201      	movs	r2, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fa5f 	bl	8007d64 <__lshift>
 80078a6:	4631      	mov	r1, r6
 80078a8:	ee08 0a10 	vmov	s16, r0
 80078ac:	f000 faca 	bl	8007e44 <__mcmp>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	dc91      	bgt.n	80077d8 <_dtoa_r+0xaa8>
 80078b4:	d102      	bne.n	80078bc <_dtoa_r+0xb8c>
 80078b6:	f01a 0f01 	tst.w	sl, #1
 80078ba:	d18d      	bne.n	80077d8 <_dtoa_r+0xaa8>
 80078bc:	462b      	mov	r3, r5
 80078be:	461d      	mov	r5, r3
 80078c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078c4:	2a30      	cmp	r2, #48	; 0x30
 80078c6:	d0fa      	beq.n	80078be <_dtoa_r+0xb8e>
 80078c8:	e6d7      	b.n	800767a <_dtoa_r+0x94a>
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d184      	bne.n	80077da <_dtoa_r+0xaaa>
 80078d0:	9b00      	ldr	r3, [sp, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2331      	movs	r3, #49	; 0x31
 80078d8:	7013      	strb	r3, [r2, #0]
 80078da:	e6ce      	b.n	800767a <_dtoa_r+0x94a>
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <_dtoa_r+0xbd4>)
 80078de:	f7ff ba95 	b.w	8006e0c <_dtoa_r+0xdc>
 80078e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f aa6e 	bne.w	8006dc6 <_dtoa_r+0x96>
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <_dtoa_r+0xbd8>)
 80078ec:	f7ff ba8e 	b.w	8006e0c <_dtoa_r+0xdc>
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dcae      	bgt.n	8007854 <_dtoa_r+0xb24>
 80078f6:	9b06      	ldr	r3, [sp, #24]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	f73f aea8 	bgt.w	800764e <_dtoa_r+0x91e>
 80078fe:	e7a9      	b.n	8007854 <_dtoa_r+0xb24>
 8007900:	080095b3 	.word	0x080095b3
 8007904:	08009510 	.word	0x08009510
 8007908:	08009534 	.word	0x08009534

0800790c <_localeconv_r>:
 800790c:	4800      	ldr	r0, [pc, #0]	; (8007910 <_localeconv_r+0x4>)
 800790e:	4770      	bx	lr
 8007910:	20002bb0 	.word	0x20002bb0

08007914 <malloc>:
 8007914:	4b02      	ldr	r3, [pc, #8]	; (8007920 <malloc+0xc>)
 8007916:	4601      	mov	r1, r0
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	f000 bc17 	b.w	800814c <_malloc_r>
 800791e:	bf00      	nop
 8007920:	20002a5c 	.word	0x20002a5c

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <_Balloc>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
 8007948:	b976      	cbnz	r6, 8007968 <_Balloc+0x28>
 800794a:	2010      	movs	r0, #16
 800794c:	f7ff ffe2 	bl	8007914 <malloc>
 8007950:	4602      	mov	r2, r0
 8007952:	6260      	str	r0, [r4, #36]	; 0x24
 8007954:	b920      	cbnz	r0, 8007960 <_Balloc+0x20>
 8007956:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <_Balloc+0x78>)
 8007958:	4818      	ldr	r0, [pc, #96]	; (80079bc <_Balloc+0x7c>)
 800795a:	2166      	movs	r1, #102	; 0x66
 800795c:	f000 fdd6 	bl	800850c <__assert_func>
 8007960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007964:	6006      	str	r6, [r0, #0]
 8007966:	60c6      	str	r6, [r0, #12]
 8007968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800796a:	68f3      	ldr	r3, [r6, #12]
 800796c:	b183      	cbz	r3, 8007990 <_Balloc+0x50>
 800796e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007976:	b9b8      	cbnz	r0, 80079a8 <_Balloc+0x68>
 8007978:	2101      	movs	r1, #1
 800797a:	fa01 f605 	lsl.w	r6, r1, r5
 800797e:	1d72      	adds	r2, r6, #5
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fb60 	bl	8008048 <_calloc_r>
 8007988:	b160      	cbz	r0, 80079a4 <_Balloc+0x64>
 800798a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800798e:	e00e      	b.n	80079ae <_Balloc+0x6e>
 8007990:	2221      	movs	r2, #33	; 0x21
 8007992:	2104      	movs	r1, #4
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fb57 	bl	8008048 <_calloc_r>
 800799a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800799c:	60f0      	str	r0, [r6, #12]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e4      	bne.n	800796e <_Balloc+0x2e>
 80079a4:	2000      	movs	r0, #0
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	6802      	ldr	r2, [r0, #0]
 80079aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ae:	2300      	movs	r3, #0
 80079b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079b4:	e7f7      	b.n	80079a6 <_Balloc+0x66>
 80079b6:	bf00      	nop
 80079b8:	08009541 	.word	0x08009541
 80079bc:	080095c4 	.word	0x080095c4

080079c0 <_Bfree>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b976      	cbnz	r6, 80079e8 <_Bfree+0x28>
 80079ca:	2010      	movs	r0, #16
 80079cc:	f7ff ffa2 	bl	8007914 <malloc>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6268      	str	r0, [r5, #36]	; 0x24
 80079d4:	b920      	cbnz	r0, 80079e0 <_Bfree+0x20>
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <_Bfree+0x3c>)
 80079d8:	4809      	ldr	r0, [pc, #36]	; (8007a00 <_Bfree+0x40>)
 80079da:	218a      	movs	r1, #138	; 0x8a
 80079dc:	f000 fd96 	bl	800850c <__assert_func>
 80079e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079e4:	6006      	str	r6, [r0, #0]
 80079e6:	60c6      	str	r6, [r0, #12]
 80079e8:	b13c      	cbz	r4, 80079fa <_Bfree+0x3a>
 80079ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079ec:	6862      	ldr	r2, [r4, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079f4:	6021      	str	r1, [r4, #0]
 80079f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	08009541 	.word	0x08009541
 8007a00:	080095c4 	.word	0x080095c4

08007a04 <__multadd>:
 8007a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a08:	690d      	ldr	r5, [r1, #16]
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	461e      	mov	r6, r3
 8007a10:	f101 0c14 	add.w	ip, r1, #20
 8007a14:	2000      	movs	r0, #0
 8007a16:	f8dc 3000 	ldr.w	r3, [ip]
 8007a1a:	b299      	uxth	r1, r3
 8007a1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a20:	0c1e      	lsrs	r6, r3, #16
 8007a22:	0c0b      	lsrs	r3, r1, #16
 8007a24:	fb02 3306 	mla	r3, r2, r6, r3
 8007a28:	b289      	uxth	r1, r1
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a30:	4285      	cmp	r5, r0
 8007a32:	f84c 1b04 	str.w	r1, [ip], #4
 8007a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a3a:	dcec      	bgt.n	8007a16 <__multadd+0x12>
 8007a3c:	b30e      	cbz	r6, 8007a82 <__multadd+0x7e>
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	42ab      	cmp	r3, r5
 8007a42:	dc19      	bgt.n	8007a78 <__multadd+0x74>
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	4638      	mov	r0, r7
 8007a48:	3101      	adds	r1, #1
 8007a4a:	f7ff ff79 	bl	8007940 <_Balloc>
 8007a4e:	4680      	mov	r8, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__multadd+0x5a>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <__multadd+0x84>)
 8007a56:	480d      	ldr	r0, [pc, #52]	; (8007a8c <__multadd+0x88>)
 8007a58:	21b5      	movs	r1, #181	; 0xb5
 8007a5a:	f000 fd57 	bl	800850c <__assert_func>
 8007a5e:	6922      	ldr	r2, [r4, #16]
 8007a60:	3202      	adds	r2, #2
 8007a62:	f104 010c 	add.w	r1, r4, #12
 8007a66:	0092      	lsls	r2, r2, #2
 8007a68:	300c      	adds	r0, #12
 8007a6a:	f7ff ff5b 	bl	8007924 <memcpy>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ffa5 	bl	80079c0 <_Bfree>
 8007a76:	4644      	mov	r4, r8
 8007a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	615e      	str	r6, [r3, #20]
 8007a80:	6125      	str	r5, [r4, #16]
 8007a82:	4620      	mov	r0, r4
 8007a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a88:	080095b3 	.word	0x080095b3
 8007a8c:	080095c4 	.word	0x080095c4

08007a90 <__hi0bits>:
 8007a90:	0c03      	lsrs	r3, r0, #16
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	b9d3      	cbnz	r3, 8007acc <__hi0bits+0x3c>
 8007a96:	0400      	lsls	r0, r0, #16
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a9e:	bf04      	itt	eq
 8007aa0:	0200      	lsleq	r0, r0, #8
 8007aa2:	3308      	addeq	r3, #8
 8007aa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007aa8:	bf04      	itt	eq
 8007aaa:	0100      	lsleq	r0, r0, #4
 8007aac:	3304      	addeq	r3, #4
 8007aae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ab2:	bf04      	itt	eq
 8007ab4:	0080      	lsleq	r0, r0, #2
 8007ab6:	3302      	addeq	r3, #2
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	db05      	blt.n	8007ac8 <__hi0bits+0x38>
 8007abc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ac0:	f103 0301 	add.w	r3, r3, #1
 8007ac4:	bf08      	it	eq
 8007ac6:	2320      	moveq	r3, #32
 8007ac8:	4618      	mov	r0, r3
 8007aca:	4770      	bx	lr
 8007acc:	2300      	movs	r3, #0
 8007ace:	e7e4      	b.n	8007a9a <__hi0bits+0xa>

08007ad0 <__lo0bits>:
 8007ad0:	6803      	ldr	r3, [r0, #0]
 8007ad2:	f013 0207 	ands.w	r2, r3, #7
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	d00b      	beq.n	8007af2 <__lo0bits+0x22>
 8007ada:	07da      	lsls	r2, r3, #31
 8007adc:	d423      	bmi.n	8007b26 <__lo0bits+0x56>
 8007ade:	0798      	lsls	r0, r3, #30
 8007ae0:	bf49      	itett	mi
 8007ae2:	085b      	lsrmi	r3, r3, #1
 8007ae4:	089b      	lsrpl	r3, r3, #2
 8007ae6:	2001      	movmi	r0, #1
 8007ae8:	600b      	strmi	r3, [r1, #0]
 8007aea:	bf5c      	itt	pl
 8007aec:	600b      	strpl	r3, [r1, #0]
 8007aee:	2002      	movpl	r0, #2
 8007af0:	4770      	bx	lr
 8007af2:	b298      	uxth	r0, r3
 8007af4:	b9a8      	cbnz	r0, 8007b22 <__lo0bits+0x52>
 8007af6:	0c1b      	lsrs	r3, r3, #16
 8007af8:	2010      	movs	r0, #16
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	b90a      	cbnz	r2, 8007b02 <__lo0bits+0x32>
 8007afe:	3008      	adds	r0, #8
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	071a      	lsls	r2, r3, #28
 8007b04:	bf04      	itt	eq
 8007b06:	091b      	lsreq	r3, r3, #4
 8007b08:	3004      	addeq	r0, #4
 8007b0a:	079a      	lsls	r2, r3, #30
 8007b0c:	bf04      	itt	eq
 8007b0e:	089b      	lsreq	r3, r3, #2
 8007b10:	3002      	addeq	r0, #2
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d403      	bmi.n	8007b1e <__lo0bits+0x4e>
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	f100 0001 	add.w	r0, r0, #1
 8007b1c:	d005      	beq.n	8007b2a <__lo0bits+0x5a>
 8007b1e:	600b      	str	r3, [r1, #0]
 8007b20:	4770      	bx	lr
 8007b22:	4610      	mov	r0, r2
 8007b24:	e7e9      	b.n	8007afa <__lo0bits+0x2a>
 8007b26:	2000      	movs	r0, #0
 8007b28:	4770      	bx	lr
 8007b2a:	2020      	movs	r0, #32
 8007b2c:	4770      	bx	lr
	...

08007b30 <__i2b>:
 8007b30:	b510      	push	{r4, lr}
 8007b32:	460c      	mov	r4, r1
 8007b34:	2101      	movs	r1, #1
 8007b36:	f7ff ff03 	bl	8007940 <_Balloc>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	b928      	cbnz	r0, 8007b4a <__i2b+0x1a>
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <__i2b+0x24>)
 8007b40:	4805      	ldr	r0, [pc, #20]	; (8007b58 <__i2b+0x28>)
 8007b42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b46:	f000 fce1 	bl	800850c <__assert_func>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6144      	str	r4, [r0, #20]
 8007b4e:	6103      	str	r3, [r0, #16]
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	bf00      	nop
 8007b54:	080095b3 	.word	0x080095b3
 8007b58:	080095c4 	.word	0x080095c4

08007b5c <__multiply>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4691      	mov	r9, r2
 8007b62:	690a      	ldr	r2, [r1, #16]
 8007b64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	bfb8      	it	lt
 8007b6c:	460b      	movlt	r3, r1
 8007b6e:	460c      	mov	r4, r1
 8007b70:	bfbc      	itt	lt
 8007b72:	464c      	movlt	r4, r9
 8007b74:	4699      	movlt	r9, r3
 8007b76:	6927      	ldr	r7, [r4, #16]
 8007b78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b7c:	68a3      	ldr	r3, [r4, #8]
 8007b7e:	6861      	ldr	r1, [r4, #4]
 8007b80:	eb07 060a 	add.w	r6, r7, sl
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	b085      	sub	sp, #20
 8007b88:	bfb8      	it	lt
 8007b8a:	3101      	addlt	r1, #1
 8007b8c:	f7ff fed8 	bl	8007940 <_Balloc>
 8007b90:	b930      	cbnz	r0, 8007ba0 <__multiply+0x44>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4b44      	ldr	r3, [pc, #272]	; (8007ca8 <__multiply+0x14c>)
 8007b96:	4845      	ldr	r0, [pc, #276]	; (8007cac <__multiply+0x150>)
 8007b98:	f240 115d 	movw	r1, #349	; 0x15d
 8007b9c:	f000 fcb6 	bl	800850c <__assert_func>
 8007ba0:	f100 0514 	add.w	r5, r0, #20
 8007ba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ba8:	462b      	mov	r3, r5
 8007baa:	2200      	movs	r2, #0
 8007bac:	4543      	cmp	r3, r8
 8007bae:	d321      	bcc.n	8007bf4 <__multiply+0x98>
 8007bb0:	f104 0314 	add.w	r3, r4, #20
 8007bb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bb8:	f109 0314 	add.w	r3, r9, #20
 8007bbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bc0:	9202      	str	r2, [sp, #8]
 8007bc2:	1b3a      	subs	r2, r7, r4
 8007bc4:	3a15      	subs	r2, #21
 8007bc6:	f022 0203 	bic.w	r2, r2, #3
 8007bca:	3204      	adds	r2, #4
 8007bcc:	f104 0115 	add.w	r1, r4, #21
 8007bd0:	428f      	cmp	r7, r1
 8007bd2:	bf38      	it	cc
 8007bd4:	2204      	movcc	r2, #4
 8007bd6:	9201      	str	r2, [sp, #4]
 8007bd8:	9a02      	ldr	r2, [sp, #8]
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d80c      	bhi.n	8007bfa <__multiply+0x9e>
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	dd03      	ble.n	8007bec <__multiply+0x90>
 8007be4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d05a      	beq.n	8007ca2 <__multiply+0x146>
 8007bec:	6106      	str	r6, [r0, #16]
 8007bee:	b005      	add	sp, #20
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	f843 2b04 	str.w	r2, [r3], #4
 8007bf8:	e7d8      	b.n	8007bac <__multiply+0x50>
 8007bfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bfe:	f1ba 0f00 	cmp.w	sl, #0
 8007c02:	d024      	beq.n	8007c4e <__multiply+0xf2>
 8007c04:	f104 0e14 	add.w	lr, r4, #20
 8007c08:	46a9      	mov	r9, r5
 8007c0a:	f04f 0c00 	mov.w	ip, #0
 8007c0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c12:	f8d9 1000 	ldr.w	r1, [r9]
 8007c16:	fa1f fb82 	uxth.w	fp, r2
 8007c1a:	b289      	uxth	r1, r1
 8007c1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c24:	f8d9 2000 	ldr.w	r2, [r9]
 8007c28:	4461      	add	r1, ip
 8007c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c36:	b289      	uxth	r1, r1
 8007c38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c3c:	4577      	cmp	r7, lr
 8007c3e:	f849 1b04 	str.w	r1, [r9], #4
 8007c42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c46:	d8e2      	bhi.n	8007c0e <__multiply+0xb2>
 8007c48:	9a01      	ldr	r2, [sp, #4]
 8007c4a:	f845 c002 	str.w	ip, [r5, r2]
 8007c4e:	9a03      	ldr	r2, [sp, #12]
 8007c50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c54:	3304      	adds	r3, #4
 8007c56:	f1b9 0f00 	cmp.w	r9, #0
 8007c5a:	d020      	beq.n	8007c9e <__multiply+0x142>
 8007c5c:	6829      	ldr	r1, [r5, #0]
 8007c5e:	f104 0c14 	add.w	ip, r4, #20
 8007c62:	46ae      	mov	lr, r5
 8007c64:	f04f 0a00 	mov.w	sl, #0
 8007c68:	f8bc b000 	ldrh.w	fp, [ip]
 8007c6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c70:	fb09 220b 	mla	r2, r9, fp, r2
 8007c74:	4492      	add	sl, r2
 8007c76:	b289      	uxth	r1, r1
 8007c78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c7c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c84:	f8be 1000 	ldrh.w	r1, [lr]
 8007c88:	0c12      	lsrs	r2, r2, #16
 8007c8a:	fb09 1102 	mla	r1, r9, r2, r1
 8007c8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c92:	4567      	cmp	r7, ip
 8007c94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c98:	d8e6      	bhi.n	8007c68 <__multiply+0x10c>
 8007c9a:	9a01      	ldr	r2, [sp, #4]
 8007c9c:	50a9      	str	r1, [r5, r2]
 8007c9e:	3504      	adds	r5, #4
 8007ca0:	e79a      	b.n	8007bd8 <__multiply+0x7c>
 8007ca2:	3e01      	subs	r6, #1
 8007ca4:	e79c      	b.n	8007be0 <__multiply+0x84>
 8007ca6:	bf00      	nop
 8007ca8:	080095b3 	.word	0x080095b3
 8007cac:	080095c4 	.word	0x080095c4

08007cb0 <__pow5mult>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4615      	mov	r5, r2
 8007cb6:	f012 0203 	ands.w	r2, r2, #3
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	d007      	beq.n	8007cd0 <__pow5mult+0x20>
 8007cc0:	4c25      	ldr	r4, [pc, #148]	; (8007d58 <__pow5mult+0xa8>)
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cca:	f7ff fe9b 	bl	8007a04 <__multadd>
 8007cce:	4607      	mov	r7, r0
 8007cd0:	10ad      	asrs	r5, r5, #2
 8007cd2:	d03d      	beq.n	8007d50 <__pow5mult+0xa0>
 8007cd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cd6:	b97c      	cbnz	r4, 8007cf8 <__pow5mult+0x48>
 8007cd8:	2010      	movs	r0, #16
 8007cda:	f7ff fe1b 	bl	8007914 <malloc>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ce2:	b928      	cbnz	r0, 8007cf0 <__pow5mult+0x40>
 8007ce4:	4b1d      	ldr	r3, [pc, #116]	; (8007d5c <__pow5mult+0xac>)
 8007ce6:	481e      	ldr	r0, [pc, #120]	; (8007d60 <__pow5mult+0xb0>)
 8007ce8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007cec:	f000 fc0e 	bl	800850c <__assert_func>
 8007cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cf4:	6004      	str	r4, [r0, #0]
 8007cf6:	60c4      	str	r4, [r0, #12]
 8007cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d00:	b94c      	cbnz	r4, 8007d16 <__pow5mult+0x66>
 8007d02:	f240 2171 	movw	r1, #625	; 0x271
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7ff ff12 	bl	8007b30 <__i2b>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d12:	4604      	mov	r4, r0
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	f04f 0900 	mov.w	r9, #0
 8007d1a:	07eb      	lsls	r3, r5, #31
 8007d1c:	d50a      	bpl.n	8007d34 <__pow5mult+0x84>
 8007d1e:	4639      	mov	r1, r7
 8007d20:	4622      	mov	r2, r4
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ff1a 	bl	8007b5c <__multiply>
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff fe47 	bl	80079c0 <_Bfree>
 8007d32:	4647      	mov	r7, r8
 8007d34:	106d      	asrs	r5, r5, #1
 8007d36:	d00b      	beq.n	8007d50 <__pow5mult+0xa0>
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	b938      	cbnz	r0, 8007d4c <__pow5mult+0x9c>
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff ff0b 	bl	8007b5c <__multiply>
 8007d46:	6020      	str	r0, [r4, #0]
 8007d48:	f8c0 9000 	str.w	r9, [r0]
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	e7e4      	b.n	8007d1a <__pow5mult+0x6a>
 8007d50:	4638      	mov	r0, r7
 8007d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d56:	bf00      	nop
 8007d58:	08009710 	.word	0x08009710
 8007d5c:	08009541 	.word	0x08009541
 8007d60:	080095c4 	.word	0x080095c4

08007d64 <__lshift>:
 8007d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d68:	460c      	mov	r4, r1
 8007d6a:	6849      	ldr	r1, [r1, #4]
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	4607      	mov	r7, r0
 8007d76:	4691      	mov	r9, r2
 8007d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d7c:	f108 0601 	add.w	r6, r8, #1
 8007d80:	42b3      	cmp	r3, r6
 8007d82:	db0b      	blt.n	8007d9c <__lshift+0x38>
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff fddb 	bl	8007940 <_Balloc>
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	b948      	cbnz	r0, 8007da2 <__lshift+0x3e>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4b2a      	ldr	r3, [pc, #168]	; (8007e3c <__lshift+0xd8>)
 8007d92:	482b      	ldr	r0, [pc, #172]	; (8007e40 <__lshift+0xdc>)
 8007d94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d98:	f000 fbb8 	bl	800850c <__assert_func>
 8007d9c:	3101      	adds	r1, #1
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	e7ee      	b.n	8007d80 <__lshift+0x1c>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f100 0114 	add.w	r1, r0, #20
 8007da8:	f100 0210 	add.w	r2, r0, #16
 8007dac:	4618      	mov	r0, r3
 8007dae:	4553      	cmp	r3, sl
 8007db0:	db37      	blt.n	8007e22 <__lshift+0xbe>
 8007db2:	6920      	ldr	r0, [r4, #16]
 8007db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007db8:	f104 0314 	add.w	r3, r4, #20
 8007dbc:	f019 091f 	ands.w	r9, r9, #31
 8007dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007dc8:	d02f      	beq.n	8007e2a <__lshift+0xc6>
 8007dca:	f1c9 0e20 	rsb	lr, r9, #32
 8007dce:	468a      	mov	sl, r1
 8007dd0:	f04f 0c00 	mov.w	ip, #0
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	fa02 f209 	lsl.w	r2, r2, r9
 8007dda:	ea42 020c 	orr.w	r2, r2, ip
 8007dde:	f84a 2b04 	str.w	r2, [sl], #4
 8007de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de6:	4298      	cmp	r0, r3
 8007de8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007dec:	d8f2      	bhi.n	8007dd4 <__lshift+0x70>
 8007dee:	1b03      	subs	r3, r0, r4
 8007df0:	3b15      	subs	r3, #21
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	3304      	adds	r3, #4
 8007df8:	f104 0215 	add.w	r2, r4, #21
 8007dfc:	4290      	cmp	r0, r2
 8007dfe:	bf38      	it	cc
 8007e00:	2304      	movcc	r3, #4
 8007e02:	f841 c003 	str.w	ip, [r1, r3]
 8007e06:	f1bc 0f00 	cmp.w	ip, #0
 8007e0a:	d001      	beq.n	8007e10 <__lshift+0xac>
 8007e0c:	f108 0602 	add.w	r6, r8, #2
 8007e10:	3e01      	subs	r6, #1
 8007e12:	4638      	mov	r0, r7
 8007e14:	612e      	str	r6, [r5, #16]
 8007e16:	4621      	mov	r1, r4
 8007e18:	f7ff fdd2 	bl	80079c0 <_Bfree>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e26:	3301      	adds	r3, #1
 8007e28:	e7c1      	b.n	8007dae <__lshift+0x4a>
 8007e2a:	3904      	subs	r1, #4
 8007e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e34:	4298      	cmp	r0, r3
 8007e36:	d8f9      	bhi.n	8007e2c <__lshift+0xc8>
 8007e38:	e7ea      	b.n	8007e10 <__lshift+0xac>
 8007e3a:	bf00      	nop
 8007e3c:	080095b3 	.word	0x080095b3
 8007e40:	080095c4 	.word	0x080095c4

08007e44 <__mcmp>:
 8007e44:	b530      	push	{r4, r5, lr}
 8007e46:	6902      	ldr	r2, [r0, #16]
 8007e48:	690c      	ldr	r4, [r1, #16]
 8007e4a:	1b12      	subs	r2, r2, r4
 8007e4c:	d10e      	bne.n	8007e6c <__mcmp+0x28>
 8007e4e:	f100 0314 	add.w	r3, r0, #20
 8007e52:	3114      	adds	r1, #20
 8007e54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e64:	42a5      	cmp	r5, r4
 8007e66:	d003      	beq.n	8007e70 <__mcmp+0x2c>
 8007e68:	d305      	bcc.n	8007e76 <__mcmp+0x32>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	bd30      	pop	{r4, r5, pc}
 8007e70:	4283      	cmp	r3, r0
 8007e72:	d3f3      	bcc.n	8007e5c <__mcmp+0x18>
 8007e74:	e7fa      	b.n	8007e6c <__mcmp+0x28>
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	e7f7      	b.n	8007e6c <__mcmp+0x28>

08007e7c <__mdiff>:
 8007e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	4606      	mov	r6, r0
 8007e84:	4611      	mov	r1, r2
 8007e86:	4620      	mov	r0, r4
 8007e88:	4690      	mov	r8, r2
 8007e8a:	f7ff ffdb 	bl	8007e44 <__mcmp>
 8007e8e:	1e05      	subs	r5, r0, #0
 8007e90:	d110      	bne.n	8007eb4 <__mdiff+0x38>
 8007e92:	4629      	mov	r1, r5
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff fd53 	bl	8007940 <_Balloc>
 8007e9a:	b930      	cbnz	r0, 8007eaa <__mdiff+0x2e>
 8007e9c:	4b3a      	ldr	r3, [pc, #232]	; (8007f88 <__mdiff+0x10c>)
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	f240 2132 	movw	r1, #562	; 0x232
 8007ea4:	4839      	ldr	r0, [pc, #228]	; (8007f8c <__mdiff+0x110>)
 8007ea6:	f000 fb31 	bl	800850c <__assert_func>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb4:	bfa4      	itt	ge
 8007eb6:	4643      	movge	r3, r8
 8007eb8:	46a0      	movge	r8, r4
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ec0:	bfa6      	itte	ge
 8007ec2:	461c      	movge	r4, r3
 8007ec4:	2500      	movge	r5, #0
 8007ec6:	2501      	movlt	r5, #1
 8007ec8:	f7ff fd3a 	bl	8007940 <_Balloc>
 8007ecc:	b920      	cbnz	r0, 8007ed8 <__mdiff+0x5c>
 8007ece:	4b2e      	ldr	r3, [pc, #184]	; (8007f88 <__mdiff+0x10c>)
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ed6:	e7e5      	b.n	8007ea4 <__mdiff+0x28>
 8007ed8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007edc:	6926      	ldr	r6, [r4, #16]
 8007ede:	60c5      	str	r5, [r0, #12]
 8007ee0:	f104 0914 	add.w	r9, r4, #20
 8007ee4:	f108 0514 	add.w	r5, r8, #20
 8007ee8:	f100 0e14 	add.w	lr, r0, #20
 8007eec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ef4:	f108 0210 	add.w	r2, r8, #16
 8007ef8:	46f2      	mov	sl, lr
 8007efa:	2100      	movs	r1, #0
 8007efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f04:	fa1f f883 	uxth.w	r8, r3
 8007f08:	fa11 f18b 	uxtah	r1, r1, fp
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	eba1 0808 	sub.w	r8, r1, r8
 8007f12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f1a:	fa1f f888 	uxth.w	r8, r8
 8007f1e:	1419      	asrs	r1, r3, #16
 8007f20:	454e      	cmp	r6, r9
 8007f22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f26:	f84a 3b04 	str.w	r3, [sl], #4
 8007f2a:	d8e7      	bhi.n	8007efc <__mdiff+0x80>
 8007f2c:	1b33      	subs	r3, r6, r4
 8007f2e:	3b15      	subs	r3, #21
 8007f30:	f023 0303 	bic.w	r3, r3, #3
 8007f34:	3304      	adds	r3, #4
 8007f36:	3415      	adds	r4, #21
 8007f38:	42a6      	cmp	r6, r4
 8007f3a:	bf38      	it	cc
 8007f3c:	2304      	movcc	r3, #4
 8007f3e:	441d      	add	r5, r3
 8007f40:	4473      	add	r3, lr
 8007f42:	469e      	mov	lr, r3
 8007f44:	462e      	mov	r6, r5
 8007f46:	4566      	cmp	r6, ip
 8007f48:	d30e      	bcc.n	8007f68 <__mdiff+0xec>
 8007f4a:	f10c 0203 	add.w	r2, ip, #3
 8007f4e:	1b52      	subs	r2, r2, r5
 8007f50:	f022 0203 	bic.w	r2, r2, #3
 8007f54:	3d03      	subs	r5, #3
 8007f56:	45ac      	cmp	ip, r5
 8007f58:	bf38      	it	cc
 8007f5a:	2200      	movcc	r2, #0
 8007f5c:	441a      	add	r2, r3
 8007f5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f62:	b17b      	cbz	r3, 8007f84 <__mdiff+0x108>
 8007f64:	6107      	str	r7, [r0, #16]
 8007f66:	e7a3      	b.n	8007eb0 <__mdiff+0x34>
 8007f68:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f6c:	fa11 f288 	uxtah	r2, r1, r8
 8007f70:	1414      	asrs	r4, r2, #16
 8007f72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f76:	b292      	uxth	r2, r2
 8007f78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f7c:	f84e 2b04 	str.w	r2, [lr], #4
 8007f80:	1421      	asrs	r1, r4, #16
 8007f82:	e7e0      	b.n	8007f46 <__mdiff+0xca>
 8007f84:	3f01      	subs	r7, #1
 8007f86:	e7ea      	b.n	8007f5e <__mdiff+0xe2>
 8007f88:	080095b3 	.word	0x080095b3
 8007f8c:	080095c4 	.word	0x080095c4

08007f90 <__d2b>:
 8007f90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f94:	4689      	mov	r9, r1
 8007f96:	2101      	movs	r1, #1
 8007f98:	ec57 6b10 	vmov	r6, r7, d0
 8007f9c:	4690      	mov	r8, r2
 8007f9e:	f7ff fccf 	bl	8007940 <_Balloc>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b930      	cbnz	r0, 8007fb4 <__d2b+0x24>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	4b25      	ldr	r3, [pc, #148]	; (8008040 <__d2b+0xb0>)
 8007faa:	4826      	ldr	r0, [pc, #152]	; (8008044 <__d2b+0xb4>)
 8007fac:	f240 310a 	movw	r1, #778	; 0x30a
 8007fb0:	f000 faac 	bl	800850c <__assert_func>
 8007fb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fbc:	bb35      	cbnz	r5, 800800c <__d2b+0x7c>
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	d028      	beq.n	8008016 <__d2b+0x86>
 8007fc4:	4668      	mov	r0, sp
 8007fc6:	9600      	str	r6, [sp, #0]
 8007fc8:	f7ff fd82 	bl	8007ad0 <__lo0bits>
 8007fcc:	9900      	ldr	r1, [sp, #0]
 8007fce:	b300      	cbz	r0, 8008012 <__d2b+0x82>
 8007fd0:	9a01      	ldr	r2, [sp, #4]
 8007fd2:	f1c0 0320 	rsb	r3, r0, #32
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	40c2      	lsrs	r2, r0
 8007fde:	6163      	str	r3, [r4, #20]
 8007fe0:	9201      	str	r2, [sp, #4]
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	61a3      	str	r3, [r4, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2202      	movne	r2, #2
 8007fec:	2201      	moveq	r2, #1
 8007fee:	6122      	str	r2, [r4, #16]
 8007ff0:	b1d5      	cbz	r5, 8008028 <__d2b+0x98>
 8007ff2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ff6:	4405      	add	r5, r0
 8007ff8:	f8c9 5000 	str.w	r5, [r9]
 8007ffc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008000:	f8c8 0000 	str.w	r0, [r8]
 8008004:	4620      	mov	r0, r4
 8008006:	b003      	add	sp, #12
 8008008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800800c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008010:	e7d5      	b.n	8007fbe <__d2b+0x2e>
 8008012:	6161      	str	r1, [r4, #20]
 8008014:	e7e5      	b.n	8007fe2 <__d2b+0x52>
 8008016:	a801      	add	r0, sp, #4
 8008018:	f7ff fd5a 	bl	8007ad0 <__lo0bits>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	6163      	str	r3, [r4, #20]
 8008020:	2201      	movs	r2, #1
 8008022:	6122      	str	r2, [r4, #16]
 8008024:	3020      	adds	r0, #32
 8008026:	e7e3      	b.n	8007ff0 <__d2b+0x60>
 8008028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800802c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008030:	f8c9 0000 	str.w	r0, [r9]
 8008034:	6918      	ldr	r0, [r3, #16]
 8008036:	f7ff fd2b 	bl	8007a90 <__hi0bits>
 800803a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800803e:	e7df      	b.n	8008000 <__d2b+0x70>
 8008040:	080095b3 	.word	0x080095b3
 8008044:	080095c4 	.word	0x080095c4

08008048 <_calloc_r>:
 8008048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800804a:	fba1 2402 	umull	r2, r4, r1, r2
 800804e:	b94c      	cbnz	r4, 8008064 <_calloc_r+0x1c>
 8008050:	4611      	mov	r1, r2
 8008052:	9201      	str	r2, [sp, #4]
 8008054:	f000 f87a 	bl	800814c <_malloc_r>
 8008058:	9a01      	ldr	r2, [sp, #4]
 800805a:	4605      	mov	r5, r0
 800805c:	b930      	cbnz	r0, 800806c <_calloc_r+0x24>
 800805e:	4628      	mov	r0, r5
 8008060:	b003      	add	sp, #12
 8008062:	bd30      	pop	{r4, r5, pc}
 8008064:	220c      	movs	r2, #12
 8008066:	6002      	str	r2, [r0, #0]
 8008068:	2500      	movs	r5, #0
 800806a:	e7f8      	b.n	800805e <_calloc_r+0x16>
 800806c:	4621      	mov	r1, r4
 800806e:	f7fe f907 	bl	8006280 <memset>
 8008072:	e7f4      	b.n	800805e <_calloc_r+0x16>

08008074 <_free_r>:
 8008074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008076:	2900      	cmp	r1, #0
 8008078:	d044      	beq.n	8008104 <_free_r+0x90>
 800807a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807e:	9001      	str	r0, [sp, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f1a1 0404 	sub.w	r4, r1, #4
 8008086:	bfb8      	it	lt
 8008088:	18e4      	addlt	r4, r4, r3
 800808a:	f000 fa9b 	bl	80085c4 <__malloc_lock>
 800808e:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <_free_r+0x94>)
 8008090:	9801      	ldr	r0, [sp, #4]
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	b933      	cbnz	r3, 80080a4 <_free_r+0x30>
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	6014      	str	r4, [r2, #0]
 800809a:	b003      	add	sp, #12
 800809c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a0:	f000 ba96 	b.w	80085d0 <__malloc_unlock>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d908      	bls.n	80080ba <_free_r+0x46>
 80080a8:	6825      	ldr	r5, [r4, #0]
 80080aa:	1961      	adds	r1, r4, r5
 80080ac:	428b      	cmp	r3, r1
 80080ae:	bf01      	itttt	eq
 80080b0:	6819      	ldreq	r1, [r3, #0]
 80080b2:	685b      	ldreq	r3, [r3, #4]
 80080b4:	1949      	addeq	r1, r1, r5
 80080b6:	6021      	streq	r1, [r4, #0]
 80080b8:	e7ed      	b.n	8008096 <_free_r+0x22>
 80080ba:	461a      	mov	r2, r3
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b10b      	cbz	r3, 80080c4 <_free_r+0x50>
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d9fa      	bls.n	80080ba <_free_r+0x46>
 80080c4:	6811      	ldr	r1, [r2, #0]
 80080c6:	1855      	adds	r5, r2, r1
 80080c8:	42a5      	cmp	r5, r4
 80080ca:	d10b      	bne.n	80080e4 <_free_r+0x70>
 80080cc:	6824      	ldr	r4, [r4, #0]
 80080ce:	4421      	add	r1, r4
 80080d0:	1854      	adds	r4, r2, r1
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	6011      	str	r1, [r2, #0]
 80080d6:	d1e0      	bne.n	800809a <_free_r+0x26>
 80080d8:	681c      	ldr	r4, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	6053      	str	r3, [r2, #4]
 80080de:	4421      	add	r1, r4
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	e7da      	b.n	800809a <_free_r+0x26>
 80080e4:	d902      	bls.n	80080ec <_free_r+0x78>
 80080e6:	230c      	movs	r3, #12
 80080e8:	6003      	str	r3, [r0, #0]
 80080ea:	e7d6      	b.n	800809a <_free_r+0x26>
 80080ec:	6825      	ldr	r5, [r4, #0]
 80080ee:	1961      	adds	r1, r4, r5
 80080f0:	428b      	cmp	r3, r1
 80080f2:	bf04      	itt	eq
 80080f4:	6819      	ldreq	r1, [r3, #0]
 80080f6:	685b      	ldreq	r3, [r3, #4]
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	bf04      	itt	eq
 80080fc:	1949      	addeq	r1, r1, r5
 80080fe:	6021      	streq	r1, [r4, #0]
 8008100:	6054      	str	r4, [r2, #4]
 8008102:	e7ca      	b.n	800809a <_free_r+0x26>
 8008104:	b003      	add	sp, #12
 8008106:	bd30      	pop	{r4, r5, pc}
 8008108:	20002f84 	.word	0x20002f84

0800810c <sbrk_aligned>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4e0e      	ldr	r6, [pc, #56]	; (8008148 <sbrk_aligned+0x3c>)
 8008110:	460c      	mov	r4, r1
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	4605      	mov	r5, r0
 8008116:	b911      	cbnz	r1, 800811e <sbrk_aligned+0x12>
 8008118:	f000 f9e8 	bl	80084ec <_sbrk_r>
 800811c:	6030      	str	r0, [r6, #0]
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 f9e3 	bl	80084ec <_sbrk_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d00a      	beq.n	8008140 <sbrk_aligned+0x34>
 800812a:	1cc4      	adds	r4, r0, #3
 800812c:	f024 0403 	bic.w	r4, r4, #3
 8008130:	42a0      	cmp	r0, r4
 8008132:	d007      	beq.n	8008144 <sbrk_aligned+0x38>
 8008134:	1a21      	subs	r1, r4, r0
 8008136:	4628      	mov	r0, r5
 8008138:	f000 f9d8 	bl	80084ec <_sbrk_r>
 800813c:	3001      	adds	r0, #1
 800813e:	d101      	bne.n	8008144 <sbrk_aligned+0x38>
 8008140:	f04f 34ff 	mov.w	r4, #4294967295
 8008144:	4620      	mov	r0, r4
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	20002f88 	.word	0x20002f88

0800814c <_malloc_r>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	1ccd      	adds	r5, r1, #3
 8008152:	f025 0503 	bic.w	r5, r5, #3
 8008156:	3508      	adds	r5, #8
 8008158:	2d0c      	cmp	r5, #12
 800815a:	bf38      	it	cc
 800815c:	250c      	movcc	r5, #12
 800815e:	2d00      	cmp	r5, #0
 8008160:	4607      	mov	r7, r0
 8008162:	db01      	blt.n	8008168 <_malloc_r+0x1c>
 8008164:	42a9      	cmp	r1, r5
 8008166:	d905      	bls.n	8008174 <_malloc_r+0x28>
 8008168:	230c      	movs	r3, #12
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	2600      	movs	r6, #0
 800816e:	4630      	mov	r0, r6
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	4e2e      	ldr	r6, [pc, #184]	; (8008230 <_malloc_r+0xe4>)
 8008176:	f000 fa25 	bl	80085c4 <__malloc_lock>
 800817a:	6833      	ldr	r3, [r6, #0]
 800817c:	461c      	mov	r4, r3
 800817e:	bb34      	cbnz	r4, 80081ce <_malloc_r+0x82>
 8008180:	4629      	mov	r1, r5
 8008182:	4638      	mov	r0, r7
 8008184:	f7ff ffc2 	bl	800810c <sbrk_aligned>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	4604      	mov	r4, r0
 800818c:	d14d      	bne.n	800822a <_malloc_r+0xde>
 800818e:	6834      	ldr	r4, [r6, #0]
 8008190:	4626      	mov	r6, r4
 8008192:	2e00      	cmp	r6, #0
 8008194:	d140      	bne.n	8008218 <_malloc_r+0xcc>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	4631      	mov	r1, r6
 800819a:	4638      	mov	r0, r7
 800819c:	eb04 0803 	add.w	r8, r4, r3
 80081a0:	f000 f9a4 	bl	80084ec <_sbrk_r>
 80081a4:	4580      	cmp	r8, r0
 80081a6:	d13a      	bne.n	800821e <_malloc_r+0xd2>
 80081a8:	6821      	ldr	r1, [r4, #0]
 80081aa:	3503      	adds	r5, #3
 80081ac:	1a6d      	subs	r5, r5, r1
 80081ae:	f025 0503 	bic.w	r5, r5, #3
 80081b2:	3508      	adds	r5, #8
 80081b4:	2d0c      	cmp	r5, #12
 80081b6:	bf38      	it	cc
 80081b8:	250c      	movcc	r5, #12
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff ffa5 	bl	800810c <sbrk_aligned>
 80081c2:	3001      	adds	r0, #1
 80081c4:	d02b      	beq.n	800821e <_malloc_r+0xd2>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	442b      	add	r3, r5
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	e00e      	b.n	80081ec <_malloc_r+0xa0>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	1b52      	subs	r2, r2, r5
 80081d2:	d41e      	bmi.n	8008212 <_malloc_r+0xc6>
 80081d4:	2a0b      	cmp	r2, #11
 80081d6:	d916      	bls.n	8008206 <_malloc_r+0xba>
 80081d8:	1961      	adds	r1, r4, r5
 80081da:	42a3      	cmp	r3, r4
 80081dc:	6025      	str	r5, [r4, #0]
 80081de:	bf18      	it	ne
 80081e0:	6059      	strne	r1, [r3, #4]
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	bf08      	it	eq
 80081e6:	6031      	streq	r1, [r6, #0]
 80081e8:	5162      	str	r2, [r4, r5]
 80081ea:	604b      	str	r3, [r1, #4]
 80081ec:	4638      	mov	r0, r7
 80081ee:	f104 060b 	add.w	r6, r4, #11
 80081f2:	f000 f9ed 	bl	80085d0 <__malloc_unlock>
 80081f6:	f026 0607 	bic.w	r6, r6, #7
 80081fa:	1d23      	adds	r3, r4, #4
 80081fc:	1af2      	subs	r2, r6, r3
 80081fe:	d0b6      	beq.n	800816e <_malloc_r+0x22>
 8008200:	1b9b      	subs	r3, r3, r6
 8008202:	50a3      	str	r3, [r4, r2]
 8008204:	e7b3      	b.n	800816e <_malloc_r+0x22>
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	42a3      	cmp	r3, r4
 800820a:	bf0c      	ite	eq
 800820c:	6032      	streq	r2, [r6, #0]
 800820e:	605a      	strne	r2, [r3, #4]
 8008210:	e7ec      	b.n	80081ec <_malloc_r+0xa0>
 8008212:	4623      	mov	r3, r4
 8008214:	6864      	ldr	r4, [r4, #4]
 8008216:	e7b2      	b.n	800817e <_malloc_r+0x32>
 8008218:	4634      	mov	r4, r6
 800821a:	6876      	ldr	r6, [r6, #4]
 800821c:	e7b9      	b.n	8008192 <_malloc_r+0x46>
 800821e:	230c      	movs	r3, #12
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	4638      	mov	r0, r7
 8008224:	f000 f9d4 	bl	80085d0 <__malloc_unlock>
 8008228:	e7a1      	b.n	800816e <_malloc_r+0x22>
 800822a:	6025      	str	r5, [r4, #0]
 800822c:	e7de      	b.n	80081ec <_malloc_r+0xa0>
 800822e:	bf00      	nop
 8008230:	20002f84 	.word	0x20002f84

08008234 <__ssputs_r>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	688e      	ldr	r6, [r1, #8]
 800823a:	429e      	cmp	r6, r3
 800823c:	4682      	mov	sl, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4690      	mov	r8, r2
 8008242:	461f      	mov	r7, r3
 8008244:	d838      	bhi.n	80082b8 <__ssputs_r+0x84>
 8008246:	898a      	ldrh	r2, [r1, #12]
 8008248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800824c:	d032      	beq.n	80082b4 <__ssputs_r+0x80>
 800824e:	6825      	ldr	r5, [r4, #0]
 8008250:	6909      	ldr	r1, [r1, #16]
 8008252:	eba5 0901 	sub.w	r9, r5, r1
 8008256:	6965      	ldr	r5, [r4, #20]
 8008258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800825c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008260:	3301      	adds	r3, #1
 8008262:	444b      	add	r3, r9
 8008264:	106d      	asrs	r5, r5, #1
 8008266:	429d      	cmp	r5, r3
 8008268:	bf38      	it	cc
 800826a:	461d      	movcc	r5, r3
 800826c:	0553      	lsls	r3, r2, #21
 800826e:	d531      	bpl.n	80082d4 <__ssputs_r+0xa0>
 8008270:	4629      	mov	r1, r5
 8008272:	f7ff ff6b 	bl	800814c <_malloc_r>
 8008276:	4606      	mov	r6, r0
 8008278:	b950      	cbnz	r0, 8008290 <__ssputs_r+0x5c>
 800827a:	230c      	movs	r3, #12
 800827c:	f8ca 3000 	str.w	r3, [sl]
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	6921      	ldr	r1, [r4, #16]
 8008292:	464a      	mov	r2, r9
 8008294:	f7ff fb46 	bl	8007924 <memcpy>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800829e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	6126      	str	r6, [r4, #16]
 80082a6:	6165      	str	r5, [r4, #20]
 80082a8:	444e      	add	r6, r9
 80082aa:	eba5 0509 	sub.w	r5, r5, r9
 80082ae:	6026      	str	r6, [r4, #0]
 80082b0:	60a5      	str	r5, [r4, #8]
 80082b2:	463e      	mov	r6, r7
 80082b4:	42be      	cmp	r6, r7
 80082b6:	d900      	bls.n	80082ba <__ssputs_r+0x86>
 80082b8:	463e      	mov	r6, r7
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	4632      	mov	r2, r6
 80082be:	4641      	mov	r1, r8
 80082c0:	f000 f966 	bl	8008590 <memmove>
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	1b9b      	subs	r3, r3, r6
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4433      	add	r3, r6
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e7db      	b.n	800828c <__ssputs_r+0x58>
 80082d4:	462a      	mov	r2, r5
 80082d6:	f000 f981 	bl	80085dc <_realloc_r>
 80082da:	4606      	mov	r6, r0
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1e1      	bne.n	80082a4 <__ssputs_r+0x70>
 80082e0:	6921      	ldr	r1, [r4, #16]
 80082e2:	4650      	mov	r0, sl
 80082e4:	f7ff fec6 	bl	8008074 <_free_r>
 80082e8:	e7c7      	b.n	800827a <__ssputs_r+0x46>
	...

080082ec <_svfiprintf_r>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4698      	mov	r8, r3
 80082f2:	898b      	ldrh	r3, [r1, #12]
 80082f4:	061b      	lsls	r3, r3, #24
 80082f6:	b09d      	sub	sp, #116	; 0x74
 80082f8:	4607      	mov	r7, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	d50e      	bpl.n	800831e <_svfiprintf_r+0x32>
 8008300:	690b      	ldr	r3, [r1, #16]
 8008302:	b963      	cbnz	r3, 800831e <_svfiprintf_r+0x32>
 8008304:	2140      	movs	r1, #64	; 0x40
 8008306:	f7ff ff21 	bl	800814c <_malloc_r>
 800830a:	6028      	str	r0, [r5, #0]
 800830c:	6128      	str	r0, [r5, #16]
 800830e:	b920      	cbnz	r0, 800831a <_svfiprintf_r+0x2e>
 8008310:	230c      	movs	r3, #12
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	e0d1      	b.n	80084be <_svfiprintf_r+0x1d2>
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	616b      	str	r3, [r5, #20]
 800831e:	2300      	movs	r3, #0
 8008320:	9309      	str	r3, [sp, #36]	; 0x24
 8008322:	2320      	movs	r3, #32
 8008324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008328:	f8cd 800c 	str.w	r8, [sp, #12]
 800832c:	2330      	movs	r3, #48	; 0x30
 800832e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084d8 <_svfiprintf_r+0x1ec>
 8008332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008336:	f04f 0901 	mov.w	r9, #1
 800833a:	4623      	mov	r3, r4
 800833c:	469a      	mov	sl, r3
 800833e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008342:	b10a      	cbz	r2, 8008348 <_svfiprintf_r+0x5c>
 8008344:	2a25      	cmp	r2, #37	; 0x25
 8008346:	d1f9      	bne.n	800833c <_svfiprintf_r+0x50>
 8008348:	ebba 0b04 	subs.w	fp, sl, r4
 800834c:	d00b      	beq.n	8008366 <_svfiprintf_r+0x7a>
 800834e:	465b      	mov	r3, fp
 8008350:	4622      	mov	r2, r4
 8008352:	4629      	mov	r1, r5
 8008354:	4638      	mov	r0, r7
 8008356:	f7ff ff6d 	bl	8008234 <__ssputs_r>
 800835a:	3001      	adds	r0, #1
 800835c:	f000 80aa 	beq.w	80084b4 <_svfiprintf_r+0x1c8>
 8008360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008362:	445a      	add	r2, fp
 8008364:	9209      	str	r2, [sp, #36]	; 0x24
 8008366:	f89a 3000 	ldrb.w	r3, [sl]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 80a2 	beq.w	80084b4 <_svfiprintf_r+0x1c8>
 8008370:	2300      	movs	r3, #0
 8008372:	f04f 32ff 	mov.w	r2, #4294967295
 8008376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837a:	f10a 0a01 	add.w	sl, sl, #1
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008386:	931a      	str	r3, [sp, #104]	; 0x68
 8008388:	4654      	mov	r4, sl
 800838a:	2205      	movs	r2, #5
 800838c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008390:	4851      	ldr	r0, [pc, #324]	; (80084d8 <_svfiprintf_r+0x1ec>)
 8008392:	f7f7 ff2d 	bl	80001f0 <memchr>
 8008396:	9a04      	ldr	r2, [sp, #16]
 8008398:	b9d8      	cbnz	r0, 80083d2 <_svfiprintf_r+0xe6>
 800839a:	06d0      	lsls	r0, r2, #27
 800839c:	bf44      	itt	mi
 800839e:	2320      	movmi	r3, #32
 80083a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a4:	0711      	lsls	r1, r2, #28
 80083a6:	bf44      	itt	mi
 80083a8:	232b      	movmi	r3, #43	; 0x2b
 80083aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ae:	f89a 3000 	ldrb.w	r3, [sl]
 80083b2:	2b2a      	cmp	r3, #42	; 0x2a
 80083b4:	d015      	beq.n	80083e2 <_svfiprintf_r+0xf6>
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	4654      	mov	r4, sl
 80083ba:	2000      	movs	r0, #0
 80083bc:	f04f 0c0a 	mov.w	ip, #10
 80083c0:	4621      	mov	r1, r4
 80083c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d94e      	bls.n	800846a <_svfiprintf_r+0x17e>
 80083cc:	b1b0      	cbz	r0, 80083fc <_svfiprintf_r+0x110>
 80083ce:	9207      	str	r2, [sp, #28]
 80083d0:	e014      	b.n	80083fc <_svfiprintf_r+0x110>
 80083d2:	eba0 0308 	sub.w	r3, r0, r8
 80083d6:	fa09 f303 	lsl.w	r3, r9, r3
 80083da:	4313      	orrs	r3, r2
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	46a2      	mov	sl, r4
 80083e0:	e7d2      	b.n	8008388 <_svfiprintf_r+0x9c>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	1d19      	adds	r1, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9103      	str	r1, [sp, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfbb      	ittet	lt
 80083ee:	425b      	neglt	r3, r3
 80083f0:	f042 0202 	orrlt.w	r2, r2, #2
 80083f4:	9307      	strge	r3, [sp, #28]
 80083f6:	9307      	strlt	r3, [sp, #28]
 80083f8:	bfb8      	it	lt
 80083fa:	9204      	strlt	r2, [sp, #16]
 80083fc:	7823      	ldrb	r3, [r4, #0]
 80083fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008400:	d10c      	bne.n	800841c <_svfiprintf_r+0x130>
 8008402:	7863      	ldrb	r3, [r4, #1]
 8008404:	2b2a      	cmp	r3, #42	; 0x2a
 8008406:	d135      	bne.n	8008474 <_svfiprintf_r+0x188>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9203      	str	r2, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb8      	it	lt
 8008414:	f04f 33ff 	movlt.w	r3, #4294967295
 8008418:	3402      	adds	r4, #2
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084e8 <_svfiprintf_r+0x1fc>
 8008420:	7821      	ldrb	r1, [r4, #0]
 8008422:	2203      	movs	r2, #3
 8008424:	4650      	mov	r0, sl
 8008426:	f7f7 fee3 	bl	80001f0 <memchr>
 800842a:	b140      	cbz	r0, 800843e <_svfiprintf_r+0x152>
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	eba0 000a 	sub.w	r0, r0, sl
 8008432:	fa03 f000 	lsl.w	r0, r3, r0
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	4303      	orrs	r3, r0
 800843a:	3401      	adds	r4, #1
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	4826      	ldr	r0, [pc, #152]	; (80084dc <_svfiprintf_r+0x1f0>)
 8008444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008448:	2206      	movs	r2, #6
 800844a:	f7f7 fed1 	bl	80001f0 <memchr>
 800844e:	2800      	cmp	r0, #0
 8008450:	d038      	beq.n	80084c4 <_svfiprintf_r+0x1d8>
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <_svfiprintf_r+0x1f4>)
 8008454:	bb1b      	cbnz	r3, 800849e <_svfiprintf_r+0x1b2>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	3307      	adds	r3, #7
 800845a:	f023 0307 	bic.w	r3, r3, #7
 800845e:	3308      	adds	r3, #8
 8008460:	9303      	str	r3, [sp, #12]
 8008462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008464:	4433      	add	r3, r6
 8008466:	9309      	str	r3, [sp, #36]	; 0x24
 8008468:	e767      	b.n	800833a <_svfiprintf_r+0x4e>
 800846a:	fb0c 3202 	mla	r2, ip, r2, r3
 800846e:	460c      	mov	r4, r1
 8008470:	2001      	movs	r0, #1
 8008472:	e7a5      	b.n	80083c0 <_svfiprintf_r+0xd4>
 8008474:	2300      	movs	r3, #0
 8008476:	3401      	adds	r4, #1
 8008478:	9305      	str	r3, [sp, #20]
 800847a:	4619      	mov	r1, r3
 800847c:	f04f 0c0a 	mov.w	ip, #10
 8008480:	4620      	mov	r0, r4
 8008482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008486:	3a30      	subs	r2, #48	; 0x30
 8008488:	2a09      	cmp	r2, #9
 800848a:	d903      	bls.n	8008494 <_svfiprintf_r+0x1a8>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0c5      	beq.n	800841c <_svfiprintf_r+0x130>
 8008490:	9105      	str	r1, [sp, #20]
 8008492:	e7c3      	b.n	800841c <_svfiprintf_r+0x130>
 8008494:	fb0c 2101 	mla	r1, ip, r1, r2
 8008498:	4604      	mov	r4, r0
 800849a:	2301      	movs	r3, #1
 800849c:	e7f0      	b.n	8008480 <_svfiprintf_r+0x194>
 800849e:	ab03      	add	r3, sp, #12
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	462a      	mov	r2, r5
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <_svfiprintf_r+0x1f8>)
 80084a6:	a904      	add	r1, sp, #16
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7fd ff91 	bl	80063d0 <_printf_float>
 80084ae:	1c42      	adds	r2, r0, #1
 80084b0:	4606      	mov	r6, r0
 80084b2:	d1d6      	bne.n	8008462 <_svfiprintf_r+0x176>
 80084b4:	89ab      	ldrh	r3, [r5, #12]
 80084b6:	065b      	lsls	r3, r3, #25
 80084b8:	f53f af2c 	bmi.w	8008314 <_svfiprintf_r+0x28>
 80084bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084be:	b01d      	add	sp, #116	; 0x74
 80084c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <_svfiprintf_r+0x1f8>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7fe fa22 	bl	8006918 <_printf_i>
 80084d4:	e7eb      	b.n	80084ae <_svfiprintf_r+0x1c2>
 80084d6:	bf00      	nop
 80084d8:	0800971c 	.word	0x0800971c
 80084dc:	08009726 	.word	0x08009726
 80084e0:	080063d1 	.word	0x080063d1
 80084e4:	08008235 	.word	0x08008235
 80084e8:	08009722 	.word	0x08009722

080084ec <_sbrk_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d06      	ldr	r5, [pc, #24]	; (8008508 <_sbrk_r+0x1c>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	f7f9 f9fe 	bl	80018f8 <_sbrk>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_sbrk_r+0x1a>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_sbrk_r+0x1a>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	20002f8c 	.word	0x20002f8c

0800850c <__assert_func>:
 800850c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850e:	4614      	mov	r4, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <__assert_func+0x2c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4605      	mov	r5, r0
 8008518:	68d8      	ldr	r0, [r3, #12]
 800851a:	b14c      	cbz	r4, 8008530 <__assert_func+0x24>
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <__assert_func+0x30>)
 800851e:	9100      	str	r1, [sp, #0]
 8008520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008524:	4906      	ldr	r1, [pc, #24]	; (8008540 <__assert_func+0x34>)
 8008526:	462b      	mov	r3, r5
 8008528:	f000 f80e 	bl	8008548 <fiprintf>
 800852c:	f000 faac 	bl	8008a88 <abort>
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <__assert_func+0x38>)
 8008532:	461c      	mov	r4, r3
 8008534:	e7f3      	b.n	800851e <__assert_func+0x12>
 8008536:	bf00      	nop
 8008538:	20002a5c 	.word	0x20002a5c
 800853c:	0800972d 	.word	0x0800972d
 8008540:	0800973a 	.word	0x0800973a
 8008544:	08009768 	.word	0x08009768

08008548 <fiprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	b503      	push	{r0, r1, lr}
 800854c:	4601      	mov	r1, r0
 800854e:	ab03      	add	r3, sp, #12
 8008550:	4805      	ldr	r0, [pc, #20]	; (8008568 <fiprintf+0x20>)
 8008552:	f853 2b04 	ldr.w	r2, [r3], #4
 8008556:	6800      	ldr	r0, [r0, #0]
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	f000 f897 	bl	800868c <_vfiprintf_r>
 800855e:	b002      	add	sp, #8
 8008560:	f85d eb04 	ldr.w	lr, [sp], #4
 8008564:	b003      	add	sp, #12
 8008566:	4770      	bx	lr
 8008568:	20002a5c 	.word	0x20002a5c

0800856c <__ascii_mbtowc>:
 800856c:	b082      	sub	sp, #8
 800856e:	b901      	cbnz	r1, 8008572 <__ascii_mbtowc+0x6>
 8008570:	a901      	add	r1, sp, #4
 8008572:	b142      	cbz	r2, 8008586 <__ascii_mbtowc+0x1a>
 8008574:	b14b      	cbz	r3, 800858a <__ascii_mbtowc+0x1e>
 8008576:	7813      	ldrb	r3, [r2, #0]
 8008578:	600b      	str	r3, [r1, #0]
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	1e10      	subs	r0, r2, #0
 800857e:	bf18      	it	ne
 8008580:	2001      	movne	r0, #1
 8008582:	b002      	add	sp, #8
 8008584:	4770      	bx	lr
 8008586:	4610      	mov	r0, r2
 8008588:	e7fb      	b.n	8008582 <__ascii_mbtowc+0x16>
 800858a:	f06f 0001 	mvn.w	r0, #1
 800858e:	e7f8      	b.n	8008582 <__ascii_mbtowc+0x16>

08008590 <memmove>:
 8008590:	4288      	cmp	r0, r1
 8008592:	b510      	push	{r4, lr}
 8008594:	eb01 0402 	add.w	r4, r1, r2
 8008598:	d902      	bls.n	80085a0 <memmove+0x10>
 800859a:	4284      	cmp	r4, r0
 800859c:	4623      	mov	r3, r4
 800859e:	d807      	bhi.n	80085b0 <memmove+0x20>
 80085a0:	1e43      	subs	r3, r0, #1
 80085a2:	42a1      	cmp	r1, r4
 80085a4:	d008      	beq.n	80085b8 <memmove+0x28>
 80085a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ae:	e7f8      	b.n	80085a2 <memmove+0x12>
 80085b0:	4402      	add	r2, r0
 80085b2:	4601      	mov	r1, r0
 80085b4:	428a      	cmp	r2, r1
 80085b6:	d100      	bne.n	80085ba <memmove+0x2a>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085c2:	e7f7      	b.n	80085b4 <memmove+0x24>

080085c4 <__malloc_lock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_lock+0x8>)
 80085c6:	f000 bc1f 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	20002f90 	.word	0x20002f90

080085d0 <__malloc_unlock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__malloc_unlock+0x8>)
 80085d2:	f000 bc1a 	b.w	8008e0a <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	20002f90 	.word	0x20002f90

080085dc <_realloc_r>:
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	4680      	mov	r8, r0
 80085e2:	4614      	mov	r4, r2
 80085e4:	460e      	mov	r6, r1
 80085e6:	b921      	cbnz	r1, 80085f2 <_realloc_r+0x16>
 80085e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	4611      	mov	r1, r2
 80085ee:	f7ff bdad 	b.w	800814c <_malloc_r>
 80085f2:	b92a      	cbnz	r2, 8008600 <_realloc_r+0x24>
 80085f4:	f7ff fd3e 	bl	8008074 <_free_r>
 80085f8:	4625      	mov	r5, r4
 80085fa:	4628      	mov	r0, r5
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	f000 fc6a 	bl	8008ed8 <_malloc_usable_size_r>
 8008604:	4284      	cmp	r4, r0
 8008606:	4607      	mov	r7, r0
 8008608:	d802      	bhi.n	8008610 <_realloc_r+0x34>
 800860a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800860e:	d812      	bhi.n	8008636 <_realloc_r+0x5a>
 8008610:	4621      	mov	r1, r4
 8008612:	4640      	mov	r0, r8
 8008614:	f7ff fd9a 	bl	800814c <_malloc_r>
 8008618:	4605      	mov	r5, r0
 800861a:	2800      	cmp	r0, #0
 800861c:	d0ed      	beq.n	80085fa <_realloc_r+0x1e>
 800861e:	42bc      	cmp	r4, r7
 8008620:	4622      	mov	r2, r4
 8008622:	4631      	mov	r1, r6
 8008624:	bf28      	it	cs
 8008626:	463a      	movcs	r2, r7
 8008628:	f7ff f97c 	bl	8007924 <memcpy>
 800862c:	4631      	mov	r1, r6
 800862e:	4640      	mov	r0, r8
 8008630:	f7ff fd20 	bl	8008074 <_free_r>
 8008634:	e7e1      	b.n	80085fa <_realloc_r+0x1e>
 8008636:	4635      	mov	r5, r6
 8008638:	e7df      	b.n	80085fa <_realloc_r+0x1e>

0800863a <__sfputc_r>:
 800863a:	6893      	ldr	r3, [r2, #8]
 800863c:	3b01      	subs	r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	b410      	push	{r4}
 8008642:	6093      	str	r3, [r2, #8]
 8008644:	da08      	bge.n	8008658 <__sfputc_r+0x1e>
 8008646:	6994      	ldr	r4, [r2, #24]
 8008648:	42a3      	cmp	r3, r4
 800864a:	db01      	blt.n	8008650 <__sfputc_r+0x16>
 800864c:	290a      	cmp	r1, #10
 800864e:	d103      	bne.n	8008658 <__sfputc_r+0x1e>
 8008650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008654:	f000 b94a 	b.w	80088ec <__swbuf_r>
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	1c58      	adds	r0, r3, #1
 800865c:	6010      	str	r0, [r2, #0]
 800865e:	7019      	strb	r1, [r3, #0]
 8008660:	4608      	mov	r0, r1
 8008662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008666:	4770      	bx	lr

08008668 <__sfputs_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	4614      	mov	r4, r2
 8008670:	18d5      	adds	r5, r2, r3
 8008672:	42ac      	cmp	r4, r5
 8008674:	d101      	bne.n	800867a <__sfputs_r+0x12>
 8008676:	2000      	movs	r0, #0
 8008678:	e007      	b.n	800868a <__sfputs_r+0x22>
 800867a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867e:	463a      	mov	r2, r7
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ffda 	bl	800863a <__sfputc_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d1f3      	bne.n	8008672 <__sfputs_r+0xa>
 800868a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800868c <_vfiprintf_r>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	460d      	mov	r5, r1
 8008692:	b09d      	sub	sp, #116	; 0x74
 8008694:	4614      	mov	r4, r2
 8008696:	4698      	mov	r8, r3
 8008698:	4606      	mov	r6, r0
 800869a:	b118      	cbz	r0, 80086a4 <_vfiprintf_r+0x18>
 800869c:	6983      	ldr	r3, [r0, #24]
 800869e:	b90b      	cbnz	r3, 80086a4 <_vfiprintf_r+0x18>
 80086a0:	f000 fb14 	bl	8008ccc <__sinit>
 80086a4:	4b89      	ldr	r3, [pc, #548]	; (80088cc <_vfiprintf_r+0x240>)
 80086a6:	429d      	cmp	r5, r3
 80086a8:	d11b      	bne.n	80086e2 <_vfiprintf_r+0x56>
 80086aa:	6875      	ldr	r5, [r6, #4]
 80086ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ae:	07d9      	lsls	r1, r3, #31
 80086b0:	d405      	bmi.n	80086be <_vfiprintf_r+0x32>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	059a      	lsls	r2, r3, #22
 80086b6:	d402      	bmi.n	80086be <_vfiprintf_r+0x32>
 80086b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ba:	f000 fba5 	bl	8008e08 <__retarget_lock_acquire_recursive>
 80086be:	89ab      	ldrh	r3, [r5, #12]
 80086c0:	071b      	lsls	r3, r3, #28
 80086c2:	d501      	bpl.n	80086c8 <_vfiprintf_r+0x3c>
 80086c4:	692b      	ldr	r3, [r5, #16]
 80086c6:	b9eb      	cbnz	r3, 8008704 <_vfiprintf_r+0x78>
 80086c8:	4629      	mov	r1, r5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f96e 	bl	80089ac <__swsetup_r>
 80086d0:	b1c0      	cbz	r0, 8008704 <_vfiprintf_r+0x78>
 80086d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d4:	07dc      	lsls	r4, r3, #31
 80086d6:	d50e      	bpl.n	80086f6 <_vfiprintf_r+0x6a>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	b01d      	add	sp, #116	; 0x74
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	4b7b      	ldr	r3, [pc, #492]	; (80088d0 <_vfiprintf_r+0x244>)
 80086e4:	429d      	cmp	r5, r3
 80086e6:	d101      	bne.n	80086ec <_vfiprintf_r+0x60>
 80086e8:	68b5      	ldr	r5, [r6, #8]
 80086ea:	e7df      	b.n	80086ac <_vfiprintf_r+0x20>
 80086ec:	4b79      	ldr	r3, [pc, #484]	; (80088d4 <_vfiprintf_r+0x248>)
 80086ee:	429d      	cmp	r5, r3
 80086f0:	bf08      	it	eq
 80086f2:	68f5      	ldreq	r5, [r6, #12]
 80086f4:	e7da      	b.n	80086ac <_vfiprintf_r+0x20>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	0598      	lsls	r0, r3, #22
 80086fa:	d4ed      	bmi.n	80086d8 <_vfiprintf_r+0x4c>
 80086fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086fe:	f000 fb84 	bl	8008e0a <__retarget_lock_release_recursive>
 8008702:	e7e9      	b.n	80086d8 <_vfiprintf_r+0x4c>
 8008704:	2300      	movs	r3, #0
 8008706:	9309      	str	r3, [sp, #36]	; 0x24
 8008708:	2320      	movs	r3, #32
 800870a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800870e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008712:	2330      	movs	r3, #48	; 0x30
 8008714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088d8 <_vfiprintf_r+0x24c>
 8008718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800871c:	f04f 0901 	mov.w	r9, #1
 8008720:	4623      	mov	r3, r4
 8008722:	469a      	mov	sl, r3
 8008724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008728:	b10a      	cbz	r2, 800872e <_vfiprintf_r+0xa2>
 800872a:	2a25      	cmp	r2, #37	; 0x25
 800872c:	d1f9      	bne.n	8008722 <_vfiprintf_r+0x96>
 800872e:	ebba 0b04 	subs.w	fp, sl, r4
 8008732:	d00b      	beq.n	800874c <_vfiprintf_r+0xc0>
 8008734:	465b      	mov	r3, fp
 8008736:	4622      	mov	r2, r4
 8008738:	4629      	mov	r1, r5
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ff94 	bl	8008668 <__sfputs_r>
 8008740:	3001      	adds	r0, #1
 8008742:	f000 80aa 	beq.w	800889a <_vfiprintf_r+0x20e>
 8008746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008748:	445a      	add	r2, fp
 800874a:	9209      	str	r2, [sp, #36]	; 0x24
 800874c:	f89a 3000 	ldrb.w	r3, [sl]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80a2 	beq.w	800889a <_vfiprintf_r+0x20e>
 8008756:	2300      	movs	r3, #0
 8008758:	f04f 32ff 	mov.w	r2, #4294967295
 800875c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008760:	f10a 0a01 	add.w	sl, sl, #1
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800876c:	931a      	str	r3, [sp, #104]	; 0x68
 800876e:	4654      	mov	r4, sl
 8008770:	2205      	movs	r2, #5
 8008772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008776:	4858      	ldr	r0, [pc, #352]	; (80088d8 <_vfiprintf_r+0x24c>)
 8008778:	f7f7 fd3a 	bl	80001f0 <memchr>
 800877c:	9a04      	ldr	r2, [sp, #16]
 800877e:	b9d8      	cbnz	r0, 80087b8 <_vfiprintf_r+0x12c>
 8008780:	06d1      	lsls	r1, r2, #27
 8008782:	bf44      	itt	mi
 8008784:	2320      	movmi	r3, #32
 8008786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800878a:	0713      	lsls	r3, r2, #28
 800878c:	bf44      	itt	mi
 800878e:	232b      	movmi	r3, #43	; 0x2b
 8008790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008794:	f89a 3000 	ldrb.w	r3, [sl]
 8008798:	2b2a      	cmp	r3, #42	; 0x2a
 800879a:	d015      	beq.n	80087c8 <_vfiprintf_r+0x13c>
 800879c:	9a07      	ldr	r2, [sp, #28]
 800879e:	4654      	mov	r4, sl
 80087a0:	2000      	movs	r0, #0
 80087a2:	f04f 0c0a 	mov.w	ip, #10
 80087a6:	4621      	mov	r1, r4
 80087a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ac:	3b30      	subs	r3, #48	; 0x30
 80087ae:	2b09      	cmp	r3, #9
 80087b0:	d94e      	bls.n	8008850 <_vfiprintf_r+0x1c4>
 80087b2:	b1b0      	cbz	r0, 80087e2 <_vfiprintf_r+0x156>
 80087b4:	9207      	str	r2, [sp, #28]
 80087b6:	e014      	b.n	80087e2 <_vfiprintf_r+0x156>
 80087b8:	eba0 0308 	sub.w	r3, r0, r8
 80087bc:	fa09 f303 	lsl.w	r3, r9, r3
 80087c0:	4313      	orrs	r3, r2
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	46a2      	mov	sl, r4
 80087c6:	e7d2      	b.n	800876e <_vfiprintf_r+0xe2>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	1d19      	adds	r1, r3, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	9103      	str	r1, [sp, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bfbb      	ittet	lt
 80087d4:	425b      	neglt	r3, r3
 80087d6:	f042 0202 	orrlt.w	r2, r2, #2
 80087da:	9307      	strge	r3, [sp, #28]
 80087dc:	9307      	strlt	r3, [sp, #28]
 80087de:	bfb8      	it	lt
 80087e0:	9204      	strlt	r2, [sp, #16]
 80087e2:	7823      	ldrb	r3, [r4, #0]
 80087e4:	2b2e      	cmp	r3, #46	; 0x2e
 80087e6:	d10c      	bne.n	8008802 <_vfiprintf_r+0x176>
 80087e8:	7863      	ldrb	r3, [r4, #1]
 80087ea:	2b2a      	cmp	r3, #42	; 0x2a
 80087ec:	d135      	bne.n	800885a <_vfiprintf_r+0x1ce>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	1d1a      	adds	r2, r3, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	9203      	str	r2, [sp, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfb8      	it	lt
 80087fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80087fe:	3402      	adds	r4, #2
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088e8 <_vfiprintf_r+0x25c>
 8008806:	7821      	ldrb	r1, [r4, #0]
 8008808:	2203      	movs	r2, #3
 800880a:	4650      	mov	r0, sl
 800880c:	f7f7 fcf0 	bl	80001f0 <memchr>
 8008810:	b140      	cbz	r0, 8008824 <_vfiprintf_r+0x198>
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	eba0 000a 	sub.w	r0, r0, sl
 8008818:	fa03 f000 	lsl.w	r0, r3, r0
 800881c:	9b04      	ldr	r3, [sp, #16]
 800881e:	4303      	orrs	r3, r0
 8008820:	3401      	adds	r4, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008828:	482c      	ldr	r0, [pc, #176]	; (80088dc <_vfiprintf_r+0x250>)
 800882a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800882e:	2206      	movs	r2, #6
 8008830:	f7f7 fcde 	bl	80001f0 <memchr>
 8008834:	2800      	cmp	r0, #0
 8008836:	d03f      	beq.n	80088b8 <_vfiprintf_r+0x22c>
 8008838:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <_vfiprintf_r+0x254>)
 800883a:	bb1b      	cbnz	r3, 8008884 <_vfiprintf_r+0x1f8>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	3307      	adds	r3, #7
 8008840:	f023 0307 	bic.w	r3, r3, #7
 8008844:	3308      	adds	r3, #8
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	443b      	add	r3, r7
 800884c:	9309      	str	r3, [sp, #36]	; 0x24
 800884e:	e767      	b.n	8008720 <_vfiprintf_r+0x94>
 8008850:	fb0c 3202 	mla	r2, ip, r2, r3
 8008854:	460c      	mov	r4, r1
 8008856:	2001      	movs	r0, #1
 8008858:	e7a5      	b.n	80087a6 <_vfiprintf_r+0x11a>
 800885a:	2300      	movs	r3, #0
 800885c:	3401      	adds	r4, #1
 800885e:	9305      	str	r3, [sp, #20]
 8008860:	4619      	mov	r1, r3
 8008862:	f04f 0c0a 	mov.w	ip, #10
 8008866:	4620      	mov	r0, r4
 8008868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800886c:	3a30      	subs	r2, #48	; 0x30
 800886e:	2a09      	cmp	r2, #9
 8008870:	d903      	bls.n	800887a <_vfiprintf_r+0x1ee>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0c5      	beq.n	8008802 <_vfiprintf_r+0x176>
 8008876:	9105      	str	r1, [sp, #20]
 8008878:	e7c3      	b.n	8008802 <_vfiprintf_r+0x176>
 800887a:	fb0c 2101 	mla	r1, ip, r1, r2
 800887e:	4604      	mov	r4, r0
 8008880:	2301      	movs	r3, #1
 8008882:	e7f0      	b.n	8008866 <_vfiprintf_r+0x1da>
 8008884:	ab03      	add	r3, sp, #12
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	462a      	mov	r2, r5
 800888a:	4b16      	ldr	r3, [pc, #88]	; (80088e4 <_vfiprintf_r+0x258>)
 800888c:	a904      	add	r1, sp, #16
 800888e:	4630      	mov	r0, r6
 8008890:	f7fd fd9e 	bl	80063d0 <_printf_float>
 8008894:	4607      	mov	r7, r0
 8008896:	1c78      	adds	r0, r7, #1
 8008898:	d1d6      	bne.n	8008848 <_vfiprintf_r+0x1bc>
 800889a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800889c:	07d9      	lsls	r1, r3, #31
 800889e:	d405      	bmi.n	80088ac <_vfiprintf_r+0x220>
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	059a      	lsls	r2, r3, #22
 80088a4:	d402      	bmi.n	80088ac <_vfiprintf_r+0x220>
 80088a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a8:	f000 faaf 	bl	8008e0a <__retarget_lock_release_recursive>
 80088ac:	89ab      	ldrh	r3, [r5, #12]
 80088ae:	065b      	lsls	r3, r3, #25
 80088b0:	f53f af12 	bmi.w	80086d8 <_vfiprintf_r+0x4c>
 80088b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b6:	e711      	b.n	80086dc <_vfiprintf_r+0x50>
 80088b8:	ab03      	add	r3, sp, #12
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	462a      	mov	r2, r5
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <_vfiprintf_r+0x258>)
 80088c0:	a904      	add	r1, sp, #16
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7fe f828 	bl	8006918 <_printf_i>
 80088c8:	e7e4      	b.n	8008894 <_vfiprintf_r+0x208>
 80088ca:	bf00      	nop
 80088cc:	08009894 	.word	0x08009894
 80088d0:	080098b4 	.word	0x080098b4
 80088d4:	08009874 	.word	0x08009874
 80088d8:	0800971c 	.word	0x0800971c
 80088dc:	08009726 	.word	0x08009726
 80088e0:	080063d1 	.word	0x080063d1
 80088e4:	08008669 	.word	0x08008669
 80088e8:	08009722 	.word	0x08009722

080088ec <__swbuf_r>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	460e      	mov	r6, r1
 80088f0:	4614      	mov	r4, r2
 80088f2:	4605      	mov	r5, r0
 80088f4:	b118      	cbz	r0, 80088fe <__swbuf_r+0x12>
 80088f6:	6983      	ldr	r3, [r0, #24]
 80088f8:	b90b      	cbnz	r3, 80088fe <__swbuf_r+0x12>
 80088fa:	f000 f9e7 	bl	8008ccc <__sinit>
 80088fe:	4b21      	ldr	r3, [pc, #132]	; (8008984 <__swbuf_r+0x98>)
 8008900:	429c      	cmp	r4, r3
 8008902:	d12b      	bne.n	800895c <__swbuf_r+0x70>
 8008904:	686c      	ldr	r4, [r5, #4]
 8008906:	69a3      	ldr	r3, [r4, #24]
 8008908:	60a3      	str	r3, [r4, #8]
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	071a      	lsls	r2, r3, #28
 800890e:	d52f      	bpl.n	8008970 <__swbuf_r+0x84>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	b36b      	cbz	r3, 8008970 <__swbuf_r+0x84>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	1ac0      	subs	r0, r0, r3
 800891a:	6963      	ldr	r3, [r4, #20]
 800891c:	b2f6      	uxtb	r6, r6
 800891e:	4283      	cmp	r3, r0
 8008920:	4637      	mov	r7, r6
 8008922:	dc04      	bgt.n	800892e <__swbuf_r+0x42>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f93c 	bl	8008ba4 <_fflush_r>
 800892c:	bb30      	cbnz	r0, 800897c <__swbuf_r+0x90>
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	3b01      	subs	r3, #1
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	6022      	str	r2, [r4, #0]
 800893a:	701e      	strb	r6, [r3, #0]
 800893c:	6963      	ldr	r3, [r4, #20]
 800893e:	3001      	adds	r0, #1
 8008940:	4283      	cmp	r3, r0
 8008942:	d004      	beq.n	800894e <__swbuf_r+0x62>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	07db      	lsls	r3, r3, #31
 8008948:	d506      	bpl.n	8008958 <__swbuf_r+0x6c>
 800894a:	2e0a      	cmp	r6, #10
 800894c:	d104      	bne.n	8008958 <__swbuf_r+0x6c>
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f927 	bl	8008ba4 <_fflush_r>
 8008956:	b988      	cbnz	r0, 800897c <__swbuf_r+0x90>
 8008958:	4638      	mov	r0, r7
 800895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <__swbuf_r+0x9c>)
 800895e:	429c      	cmp	r4, r3
 8008960:	d101      	bne.n	8008966 <__swbuf_r+0x7a>
 8008962:	68ac      	ldr	r4, [r5, #8]
 8008964:	e7cf      	b.n	8008906 <__swbuf_r+0x1a>
 8008966:	4b09      	ldr	r3, [pc, #36]	; (800898c <__swbuf_r+0xa0>)
 8008968:	429c      	cmp	r4, r3
 800896a:	bf08      	it	eq
 800896c:	68ec      	ldreq	r4, [r5, #12]
 800896e:	e7ca      	b.n	8008906 <__swbuf_r+0x1a>
 8008970:	4621      	mov	r1, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f81a 	bl	80089ac <__swsetup_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	d0cb      	beq.n	8008914 <__swbuf_r+0x28>
 800897c:	f04f 37ff 	mov.w	r7, #4294967295
 8008980:	e7ea      	b.n	8008958 <__swbuf_r+0x6c>
 8008982:	bf00      	nop
 8008984:	08009894 	.word	0x08009894
 8008988:	080098b4 	.word	0x080098b4
 800898c:	08009874 	.word	0x08009874

08008990 <__ascii_wctomb>:
 8008990:	b149      	cbz	r1, 80089a6 <__ascii_wctomb+0x16>
 8008992:	2aff      	cmp	r2, #255	; 0xff
 8008994:	bf85      	ittet	hi
 8008996:	238a      	movhi	r3, #138	; 0x8a
 8008998:	6003      	strhi	r3, [r0, #0]
 800899a:	700a      	strbls	r2, [r1, #0]
 800899c:	f04f 30ff 	movhi.w	r0, #4294967295
 80089a0:	bf98      	it	ls
 80089a2:	2001      	movls	r0, #1
 80089a4:	4770      	bx	lr
 80089a6:	4608      	mov	r0, r1
 80089a8:	4770      	bx	lr
	...

080089ac <__swsetup_r>:
 80089ac:	4b32      	ldr	r3, [pc, #200]	; (8008a78 <__swsetup_r+0xcc>)
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	681d      	ldr	r5, [r3, #0]
 80089b2:	4606      	mov	r6, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	b125      	cbz	r5, 80089c2 <__swsetup_r+0x16>
 80089b8:	69ab      	ldr	r3, [r5, #24]
 80089ba:	b913      	cbnz	r3, 80089c2 <__swsetup_r+0x16>
 80089bc:	4628      	mov	r0, r5
 80089be:	f000 f985 	bl	8008ccc <__sinit>
 80089c2:	4b2e      	ldr	r3, [pc, #184]	; (8008a7c <__swsetup_r+0xd0>)
 80089c4:	429c      	cmp	r4, r3
 80089c6:	d10f      	bne.n	80089e8 <__swsetup_r+0x3c>
 80089c8:	686c      	ldr	r4, [r5, #4]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d42c      	bmi.n	8008a2e <__swsetup_r+0x82>
 80089d4:	06dd      	lsls	r5, r3, #27
 80089d6:	d411      	bmi.n	80089fc <__swsetup_r+0x50>
 80089d8:	2309      	movs	r3, #9
 80089da:	6033      	str	r3, [r6, #0]
 80089dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	e03e      	b.n	8008a66 <__swsetup_r+0xba>
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <__swsetup_r+0xd4>)
 80089ea:	429c      	cmp	r4, r3
 80089ec:	d101      	bne.n	80089f2 <__swsetup_r+0x46>
 80089ee:	68ac      	ldr	r4, [r5, #8]
 80089f0:	e7eb      	b.n	80089ca <__swsetup_r+0x1e>
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <__swsetup_r+0xd8>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	bf08      	it	eq
 80089f8:	68ec      	ldreq	r4, [r5, #12]
 80089fa:	e7e6      	b.n	80089ca <__swsetup_r+0x1e>
 80089fc:	0758      	lsls	r0, r3, #29
 80089fe:	d512      	bpl.n	8008a26 <__swsetup_r+0x7a>
 8008a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a02:	b141      	cbz	r1, 8008a16 <__swsetup_r+0x6a>
 8008a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	d002      	beq.n	8008a12 <__swsetup_r+0x66>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff fb31 	bl	8008074 <_free_r>
 8008a12:	2300      	movs	r3, #0
 8008a14:	6363      	str	r3, [r4, #52]	; 0x34
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f043 0308 	orr.w	r3, r3, #8
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	b94b      	cbnz	r3, 8008a46 <__swsetup_r+0x9a>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a3c:	d003      	beq.n	8008a46 <__swsetup_r+0x9a>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 fa09 	bl	8008e58 <__smakebuf_r>
 8008a46:	89a0      	ldrh	r0, [r4, #12]
 8008a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a4c:	f010 0301 	ands.w	r3, r0, #1
 8008a50:	d00a      	beq.n	8008a68 <__swsetup_r+0xbc>
 8008a52:	2300      	movs	r3, #0
 8008a54:	60a3      	str	r3, [r4, #8]
 8008a56:	6963      	ldr	r3, [r4, #20]
 8008a58:	425b      	negs	r3, r3
 8008a5a:	61a3      	str	r3, [r4, #24]
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	b943      	cbnz	r3, 8008a72 <__swsetup_r+0xc6>
 8008a60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a64:	d1ba      	bne.n	80089dc <__swsetup_r+0x30>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	0781      	lsls	r1, r0, #30
 8008a6a:	bf58      	it	pl
 8008a6c:	6963      	ldrpl	r3, [r4, #20]
 8008a6e:	60a3      	str	r3, [r4, #8]
 8008a70:	e7f4      	b.n	8008a5c <__swsetup_r+0xb0>
 8008a72:	2000      	movs	r0, #0
 8008a74:	e7f7      	b.n	8008a66 <__swsetup_r+0xba>
 8008a76:	bf00      	nop
 8008a78:	20002a5c 	.word	0x20002a5c
 8008a7c:	08009894 	.word	0x08009894
 8008a80:	080098b4 	.word	0x080098b4
 8008a84:	08009874 	.word	0x08009874

08008a88 <abort>:
 8008a88:	b508      	push	{r3, lr}
 8008a8a:	2006      	movs	r0, #6
 8008a8c:	f000 fa54 	bl	8008f38 <raise>
 8008a90:	2001      	movs	r0, #1
 8008a92:	f7f8 feb9 	bl	8001808 <_exit>
	...

08008a98 <__sflush_r>:
 8008a98:	898a      	ldrh	r2, [r1, #12]
 8008a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	0710      	lsls	r0, r2, #28
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	d458      	bmi.n	8008b58 <__sflush_r+0xc0>
 8008aa6:	684b      	ldr	r3, [r1, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc05      	bgt.n	8008ab8 <__sflush_r+0x20>
 8008aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dc02      	bgt.n	8008ab8 <__sflush_r+0x20>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d0f9      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac4:	682f      	ldr	r7, [r5, #0]
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	d032      	beq.n	8008b30 <__sflush_r+0x98>
 8008aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	075a      	lsls	r2, r3, #29
 8008ad0:	d505      	bpl.n	8008ade <__sflush_r+0x46>
 8008ad2:	6863      	ldr	r3, [r4, #4]
 8008ad4:	1ac0      	subs	r0, r0, r3
 8008ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad8:	b10b      	cbz	r3, 8008ade <__sflush_r+0x46>
 8008ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008adc:	1ac0      	subs	r0, r0, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	d106      	bne.n	8008afe <__sflush_r+0x66>
 8008af0:	6829      	ldr	r1, [r5, #0]
 8008af2:	291d      	cmp	r1, #29
 8008af4:	d82c      	bhi.n	8008b50 <__sflush_r+0xb8>
 8008af6:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <__sflush_r+0x108>)
 8008af8:	40ca      	lsrs	r2, r1
 8008afa:	07d6      	lsls	r6, r2, #31
 8008afc:	d528      	bpl.n	8008b50 <__sflush_r+0xb8>
 8008afe:	2200      	movs	r2, #0
 8008b00:	6062      	str	r2, [r4, #4]
 8008b02:	04d9      	lsls	r1, r3, #19
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	d504      	bpl.n	8008b14 <__sflush_r+0x7c>
 8008b0a:	1c42      	adds	r2, r0, #1
 8008b0c:	d101      	bne.n	8008b12 <__sflush_r+0x7a>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	b903      	cbnz	r3, 8008b14 <__sflush_r+0x7c>
 8008b12:	6560      	str	r0, [r4, #84]	; 0x54
 8008b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b16:	602f      	str	r7, [r5, #0]
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d0ca      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d002      	beq.n	8008b2a <__sflush_r+0x92>
 8008b24:	4628      	mov	r0, r5
 8008b26:	f7ff faa5 	bl	8008074 <_free_r>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b2e:	e7c1      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b30:	6a21      	ldr	r1, [r4, #32]
 8008b32:	2301      	movs	r3, #1
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b0      	blx	r6
 8008b38:	1c41      	adds	r1, r0, #1
 8008b3a:	d1c7      	bne.n	8008acc <__sflush_r+0x34>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c4      	beq.n	8008acc <__sflush_r+0x34>
 8008b42:	2b1d      	cmp	r3, #29
 8008b44:	d001      	beq.n	8008b4a <__sflush_r+0xb2>
 8008b46:	2b16      	cmp	r3, #22
 8008b48:	d101      	bne.n	8008b4e <__sflush_r+0xb6>
 8008b4a:	602f      	str	r7, [r5, #0]
 8008b4c:	e7b1      	b.n	8008ab2 <__sflush_r+0x1a>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	e7ad      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b58:	690f      	ldr	r7, [r1, #16]
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d0a9      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008b5e:	0793      	lsls	r3, r2, #30
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	bf08      	it	eq
 8008b64:	694b      	ldreq	r3, [r1, #20]
 8008b66:	600f      	str	r7, [r1, #0]
 8008b68:	bf18      	it	ne
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	eba6 0807 	sub.w	r8, r6, r7
 8008b70:	608b      	str	r3, [r1, #8]
 8008b72:	f1b8 0f00 	cmp.w	r8, #0
 8008b76:	dd9c      	ble.n	8008ab2 <__sflush_r+0x1a>
 8008b78:	6a21      	ldr	r1, [r4, #32]
 8008b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b7c:	4643      	mov	r3, r8
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b0      	blx	r6
 8008b84:	2800      	cmp	r0, #0
 8008b86:	dc06      	bgt.n	8008b96 <__sflush_r+0xfe>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	e78e      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b96:	4407      	add	r7, r0
 8008b98:	eba8 0800 	sub.w	r8, r8, r0
 8008b9c:	e7e9      	b.n	8008b72 <__sflush_r+0xda>
 8008b9e:	bf00      	nop
 8008ba0:	20400001 	.word	0x20400001

08008ba4 <_fflush_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	690b      	ldr	r3, [r1, #16]
 8008ba8:	4605      	mov	r5, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b913      	cbnz	r3, 8008bb4 <_fflush_r+0x10>
 8008bae:	2500      	movs	r5, #0
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	b118      	cbz	r0, 8008bbe <_fflush_r+0x1a>
 8008bb6:	6983      	ldr	r3, [r0, #24]
 8008bb8:	b90b      	cbnz	r3, 8008bbe <_fflush_r+0x1a>
 8008bba:	f000 f887 	bl	8008ccc <__sinit>
 8008bbe:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <_fflush_r+0x6c>)
 8008bc0:	429c      	cmp	r4, r3
 8008bc2:	d11b      	bne.n	8008bfc <_fflush_r+0x58>
 8008bc4:	686c      	ldr	r4, [r5, #4]
 8008bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0ef      	beq.n	8008bae <_fflush_r+0xa>
 8008bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bd0:	07d0      	lsls	r0, r2, #31
 8008bd2:	d404      	bmi.n	8008bde <_fflush_r+0x3a>
 8008bd4:	0599      	lsls	r1, r3, #22
 8008bd6:	d402      	bmi.n	8008bde <_fflush_r+0x3a>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bda:	f000 f915 	bl	8008e08 <__retarget_lock_acquire_recursive>
 8008bde:	4628      	mov	r0, r5
 8008be0:	4621      	mov	r1, r4
 8008be2:	f7ff ff59 	bl	8008a98 <__sflush_r>
 8008be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be8:	07da      	lsls	r2, r3, #31
 8008bea:	4605      	mov	r5, r0
 8008bec:	d4e0      	bmi.n	8008bb0 <_fflush_r+0xc>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	059b      	lsls	r3, r3, #22
 8008bf2:	d4dd      	bmi.n	8008bb0 <_fflush_r+0xc>
 8008bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf6:	f000 f908 	bl	8008e0a <__retarget_lock_release_recursive>
 8008bfa:	e7d9      	b.n	8008bb0 <_fflush_r+0xc>
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <_fflush_r+0x70>)
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d101      	bne.n	8008c06 <_fflush_r+0x62>
 8008c02:	68ac      	ldr	r4, [r5, #8]
 8008c04:	e7df      	b.n	8008bc6 <_fflush_r+0x22>
 8008c06:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <_fflush_r+0x74>)
 8008c08:	429c      	cmp	r4, r3
 8008c0a:	bf08      	it	eq
 8008c0c:	68ec      	ldreq	r4, [r5, #12]
 8008c0e:	e7da      	b.n	8008bc6 <_fflush_r+0x22>
 8008c10:	08009894 	.word	0x08009894
 8008c14:	080098b4 	.word	0x080098b4
 8008c18:	08009874 	.word	0x08009874

08008c1c <std>:
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	4604      	mov	r4, r0
 8008c22:	e9c0 3300 	strd	r3, r3, [r0]
 8008c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c2a:	6083      	str	r3, [r0, #8]
 8008c2c:	8181      	strh	r1, [r0, #12]
 8008c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c30:	81c2      	strh	r2, [r0, #14]
 8008c32:	6183      	str	r3, [r0, #24]
 8008c34:	4619      	mov	r1, r3
 8008c36:	2208      	movs	r2, #8
 8008c38:	305c      	adds	r0, #92	; 0x5c
 8008c3a:	f7fd fb21 	bl	8006280 <memset>
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <std+0x38>)
 8008c40:	6263      	str	r3, [r4, #36]	; 0x24
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <std+0x3c>)
 8008c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <std+0x40>)
 8008c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c4a:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <std+0x44>)
 8008c4c:	6224      	str	r4, [r4, #32]
 8008c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	08008f71 	.word	0x08008f71
 8008c58:	08008f93 	.word	0x08008f93
 8008c5c:	08008fcb 	.word	0x08008fcb
 8008c60:	08008fef 	.word	0x08008fef

08008c64 <_cleanup_r>:
 8008c64:	4901      	ldr	r1, [pc, #4]	; (8008c6c <_cleanup_r+0x8>)
 8008c66:	f000 b8af 	b.w	8008dc8 <_fwalk_reent>
 8008c6a:	bf00      	nop
 8008c6c:	08008ba5 	.word	0x08008ba5

08008c70 <__sfmoreglue>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	2268      	movs	r2, #104	; 0x68
 8008c74:	1e4d      	subs	r5, r1, #1
 8008c76:	4355      	muls	r5, r2
 8008c78:	460e      	mov	r6, r1
 8008c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c7e:	f7ff fa65 	bl	800814c <_malloc_r>
 8008c82:	4604      	mov	r4, r0
 8008c84:	b140      	cbz	r0, 8008c98 <__sfmoreglue+0x28>
 8008c86:	2100      	movs	r1, #0
 8008c88:	e9c0 1600 	strd	r1, r6, [r0]
 8008c8c:	300c      	adds	r0, #12
 8008c8e:	60a0      	str	r0, [r4, #8]
 8008c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c94:	f7fd faf4 	bl	8006280 <memset>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}

08008c9c <__sfp_lock_acquire>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sfp_lock_acquire+0x8>)
 8008c9e:	f000 b8b3 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20002f91 	.word	0x20002f91

08008ca8 <__sfp_lock_release>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sfp_lock_release+0x8>)
 8008caa:	f000 b8ae 	b.w	8008e0a <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20002f91 	.word	0x20002f91

08008cb4 <__sinit_lock_acquire>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sinit_lock_acquire+0x8>)
 8008cb6:	f000 b8a7 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20002f92 	.word	0x20002f92

08008cc0 <__sinit_lock_release>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	; (8008cc8 <__sinit_lock_release+0x8>)
 8008cc2:	f000 b8a2 	b.w	8008e0a <__retarget_lock_release_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	20002f92 	.word	0x20002f92

08008ccc <__sinit>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	4604      	mov	r4, r0
 8008cd0:	f7ff fff0 	bl	8008cb4 <__sinit_lock_acquire>
 8008cd4:	69a3      	ldr	r3, [r4, #24]
 8008cd6:	b11b      	cbz	r3, 8008ce0 <__sinit+0x14>
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	f7ff bff0 	b.w	8008cc0 <__sinit_lock_release>
 8008ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8008ce6:	4b13      	ldr	r3, [pc, #76]	; (8008d34 <__sinit+0x68>)
 8008ce8:	4a13      	ldr	r2, [pc, #76]	; (8008d38 <__sinit+0x6c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	bf04      	itt	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	61a3      	streq	r3, [r4, #24]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f000 f820 	bl	8008d3c <__sfp>
 8008cfc:	6060      	str	r0, [r4, #4]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 f81c 	bl	8008d3c <__sfp>
 8008d04:	60a0      	str	r0, [r4, #8]
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 f818 	bl	8008d3c <__sfp>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60e0      	str	r0, [r4, #12]
 8008d10:	2104      	movs	r1, #4
 8008d12:	6860      	ldr	r0, [r4, #4]
 8008d14:	f7ff ff82 	bl	8008c1c <std>
 8008d18:	68a0      	ldr	r0, [r4, #8]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	2109      	movs	r1, #9
 8008d1e:	f7ff ff7d 	bl	8008c1c <std>
 8008d22:	68e0      	ldr	r0, [r4, #12]
 8008d24:	2202      	movs	r2, #2
 8008d26:	2112      	movs	r1, #18
 8008d28:	f7ff ff78 	bl	8008c1c <std>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	61a3      	str	r3, [r4, #24]
 8008d30:	e7d2      	b.n	8008cd8 <__sinit+0xc>
 8008d32:	bf00      	nop
 8008d34:	080094fc 	.word	0x080094fc
 8008d38:	08008c65 	.word	0x08008c65

08008d3c <__sfp>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	4607      	mov	r7, r0
 8008d40:	f7ff ffac 	bl	8008c9c <__sfp_lock_acquire>
 8008d44:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <__sfp+0x84>)
 8008d46:	681e      	ldr	r6, [r3, #0]
 8008d48:	69b3      	ldr	r3, [r6, #24]
 8008d4a:	b913      	cbnz	r3, 8008d52 <__sfp+0x16>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f7ff ffbd 	bl	8008ccc <__sinit>
 8008d52:	3648      	adds	r6, #72	; 0x48
 8008d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	d503      	bpl.n	8008d64 <__sfp+0x28>
 8008d5c:	6833      	ldr	r3, [r6, #0]
 8008d5e:	b30b      	cbz	r3, 8008da4 <__sfp+0x68>
 8008d60:	6836      	ldr	r6, [r6, #0]
 8008d62:	e7f7      	b.n	8008d54 <__sfp+0x18>
 8008d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d68:	b9d5      	cbnz	r5, 8008da0 <__sfp+0x64>
 8008d6a:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <__sfp+0x88>)
 8008d6c:	60e3      	str	r3, [r4, #12]
 8008d6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d72:	6665      	str	r5, [r4, #100]	; 0x64
 8008d74:	f000 f847 	bl	8008e06 <__retarget_lock_init_recursive>
 8008d78:	f7ff ff96 	bl	8008ca8 <__sfp_lock_release>
 8008d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	61a5      	str	r5, [r4, #24]
 8008d88:	2208      	movs	r2, #8
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d90:	f7fd fa76 	bl	8006280 <memset>
 8008d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da0:	3468      	adds	r4, #104	; 0x68
 8008da2:	e7d9      	b.n	8008d58 <__sfp+0x1c>
 8008da4:	2104      	movs	r1, #4
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7ff ff62 	bl	8008c70 <__sfmoreglue>
 8008dac:	4604      	mov	r4, r0
 8008dae:	6030      	str	r0, [r6, #0]
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1d5      	bne.n	8008d60 <__sfp+0x24>
 8008db4:	f7ff ff78 	bl	8008ca8 <__sfp_lock_release>
 8008db8:	230c      	movs	r3, #12
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	e7ee      	b.n	8008d9c <__sfp+0x60>
 8008dbe:	bf00      	nop
 8008dc0:	080094fc 	.word	0x080094fc
 8008dc4:	ffff0001 	.word	0xffff0001

08008dc8 <_fwalk_reent>:
 8008dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	4688      	mov	r8, r1
 8008dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dd4:	2700      	movs	r7, #0
 8008dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dda:	f1b9 0901 	subs.w	r9, r9, #1
 8008dde:	d505      	bpl.n	8008dec <_fwalk_reent+0x24>
 8008de0:	6824      	ldr	r4, [r4, #0]
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	d1f7      	bne.n	8008dd6 <_fwalk_reent+0xe>
 8008de6:	4638      	mov	r0, r7
 8008de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dec:	89ab      	ldrh	r3, [r5, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d907      	bls.n	8008e02 <_fwalk_reent+0x3a>
 8008df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008df6:	3301      	adds	r3, #1
 8008df8:	d003      	beq.n	8008e02 <_fwalk_reent+0x3a>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	47c0      	blx	r8
 8008e00:	4307      	orrs	r7, r0
 8008e02:	3568      	adds	r5, #104	; 0x68
 8008e04:	e7e9      	b.n	8008dda <_fwalk_reent+0x12>

08008e06 <__retarget_lock_init_recursive>:
 8008e06:	4770      	bx	lr

08008e08 <__retarget_lock_acquire_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_release_recursive>:
 8008e0a:	4770      	bx	lr

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460e      	mov	r6, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	2900      	cmp	r1, #0
 8008e16:	b096      	sub	sp, #88	; 0x58
 8008e18:	4614      	mov	r4, r2
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	da08      	bge.n	8008e30 <__swhatbuf_r+0x24>
 8008e1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	061a      	lsls	r2, r3, #24
 8008e28:	d410      	bmi.n	8008e4c <__swhatbuf_r+0x40>
 8008e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2e:	e00e      	b.n	8008e4e <__swhatbuf_r+0x42>
 8008e30:	466a      	mov	r2, sp
 8008e32:	f000 f903 	bl	800903c <_fstat_r>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	dbf1      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e44:	425a      	negs	r2, r3
 8008e46:	415a      	adcs	r2, r3
 8008e48:	602a      	str	r2, [r5, #0]
 8008e4a:	e7ee      	b.n	8008e2a <__swhatbuf_r+0x1e>
 8008e4c:	2340      	movs	r3, #64	; 0x40
 8008e4e:	2000      	movs	r0, #0
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	b016      	add	sp, #88	; 0x58
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e58 <__smakebuf_r>:
 8008e58:	898b      	ldrh	r3, [r1, #12]
 8008e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e5c:	079d      	lsls	r5, r3, #30
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	d507      	bpl.n	8008e74 <__smakebuf_r+0x1c>
 8008e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	6163      	str	r3, [r4, #20]
 8008e70:	b002      	add	sp, #8
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	ab01      	add	r3, sp, #4
 8008e76:	466a      	mov	r2, sp
 8008e78:	f7ff ffc8 	bl	8008e0c <__swhatbuf_r>
 8008e7c:	9900      	ldr	r1, [sp, #0]
 8008e7e:	4605      	mov	r5, r0
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff f963 	bl	800814c <_malloc_r>
 8008e86:	b948      	cbnz	r0, 8008e9c <__smakebuf_r+0x44>
 8008e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8c:	059a      	lsls	r2, r3, #22
 8008e8e:	d4ef      	bmi.n	8008e70 <__smakebuf_r+0x18>
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	f043 0302 	orr.w	r3, r3, #2
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	e7e3      	b.n	8008e64 <__smakebuf_r+0xc>
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <__smakebuf_r+0x7c>)
 8008e9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	6020      	str	r0, [r4, #0]
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	9b00      	ldr	r3, [sp, #0]
 8008eac:	6163      	str	r3, [r4, #20]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	6120      	str	r0, [r4, #16]
 8008eb2:	b15b      	cbz	r3, 8008ecc <__smakebuf_r+0x74>
 8008eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f8d1 	bl	8009060 <_isatty_r>
 8008ebe:	b128      	cbz	r0, 8008ecc <__smakebuf_r+0x74>
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	81a3      	strh	r3, [r4, #12]
 8008ecc:	89a0      	ldrh	r0, [r4, #12]
 8008ece:	4305      	orrs	r5, r0
 8008ed0:	81a5      	strh	r5, [r4, #12]
 8008ed2:	e7cd      	b.n	8008e70 <__smakebuf_r+0x18>
 8008ed4:	08008c65 	.word	0x08008c65

08008ed8 <_malloc_usable_size_r>:
 8008ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008edc:	1f18      	subs	r0, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfbc      	itt	lt
 8008ee2:	580b      	ldrlt	r3, [r1, r0]
 8008ee4:	18c0      	addlt	r0, r0, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_raise_r>:
 8008ee8:	291f      	cmp	r1, #31
 8008eea:	b538      	push	{r3, r4, r5, lr}
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	d904      	bls.n	8008efc <_raise_r+0x14>
 8008ef2:	2316      	movs	r3, #22
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008efe:	b112      	cbz	r2, 8008f06 <_raise_r+0x1e>
 8008f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f04:	b94b      	cbnz	r3, 8008f1a <_raise_r+0x32>
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 f830 	bl	8008f6c <_getpid_r>
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4601      	mov	r1, r0
 8008f10:	4620      	mov	r0, r4
 8008f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f16:	f000 b817 	b.w	8008f48 <_kill_r>
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d00a      	beq.n	8008f34 <_raise_r+0x4c>
 8008f1e:	1c59      	adds	r1, r3, #1
 8008f20:	d103      	bne.n	8008f2a <_raise_r+0x42>
 8008f22:	2316      	movs	r3, #22
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7e7      	b.n	8008efa <_raise_r+0x12>
 8008f2a:	2400      	movs	r4, #0
 8008f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f30:	4628      	mov	r0, r5
 8008f32:	4798      	blx	r3
 8008f34:	2000      	movs	r0, #0
 8008f36:	e7e0      	b.n	8008efa <_raise_r+0x12>

08008f38 <raise>:
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <raise+0xc>)
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	f7ff bfd3 	b.w	8008ee8 <_raise_r>
 8008f42:	bf00      	nop
 8008f44:	20002a5c 	.word	0x20002a5c

08008f48 <_kill_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d07      	ldr	r5, [pc, #28]	; (8008f68 <_kill_r+0x20>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	f7f8 fc47 	bl	80017e8 <_kill>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d102      	bne.n	8008f64 <_kill_r+0x1c>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	b103      	cbz	r3, 8008f64 <_kill_r+0x1c>
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	bf00      	nop
 8008f68:	20002f8c 	.word	0x20002f8c

08008f6c <_getpid_r>:
 8008f6c:	f7f8 bc34 	b.w	80017d8 <_getpid>

08008f70 <__sread>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	460c      	mov	r4, r1
 8008f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f78:	f000 f894 	bl	80090a4 <_read_r>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	bfab      	itete	ge
 8008f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f82:	89a3      	ldrhlt	r3, [r4, #12]
 8008f84:	181b      	addge	r3, r3, r0
 8008f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f8a:	bfac      	ite	ge
 8008f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f8e:	81a3      	strhlt	r3, [r4, #12]
 8008f90:	bd10      	pop	{r4, pc}

08008f92 <__swrite>:
 8008f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f96:	461f      	mov	r7, r3
 8008f98:	898b      	ldrh	r3, [r1, #12]
 8008f9a:	05db      	lsls	r3, r3, #23
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	d505      	bpl.n	8008fb0 <__swrite+0x1e>
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	2302      	movs	r3, #2
 8008faa:	2200      	movs	r2, #0
 8008fac:	f000 f868 	bl	8009080 <_lseek_r>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	f000 b817 	b.w	8008ff8 <_write_r>

08008fca <__sseek>:
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	460c      	mov	r4, r1
 8008fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd2:	f000 f855 	bl	8009080 <_lseek_r>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	bf15      	itete	ne
 8008fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fe6:	81a3      	strheq	r3, [r4, #12]
 8008fe8:	bf18      	it	ne
 8008fea:	81a3      	strhne	r3, [r4, #12]
 8008fec:	bd10      	pop	{r4, pc}

08008fee <__sclose>:
 8008fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff2:	f000 b813 	b.w	800901c <_close_r>
	...

08008ff8 <_write_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_write_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 fc25 	bl	8001856 <_write>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_write_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_write_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20002f8c 	.word	0x20002f8c

0800901c <_close_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_close_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 fc31 	bl	800188e <_close>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_close_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_close_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20002f8c 	.word	0x20002f8c

0800903c <_fstat_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	; (800905c <_fstat_r+0x20>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	f7f8 fc2c 	bl	80018a6 <_fstat>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d102      	bne.n	8009058 <_fstat_r+0x1c>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b103      	cbz	r3, 8009058 <_fstat_r+0x1c>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	20002f8c 	.word	0x20002f8c

08009060 <_isatty_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d06      	ldr	r5, [pc, #24]	; (800907c <_isatty_r+0x1c>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f8 fc2b 	bl	80018c6 <_isatty>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_isatty_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_isatty_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20002f8c 	.word	0x20002f8c

08009080 <_lseek_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	; (80090a0 <_lseek_r+0x20>)
 8009084:	4604      	mov	r4, r0
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	2200      	movs	r2, #0
 800908c:	602a      	str	r2, [r5, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f7f8 fc24 	bl	80018dc <_lseek>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_lseek_r+0x1e>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_lseek_r+0x1e>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20002f8c 	.word	0x20002f8c

080090a4 <_read_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d07      	ldr	r5, [pc, #28]	; (80090c4 <_read_r+0x20>)
 80090a8:	4604      	mov	r4, r0
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	602a      	str	r2, [r5, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7f8 fbb2 	bl	800181c <_read>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_read_r+0x1e>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_read_r+0x1e>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20002f8c 	.word	0x20002f8c

080090c8 <_init>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr

080090d4 <_fini>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr
