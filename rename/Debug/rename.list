
rename.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  080083d8  080083d8  000183d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bdc  08008bdc  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be4  08008be4  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08008bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000220  08008e0c  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08008e0c  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c055  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002205  00000000  00000000  0002c2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018297  00000000  00000000  0002f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eac4  00000000  00000000  00047c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2e7  00000000  00000000  0005673b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f24  00000000  00000000  000e0a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083c0 	.word	0x080083c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	080083c0 	.word	0x080083c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec2:	f000 fbc9 	bl	8001658 <HAL_Init>

	/* USER CODE BEGIN Init */
	RCC_CONFIG_84MHZ();
 8000ec6:	f002 fbd1 	bl	800366c <RCC_CONFIG_84MHZ>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eca:	f000 f8af 	bl	800102c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ece:	f000 f87f 	bl	8000fd0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	uart_print_config(115200);
 8000ed2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000ed6:	f002 fd3b 	bl	8003950 <uart_print_config>
	print("Working\n");
 8000eda:	4837      	ldr	r0, [pc, #220]	; (8000fb8 <main+0xfc>)
 8000edc:	f002 fd14 	bl	8003908 <print>

	/* TFT Init functions */
	LCD_Begin();
 8000ee0:	f003 f83a 	bl	8003f58 <LCD_Begin>

	gpio_config(PORTB, 8, ALT_MODE, LOW_SPEED, EN_PU, OD);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	2202      	movs	r2, #2
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4832      	ldr	r0, [pc, #200]	; (8000fbc <main+0x100>)
 8000ef4:	f002 faba 	bl	800346c <gpio_config>
	gpio_config(PORTB, 9, ALT_MODE, LOW_SPEED, EN_PU, OD);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	2202      	movs	r2, #2
 8000f04:	2109      	movs	r1, #9
 8000f06:	482d      	ldr	r0, [pc, #180]	; (8000fbc <main+0x100>)
 8000f08:	f002 fab0 	bl	800346c <gpio_config>
	gpio_altfn(PORTB, 8, PB8_I2C1_SCL);
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	2108      	movs	r1, #8
 8000f10:	482a      	ldr	r0, [pc, #168]	; (8000fbc <main+0x100>)
 8000f12:	f002 fb66 	bl	80035e2 <gpio_altfn>
	gpio_altfn(PORTB, 9, PB9_I2C1_SDA);
 8000f16:	2204      	movs	r2, #4
 8000f18:	2109      	movs	r1, #9
 8000f1a:	4828      	ldr	r0, [pc, #160]	; (8000fbc <main+0x100>)
 8000f1c:	f002 fb61 	bl	80035e2 <gpio_altfn>

	/* MLX90614 Init function */
	uint8_t mlx90614_wrokingFlag = 1, status = 0;
 8000f20:	2301      	movs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	2300      	movs	r3, #0
 8000f26:	71bb      	strb	r3, [r7, #6]

	if (!(mlx90614_init())) {
 8000f28:	f002 fda2 	bl	8003a70 <mlx90614_init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <main+0x86>
		print("Error in MLX90614 INIT\n");
 8000f38:	4821      	ldr	r0, [pc, #132]	; (8000fc0 <main+0x104>)
 8000f3a:	f002 fce5 	bl	8003908 <print>
		mlx90614_wrokingFlag = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
	}

	HMS_bgdisplay();
 8000f42:	f000 f8b7 	bl	80010b4 <HMS_bgdisplay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mlx90614_wrokingFlag == 1) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d118      	bne.n	8000f7e <main+0xc2>
			status = mlx90614_getObject1(&temp);
 8000f4c:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <main+0x108>)
 8000f4e:	f002 fe99 	bl	8003c84 <mlx90614_getObject1>
 8000f52:	4603      	mov	r3, r0
 8000f54:	71bb      	strb	r3, [r7, #6]
			if (status == 1) {
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10d      	bne.n	8000f78 <main+0xbc>
				print("Temp in Celsius: = %0.2f\n", temp);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <main+0x108>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff faf9 	bl	8000558 <__aeabi_f2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <main+0x10c>)
 8000f6c:	f002 fccc 	bl	8003908 <print>
				Delay(100);
 8000f70:	2064      	movs	r0, #100	; 0x64
 8000f72:	f000 fbe3 	bl	800173c <HAL_Delay>
 8000f76:	e01b      	b.n	8000fb0 <main+0xf4>
			} else {
				mlx90614_wrokingFlag = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	e018      	b.n	8000fb0 <main+0xf4>
			}
		} else {
			if (!(mlx90614_init())) {
 8000f7e:	f002 fd77 	bl	8003a70 <mlx90614_init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <main+0xea>
				print("Error in MLX90614 INIT\n");
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <main+0x104>)
 8000f90:	f002 fcba 	bl	8003908 <print>
				Delay(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fbd1 	bl	800173c <HAL_Delay>
				mlx90614_wrokingFlag = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
				tempReadFlag = false;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <main+0x110>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e004      	b.n	8000fb0 <main+0xf4>
			} else {
				mlx90614_wrokingFlag = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
				tempReadFlag = true;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <main+0x110>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
			}
		}
		displayTemperature();
 8000fb0:	f000 f964 	bl	800127c <displayTemperature>
		if (mlx90614_wrokingFlag == 1) {
 8000fb4:	e7c7      	b.n	8000f46 <main+0x8a>
 8000fb6:	bf00      	nop
 8000fb8:	080083d8 	.word	0x080083d8
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	080083e4 	.word	0x080083e4
 8000fc4:	20000290 	.word	0x20000290
 8000fc8:	080083fc 	.word	0x080083fc
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MX_I2C1_Init+0x54>)
 8000fd8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_I2C1_Init+0x58>)
 8000fde:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_I2C1_Init+0x50>)
 800100e:	f000 fe23 	bl	8001c58 <HAL_I2C_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001018:	f000 f97c 	bl	8001314 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000023c 	.word	0x2000023c
 8001024:	40005400 	.word	0x40005400
 8001028:	000186a0 	.word	0x000186a0

0800102c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <MX_GPIO_Init+0x84>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <MX_GPIO_Init+0x84>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_GPIO_Init+0x84>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_GPIO_Init+0x84>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <HMS_bgdisplay>:

/* USER CODE BEGIN 4 */
void HMS_bgdisplay(void) {
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af08      	add	r7, sp, #32

	LCD_SetRotation(0);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f004 f87a 	bl	80051b4 <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 80010c0:	2332      	movs	r3, #50	; 0x32
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010c8:	22f0      	movs	r2, #240	; 0xf0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f004 f9f4 	bl	80054ba <colorgradient>

	LCD_SetTextSize(3);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f004 f840 	bl	8005158 <LCD_SetTextSize>

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 80010d8:	2305      	movs	r3, #5
 80010da:	80fb      	strh	r3, [r7, #6]
 80010dc:	e019      	b.n	8001112 <HMS_bgdisplay+0x5e>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 80010de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010e2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b21b      	sxth	r3, r3
 8001102:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001106:	9400      	str	r4, [sp, #0]
 8001108:	f003 f967 	bl	80043da <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	3b01      	subs	r3, #1
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e2      	bne.n	80010de <HMS_bgdisplay+0x2a>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 8001118:	2305      	movs	r3, #5
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001120:	22f0      	movs	r2, #240	; 0xf0
 8001122:	216a      	movs	r1, #106	; 0x6a
 8001124:	2000      	movs	r0, #0
 8001126:	f002 fe3d 	bl	8003da4 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 800112a:	2305      	movs	r3, #5
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	22f0      	movs	r2, #240	; 0xf0
 8001134:	21d4      	movs	r1, #212	; 0xd4
 8001136:	2000      	movs	r0, #0
 8001138:	f002 fe34 	bl	8003da4 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 800113c:	2302      	movs	r3, #2
 800113e:	9307      	str	r3, [sp, #28]
 8001140:	2302      	movs	r3, #2
 8001142:	9306      	str	r3, [sp, #24]
 8001144:	2302      	movs	r3, #2
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	9304      	str	r3, [sp, #16]
 800114c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001150:	9303      	str	r3, [sp, #12]
 8001152:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	230a      	movs	r3, #10
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2342      	movs	r3, #66	; 0x42
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	23c8      	movs	r3, #200	; 0xc8
 8001162:	2214      	movs	r2, #20
 8001164:	2114      	movs	r1, #20
 8001166:	483e      	ldr	r0, [pc, #248]	; (8001260 <HMS_bgdisplay+0x1ac>)
 8001168:	f002 fdb8 	bl	8003cdc <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 800116c:	2002      	movs	r0, #2
 800116e:	f003 fff3 	bl	8005158 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8001172:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800117a:	f004 f803 	bl	8005184 <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 800117e:	2119      	movs	r1, #25
 8001180:	2058      	movs	r0, #88	; 0x58
 8001182:	f003 ffd1 	bl	8005128 <LCD_SetCursor>
	LCD_Printf("Health");
 8001186:	4837      	ldr	r0, [pc, #220]	; (8001264 <HMS_bgdisplay+0x1b0>)
 8001188:	f003 fee6 	bl	8004f58 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 800118c:	212d      	movs	r1, #45	; 0x2d
 800118e:	203f      	movs	r0, #63	; 0x3f
 8001190:	f003 ffca 	bl	8005128 <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8001194:	4834      	ldr	r0, [pc, #208]	; (8001268 <HMS_bgdisplay+0x1b4>)
 8001196:	f003 fedf 	bl	8004f58 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 800119a:	2141      	movs	r1, #65	; 0x41
 800119c:	2058      	movs	r0, #88	; 0x58
 800119e:	f003 ffc3 	bl	8005128 <LCD_SetCursor>
	LCD_Printf("System");
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <HMS_bgdisplay+0x1b8>)
 80011a4:	f003 fed8 	bl	8004f58 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 80011a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2305      	movs	r3, #5
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2319      	movs	r3, #25
 80011b4:	22cd      	movs	r2, #205	; 0xcd
 80011b6:	2179      	movs	r1, #121	; 0x79
 80011b8:	200f      	movs	r0, #15
 80011ba:	f003 fd29 	bl	8004c10 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 80011be:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80011c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011c6:	f003 ffdd 	bl	8005184 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 80011ca:	217e      	movs	r1, #126	; 0x7e
 80011cc:	2014      	movs	r0, #20
 80011ce:	f003 ffab 	bl	8005128 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f003 ffc0 	bl	8005158 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <HMS_bgdisplay+0x1bc>)
 80011da:	f003 febd 	bl	8004f58 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 80011de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2305      	movs	r3, #5
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2319      	movs	r3, #25
 80011ea:	22cd      	movs	r2, #205	; 0xcd
 80011ec:	2197      	movs	r1, #151	; 0x97
 80011ee:	200f      	movs	r0, #15
 80011f0:	f003 fd0e 	bl	8004c10 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 80011f4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80011f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011fc:	f003 ffc2 	bl	8005184 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 8001200:	219c      	movs	r1, #156	; 0x9c
 8001202:	2014      	movs	r0, #20
 8001204:	f003 ff90 	bl	8005128 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8001208:	2002      	movs	r0, #2
 800120a:	f003 ffa5 	bl	8005158 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 800120e:	4819      	ldr	r0, [pc, #100]	; (8001274 <HMS_bgdisplay+0x1c0>)
 8001210:	f003 fea2 	bl	8004f58 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 8001214:	231f      	movs	r3, #31
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2305      	movs	r3, #5
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2319      	movs	r3, #25
 800121e:	22cd      	movs	r2, #205	; 0xcd
 8001220:	21b5      	movs	r1, #181	; 0xb5
 8001222:	200f      	movs	r0, #15
 8001224:	f003 fcf4 	bl	8004c10 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 8001228:	211f      	movs	r1, #31
 800122a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800122e:	f003 ffa9 	bl	8005184 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 8001232:	21ba      	movs	r1, #186	; 0xba
 8001234:	2014      	movs	r0, #20
 8001236:	f003 ff77 	bl	8005128 <LCD_SetCursor>
	LCD_SetTextSize(2);
 800123a:	2002      	movs	r0, #2
 800123c:	f003 ff8c 	bl	8005158 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <HMS_bgdisplay+0x1c4>)
 8001242:	f003 fe89 	bl	8004f58 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2346      	movs	r3, #70	; 0x46
 800124e:	22cd      	movs	r2, #205	; 0xcd
 8001250:	21e8      	movs	r1, #232	; 0xe8
 8001252:	2014      	movs	r0, #20
 8001254:	f003 fc34 	bl	8004ac0 <LCD_FillRect>

	//===============================================================//

}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	08008418 	.word	0x08008418
 8001264:	0800841c 	.word	0x0800841c
 8001268:	08008424 	.word	0x08008424
 800126c:	08008430 	.word	0x08008430
 8001270:	08008438 	.word	0x08008438
 8001274:	08008444 	.word	0x08008444
 8001278:	0800844c 	.word	0x0800844c

0800127c <displayTemperature>:

void displayTemperature() {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if (tempReadFlag) {
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <displayTemperature+0x84>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d02a      	beq.n	80012de <displayTemperature+0x62>
//===============| Terminal Temperature sensor Debug |===============//
#if		Temp_Print
		print("Temp in Celsius: = 	%0.2f\n", temp);
#endif
//===================================================================//
		if ((temp > 0) && (temp < 100)) {
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <displayTemperature+0x88>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	dc00      	bgt.n	800129a <displayTemperature+0x1e>
		LCD_SetTextColor(WHITE, BLUE);
		LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
		LCD_SetTextSize(2);
		LCD_Printf("  ERROR");
	}
}
 8001298:	e030      	b.n	80012fc <displayTemperature+0x80>
		if ((temp > 0) && (temp < 100)) {
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <displayTemperature+0x88>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001308 <displayTemperature+0x8c>
 80012a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d400      	bmi.n	80012b0 <displayTemperature+0x34>
}
 80012ae:	e025      	b.n	80012fc <displayTemperature+0x80>
			LCD_SetTextColor(WHITE, BLUE);
 80012b0:	211f      	movs	r1, #31
 80012b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012b6:	f003 ff65 	bl	8005184 <LCD_SetTextColor>
			LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80012ba:	21ba      	movs	r1, #186	; 0xba
 80012bc:	2082      	movs	r0, #130	; 0x82
 80012be:	f003 ff33 	bl	8005128 <LCD_SetCursor>
			LCD_SetTextSize(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f003 ff48 	bl	8005158 <LCD_SetTextSize>
			LCD_Printf("%0.2f'C", temp);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <displayTemperature+0x88>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f943 	bl	8000558 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <displayTemperature+0x90>)
 80012d8:	f003 fe3e 	bl	8004f58 <LCD_Printf>
}
 80012dc:	e00e      	b.n	80012fc <displayTemperature+0x80>
		LCD_SetTextColor(WHITE, BLUE);
 80012de:	211f      	movs	r1, #31
 80012e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012e4:	f003 ff4e 	bl	8005184 <LCD_SetTextColor>
		LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80012e8:	21ba      	movs	r1, #186	; 0xba
 80012ea:	2082      	movs	r0, #130	; 0x82
 80012ec:	f003 ff1c 	bl	8005128 <LCD_SetCursor>
		LCD_SetTextSize(2);
 80012f0:	2002      	movs	r0, #2
 80012f2:	f003 ff31 	bl	8005158 <LCD_SetTextSize>
		LCD_Printf("  ERROR");
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <displayTemperature+0x94>)
 80012f8:	f003 fe2e 	bl	8004f58 <LCD_Printf>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	20000290 	.word	0x20000290
 8001308:	42c80000 	.word	0x42c80000
 800130c:	08008454 	.word	0x08008454
 8001310:	0800845c 	.word	0x0800845c

08001314 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 fac2 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_I2C_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12c      	bne.n	80013ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b4:	2312      	movs	r3, #18
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c0:	2304      	movs	r3, #4
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <HAL_I2C_MspInit+0x8c>)
 80013cc:	f000 fac0 	bl	8001950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f956 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800146e:	f004 f857 	bl	8005520 <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
	return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001496:	e7fe      	b.n	8001496 <_exit+0x12>

08001498 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
	}

return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
	}
	return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f003 ffbc 	bl	8005520 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20018000 	.word	0x20018000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000294 	.word	0x20000294
 80015dc:	200004f0 	.word	0x200004f0

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd7 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 ff7b 	bl	800552c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fc41 	bl	8000ebc <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001648:	08008bec 	.word	0x08008bec
  ldr r2, =_sbss
 800164c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001650:	200004f0 	.word	0x200004f0

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f931 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fe48 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f93b 	bl	8001936 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f911 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000004 	.word	0x20000004
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000298 	.word	0x20000298

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000298 	.word	0x20000298

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000000c 	.word	0x2000000c

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff47 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff5c 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffb0 	bl	80018a4 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e159      	b.n	8001c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8148 	bne.w	8001c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a2 	beq.w	8001c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x202>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x1fe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x1f6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x1f2>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f aea2 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e12b      	b.n	8001ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fb76 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cbc:	f001 fb58 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8001cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a81      	ldr	r2, [pc, #516]	; (8001ecc <HAL_I2C_Init+0x274>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d807      	bhi.n	8001cdc <HAL_I2C_Init+0x84>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <HAL_I2C_Init+0x278>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e006      	b.n	8001cea <HAL_I2C_Init+0x92>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a7d      	ldr	r2, [pc, #500]	; (8001ed4 <HAL_I2C_Init+0x27c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0e7      	b.n	8001ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a78      	ldr	r2, [pc, #480]	; (8001ed8 <HAL_I2C_Init+0x280>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9b      	lsrs	r3, r3, #18
 8001cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_I2C_Init+0x274>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d802      	bhi.n	8001d2c <HAL_I2C_Init+0xd4>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	e009      	b.n	8001d40 <HAL_I2C_Init+0xe8>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_I2C_Init+0x284>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	3301      	adds	r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	495c      	ldr	r1, [pc, #368]	; (8001ecc <HAL_I2C_Init+0x274>)
 8001d5c:	428b      	cmp	r3, r1
 8001d5e:	d819      	bhi.n	8001d94 <HAL_I2C_Init+0x13c>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1e59      	subs	r1, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6e:	1c59      	adds	r1, r3, #1
 8001d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d74:	400b      	ands	r3, r1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_I2C_Init+0x138>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1e59      	subs	r1, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8e:	e051      	b.n	8001e34 <HAL_I2C_Init+0x1dc>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e04f      	b.n	8001e34 <HAL_I2C_Init+0x1dc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <HAL_I2C_Init+0x168>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e58      	subs	r0, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	440b      	add	r3, r1
 8001daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e012      	b.n	8001de6 <HAL_I2C_Init+0x18e>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	0099      	lsls	r1, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_Init+0x196>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e022      	b.n	8001e34 <HAL_I2C_Init+0x1dc>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <HAL_I2C_Init+0x1bc>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e58      	subs	r0, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	440b      	add	r3, r1
 8001e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e12:	e00f      	b.n	8001e34 <HAL_I2C_Init+0x1dc>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1e58      	subs	r0, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	0099      	lsls	r1, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6809      	ldr	r1, [r1, #0]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6911      	ldr	r1, [r2, #16]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68d2      	ldr	r2, [r2, #12]
 8001e6e:	4311      	orrs	r1, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	000186a0 	.word	0x000186a0
 8001ed0:	001e847f 	.word	0x001e847f
 8001ed4:	003d08ff 	.word	0x003d08ff
 8001ed8:	431bde83 	.word	0x431bde83
 8001edc:	10624dd3 	.word	0x10624dd3

08001ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	813b      	strh	r3, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001efa:	f7ff fc13 	bl	8001724 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 8208 	bne.w	800231e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	497b      	ldr	r1, [pc, #492]	; (8002104 <HAL_I2C_Mem_Read+0x224>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fc1d 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	e1fb      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Mem_Read+0x56>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e1f4      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d007      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2222      	movs	r2, #34	; 0x22
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <HAL_I2C_Mem_Read+0x228>)
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9e:	88f8      	ldrh	r0, [r7, #6]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 faea 	bl	8002588 <I2C_RequestMemoryRead>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1b0      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d113      	bne.n	8001fee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e184      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11b      	bne.n	800202e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e164      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b02      	cmp	r3, #2
 8002034:	d11b      	bne.n	800206e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002044:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	e144      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002084:	e138      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	2b03      	cmp	r3, #3
 800208c:	f200 80f1 	bhi.w	8002272 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	2b01      	cmp	r3, #1
 8002096:	d123      	bne.n	80020e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fc72 	bl	8002986 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e139      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020de:	e10b      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d14e      	bne.n	8002186 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	2200      	movs	r2, #0
 80020f0:	4906      	ldr	r1, [pc, #24]	; (800210c <HAL_I2C_Mem_Read+0x22c>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fb30 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e10e      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
 8002102:	bf00      	nop
 8002104:	00100002 	.word	0x00100002
 8002108:	ffff0000 	.word	0xffff0000
 800210c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002184:	e0b8      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	2200      	movs	r2, #0
 800218e:	4966      	ldr	r1, [pc, #408]	; (8002328 <HAL_I2C_Mem_Read+0x448>)
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fae1 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0bf      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	2200      	movs	r2, #0
 80021ea:	494f      	ldr	r1, [pc, #316]	; (8002328 <HAL_I2C_Mem_Read+0x448>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fab3 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e091      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002270:	e042      	b.n	80022f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fb85 	bl	8002986 <I2C_WaitOnRXNEFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e04c      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d118      	bne.n	80022f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f aec2 	bne.w	8002086 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	00010004 	.word	0x00010004

0800232c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff f9f2 	bl	8001724 <HAL_GetTick>
 8002340:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 8111 	bne.w	8002576 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2319      	movs	r3, #25
 800235a:	2201      	movs	r2, #1
 800235c:	4988      	ldr	r1, [pc, #544]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f9fa 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e104      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2C_IsDeviceReady+0x50>
 8002378:	2302      	movs	r3, #2
 800237a:	e0fd      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d007      	beq.n	80023a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_I2C_IsDeviceReady+0x258>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f9b8 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d103      	bne.n	8002406 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0b6      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002418:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800241a:	f7ff f983 	bl	8001724 <HAL_GetTick>
 800241e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800244e:	e025      	b.n	800249c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7ff f968 	bl	8001724 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <HAL_I2C_IsDeviceReady+0x13a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22a0      	movs	r2, #160	; 0xa0
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2ba0      	cmp	r3, #160	; 0xa0
 80024a6:	d005      	beq.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0cd      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d129      	bne.n	800251e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4921      	ldr	r1, [pc, #132]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f92c 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e036      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e02c      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002536:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	490f      	ldr	r1, [pc, #60]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f908 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e012      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3301      	adds	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	f4ff af32 	bcc.w	80023c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8c2 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d103      	bne.n	80025f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0aa      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4952      	ldr	r1, [pc, #328]	; (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f8fa 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e097      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f964 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e076      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e021      	b.n	80026b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f93e 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e050      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	6a39      	ldr	r1, [r7, #32]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f923 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e035      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f82b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d103      	bne.n	8002720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e013      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	4906      	ldr	r1, [pc, #24]	; (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f863 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e025      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe ffd7 	bl	8001724 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e023      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	e00c      	b.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0b6      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002814:	e051      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d123      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e046      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d021      	beq.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe ff55 	bl	8001724 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e020      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e00b      	b.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d18d      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e02d      	b.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f88d 	bl	8002a32 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02d      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fefb 	bl	8001724 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d1ca      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002992:	e042      	b.n	8002a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d119      	bne.n	80029d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f06f 0210 	mvn.w	r2, #16
 80029aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e029      	b.n	8002a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fea5 	bl	8001724 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d1b5      	bne.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d11b      	bne.n	8002a82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0204 	orr.w	r2, r3, #4
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e267      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d075      	beq.n	8002b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aae:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e242      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x74>
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a75      	ldr	r2, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x98>
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6f      	ldr	r2, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b28:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a68      	ldr	r2, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fdec 	bl	8001724 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fde8 	bl	8001724 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e207      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fdd8 	bl	8001724 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fdd4 	bl	8001724 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1f3      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c7      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4937      	ldr	r1, [pc, #220]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fd8d 	bl	8001724 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fd89 	bl	8001724 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a8      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4925      	ldr	r1, [pc, #148]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd6c 	bl	8001724 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe fd68 	bl	8001724 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e187      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d036      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_RCC_OscConfig+0x248>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fd4c 	bl	8001724 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe fd48 	bl	8001724 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e167      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x200>
 8002cae:	e01b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_OscConfig+0x248>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fd35 	bl	8001724 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e00e      	b.n	8002cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fd31 	bl	8001724 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d907      	bls.n	8002cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e150      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470000 	.word	0x42470000
 8002cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ea      	bne.n	8002cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8097 	beq.w	8002e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a7c      	ldr	r2, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d118      	bne.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a73      	ldr	r2, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fcf1 	bl	8001724 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fced 	bl	8001724 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e10c      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2ea>
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x324>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x30c>
 8002d82:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x324>
 8002d9c:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a54      	ldr	r2, [pc, #336]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fcb2 	bl	8001724 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fcae 	bl	8001724 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0cb      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x334>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe fc9c 	bl	8001724 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fc98 	bl	8001724 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0b5      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a1 	beq.w	8002f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d05c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d141      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fc6c 	bl	8001724 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fc68 	bl	8001724 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e087      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	491b      	ldr	r1, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fc41 	bl	8001724 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe fc3d 	bl	8001724 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e05c      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x416>
 8002ec4:	e054      	b.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fc2a 	bl	8001724 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe fc26 	bl	8001724 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e045      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x444>
 8002ef2:	e03d      	b.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e038      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4ec>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d028      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d121      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d11a      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cc      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d90c      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d044      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d119      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d003      	beq.n	800303e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e067      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4934      	ldr	r1, [pc, #208]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fe fb58 	bl	8001724 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe fb54 	bl	8001724 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20c      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fab8 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08008464 	.word	0x08008464
 8003144:	20000004 	.word	0x20000004
 8003148:	20000008 	.word	0x20000008

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b094      	sub	sp, #80	; 0x50
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	647b      	str	r3, [r7, #68]	; 0x44
 8003158:	2300      	movs	r3, #0
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	2300      	movs	r3, #0
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003164:	4b79      	ldr	r3, [pc, #484]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d00d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x40>
 8003170:	2b08      	cmp	r3, #8
 8003172:	f200 80e1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x34>
 800317a:	2b04      	cmp	r3, #4
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x3a>
 800317e:	e0db      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_GetSysClockFreq+0x204>)
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003184:	e0db      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_GetSysClockFreq+0x208>)
 8003188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318a:	e0d8      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318c:	4b6f      	ldr	r3, [pc, #444]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003196:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d063      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	2200      	movs	r2, #0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031be:	4622      	mov	r2, r4
 80031c0:	462b      	mov	r3, r5
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	0159      	lsls	r1, r3, #5
 80031cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d0:	0150      	lsls	r0, r2, #5
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4621      	mov	r1, r4
 80031d8:	1a51      	subs	r1, r2, r1
 80031da:	6139      	str	r1, [r7, #16]
 80031dc:	4629      	mov	r1, r5
 80031de:	eb63 0301 	sbc.w	r3, r3, r1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f0:	4659      	mov	r1, fp
 80031f2:	018b      	lsls	r3, r1, #6
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fa:	4651      	mov	r1, sl
 80031fc:	018a      	lsls	r2, r1, #6
 80031fe:	4651      	mov	r1, sl
 8003200:	ebb2 0801 	subs.w	r8, r2, r1
 8003204:	4659      	mov	r1, fp
 8003206:	eb63 0901 	sbc.w	r9, r3, r1
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321e:	4690      	mov	r8, r2
 8003220:	4699      	mov	r9, r3
 8003222:	4623      	mov	r3, r4
 8003224:	eb18 0303 	adds.w	r3, r8, r3
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	462b      	mov	r3, r5
 800322c:	eb49 0303 	adc.w	r3, r9, r3
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800323e:	4629      	mov	r1, r5
 8003240:	024b      	lsls	r3, r1, #9
 8003242:	4621      	mov	r1, r4
 8003244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003248:	4621      	mov	r1, r4
 800324a:	024a      	lsls	r2, r1, #9
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	2200      	movs	r2, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
 8003256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325c:	f7fd fcac 	bl	8000bb8 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4613      	mov	r3, r2
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003268:	e058      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	2200      	movs	r2, #0
 8003272:	4618      	mov	r0, r3
 8003274:	4611      	mov	r1, r2
 8003276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	0159      	lsls	r1, r3, #5
 8003292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003296:	0150      	lsls	r0, r2, #5
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4641      	mov	r1, r8
 800329e:	ebb2 0a01 	subs.w	sl, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032bc:	ebb2 040a 	subs.w	r4, r2, sl
 80032c0:	eb63 050b 	sbc.w	r5, r3, fp
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	00eb      	lsls	r3, r5, #3
 80032ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d2:	00e2      	lsls	r2, r4, #3
 80032d4:	4614      	mov	r4, r2
 80032d6:	461d      	mov	r5, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	18e3      	adds	r3, r4, r3
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	464b      	mov	r3, r9
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	2200      	movs	r2, #0
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	61fa      	str	r2, [r7, #28]
 800330c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003310:	f7fd fc52 	bl	8000bb8 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800332c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetSysClockFreq+0x204>)
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003340:	4618      	mov	r0, r3
 8003342:	3750      	adds	r7, #80	; 0x50
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	007a1200 	.word	0x007a1200

08003358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	08008474 	.word	0x08008474

08003398 <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8003398:	b490      	push	{r4, r7}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	80fb      	strh	r3, [r7, #6]
 80033aa:	4603      	mov	r3, r0
 80033ac:	80bb      	strh	r3, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]
 80033b2:	4613      	mov	r3, r2
 80033b4:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	8a39      	ldrh	r1, [r7, #16]
 80033be:	883a      	ldrh	r2, [r7, #0]
 80033c0:	1a8a      	subs	r2, r1, r2
 80033c2:	fb03 f202 	mul.w	r2, r3, r2
 80033c6:	8879      	ldrh	r1, [r7, #2]
 80033c8:	88bb      	ldrh	r3, [r7, #4]
 80033ca:	1ac9      	subs	r1, r1, r3
 80033cc:	883b      	ldrh	r3, [r7, #0]
 80033ce:	440b      	add	r3, r1
 80033d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033d4:	b29b      	uxth	r3, r3
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc90      	pop	{r4, r7}
 80033de:	4770      	bx	lr

080033e0 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <gpio_clk_en+0x78>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d106      	bne.n	80033fe <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <gpio_clk_en+0x7c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <gpio_clk_en+0x7c>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 80033fc:	e026      	b.n	800344c <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <gpio_clk_en+0x80>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d106      	bne.n	8003414 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <gpio_clk_en+0x7c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a14      	ldr	r2, [pc, #80]	; (800345c <gpio_clk_en+0x7c>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003412:	e01b      	b.n	800344c <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <gpio_clk_en+0x84>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d106      	bne.n	800342a <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <gpio_clk_en+0x7c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <gpio_clk_en+0x7c>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003428:	e010      	b.n	800344c <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <gpio_clk_en+0x88>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d106      	bne.n	8003440 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <gpio_clk_en+0x7c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <gpio_clk_en+0x7c>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800343e:	e005      	b.n	800344c <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <gpio_clk_en+0x7c>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <gpio_clk_en+0x7c>)
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40020000 	.word	0x40020000
 800345c:	40023800 	.word	0x40023800
 8003460:	40020400 	.word	0x40020400
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00

0800346c <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d117      	bne.n	80034b0 <gpio_config+0x44>
		gpio_clk_en(port);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ffad 	bl	80033e0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f846 	bl	800351c <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f85b 	bl	8003550 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f870 	bl	8003584 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f885 	bl	80035b8 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 80034ae:	e031      	b.n	8003514 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <gpio_config+0x66>
		gpio_clk_en(port);
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff92 	bl	80033e0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f82b 	bl	800351c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f85a 	bl	8003584 <gpio_PUPD>
}
 80034d0:	e020      	b.n	8003514 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d112      	bne.n	80034fe <gpio_config+0x92>
		gpio_clk_en(port);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ff81 	bl	80033e0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f81a 	bl	800351c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f849 	bl	8003584 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f85e 	bl	80035b8 <gpio_PHPL_OD>
}
 80034fc:	e00a      	b.n	8003514 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d107      	bne.n	8003514 <gpio_config+0xa8>
		gpio_clk_en(port);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ff6b 	bl	80033e0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f804 	bl	800351c <gpio_moder>
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <gpio_moder+0x30>)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000010 	.word	0x20000010

08003550 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <gpio_speed+0x30>)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	431a      	orrs	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	20000010 	.word	0x20000010

08003584 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4907      	ldr	r1, [pc, #28]	; (80035b4 <gpio_PUPD+0x30>)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	20000010 	.word	0x20000010

080035b8 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d80a      	bhi.n	800360a <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8003608:	e00a      	b.n	8003620 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3b08      	subs	r3, #8
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8003640:	2201      	movs	r2, #1
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 800364e:	e007      	b.n	8003660 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3310      	adds	r3, #16
 8003654:	2201      	movs	r2, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	619a      	str	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <RCC_CONFIG_84MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_84MHZ() {
 800366c:	b580      	push	{r7, lr}
 800366e:	b094      	sub	sp, #80	; 0x50
 8003670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	2230      	movs	r2, #48	; 0x30
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f001 ff7a 	bl	8005574 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <RCC_CONFIG_84MHZ+0xcc>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <RCC_CONFIG_84MHZ+0xcc>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <RCC_CONFIG_84MHZ+0xcc>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ac:	2300      	movs	r3, #0
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <RCC_CONFIG_84MHZ+0xd0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <RCC_CONFIG_84MHZ+0xd0>)
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <RCC_CONFIG_84MHZ+0xd0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036cc:	2302      	movs	r3, #2
 80036ce:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036d0:	2301      	movs	r3, #1
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036d4:	2310      	movs	r3, #16
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d8:	2302      	movs	r3, #2
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80036e0:	2310      	movs	r3, #16
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80036e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80036ea:	2304      	movs	r3, #4
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036ee:	2307      	movs	r3, #7
 80036f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f2:	f107 0320 	add.w	r3, r7, #32
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f9ca 	bl	8002a90 <HAL_RCC_OscConfig>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d000      	beq.n	8003704 <RCC_CONFIG_84MHZ+0x98>
	  {
//	    Error_Handler();
		  while(1);
 8003702:	e7fe      	b.n	8003702 <RCC_CONFIG_84MHZ+0x96>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003704:	230f      	movs	r3, #15
 8003706:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003708:	2302      	movs	r3, #2
 800370a:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003714:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc2d 	bl	8002f80 <HAL_RCC_ClockConfig>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d000      	beq.n	800372e <RCC_CONFIG_84MHZ+0xc2>
	  {
//	    Error_Handler();
		  while(1);
 800372c:	e7fe      	b.n	800372c <RCC_CONFIG_84MHZ+0xc0>
	  }
}
 800372e:	bf00      	nop
 8003730:	4618      	mov	r0, r3
 8003732:	3750      	adds	r7, #80	; 0x50
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	40007000 	.word	0x40007000

08003740 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f818 	bl	8003784 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f842 	bl	80037e8 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f884 	bl	8003874 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003774:	f043 030c 	orr.w	r3, r3, #12
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	60d3      	str	r3, [r2, #12]

}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <USART_CLK_EN+0x54>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d106      	bne.n	80037a2 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <USART_CLK_EN+0x58>)
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	4a10      	ldr	r2, [pc, #64]	; (80037dc <USART_CLK_EN+0x58>)
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 80037a0:	e014      	b.n	80037cc <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <USART_CLK_EN+0x5c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d106      	bne.n	80037b8 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <USART_CLK_EN+0x58>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <USART_CLK_EN+0x58>)
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80037b6:	e009      	b.n	80037cc <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <USART_CLK_EN+0x60>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d105      	bne.n	80037cc <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <USART_CLK_EN+0x58>)
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <USART_CLK_EN+0x58>)
 80037c6:	f043 0320 	orr.w	r3, r3, #32
 80037ca:	6453      	str	r3, [r2, #68]	; 0x44
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40004400 	.word	0x40004400
 80037e4:	40011400 	.word	0x40011400

080037e8 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80037f6:	2300      	movs	r3, #0
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2302      	movs	r3, #2
 8003800:	2202      	movs	r2, #2
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	68b8      	ldr	r0, [r7, #8]
 8003806:	f7ff fe31 	bl	800346c <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800380a:	2300      	movs	r3, #0
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2302      	movs	r3, #2
 8003814:	2202      	movs	r2, #2
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fe27 	bl	800346c <gpio_config>

	if (usart == USART1) {
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <USART_PIN_CONFIG+0x80>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01b      	beq.n	800385e <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a10      	ldr	r2, [pc, #64]	; (800386c <USART_PIN_CONFIG+0x84>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d117      	bne.n	800385e <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <USART_PIN_CONFIG+0x88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d107      	bne.n	8003846 <USART_PIN_CONFIG+0x5e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d104      	bne.n	8003846 <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 800383c:	2207      	movs	r2, #7
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	68b8      	ldr	r0, [r7, #8]
 8003842:	f7ff fece 	bl	80035e2 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <USART_PIN_CONFIG+0x88>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d107      	bne.n	800385e <USART_PIN_CONFIG+0x76>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d104      	bne.n	800385e <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 8003854:	2207      	movs	r2, #7
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fec2 	bl	80035e2 <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40011000 	.word	0x40011000
 800386c:	40004400 	.word	0x40004400
 8003870:	40020000 	.word	0x40020000

08003874 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <USART_BDR_SEL+0x30>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	20000004 	.word	0x20000004

080038a8 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
 80038be:	e017      	b.n	80038f0 <USART_WRITE+0x48>
		if (len == 1) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d103      	bne.n	80038ce <USART_WRITE+0x26>
			usart->DR = ch;
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	e006      	b.n	80038dc <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 80038dc:	bf00      	nop
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f9      	beq.n	80038de <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	3301      	adds	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8e3      	bhi.n	80038c0 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8003908:	b40f      	push	{r0, r1, r2, r3}
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800391e:	480a      	ldr	r0, [pc, #40]	; (8003948 <print+0x40>)
 8003920:	f002 fac6 	bl	8005eb0 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8003924:	4808      	ldr	r0, [pc, #32]	; (8003948 <print+0x40>)
 8003926:	f7fc fc5b 	bl	80001e0 <strlen>
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	2364      	movs	r3, #100	; 0x64
 8003932:	4905      	ldr	r1, [pc, #20]	; (8003948 <print+0x40>)
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <print+0x44>)
 8003936:	f7ff ffb7 	bl	80038a8 <USART_WRITE>

}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003944:	b004      	add	sp, #16
 8003946:	4770      	bx	lr
 8003948:	2000029c 	.word	0x2000029c
 800394c:	40004400 	.word	0x40004400

08003950 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	2303      	movs	r3, #3
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2302      	movs	r3, #2
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <uart_print_config+0x24>)
 8003964:	4903      	ldr	r1, [pc, #12]	; (8003974 <uart_print_config+0x24>)
 8003966:	4804      	ldr	r0, [pc, #16]	; (8003978 <uart_print_config+0x28>)
 8003968:	f7ff feea 	bl	8003740 <USART_INIT>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40020000 	.word	0x40020000
 8003978:	40004400 	.word	0x40004400

0800397c <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af04      	add	r7, sp, #16
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	b29a      	uxth	r2, r3
 800398c:	2364      	movs	r3, #100	; 0x64
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	2303      	movs	r3, #3
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2301      	movs	r3, #1
 800399c:	21b4      	movs	r1, #180	; 0xb4
 800399e:	480b      	ldr	r0, [pc, #44]	; (80039cc <mlx90614_read16+0x50>)
 80039a0:	f7fe fa9e 	bl	8001ee0 <HAL_I2C_Mem_Read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <mlx90614_read16+0x32>
    return false;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e009      	b.n	80039c2 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80039ae:	7b3b      	ldrb	r3, [r7, #12]
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	7b7b      	ldrb	r3, [r7, #13]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b21a      	sxth	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	801a      	strh	r2, [r3, #0]
  return true;
 80039c0:	2301      	movs	r3, #1
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000023c 	.word	0x2000023c

080039d0 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <mlx90614_calcTemperature+0x90>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 80039e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ee:	edc7 7a03 	vstr	s15, [r7, #12]
 80039f2:	e02b      	b.n	8003a4c <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 80039f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a00:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a64 <mlx90614_calcTemperature+0x94>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <mlx90614_calcTemperature+0x90>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d01b      	beq.n	8003a4c <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 8003a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a18:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003a68 <mlx90614_calcTemperature+0x98>
 8003a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a20:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <mlx90614_calcTemperature+0x90>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d10f      	bne.n	8003a4c <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8003a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a30:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a38:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a40:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003a6c <mlx90614_calcTemperature+0x9c>
 8003a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a48:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	ee07 3a90 	vmov	s15, r3
}
 8003a52:	eeb0 0a67 	vmov.f32	s0, s15
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	2000039c 	.word	0x2000039c
 8003a64:	3ca3d70a 	.word	0x3ca3d70a
 8003a68:	43889333 	.word	0x43889333
 8003a6c:	42000000 	.word	0x42000000

08003a70 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 8003a74:	2234      	movs	r2, #52	; 0x34
 8003a76:	2100      	movs	r1, #0
 8003a78:	4821      	ldr	r0, [pc, #132]	; (8003b00 <mlx90614_init+0x90>)
 8003a7a:	f001 fd7b 	bl	8005574 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <mlx90614_init+0x90>)
 8003a80:	2202      	movs	r2, #2
 8003a82:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 8003a84:	2364      	movs	r3, #100	; 0x64
 8003a86:	2201      	movs	r2, #1
 8003a88:	21b4      	movs	r1, #180	; 0xb4
 8003a8a:	481e      	ldr	r0, [pc, #120]	; (8003b04 <mlx90614_init+0x94>)
 8003a8c:	f7fe fc4e 	bl	800232c <HAL_I2C_IsDeviceReady>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <mlx90614_init+0x2a>
    return false;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e030      	b.n	8003afc <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8003a9a:	491b      	ldr	r1, [pc, #108]	; (8003b08 <mlx90614_init+0x98>)
 8003a9c:	2025      	movs	r0, #37	; 0x25
 8003a9e:	f7ff ff6d 	bl	800397c <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f000 f832 	bl	8003b0c <mlx90614_readID>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f083 0301 	eor.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <mlx90614_init+0x48>
    return false;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e021      	b.n	8003afc <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f000 f861 	bl	8003b80 <mlx90614_getEmissivity>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <mlx90614_init+0x5e>
    return false;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e016      	b.n	8003afc <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f000 f890 	bl	8003bf4 <mlx90614_getMax>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <mlx90614_init+0x74>
    return false;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e00b      	b.n	8003afc <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f000 f8a9 	bl	8003c3c <mlx90614_getMin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f083 0301 	eor.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <mlx90614_init+0x8a>
    return false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <mlx90614_init+0x8c>

  return true;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000039c 	.word	0x2000039c
 8003b04:	2000023c 	.word	0x2000023c
 8003b08:	200003cc 	.word	0x200003cc

08003b0c <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e028      	b.n	8003b6c <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	333c      	adds	r3, #60	; 0x3c
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f107 020a 	add.w	r2, r7, #10
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff25 	bl	800397c <mlx90614_read16>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <mlx90614_readID+0x36>
			return false;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e018      	b.n	8003b74 <mlx90614_readID+0x68>
    if(id != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b54:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 8003b56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b5a:	b299      	uxth	r1, r3
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <mlx90614_readID+0x70>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3314      	adds	r3, #20
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	ddd3      	ble.n	8003b1a <mlx90614_readID+0xe>
	}
	return true;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000039c 	.word	0x2000039c

08003b80 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8003b88:	4917      	ldr	r1, [pc, #92]	; (8003be8 <mlx90614_getEmissivity+0x68>)
 8003b8a:	2024      	movs	r0, #36	; 0x24
 8003b8c:	f7ff fef6 	bl	800397c <mlx90614_read16>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d022      	beq.n	8003bdc <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <mlx90614_getEmissivity+0x6c>)
 8003b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ba6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003bf0 <mlx90614_getEmissivity+0x70>
 8003baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <mlx90614_getEmissivity+0x6c>)
 8003bb0:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00e      	beq.n	8003bd8 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <mlx90614_getEmissivity+0x6c>)
 8003bbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bca:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003bf0 <mlx90614_getEmissivity+0x70>
 8003bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	2000039e 	.word	0x2000039e
 8003bec:	2000039c 	.word	0x2000039c
 8003bf0:	477fff00 	.word	0x477fff00

08003bf4 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8003bfc:	490d      	ldr	r1, [pc, #52]	; (8003c34 <mlx90614_getMax+0x40>)
 8003bfe:	2020      	movs	r0, #32
 8003c00:	f7ff febc 	bl	800397c <mlx90614_read16>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <mlx90614_getMax+0x44>)
 8003c12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <mlx90614_getMax+0x36>
	}
	return false;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200003a6 	.word	0x200003a6
 8003c38:	2000039c 	.word	0x2000039c

08003c3c <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8003c44:	490d      	ldr	r1, [pc, #52]	; (8003c7c <mlx90614_getMin+0x40>)
 8003c46:	2021      	movs	r0, #33	; 0x21
 8003c48:	f7ff fe98 	bl	800397c <mlx90614_read16>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <mlx90614_getMin+0x44>)
 8003c5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <mlx90614_getMin+0x36>
	}
	return false;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200003a8 	.word	0x200003a8
 8003c80:	2000039c 	.word	0x2000039c

08003c84 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 8003c8c:	4911      	ldr	r1, [pc, #68]	; (8003cd4 <mlx90614_getObject1+0x50>)
 8003c8e:	2007      	movs	r0, #7
 8003c90:	f7ff fe74 	bl	800397c <mlx90614_read16>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d016      	beq.n	8003cc8 <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <mlx90614_getObject1+0x54>)
 8003c9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da01      	bge.n	8003ca8 <mlx90614_getObject1+0x24>
			return false;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e010      	b.n	8003cca <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <mlx90614_getObject1+0x54>)
 8003cb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fe8b 	bl	80039d0 <mlx90614_calcTemperature>
 8003cba:	eef0 7a40 	vmov.f32	s15, s0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <mlx90614_getObject1+0x46>
	}
	return false;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200003a2 	.word	0x200003a2
 8003cd8:	2000039c 	.word	0x2000039c

08003cdc <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 8003cf6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d113      	bne.n	8003d26 <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	3305      	adds	r3, #5
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b218      	sxth	r0, r3
 8003d06:	893b      	ldrh	r3, [r7, #8]
 8003d08:	3305      	adds	r3, #5
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b219      	sxth	r1, r3
 8003d0e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003d12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4623      	mov	r3, r4
 8003d22:	f000 ff75 	bl	8004c10 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8003d26:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003d2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d2e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003d32:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003d36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4623      	mov	r3, r4
 8003d42:	f000 ff65 	bl	8004c10 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8003d46:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003d4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d4e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003d52:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4623      	mov	r3, r4
 8003d64:	f000 fb7a 	bl	800445c <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8003d68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d6e:	4413      	add	r3, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d78:	4413      	add	r3, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f001 f9d4 	bl	8005128 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8003d80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f9e7 	bl	8005158 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8003d8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 f9f7 	bl	8005184 <LCD_SetTextColor>
	LCD_Printf(c);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f001 f8de 	bl	8004f58 <LCD_Printf>

}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}

08003da4 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	80fb      	strh	r3, [r7, #6]
 8003db6:	4603      	mov	r3, r0
 8003db8:	80bb      	strh	r3, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	807b      	strh	r3, [r7, #2]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	803b      	strh	r3, [r7, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e00f      	b.n	8003de8 <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	88bb      	ldrh	r3, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b219      	sxth	r1, r3
 8003dd4:	883b      	ldrh	r3, [r7, #0]
 8003dd6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003dda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dde:	f000 fa61 	bl	80042a4 <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	3301      	adds	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dbea      	blt.n	8003dc8 <LCD_DrawHBorder+0x24>
	}

}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd90      	pop	{r4, r7, pc}

08003dfc <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	t *= 20;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8003e10:	e003      	b.n	8003e1a <delay+0x1e>
		__asm("nop");
 8003e12:	bf00      	nop
	for (; t > 0; t--) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f8      	bne.n	8003e12 <delay+0x16>
	}
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af02      	add	r7, sp, #8

	gpio_clk_en(PORTB);
 8003e36:	4845      	ldr	r0, [pc, #276]	; (8003f4c <GPIO_Init+0x11c>)
 8003e38:	f7ff fad2 	bl	80033e0 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	2300      	movs	r3, #0
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	2201      	movs	r2, #1
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4841      	ldr	r0, [pc, #260]	; (8003f50 <GPIO_Init+0x120>)
 8003e4c:	f7ff fb0e 	bl	800346c <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003e50:	2300      	movs	r3, #0
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	2107      	movs	r1, #7
 8003e5e:	483c      	ldr	r0, [pc, #240]	; (8003f50 <GPIO_Init+0x120>)
 8003e60:	f7ff fb04 	bl	800346c <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003e64:	2300      	movs	r3, #0
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2201      	movs	r2, #1
 8003e70:	2100      	movs	r1, #0
 8003e72:	4838      	ldr	r0, [pc, #224]	; (8003f54 <GPIO_Init+0x124>)
 8003e74:	f7ff fafa 	bl	800346c <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2201      	movs	r2, #1
 8003e84:	2101      	movs	r1, #1
 8003e86:	4833      	ldr	r0, [pc, #204]	; (8003f54 <GPIO_Init+0x124>)
 8003e88:	f7ff faf0 	bl	800346c <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2201      	movs	r2, #1
 8003e98:	2104      	movs	r1, #4
 8003e9a:	482e      	ldr	r0, [pc, #184]	; (8003f54 <GPIO_Init+0x124>)
 8003e9c:	f7ff fae6 	bl	800346c <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2108      	movs	r1, #8
 8003eae:	4829      	ldr	r0, [pc, #164]	; (8003f54 <GPIO_Init+0x124>)
 8003eb0:	f7ff fadc 	bl	800346c <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2109      	movs	r1, #9
 8003ec2:	4824      	ldr	r0, [pc, #144]	; (8003f54 <GPIO_Init+0x124>)
 8003ec4:	f7ff fad2 	bl	800346c <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	210a      	movs	r1, #10
 8003ed6:	481f      	ldr	r0, [pc, #124]	; (8003f54 <GPIO_Init+0x124>)
 8003ed8:	f7ff fac8 	bl	800346c <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
//	PORTB->MODER &= ~((1 << 0) | (1 << 3) | (1 << 4) | (1 << 5) | (1 << 10));
	PORTB->MODER = 0;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <GPIO_Init+0x11c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
	gpio_config(PORTB, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	2201      	movs	r2, #1
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4816      	ldr	r0, [pc, #88]	; (8003f4c <GPIO_Init+0x11c>)
 8003ef2:	f7ff fabb 	bl	800346c <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	2201      	movs	r2, #1
 8003f02:	2103      	movs	r1, #3
 8003f04:	4811      	ldr	r0, [pc, #68]	; (8003f4c <GPIO_Init+0x11c>)
 8003f06:	f7ff fab1 	bl	800346c <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	2201      	movs	r2, #1
 8003f16:	2104      	movs	r1, #4
 8003f18:	480c      	ldr	r0, [pc, #48]	; (8003f4c <GPIO_Init+0x11c>)
 8003f1a:	f7ff faa7 	bl	800346c <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2105      	movs	r1, #5
 8003f2c:	4807      	ldr	r0, [pc, #28]	; (8003f4c <GPIO_Init+0x11c>)
 8003f2e:	f7ff fa9d 	bl	800346c <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003f32:	2300      	movs	r3, #0
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	210a      	movs	r1, #10
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <GPIO_Init+0x11c>)
 8003f42:	f7ff fa93 	bl	800346c <gpio_config>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40020400 	.word	0x40020400
 8003f50:	40020800 	.word	0x40020800
 8003f54:	40020000 	.word	0x40020000

08003f58 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <LCD_Begin+0xc0>)
 8003f60:	22f0      	movs	r2, #240	; 0xf0
 8003f62:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <LCD_Begin+0xc4>)
 8003f66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f6a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <LCD_Begin+0xc8>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8003f72:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <LCD_Begin+0xcc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <LCD_Begin+0xcc>)
 8003f7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <LCD_Begin+0xd0>)
 8003f80:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8003f82:	4b2a      	ldr	r3, [pc, #168]	; (800402c <LCD_Begin+0xd4>)
 8003f84:	2204      	movs	r2, #4
 8003f86:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8003f88:	4b29      	ldr	r3, [pc, #164]	; (8004030 <LCD_Begin+0xd8>)
 8003f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <LCD_Begin+0xd8>)
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <LCD_Begin+0xdc>)
 8003f96:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <LCD_Begin+0xe0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8003fa2:	f7ff ff45 	bl	8003e30 <GPIO_Init>

	LCD_Reset();
 8003fa6:	f001 f86b 	bl	8005080 <LCD_Reset>

	LCD_CS_LOW();
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	4823      	ldr	r0, [pc, #140]	; (800403c <LCD_Begin+0xe4>)
 8003fb0:	f7ff fb3c 	bl	800362c <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8003fb4:	e01d      	b.n	8003ff2 <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	71fa      	strb	r2, [r7, #7]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <LCD_Begin+0xe8>)
 8003fc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003fc4:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	71fa      	strb	r2, [r7, #7]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <LCD_Begin+0xe8>)
 8003fd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003fd4:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	2bff      	cmp	r3, #255	; 0xff
 8003fda:	d104      	bne.n	8003fe6 <LCD_Begin+0x8e>
			delay(d);
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff0c 	bl	8003dfc <delay>
 8003fe4:	e005      	b.n	8003ff2 <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	88bb      	ldrh	r3, [r7, #4]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f001 fa03 	bl	80053f8 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b83      	cmp	r3, #131	; 0x83
 8003ff6:	d9de      	bls.n	8003fb6 <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <LCD_Begin+0xc8>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f8d9 	bl	80051b4 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8004002:	f240 133f 	movw	r3, #319	; 0x13f
 8004006:	22ef      	movs	r2, #239	; 0xef
 8004008:	2100      	movs	r1, #0
 800400a:	2000      	movs	r0, #0
 800400c:	f001 f908 	bl	8005220 <LCD_SetAddrWindow>
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200003d0 	.word	0x200003d0
 800401c:	200003d2 	.word	0x200003d2
 8004020:	200003dd 	.word	0x200003dd
 8004024:	200003d4 	.word	0x200003d4
 8004028:	200003d6 	.word	0x200003d6
 800402c:	200003dc 	.word	0x200003dc
 8004030:	200003da 	.word	0x200003da
 8004034:	200003d8 	.word	0x200003d8
 8004038:	200003de 	.word	0x200003de
 800403c:	40020400 	.word	0x40020400
 8004040:	080086fc 	.word	0x080086fc

08004044 <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
 800404e:	460b      	mov	r3, r1
 8004050:	71bb      	strb	r3, [r7, #6]
 8004052:	4613      	mov	r3, r2
 8004054:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	b21b      	sxth	r3, r3
 800405c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004060:	f023 0307 	bic.w	r3, r3, #7
 8004064:	b21a      	sxth	r2, r3
 8004066:	79bb      	ldrb	r3, [r7, #6]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	b21b      	sxth	r3, r3
 800406c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004070:	b21b      	sxth	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b21a      	sxth	r2, r3
 8004076:	797b      	ldrb	r3, [r7, #5]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	b21b      	sxth	r3, r3
 800407e:	4313      	orrs	r3, r2
 8004080:	b21b      	sxth	r3, r3
 8004082:	b29b      	uxth	r3, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
 800409a:	460b      	mov	r3, r1
 800409c:	80bb      	strh	r3, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 80040a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db52      	blt.n	8004150 <LCD_DrawPixel+0xc0>
 80040aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db4e      	blt.n	8004150 <LCD_DrawPixel+0xc0>
 80040b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b6:	2bef      	cmp	r3, #239	; 0xef
 80040b8:	dc4a      	bgt.n	8004150 <LCD_DrawPixel+0xc0>
 80040ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80040c2:	da45      	bge.n	8004150 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	4823      	ldr	r0, [pc, #140]	; (8004158 <LCD_DrawPixel+0xc8>)
 80040ca:	f7ff faaf 	bl	800362c <gpio_write>

	int16_t t;
	switch (m_rotation) {
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <LCD_DrawPixel+0xcc>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d01c      	beq.n	8004110 <LCD_DrawPixel+0x80>
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	dc25      	bgt.n	8004126 <LCD_DrawPixel+0x96>
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d002      	beq.n	80040e4 <LCD_DrawPixel+0x54>
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d00a      	beq.n	80040f8 <LCD_DrawPixel+0x68>
 80040e2:	e020      	b.n	8004126 <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	80fb      	strh	r3, [r7, #6]
		y = t;
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	80bb      	strh	r3, [r7, #4]
		break;
 80040f6:	e016      	b.n	8004126 <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80040fe:	b29b      	uxth	r3, r3
 8004100:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8004102:	88bb      	ldrh	r3, [r7, #4]
 8004104:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004108:	3301      	adds	r3, #1
 800410a:	b29b      	uxth	r3, r3
 800410c:	80bb      	strh	r3, [r7, #4]
		break;
 800410e:	e00a      	b.n	8004126 <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	81fb      	strh	r3, [r7, #14]
		x = y;
 8004114:	88bb      	ldrh	r3, [r7, #4]
 8004116:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800411e:	3301      	adds	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	80bb      	strh	r3, [r7, #4]
		break;
 8004124:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	4619      	mov	r1, r3
 800412a:	2020      	movs	r0, #32
 800412c:	f001 f964 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8004130:	88bb      	ldrh	r3, [r7, #4]
 8004132:	4619      	mov	r1, r3
 8004134:	2021      	movs	r0, #33	; 0x21
 8004136:	f001 f95f 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	4619      	mov	r1, r3
 800413e:	2022      	movs	r0, #34	; 0x22
 8004140:	f001 f95a 	bl	80053f8 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8004144:	2201      	movs	r2, #1
 8004146:	2100      	movs	r1, #0
 8004148:	4803      	ldr	r0, [pc, #12]	; (8004158 <LCD_DrawPixel+0xc8>)
 800414a:	f7ff fa6f 	bl	800362c <gpio_write>
 800414e:	e000      	b.n	8004152 <LCD_DrawPixel+0xc2>
		return;
 8004150:	bf00      	nop
}
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40020400 	.word	0x40020400
 800415c:	200003dd 	.word	0x200003dd

08004160 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	461a      	mov	r2, r3
 800416e:	4623      	mov	r3, r4
 8004170:	80fb      	strh	r3, [r7, #6]
 8004172:	4603      	mov	r3, r0
 8004174:	80bb      	strh	r3, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	807b      	strh	r3, [r7, #2]
 800417a:	4613      	mov	r3, r2
 800417c:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800417e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004182:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800418c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004190:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004198:	1acb      	subs	r3, r1, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	425b      	neglt	r3, r3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bfcc      	ite	gt
 80041a4:	2301      	movgt	r3, #1
 80041a6:	2300      	movle	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	837b      	strh	r3, [r7, #26]
	if (steep) {
 80041ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <LCD_DrawLine+0x6c>
		swap(x1, y1);
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	833b      	strh	r3, [r7, #24]
 80041b8:	88bb      	ldrh	r3, [r7, #4]
 80041ba:	80fb      	strh	r3, [r7, #6]
 80041bc:	8b3b      	ldrh	r3, [r7, #24]
 80041be:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	82fb      	strh	r3, [r7, #22]
 80041c4:	883b      	ldrh	r3, [r7, #0]
 80041c6:	807b      	strh	r3, [r7, #2]
 80041c8:	8afb      	ldrh	r3, [r7, #22]
 80041ca:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 80041cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	dd0b      	ble.n	80041f0 <LCD_DrawLine+0x90>
		swap(x1, x2);
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	82bb      	strh	r3, [r7, #20]
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	80fb      	strh	r3, [r7, #6]
 80041e0:	8abb      	ldrh	r3, [r7, #20]
 80041e2:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 80041e4:	88bb      	ldrh	r3, [r7, #4]
 80041e6:	827b      	strh	r3, [r7, #18]
 80041e8:	883b      	ldrh	r3, [r7, #0]
 80041ea:	80bb      	strh	r3, [r7, #4]
 80041ec:	8a7b      	ldrh	r3, [r7, #18]
 80041ee:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 80041f0:	887a      	ldrh	r2, [r7, #2]
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 80041fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80041fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bfb8      	it	lt
 8004208:	425b      	neglt	r3, r3
 800420a:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 800420c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004210:	0fda      	lsrs	r2, r3, #31
 8004212:	4413      	add	r3, r2
 8004214:	105b      	asrs	r3, r3, #1
 8004216:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 8004218:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800421c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004220:	429a      	cmp	r2, r3
 8004222:	da02      	bge.n	800422a <LCD_DrawLine+0xca>
		ystep = 1;
 8004224:	2301      	movs	r3, #1
 8004226:	83bb      	strh	r3, [r7, #28]
 8004228:	e031      	b.n	800428e <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 800422a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422e:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 8004230:	e02d      	b.n	800428e <LCD_DrawLine+0x12e>
		if (steep) {
 8004232:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 800423a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800423c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004240:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff23 	bl	8004090 <LCD_DrawPixel>
 800424a:	e007      	b.n	800425c <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 800424c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800424e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff1a 	bl	8004090 <LCD_DrawPixel>
		}
		err -= dy;
 800425c:	8bfa      	ldrh	r2, [r7, #30]
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8004266:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800426a:	2b00      	cmp	r3, #0
 800426c:	da09      	bge.n	8004282 <LCD_DrawLine+0x122>
			y1 += ystep;
 800426e:	88ba      	ldrh	r2, [r7, #4]
 8004270:	8bbb      	ldrh	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8004278:	8bfa      	ldrh	r2, [r7, #30]
 800427a:	8a3b      	ldrh	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 8004282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004286:	b29b      	uxth	r3, r3
 8004288:	3301      	adds	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	80fb      	strh	r3, [r7, #6]
 800428e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004292:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004296:	429a      	cmp	r2, r3
 8004298:	ddcb      	ble.n	8004232 <LCD_DrawLine+0xd2>
		}
	}
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	3724      	adds	r7, #36	; 0x24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	4603      	mov	r3, r0
 80042b8:	80bb      	strh	r3, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	807b      	strh	r3, [r7, #2]
 80042be:	4613      	mov	r3, r2
 80042c0:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 80042c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dd5a      	ble.n	8004380 <LCD_DrawFastHLine+0xdc>
 80042ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db56      	blt.n	8004380 <LCD_DrawFastHLine+0xdc>
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <LCD_DrawFastHLine+0xe4>)
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	da4f      	bge.n	8004380 <LCD_DrawFastHLine+0xdc>
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <LCD_DrawFastHLine+0xe8>)
 80042e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	da48      	bge.n	8004380 <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	4413      	add	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 80042fa:	81fb      	strh	r3, [r7, #14]
 80042fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004300:	2b00      	cmp	r3, #0
 8004302:	db3d      	blt.n	8004380 <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 8004304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da06      	bge.n	800431a <LCD_DrawFastHLine+0x76>
		length += x;
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	4413      	add	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	807b      	strh	r3, [r7, #2]
		x = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <LCD_DrawFastHLine+0xe8>)
 800431c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004320:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004324:	429a      	cmp	r2, r3
 8004326:	db0d      	blt.n	8004344 <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <LCD_DrawFastHLine+0xe8>)
 800432a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 8004336:	89fa      	ldrh	r2, [r7, #14]
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	b29b      	uxth	r3, r3
 800433e:	3301      	adds	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8004344:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004348:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800434c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004350:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004354:	f000 ff64 	bl	8005220 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8004358:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800435c:	883b      	ldrh	r3, [r7, #0]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fcbb 	bl	8004cdc <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <LCD_DrawFastHLine+0xe8>)
 8004368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <LCD_DrawFastHLine+0xe4>)
 8004370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004374:	3b01      	subs	r3, #1
 8004376:	2100      	movs	r1, #0
 8004378:	2000      	movs	r0, #0
 800437a:	f000 ff51 	bl	8005220 <LCD_SetAddrWindow>
 800437e:	e000      	b.n	8004382 <LCD_DrawFastHLine+0xde>
		return;
 8004380:	bf00      	nop

}
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	200003d2 	.word	0x200003d2
 800438c:	200003d0 	.word	0x200003d0

08004390 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af02      	add	r7, sp, #8
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	80fb      	strh	r3, [r7, #6]
 80043a2:	4603      	mov	r3, r0
 80043a4:	80bb      	strh	r3, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 80043ae:	88ba      	ldrh	r2, [r7, #4]
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	4413      	add	r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b21c      	sxth	r4, r3
 80043bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80043c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80043c8:	883b      	ldrh	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4623      	mov	r3, r4
 80043ce:	f7ff fec7 	bl	8004160 <LCD_DrawLine>
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd90      	pop	{r4, r7, pc}

080043da <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80043da:	b590      	push	{r4, r7, lr}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4604      	mov	r4, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	80fb      	strh	r3, [r7, #6]
 80043ec:	4603      	mov	r3, r0
 80043ee:	80bb      	strh	r3, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
 80043f4:	4613      	mov	r3, r2
 80043f6:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 80043f8:	8b3b      	ldrh	r3, [r7, #24]
 80043fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004402:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004406:	f7ff ff4d 	bl	80042a4 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 800440a:	88ba      	ldrh	r2, [r7, #4]
 800440c:	883b      	ldrh	r3, [r7, #0]
 800440e:	4413      	add	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	b219      	sxth	r1, r3
 8004418:	8b3b      	ldrh	r3, [r7, #24]
 800441a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800441e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004422:	f7ff ff3f 	bl	80042a4 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 8004426:	8b3b      	ldrh	r3, [r7, #24]
 8004428:	f9b7 2000 	ldrsh.w	r2, [r7]
 800442c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004430:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004434:	f7ff ffac 	bl	8004390 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	4413      	add	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	b218      	sxth	r0, r3
 8004446:	8b3b      	ldrh	r3, [r7, #24]
 8004448:	f9b7 2000 	ldrsh.w	r2, [r7]
 800444c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004450:	f7ff ff9e 	bl	8004390 <LCD_DrawFastVLine>
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}

0800445c <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b085      	sub	sp, #20
 8004460:	af02      	add	r7, sp, #8
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4623      	mov	r3, r4
 800446c:	80fb      	strh	r3, [r7, #6]
 800446e:	4603      	mov	r3, r0
 8004470:	80bb      	strh	r3, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	807b      	strh	r3, [r7, #2]
 8004476:	4613      	mov	r3, r2
 8004478:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	8b3b      	ldrh	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	b218      	sxth	r0, r3
 8004484:	887a      	ldrh	r2, [r7, #2]
 8004486:	8b3b      	ldrh	r3, [r7, #24]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	b29b      	uxth	r3, r3
 8004490:	b21a      	sxth	r2, r3
 8004492:	8bbb      	ldrh	r3, [r7, #28]
 8004494:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004498:	f7ff ff04 	bl	80042a4 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	8b3b      	ldrh	r3, [r7, #24]
 80044a0:	4413      	add	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	b218      	sxth	r0, r3
 80044a6:	88ba      	ldrh	r2, [r7, #4]
 80044a8:	883b      	ldrh	r3, [r7, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	b219      	sxth	r1, r3
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	8b3b      	ldrh	r3, [r7, #24]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	b21a      	sxth	r2, r3
 80044c2:	8bbb      	ldrh	r3, [r7, #28]
 80044c4:	f7ff feee 	bl	80042a4 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 80044c8:	88ba      	ldrh	r2, [r7, #4]
 80044ca:	8b3b      	ldrh	r3, [r7, #24]
 80044cc:	4413      	add	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	b219      	sxth	r1, r3
 80044d2:	883a      	ldrh	r2, [r7, #0]
 80044d4:	8b3b      	ldrh	r3, [r7, #24]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	b29b      	uxth	r3, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b21a      	sxth	r2, r3
 80044e0:	8bbb      	ldrh	r3, [r7, #28]
 80044e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80044e6:	f7ff ff53 	bl	8004390 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	4413      	add	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b218      	sxth	r0, r3
 80044f8:	88ba      	ldrh	r2, [r7, #4]
 80044fa:	8b3b      	ldrh	r3, [r7, #24]
 80044fc:	4413      	add	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	b219      	sxth	r1, r3
 8004502:	883a      	ldrh	r2, [r7, #0]
 8004504:	8b3b      	ldrh	r3, [r7, #24]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	b29b      	uxth	r3, r3
 800450e:	b21a      	sxth	r2, r3
 8004510:	8bbb      	ldrh	r3, [r7, #28]
 8004512:	f7ff ff3d 	bl	8004390 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	8b3b      	ldrh	r3, [r7, #24]
 800451a:	4413      	add	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	b218      	sxth	r0, r3
 8004520:	88ba      	ldrh	r2, [r7, #4]
 8004522:	8b3b      	ldrh	r3, [r7, #24]
 8004524:	4413      	add	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	b219      	sxth	r1, r3
 800452a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800452e:	8bbb      	ldrh	r3, [r7, #28]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2301      	movs	r3, #1
 8004534:	f000 f84b 	bl	80045ce <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	4413      	add	r3, r2
 800453e:	b29a      	uxth	r2, r3
 8004540:	8b3b      	ldrh	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29b      	uxth	r3, r3
 800454a:	b218      	sxth	r0, r3
 800454c:	88ba      	ldrh	r2, [r7, #4]
 800454e:	8b3b      	ldrh	r3, [r7, #24]
 8004550:	4413      	add	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	b219      	sxth	r1, r3
 8004556:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800455a:	8bbb      	ldrh	r3, [r7, #28]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2302      	movs	r3, #2
 8004560:	f000 f835 	bl	80045ce <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	4413      	add	r3, r2
 800456a:	b29a      	uxth	r2, r3
 800456c:	8b3b      	ldrh	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	b218      	sxth	r0, r3
 8004578:	88ba      	ldrh	r2, [r7, #4]
 800457a:	883b      	ldrh	r3, [r7, #0]
 800457c:	4413      	add	r3, r2
 800457e:	b29a      	uxth	r2, r3
 8004580:	8b3b      	ldrh	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	b219      	sxth	r1, r3
 800458c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2304      	movs	r3, #4
 8004596:	f000 f81a 	bl	80045ce <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	8b3b      	ldrh	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b218      	sxth	r0, r3
 80045a4:	88ba      	ldrh	r2, [r7, #4]
 80045a6:	883b      	ldrh	r3, [r7, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	8b3b      	ldrh	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b219      	sxth	r1, r3
 80045b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045bc:	8bbb      	ldrh	r3, [r7, #28]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2308      	movs	r3, #8
 80045c2:	f000 f804 	bl	80045ce <LCD_DrawCircleHelper>
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd90      	pop	{r4, r7, pc}

080045ce <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 80045ce:	b590      	push	{r4, r7, lr}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4604      	mov	r4, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	461a      	mov	r2, r3
 80045dc:	4623      	mov	r3, r4
 80045de:	80fb      	strh	r3, [r7, #6]
 80045e0:	4603      	mov	r3, r0
 80045e2:	80bb      	strh	r3, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	f1c3 0301 	rsb	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	461a      	mov	r2, r3
 80045fe:	03d2      	lsls	r2, r2, #15
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800460c:	887b      	ldrh	r3, [r7, #2]
 800460e:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004610:	e0a5      	b.n	800475e <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 8004612:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db0e      	blt.n	8004638 <LCD_DrawCircleHelper+0x6a>
			y--;
 800461a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29b      	uxth	r3, r3
 8004624:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004626:	8a7b      	ldrh	r3, [r7, #18]
 8004628:	3302      	adds	r3, #2
 800462a:	b29b      	uxth	r3, r3
 800462c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800462e:	8afa      	ldrh	r2, [r7, #22]
 8004630:	8a7b      	ldrh	r3, [r7, #18]
 8004632:	4413      	add	r3, r2
 8004634:	b29b      	uxth	r3, r3
 8004636:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004638:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800463c:	b29b      	uxth	r3, r3
 800463e:	3301      	adds	r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004644:	8abb      	ldrh	r3, [r7, #20]
 8004646:	3302      	adds	r3, #2
 8004648:	b29b      	uxth	r3, r3
 800464a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800464c:	8afa      	ldrh	r2, [r7, #22]
 800464e:	8abb      	ldrh	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	b29b      	uxth	r3, r3
 8004654:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004656:	787b      	ldrb	r3, [r7, #1]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01b      	beq.n	8004698 <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	8a3b      	ldrh	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	b218      	sxth	r0, r3
 800466a:	88ba      	ldrh	r2, [r7, #4]
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4413      	add	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	b21b      	sxth	r3, r3
 8004674:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004676:	4619      	mov	r1, r3
 8004678:	f7ff fd0a 	bl	8004090 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	89fb      	ldrh	r3, [r7, #14]
 8004680:	4413      	add	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	b218      	sxth	r0, r3
 8004686:	88ba      	ldrh	r2, [r7, #4]
 8004688:	8a3b      	ldrh	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	b29b      	uxth	r3, r3
 800468e:	b21b      	sxth	r3, r3
 8004690:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004692:	4619      	mov	r1, r3
 8004694:	f7ff fcfc 	bl	8004090 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	8a3b      	ldrh	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	b218      	sxth	r0, r3
 80046ac:	88ba      	ldrh	r2, [r7, #4]
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	b21b      	sxth	r3, r3
 80046b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7ff fce9 	bl	8004090 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	4413      	add	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b218      	sxth	r0, r3
 80046c8:	88ba      	ldrh	r2, [r7, #4]
 80046ca:	8a3b      	ldrh	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046d4:	4619      	mov	r1, r3
 80046d6:	f7ff fcdb 	bl	8004090 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 80046da:	787b      	ldrb	r3, [r7, #1]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	b218      	sxth	r0, r3
 80046ee:	88ba      	ldrh	r2, [r7, #4]
 80046f0:	8a3b      	ldrh	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	b21b      	sxth	r3, r3
 80046f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046fa:	4619      	mov	r1, r3
 80046fc:	f7ff fcc8 	bl	8004090 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	8a3b      	ldrh	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	b29b      	uxth	r3, r3
 8004708:	b218      	sxth	r0, r3
 800470a:	88ba      	ldrh	r2, [r7, #4]
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	4413      	add	r3, r2
 8004710:	b29b      	uxth	r3, r3
 8004712:	b21b      	sxth	r3, r3
 8004714:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004716:	4619      	mov	r1, r3
 8004718:	f7ff fcba 	bl	8004090 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 800471c:	787b      	ldrb	r3, [r7, #1]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01b      	beq.n	800475e <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	b29b      	uxth	r3, r3
 800472e:	b218      	sxth	r0, r3
 8004730:	88ba      	ldrh	r2, [r7, #4]
 8004732:	8a3b      	ldrh	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	b21b      	sxth	r3, r3
 800473a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800473c:	4619      	mov	r1, r3
 800473e:	f7ff fca7 	bl	8004090 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	8a3b      	ldrh	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	b29b      	uxth	r3, r3
 800474a:	b218      	sxth	r0, r3
 800474c:	88ba      	ldrh	r2, [r7, #4]
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	b21b      	sxth	r3, r3
 8004756:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004758:	4619      	mov	r1, r3
 800475a:	f7ff fc99 	bl	8004090 <LCD_DrawPixel>
	while (x < y) {
 800475e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004766:	429a      	cmp	r2, r3
 8004768:	f6ff af53 	blt.w	8004612 <LCD_DrawCircleHelper+0x44>
		}
	}
}
 800476c:	bf00      	nop
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}
	...

08004778 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b087      	sub	sp, #28
 800477c:	af02      	add	r7, sp, #8
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4623      	mov	r3, r4
 8004788:	80fb      	strh	r3, [r7, #6]
 800478a:	4603      	mov	r3, r0
 800478c:	80bb      	strh	r3, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
 8004792:	4613      	mov	r3, r2
 8004794:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 8004796:	4b6e      	ldr	r3, [pc, #440]	; (8004950 <LCD_DrawChar+0x1d8>)
 8004798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800479c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	f280 80d0 	bge.w	8004946 <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 80047a6:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <LCD_DrawChar+0x1dc>)
 80047a8:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80047ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f280 80c8 	bge.w	8004946 <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 80047b6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80047ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f340 80bc 	ble.w	8004946 <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 80047ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80047d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f340 80b3 	ble.w	8004946 <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
 80047e4:	e0a9      	b.n	800493a <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d102      	bne.n	80047f4 <LCD_DrawChar+0x7c>
			line = 0x0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73bb      	strb	r3, [r7, #14]
 80047f2:	e09c      	b.n	800492e <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004800:	4413      	add	r3, r2
 8004802:	4a55      	ldr	r2, [pc, #340]	; (8004958 <LCD_DrawChar+0x1e0>)
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8004808:	2300      	movs	r3, #0
 800480a:	737b      	strb	r3, [r7, #13]
 800480c:	e08a      	b.n	8004924 <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 800480e:	7bbb      	ldrb	r3, [r7, #14]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03c      	beq.n	8004892 <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 8004818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	d112      	bne.n	8004846 <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 8004820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004824:	b29a      	uxth	r2, r3
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	4413      	add	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	b218      	sxth	r0, r3
 800482e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004832:	b29a      	uxth	r2, r3
 8004834:	88bb      	ldrh	r3, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	b21b      	sxth	r3, r3
 800483c:	883a      	ldrh	r2, [r7, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	f7ff fc26 	bl	8004090 <LCD_DrawPixel>
 8004844:	e065      	b.n	8004912 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 8004846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484a:	b29a      	uxth	r2, r3
 800484c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004850:	b29b      	uxth	r3, r3
 8004852:	fb12 f303 	smulbb	r3, r2, r3
 8004856:	b29a      	uxth	r2, r3
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	4413      	add	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	b218      	sxth	r0, r3
 8004860:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004864:	b29a      	uxth	r2, r3
 8004866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800486a:	b29b      	uxth	r3, r3
 800486c:	fb12 f303 	smulbb	r3, r2, r3
 8004870:	b29a      	uxth	r2, r3
 8004872:	88bb      	ldrh	r3, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	b219      	sxth	r1, r3
 800487a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800487e:	b21a      	sxth	r2, r3
 8004880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004884:	b21c      	sxth	r4, r3
 8004886:	883b      	ldrh	r3, [r7, #0]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4623      	mov	r3, r4
 800488c:	f000 f918 	bl	8004ac0 <LCD_FillRect>
 8004890:	e03f      	b.n	8004912 <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8004892:	8c3a      	ldrh	r2, [r7, #32]
 8004894:	883b      	ldrh	r3, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d03b      	beq.n	8004912 <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 800489a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d112      	bne.n	80048c8 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 80048a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4413      	add	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	b218      	sxth	r0, r3
 80048b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	b21b      	sxth	r3, r3
 80048be:	8c3a      	ldrh	r2, [r7, #32]
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7ff fbe5 	bl	8004090 <LCD_DrawPixel>
 80048c6:	e024      	b.n	8004912 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 80048c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	fb12 f303 	smulbb	r3, r2, r3
 80048d8:	b29a      	uxth	r2, r3
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	4413      	add	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	b218      	sxth	r0, r3
 80048e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	fb12 f303 	smulbb	r3, r2, r3
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	88bb      	ldrh	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b219      	sxth	r1, r3
 80048fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004900:	b21a      	sxth	r2, r3
 8004902:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004906:	b21c      	sxth	r4, r3
 8004908:	8c3b      	ldrh	r3, [r7, #32]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4623      	mov	r3, r4
 800490e:	f000 f8d7 	bl	8004ac0 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8004918:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3301      	adds	r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	737b      	strb	r3, [r7, #13]
 8004924:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004928:	2b07      	cmp	r3, #7
 800492a:	f77f af70 	ble.w	800480e <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 800492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	73fb      	strb	r3, [r7, #15]
 800493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493e:	2b05      	cmp	r3, #5
 8004940:	f77f af51 	ble.w	80047e6 <LCD_DrawChar+0x6e>
 8004944:	e000      	b.n	8004948 <LCD_DrawChar+0x1d0>
		return;
 8004946:	bf00      	nop
			}
		}
	}
}
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bd90      	pop	{r4, r7, pc}
 800494e:	bf00      	nop
 8004950:	200003d0 	.word	0x200003d0
 8004954:	200003d2 	.word	0x200003d2
 8004958:	0800847c 	.word	0x0800847c

0800495c <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4623      	mov	r3, r4
 800496c:	80fb      	strh	r3, [r7, #6]
 800496e:	4603      	mov	r3, r0
 8004970:	80bb      	strh	r3, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	807b      	strh	r3, [r7, #2]
 8004976:	4613      	mov	r3, r2
 8004978:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	f1c3 0301 	rsb	r3, r3, #1
 8004980:	b29b      	uxth	r3, r3
 8004982:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004984:	2301      	movs	r3, #1
 8004986:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	461a      	mov	r2, r3
 800498c:	03d2      	lsls	r2, r2, #15
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	b29b      	uxth	r3, r3
 8004994:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800499e:	e083      	b.n	8004aa8 <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 80049a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db0e      	blt.n	80049c6 <LCD_FillCircleHelper+0x6a>
			y--;
 80049a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80049b4:	8a7b      	ldrh	r3, [r7, #18]
 80049b6:	3302      	adds	r3, #2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80049bc:	8afa      	ldrh	r2, [r7, #22]
 80049be:	8a7b      	ldrh	r3, [r7, #18]
 80049c0:	4413      	add	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80049c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80049d2:	8abb      	ldrh	r3, [r7, #20]
 80049d4:	3302      	adds	r3, #2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80049da:	8afa      	ldrh	r2, [r7, #22]
 80049dc:	8abb      	ldrh	r3, [r7, #20]
 80049de:	4413      	add	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02b      	beq.n	8004a46 <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80049ee:	88fa      	ldrh	r2, [r7, #6]
 80049f0:	8a3b      	ldrh	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	b218      	sxth	r0, r3
 80049f8:	88ba      	ldrh	r2, [r7, #4]
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	b219      	sxth	r1, r3
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b21a      	sxth	r2, r3
 8004a14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a16:	f7ff fcbb 	bl	8004390 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	4413      	add	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b218      	sxth	r0, r3
 8004a24:	88ba      	ldrh	r2, [r7, #4]
 8004a26:	8a3b      	ldrh	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b219      	sxth	r1, r3
 8004a2e:	8a3b      	ldrh	r3, [r7, #16]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a36:	4413      	add	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a42:	f7ff fca5 	bl	8004390 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8004a46:	787b      	ldrb	r3, [r7, #1]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02b      	beq.n	8004aa8 <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	8a3b      	ldrh	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	b218      	sxth	r0, r3
 8004a5a:	88ba      	ldrh	r2, [r7, #4]
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b219      	sxth	r1, r3
 8004a64:	89fb      	ldrh	r3, [r7, #14]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	b21a      	sxth	r2, r3
 8004a76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a78:	f7ff fc8a 	bl	8004390 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	b218      	sxth	r0, r3
 8004a86:	88ba      	ldrh	r2, [r7, #4]
 8004a88:	8a3b      	ldrh	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	b219      	sxth	r1, r3
 8004a90:	8a3b      	ldrh	r3, [r7, #16]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a98:	4413      	add	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	b21a      	sxth	r2, r3
 8004aa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004aa4:	f7ff fc74 	bl	8004390 <LCD_DrawFastVLine>
	while (x < y) {
 8004aa8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	f6ff af75 	blt.w	80049a0 <LCD_FillCircleHelper+0x44>
		}
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}

08004ac0 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	80fb      	strh	r3, [r7, #6]
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	80bb      	strh	r3, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	807b      	strh	r3, [r7, #2]
 8004ada:	4613      	mov	r3, r2
 8004adc:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8004ade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f340 808b 	ble.w	8004bfe <LCD_FillRect+0x13e>
 8004ae8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f340 8086 	ble.w	8004bfe <LCD_FillRect+0x13e>
 8004af2:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <LCD_FillRect+0x148>)
 8004af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	da7e      	bge.n	8004bfe <LCD_FillRect+0x13e>
 8004b00:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <LCD_FillRect+0x14c>)
 8004b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	da77      	bge.n	8004bfe <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	4413      	add	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	81fb      	strh	r3, [r7, #14]
 8004b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db6c      	blt.n	8004bfe <LCD_FillRect+0x13e>
 8004b24:	88ba      	ldrh	r2, [r7, #4]
 8004b26:	883b      	ldrh	r3, [r7, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	81bb      	strh	r3, [r7, #12]
 8004b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	db61      	blt.n	8004bfe <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8004b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da06      	bge.n	8004b50 <LCD_FillRect+0x90>
		w += x;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	4413      	add	r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	807b      	strh	r3, [r7, #2]
		x = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8004b50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da06      	bge.n	8004b66 <LCD_FillRect+0xa6>
		h += y1;
 8004b58:	883a      	ldrh	r2, [r7, #0]
 8004b5a:	88bb      	ldrh	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <LCD_FillRect+0x148>)
 8004b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	db0d      	blt.n	8004b90 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8004b74:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <LCD_FillRect+0x148>)
 8004b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8004b82:	89fa      	ldrh	r2, [r7, #14]
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <LCD_FillRect+0x14c>)
 8004b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	db0d      	blt.n	8004bba <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <LCD_FillRect+0x14c>)
 8004ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8004bac:	89ba      	ldrh	r2, [r7, #12]
 8004bae:	88bb      	ldrh	r3, [r7, #4]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8004bba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004bbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004bc2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004bc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bca:	f000 fb29 	bl	8005220 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8004bce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bd2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004bd6:	fb03 f202 	mul.w	r2, r3, r2
 8004bda:	8c3b      	ldrh	r3, [r7, #32]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f87c 	bl	8004cdc <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <LCD_FillRect+0x148>)
 8004be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <LCD_FillRect+0x14c>)
 8004bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f000 fb12 	bl	8005220 <LCD_SetAddrWindow>
 8004bfc:	e000      	b.n	8004c00 <LCD_FillRect+0x140>
		return;
 8004bfe:	bf00      	nop
}
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200003d0 	.word	0x200003d0
 8004c0c:	200003d2 	.word	0x200003d2

08004c10 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4623      	mov	r3, r4
 8004c20:	80fb      	strh	r3, [r7, #6]
 8004c22:	4603      	mov	r3, r0
 8004c24:	80bb      	strh	r3, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	807b      	strh	r3, [r7, #2]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	8b3b      	ldrh	r3, [r7, #24]
 8004c32:	4413      	add	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	b218      	sxth	r0, r3
 8004c38:	887a      	ldrh	r2, [r7, #2]
 8004c3a:	8b3b      	ldrh	r3, [r7, #24]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	b21a      	sxth	r2, r3
 8004c46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004c4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c4e:	8bbb      	ldrh	r3, [r7, #28]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4623      	mov	r3, r4
 8004c54:	f7ff ff34 	bl	8004ac0 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	8b3b      	ldrh	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b218      	sxth	r0, r3
 8004c6c:	88ba      	ldrh	r2, [r7, #4]
 8004c6e:	8b3b      	ldrh	r3, [r7, #24]
 8004c70:	4413      	add	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	b219      	sxth	r1, r3
 8004c76:	883a      	ldrh	r2, [r7, #0]
 8004c78:	8b3b      	ldrh	r3, [r7, #24]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004c8c:	8bba      	ldrh	r2, [r7, #28]
 8004c8e:	9201      	str	r2, [sp, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2301      	movs	r3, #1
 8004c94:	4622      	mov	r2, r4
 8004c96:	f7ff fe61 	bl	800495c <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	8b3b      	ldrh	r3, [r7, #24]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	b218      	sxth	r0, r3
 8004ca4:	88ba      	ldrh	r2, [r7, #4]
 8004ca6:	8b3b      	ldrh	r3, [r7, #24]
 8004ca8:	4413      	add	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	b219      	sxth	r1, r3
 8004cae:	883a      	ldrh	r2, [r7, #0]
 8004cb0:	8b3b      	ldrh	r3, [r7, #24]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004cc4:	8bba      	ldrh	r2, [r7, #28]
 8004cc6:	9201      	str	r2, [sp, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2302      	movs	r3, #2
 8004ccc:	4622      	mov	r2, r4
 8004cce:	f7ff fe45 	bl	800495c <LCD_FillCircleHelper>
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd90      	pop	{r4, r7, pc}
	...

08004cdc <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	6039      	str	r1, [r7, #0]
 8004ce6:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	733b      	strb	r3, [r7, #12]
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4895      	ldr	r0, [pc, #596]	; (8004f50 <LCD_Flood+0x274>)
 8004cfa:	f7fe fc97 	bl	800362c <gpio_write>
	LCD_CD_LOW();
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2104      	movs	r1, #4
 8004d02:	4894      	ldr	r0, [pc, #592]	; (8004f54 <LCD_Flood+0x278>)
 8004d04:	f7fe fc92 	bl	800362c <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f000 fb19 	bl	8005340 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8004d0e:	2022      	movs	r0, #34	; 0x22
 8004d10:	f000 fb16 	bl	8005340 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8004d14:	2201      	movs	r2, #1
 8004d16:	2104      	movs	r1, #4
 8004d18:	488e      	ldr	r0, [pc, #568]	; (8004f54 <LCD_Flood+0x278>)
 8004d1a:	f7fe fc87 	bl	800362c <gpio_write>
	LCD_Write8(hi);
 8004d1e:	7b3b      	ldrb	r3, [r7, #12]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb0d 	bl	8005340 <LCD_Write8>
	LCD_Write8(lo);
 8004d26:	7afb      	ldrb	r3, [r7, #11]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fb09 	bl	8005340 <LCD_Write8>
	len--;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8004d3a:	7b3a      	ldrb	r2, [r7, #12]
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f040 80e4 	bne.w	8004f0c <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8004d44:	e088      	b.n	8004e58 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8004d46:	2310      	movs	r3, #16
 8004d48:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4881      	ldr	r0, [pc, #516]	; (8004f54 <LCD_Flood+0x278>)
 8004d50:	f7fe fc6c 	bl	800362c <gpio_write>
 8004d54:	2001      	movs	r0, #1
 8004d56:	f7ff f851 	bl	8003dfc <delay>
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	487d      	ldr	r0, [pc, #500]	; (8004f54 <LCD_Flood+0x278>)
 8004d60:	f7fe fc64 	bl	800362c <gpio_write>
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7ff f849 	bl	8003dfc <delay>
				LCD_WR_STROBE();
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4879      	ldr	r0, [pc, #484]	; (8004f54 <LCD_Flood+0x278>)
 8004d70:	f7fe fc5c 	bl	800362c <gpio_write>
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7ff f841 	bl	8003dfc <delay>
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4875      	ldr	r0, [pc, #468]	; (8004f54 <LCD_Flood+0x278>)
 8004d80:	f7fe fc54 	bl	800362c <gpio_write>
 8004d84:	2001      	movs	r0, #1
 8004d86:	f7ff f839 	bl	8003dfc <delay>
				LCD_WR_STROBE();
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4871      	ldr	r0, [pc, #452]	; (8004f54 <LCD_Flood+0x278>)
 8004d90:	f7fe fc4c 	bl	800362c <gpio_write>
 8004d94:	2001      	movs	r0, #1
 8004d96:	f7ff f831 	bl	8003dfc <delay>
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	486d      	ldr	r0, [pc, #436]	; (8004f54 <LCD_Flood+0x278>)
 8004da0:	f7fe fc44 	bl	800362c <gpio_write>
 8004da4:	2001      	movs	r0, #1
 8004da6:	f7ff f829 	bl	8003dfc <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8004daa:	2200      	movs	r2, #0
 8004dac:	2101      	movs	r1, #1
 8004dae:	4869      	ldr	r0, [pc, #420]	; (8004f54 <LCD_Flood+0x278>)
 8004db0:	f7fe fc3c 	bl	800362c <gpio_write>
 8004db4:	2001      	movs	r0, #1
 8004db6:	f7ff f821 	bl	8003dfc <delay>
 8004dba:	2201      	movs	r2, #1
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4865      	ldr	r0, [pc, #404]	; (8004f54 <LCD_Flood+0x278>)
 8004dc0:	f7fe fc34 	bl	800362c <gpio_write>
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff f819 	bl	8003dfc <delay>
				LCD_WR_STROBE();
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4861      	ldr	r0, [pc, #388]	; (8004f54 <LCD_Flood+0x278>)
 8004dd0:	f7fe fc2c 	bl	800362c <gpio_write>
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7ff f811 	bl	8003dfc <delay>
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2101      	movs	r1, #1
 8004dde:	485d      	ldr	r0, [pc, #372]	; (8004f54 <LCD_Flood+0x278>)
 8004de0:	f7fe fc24 	bl	800362c <gpio_write>
 8004de4:	2001      	movs	r0, #1
 8004de6:	f7ff f809 	bl	8003dfc <delay>
				LCD_WR_STROBE();
 8004dea:	2200      	movs	r2, #0
 8004dec:	2101      	movs	r1, #1
 8004dee:	4859      	ldr	r0, [pc, #356]	; (8004f54 <LCD_Flood+0x278>)
 8004df0:	f7fe fc1c 	bl	800362c <gpio_write>
 8004df4:	2001      	movs	r0, #1
 8004df6:	f7ff f801 	bl	8003dfc <delay>
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4855      	ldr	r0, [pc, #340]	; (8004f54 <LCD_Flood+0x278>)
 8004e00:	f7fe fc14 	bl	800362c <gpio_write>
 8004e04:	2001      	movs	r0, #1
 8004e06:	f7fe fff9 	bl	8003dfc <delay>
				LCD_WR_STROBE();
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4851      	ldr	r0, [pc, #324]	; (8004f54 <LCD_Flood+0x278>)
 8004e10:	f7fe fc0c 	bl	800362c <gpio_write>
 8004e14:	2001      	movs	r0, #1
 8004e16:	f7fe fff1 	bl	8003dfc <delay>
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	484d      	ldr	r0, [pc, #308]	; (8004f54 <LCD_Flood+0x278>)
 8004e20:	f7fe fc04 	bl	800362c <gpio_write>
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7fe ffe9 	bl	8003dfc <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4849      	ldr	r0, [pc, #292]	; (8004f54 <LCD_Flood+0x278>)
 8004e30:	f7fe fbfc 	bl	800362c <gpio_write>
 8004e34:	2001      	movs	r0, #1
 8004e36:	f7fe ffe1 	bl	8003dfc <delay>
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4845      	ldr	r0, [pc, #276]	; (8004f54 <LCD_Flood+0x278>)
 8004e40:	f7fe fbf4 	bl	800362c <gpio_write>
 8004e44:	2001      	movs	r0, #1
 8004e46:	f7fe ffd9 	bl	8003dfc <delay>
			} while (--i);
 8004e4a:	7b7b      	ldrb	r3, [r7, #13]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	737b      	strb	r3, [r7, #13]
 8004e50:	7b7b      	ldrb	r3, [r7, #13]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f47f af79 	bne.w	8004d4a <LCD_Flood+0x6e>
		while (blocks--) {
 8004e58:	89fb      	ldrh	r3, [r7, #14]
 8004e5a:	1e5a      	subs	r2, r3, #1
 8004e5c:	81fa      	strh	r2, [r7, #14]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f47f af71 	bne.w	8004d46 <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6c:	737b      	strb	r3, [r7, #13]
 8004e6e:	e01f      	b.n	8004eb0 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8004e70:	2200      	movs	r2, #0
 8004e72:	2101      	movs	r1, #1
 8004e74:	4837      	ldr	r0, [pc, #220]	; (8004f54 <LCD_Flood+0x278>)
 8004e76:	f7fe fbd9 	bl	800362c <gpio_write>
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f7fe ffbe 	bl	8003dfc <delay>
 8004e80:	2201      	movs	r2, #1
 8004e82:	2101      	movs	r1, #1
 8004e84:	4833      	ldr	r0, [pc, #204]	; (8004f54 <LCD_Flood+0x278>)
 8004e86:	f7fe fbd1 	bl	800362c <gpio_write>
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	f7fe ffb6 	bl	8003dfc <delay>
			LCD_WR_STROBE();
 8004e90:	2200      	movs	r2, #0
 8004e92:	2101      	movs	r1, #1
 8004e94:	482f      	ldr	r0, [pc, #188]	; (8004f54 <LCD_Flood+0x278>)
 8004e96:	f7fe fbc9 	bl	800362c <gpio_write>
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fe ffae 	bl	8003dfc <delay>
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	482b      	ldr	r0, [pc, #172]	; (8004f54 <LCD_Flood+0x278>)
 8004ea6:	f7fe fbc1 	bl	800362c <gpio_write>
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f7fe ffa6 	bl	8003dfc <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8004eb0:	7b7b      	ldrb	r3, [r7, #13]
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	737a      	strb	r2, [r7, #13]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1da      	bne.n	8004e70 <LCD_Flood+0x194>
 8004eba:	e03f      	b.n	8004f3c <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8004ec0:	7b3b      	ldrb	r3, [r7, #12]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa3c 	bl	8005340 <LCD_Write8>
				LCD_Write8(lo);
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa38 	bl	8005340 <LCD_Write8>
				LCD_Write8(hi);
 8004ed0:	7b3b      	ldrb	r3, [r7, #12]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fa34 	bl	8005340 <LCD_Write8>
				LCD_Write8(lo);
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa30 	bl	8005340 <LCD_Write8>
				LCD_Write8(hi);
 8004ee0:	7b3b      	ldrb	r3, [r7, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fa2c 	bl	8005340 <LCD_Write8>
				LCD_Write8(lo);
 8004ee8:	7afb      	ldrb	r3, [r7, #11]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fa28 	bl	8005340 <LCD_Write8>
				LCD_Write8(hi);
 8004ef0:	7b3b      	ldrb	r3, [r7, #12]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa24 	bl	8005340 <LCD_Write8>
				LCD_Write8(lo);
 8004ef8:	7afb      	ldrb	r3, [r7, #11]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fa20 	bl	8005340 <LCD_Write8>
			} while (--i);
 8004f00:	7b7b      	ldrb	r3, [r7, #13]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	737b      	strb	r3, [r7, #13]
 8004f06:	7b7b      	ldrb	r3, [r7, #13]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1d9      	bne.n	8004ec0 <LCD_Flood+0x1e4>
		while (blocks--) {
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	81fa      	strh	r2, [r7, #14]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1d2      	bne.n	8004ebc <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1e:	737b      	strb	r3, [r7, #13]
 8004f20:	e007      	b.n	8004f32 <LCD_Flood+0x256>
			LCD_Write8(hi);
 8004f22:	7b3b      	ldrb	r3, [r7, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa0b 	bl	8005340 <LCD_Write8>
			LCD_Write8(lo);
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fa07 	bl	8005340 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8004f32:	7b7b      	ldrb	r3, [r7, #13]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	737a      	strb	r2, [r7, #13]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f2      	bne.n	8004f22 <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4803      	ldr	r0, [pc, #12]	; (8004f50 <LCD_Flood+0x274>)
 8004f42:	f7fe fb73 	bl	800362c <gpio_write>
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40020400 	.word	0x40020400
 8004f54:	40020000 	.word	0x40020000

08004f58 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8004f58:	b40f      	push	{r0, r1, r2, r3}
 8004f5a:	b5b0      	push	{r4, r5, r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	69b9      	ldr	r1, [r7, #24]
 8004f6a:	483d      	ldr	r0, [pc, #244]	; (8005060 <LCD_Printf+0x108>)
 8004f6c:	f000 ffc4 	bl	8005ef8 <vsiprintf>
	va_end(lst);

	p = buf;
 8004f70:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <LCD_Printf+0x108>)
 8004f72:	607b      	str	r3, [r7, #4]
	while (*p) {
 8004f74:	e068      	b.n	8005048 <LCD_Printf+0xf0>
		if (*p == '\n') {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b0a      	cmp	r3, #10
 8004f7c:	d111      	bne.n	8004fa2 <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <LCD_Printf+0x10c>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	4b37      	ldr	r3, [pc, #220]	; (8005068 <LCD_Printf+0x110>)
 8004f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	b21a      	sxth	r2, r3
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <LCD_Printf+0x110>)
 8004f98:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8004f9a:	4b34      	ldr	r3, [pc, #208]	; (800506c <LCD_Printf+0x114>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e04f      	b.n	8005042 <LCD_Printf+0xea>
		} else if (*p == '\r') {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b0d      	cmp	r3, #13
 8004fa8:	d04b      	beq.n	8005042 <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <LCD_Printf+0x114>)
 8004fac:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <LCD_Printf+0x110>)
 8004fb2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	781c      	ldrb	r4, [r3, #0]
 8004fba:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <LCD_Printf+0x118>)
 8004fbc:	881d      	ldrh	r5, [r3, #0]
 8004fbe:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <LCD_Printf+0x11c>)
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <LCD_Printf+0x10c>)
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462b      	mov	r3, r5
 8004fcc:	4622      	mov	r2, r4
 8004fce:	f7ff fbd3 	bl	8004778 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <LCD_Printf+0x10c>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <LCD_Printf+0x114>)
 8004fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b21a      	sxth	r2, r3
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	; (800506c <LCD_Printf+0x114>)
 8004ff2:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <LCD_Printf+0x120>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d022      	beq.n	8005042 <LCD_Printf+0xea>
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <LCD_Printf+0x114>)
 8004ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005002:	4619      	mov	r1, r3
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <LCD_Printf+0x124>)
 8005006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500a:	4618      	mov	r0, r3
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <LCD_Printf+0x10c>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4613      	mov	r3, r2
 8005014:	0092      	lsls	r2, r2, #2
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4403      	add	r3, r0
 800501c:	4299      	cmp	r1, r3
 800501e:	dd10      	ble.n	8005042 <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <LCD_Printf+0x10c>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	b29a      	uxth	r2, r3
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <LCD_Printf+0x110>)
 800502c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4413      	add	r3, r2
 8005034:	b29b      	uxth	r3, r3
 8005036:	b21a      	sxth	r2, r3
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <LCD_Printf+0x110>)
 800503a:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <LCD_Printf+0x114>)
 800503e:	2200      	movs	r2, #0
 8005040:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3301      	adds	r3, #1
 8005046:	607b      	str	r3, [r7, #4]
	while (*p) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d192      	bne.n	8004f76 <LCD_Printf+0x1e>
	}
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800505c:	b004      	add	sp, #16
 800505e:	4770      	bx	lr
 8005060:	200003e0 	.word	0x200003e0
 8005064:	200003dc 	.word	0x200003dc
 8005068:	200003d6 	.word	0x200003d6
 800506c:	200003d4 	.word	0x200003d4
 8005070:	200003d8 	.word	0x200003d8
 8005074:	200003da 	.word	0x200003da
 8005078:	200003de 	.word	0x200003de
 800507c:	200003d0 	.word	0x200003d0

08005080 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8005086:	2201      	movs	r2, #1
 8005088:	2100      	movs	r1, #0
 800508a:	4824      	ldr	r0, [pc, #144]	; (800511c <LCD_Reset+0x9c>)
 800508c:	f7fe face 	bl	800362c <gpio_write>
	LCD_WR_HIGH();
 8005090:	2201      	movs	r2, #1
 8005092:	2101      	movs	r1, #1
 8005094:	4822      	ldr	r0, [pc, #136]	; (8005120 <LCD_Reset+0xa0>)
 8005096:	f7fe fac9 	bl	800362c <gpio_write>
	LCD_RD_HIGH();
 800509a:	2201      	movs	r2, #1
 800509c:	2100      	movs	r1, #0
 800509e:	4820      	ldr	r0, [pc, #128]	; (8005120 <LCD_Reset+0xa0>)
 80050a0:	f7fe fac4 	bl	800362c <gpio_write>

	LCD_RST_LOW();
 80050a4:	2200      	movs	r2, #0
 80050a6:	2101      	movs	r1, #1
 80050a8:	481e      	ldr	r0, [pc, #120]	; (8005124 <LCD_Reset+0xa4>)
 80050aa:	f7fe fabf 	bl	800362c <gpio_write>
	delay(100);
 80050ae:	2064      	movs	r0, #100	; 0x64
 80050b0:	f7fe fea4 	bl	8003dfc <delay>
	LCD_RST_HIGH();
 80050b4:	2201      	movs	r2, #1
 80050b6:	2101      	movs	r1, #1
 80050b8:	481a      	ldr	r0, [pc, #104]	; (8005124 <LCD_Reset+0xa4>)
 80050ba:	f7fe fab7 	bl	800362c <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	4816      	ldr	r0, [pc, #88]	; (800511c <LCD_Reset+0x9c>)
 80050c4:	f7fe fab2 	bl	800362c <gpio_write>

	LCD_CD_LOW();
 80050c8:	2200      	movs	r2, #0
 80050ca:	2104      	movs	r1, #4
 80050cc:	4814      	ldr	r0, [pc, #80]	; (8005120 <LCD_Reset+0xa0>)
 80050ce:	f7fe faad 	bl	800362c <gpio_write>
	LCD_Write8(0x00);
 80050d2:	2000      	movs	r0, #0
 80050d4:	f000 f934 	bl	8005340 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	71fb      	strb	r3, [r7, #7]
 80050dc:	e012      	b.n	8005104 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 80050de:	2200      	movs	r2, #0
 80050e0:	2101      	movs	r1, #1
 80050e2:	480f      	ldr	r0, [pc, #60]	; (8005120 <LCD_Reset+0xa0>)
 80050e4:	f7fe faa2 	bl	800362c <gpio_write>
 80050e8:	2001      	movs	r0, #1
 80050ea:	f7fe fe87 	bl	8003dfc <delay>
 80050ee:	2201      	movs	r2, #1
 80050f0:	2101      	movs	r1, #1
 80050f2:	480b      	ldr	r0, [pc, #44]	; (8005120 <LCD_Reset+0xa0>)
 80050f4:	f7fe fa9a 	bl	800362c <gpio_write>
 80050f8:	2001      	movs	r0, #1
 80050fa:	f7fe fe7f 	bl	8003dfc <delay>
	for (uint8_t i = 0; i < 3; i++)
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	3301      	adds	r3, #1
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d9e9      	bls.n	80050de <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 800510a:	2201      	movs	r2, #1
 800510c:	2100      	movs	r1, #0
 800510e:	4803      	ldr	r0, [pc, #12]	; (800511c <LCD_Reset+0x9c>)
 8005110:	f7fe fa8c 	bl	800362c <gpio_write>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40020400 	.word	0x40020400
 8005120:	40020000 	.word	0x40020000
 8005124:	40020800 	.word	0x40020800

08005128 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	b21a      	sxth	r2, r3
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <LCD_SetCursor+0x28>)
 8005138:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	b21a      	sxth	r2, r3
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <LCD_SetCursor+0x2c>)
 8005140:	801a      	strh	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	200003d4 	.word	0x200003d4
 8005154:	200003d6 	.word	0x200003d6

08005158 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <LCD_SetTextSize+0x14>
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	e000      	b.n	800516e <LCD_SetTextSize+0x16>
 800516c:	2301      	movs	r3, #1
 800516e:	4a04      	ldr	r2, [pc, #16]	; (8005180 <LCD_SetTextSize+0x28>)
 8005170:	7013      	strb	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	200003dc 	.word	0x200003dc

08005184 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	460a      	mov	r2, r1
 800518e:	80fb      	strh	r3, [r7, #6]
 8005190:	4613      	mov	r3, r2
 8005192:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8005194:	4a05      	ldr	r2, [pc, #20]	; (80051ac <LCD_SetTextColor+0x28>)
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800519a:	4a05      	ldr	r2, [pc, #20]	; (80051b0 <LCD_SetTextColor+0x2c>)
 800519c:	88bb      	ldrh	r3, [r7, #4]
 800519e:	8013      	strh	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	200003d8 	.word	0x200003d8
 80051b0:	200003da 	.word	0x200003da

080051b4 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <LCD_SetRotation+0x60>)
 80051c8:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <LCD_SetRotation+0x60>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d81a      	bhi.n	8005208 <LCD_SetRotation+0x54>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <LCD_SetRotation+0x24>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	080051e9 	.word	0x080051e9
 80051e4:	080051f9 	.word	0x080051f9
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <LCD_SetRotation+0x64>)
 80051ea:	22f0      	movs	r2, #240	; 0xf0
 80051ec:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <LCD_SetRotation+0x68>)
 80051f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051f4:	801a      	strh	r2, [r3, #0]
		break;
 80051f6:	e007      	b.n	8005208 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <LCD_SetRotation+0x64>)
 80051fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80051fe:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <LCD_SetRotation+0x68>)
 8005202:	22f0      	movs	r2, #240	; 0xf0
 8005204:	801a      	strh	r2, [r3, #0]
		break;
 8005206:	bf00      	nop
	}
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	200003dd 	.word	0x200003dd
 8005218:	200003d0 	.word	0x200003d0
 800521c:	200003d2 	.word	0x200003d2

08005220 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	4841      	ldr	r0, [pc, #260]	; (8005338 <LCD_SetAddrWindow+0x118>)
 8005234:	f7fe f9fa 	bl	800362c <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8005238:	4b40      	ldr	r3, [pc, #256]	; (800533c <LCD_SetAddrWindow+0x11c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d038      	beq.n	80052b2 <LCD_SetAddrWindow+0x92>
 8005240:	2b03      	cmp	r3, #3
 8005242:	dc03      	bgt.n	800524c <LCD_SetAddrWindow+0x2c>
 8005244:	2b01      	cmp	r3, #1
 8005246:	d006      	beq.n	8005256 <LCD_SetAddrWindow+0x36>
 8005248:	2b02      	cmp	r3, #2
 800524a:	d017      	beq.n	800527c <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	61fb      	str	r3, [r7, #28]
		y = y1;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	61bb      	str	r3, [r7, #24]
		break;
 8005254:	e042      	b.n	80052dc <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	617b      	str	r3, [r7, #20]
		y1 = x1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005264:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005270:	607b      	str	r3, [r7, #4]
		x = x2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	61fb      	str	r3, [r7, #28]
		y = y1;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61bb      	str	r3, [r7, #24]
		break;
 800527a:	e02f      	b.n	80052dc <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005286:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800528e:	607b      	str	r3, [r7, #4]
		t = y1;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80052a4:	3301      	adds	r3, #1
 80052a6:	603b      	str	r3, [r7, #0]
		x = x2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	61fb      	str	r3, [r7, #28]
		y = y2;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	61bb      	str	r3, [r7, #24]
		break;
 80052b0:	e014      	b.n	80052dc <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	617b      	str	r3, [r7, #20]
		x1 = y1;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80052c0:	3301      	adds	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80052ce:	3301      	adds	r3, #1
 80052d0:	603b      	str	r3, [r7, #0]
		x = x1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	61fb      	str	r3, [r7, #28]
		y = y2;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	61bb      	str	r3, [r7, #24]
		break;
 80052da:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	2050      	movs	r0, #80	; 0x50
 80052e4:	f000 f888 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4619      	mov	r1, r3
 80052ee:	2051      	movs	r0, #81	; 0x51
 80052f0:	f000 f882 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	2052      	movs	r0, #82	; 0x52
 80052fc:	f000 f87c 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	2053      	movs	r0, #83	; 0x53
 8005308:	f000 f876 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	b29b      	uxth	r3, r3
 8005310:	4619      	mov	r1, r3
 8005312:	2020      	movs	r0, #32
 8005314:	f000 f870 	bl	80053f8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	2021      	movs	r0, #33	; 0x21
 8005320:	f000 f86a 	bl	80053f8 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8005324:	2201      	movs	r2, #1
 8005326:	2100      	movs	r1, #0
 8005328:	4803      	ldr	r0, [pc, #12]	; (8005338 <LCD_SetAddrWindow+0x118>)
 800532a:	f7fe f97f 	bl	800362c <gpio_write>
}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40020400 	.word	0x40020400
 800533c:	200003dd 	.word	0x200003dd

08005340 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800534a:	4b28      	ldr	r3, [pc, #160]	; (80053ec <LCD_Write8+0xac>)
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005352:	4013      	ands	r3, r2
 8005354:	79fa      	ldrb	r2, [r7, #7]
 8005356:	0252      	lsls	r2, r2, #9
 8005358:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800535c:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	431a      	orrs	r2, r3
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8005370:	491e      	ldr	r1, [pc, #120]	; (80053ec <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8005372:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8005374:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <LCD_Write8+0xb0>)
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 800537e:	4013      	ands	r3, r2
 8005380:	79fa      	ldrb	r2, [r7, #7]
 8005382:	f002 0208 	and.w	r2, r2, #8
 8005386:	431a      	orrs	r2, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	105b      	asrs	r3, r3, #1
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	431a      	orrs	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80053a4:	4912      	ldr	r1, [pc, #72]	; (80053f0 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80053a6:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80053a8:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <LCD_Write8+0xb4>)
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80053b2:	4013      	ands	r3, r2
 80053b4:	79fa      	ldrb	r2, [r7, #7]
 80053b6:	0192      	lsls	r2, r2, #6
 80053b8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053bc:	490d      	ldr	r1, [pc, #52]	; (80053f4 <LCD_Write8+0xb4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80053c2:	2200      	movs	r2, #0
 80053c4:	2101      	movs	r1, #1
 80053c6:	4809      	ldr	r0, [pc, #36]	; (80053ec <LCD_Write8+0xac>)
 80053c8:	f7fe f930 	bl	800362c <gpio_write>
 80053cc:	2001      	movs	r0, #1
 80053ce:	f7fe fd15 	bl	8003dfc <delay>
 80053d2:	2201      	movs	r2, #1
 80053d4:	2101      	movs	r1, #1
 80053d6:	4805      	ldr	r0, [pc, #20]	; (80053ec <LCD_Write8+0xac>)
 80053d8:	f7fe f928 	bl	800362c <gpio_write>
 80053dc:	2001      	movs	r0, #1
 80053de:	f7fe fd0d 	bl	8003dfc <delay>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40020000 	.word	0x40020000
 80053f0:	40020400 	.word	0x40020400
 80053f4:	40020800 	.word	0x40020800

080053f8 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	460a      	mov	r2, r1
 8005402:	80fb      	strh	r3, [r7, #6]
 8005404:	4613      	mov	r3, r2
 8005406:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	b29b      	uxth	r3, r3
 800540e:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8005414:	2200      	movs	r2, #0
 8005416:	2104      	movs	r1, #4
 8005418:	4810      	ldr	r0, [pc, #64]	; (800545c <LCD_WriteRegister16+0x64>)
 800541a:	f7fe f907 	bl	800362c <gpio_write>
	LCD_Write8(hi);
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff8d 	bl	8005340 <LCD_Write8>
	LCD_Write8(lo);
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff89 	bl	8005340 <LCD_Write8>
	hi = (d) >> 8;
 800542e:	88bb      	ldrh	r3, [r7, #4]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	b29b      	uxth	r3, r3
 8005434:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 8005436:	88bb      	ldrh	r3, [r7, #4]
 8005438:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 800543a:	2201      	movs	r2, #1
 800543c:	2104      	movs	r1, #4
 800543e:	4807      	ldr	r0, [pc, #28]	; (800545c <LCD_WriteRegister16+0x64>)
 8005440:	f7fe f8f4 	bl	800362c <gpio_write>
	LCD_Write8(hi);
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff7a 	bl	8005340 <LCD_Write8>
	LCD_Write8(lo);
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff ff76 	bl	8005340 <LCD_Write8>
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40020000 	.word	0x40020000

08005460 <temp2color>:
void printstr(uint8_t *str) {
	while (*str)
		write(*str++);
}

uint16_t temp2color(int degree, int lo, int hi) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	b298      	uxth	r0, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	b299      	uxth	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	b29a      	uxth	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	23ff      	movs	r3, #255	; 0xff
 800547e:	f7fd ff8b 	bl	8003398 <map>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
	g = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	b298      	uxth	r0, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	b299      	uxth	r1, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	b29a      	uxth	r2, r3
 8005496:	23ff      	movs	r3, #255	; 0xff
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	f7fd ff7c 	bl	8003398 <map>
 80054a0:	4603      	mov	r3, r0
 80054a2:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 80054a4:	7d7a      	ldrb	r2, [r7, #21]
 80054a6:	7db9      	ldrb	r1, [r7, #22]
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fdca 	bl	8004044 <LCD_Color565>
 80054b0:	4603      	mov	r3, r0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 80054ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 80054c8:	2301      	movs	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e01e      	b.n	800550c <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3301      	adds	r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	b21c      	sxth	r4, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	b29a      	uxth	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	b21d      	sxth	r5, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b02      	subs	r3, #2
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b21e      	sxth	r6, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	2100      	movs	r1, #0
 80054f4:	6978      	ldr	r0, [r7, #20]
 80054f6:	f7ff ffb3 	bl	8005460 <temp2color>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4632      	mov	r2, r6
 80054fe:	4629      	mov	r1, r5
 8005500:	4620      	mov	r0, r4
 8005502:	f7fe fecf 	bl	80042a4 <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	3301      	adds	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	429a      	cmp	r2, r3
 8005514:	dbdb      	blt.n	80054ce <colorgradient+0x14>
	}
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005520 <__errno>:
 8005520:	4b01      	ldr	r3, [pc, #4]	; (8005528 <__errno+0x8>)
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000050 	.word	0x20000050

0800552c <__libc_init_array>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4d0d      	ldr	r5, [pc, #52]	; (8005564 <__libc_init_array+0x38>)
 8005530:	4c0d      	ldr	r4, [pc, #52]	; (8005568 <__libc_init_array+0x3c>)
 8005532:	1b64      	subs	r4, r4, r5
 8005534:	10a4      	asrs	r4, r4, #2
 8005536:	2600      	movs	r6, #0
 8005538:	42a6      	cmp	r6, r4
 800553a:	d109      	bne.n	8005550 <__libc_init_array+0x24>
 800553c:	4d0b      	ldr	r5, [pc, #44]	; (800556c <__libc_init_array+0x40>)
 800553e:	4c0c      	ldr	r4, [pc, #48]	; (8005570 <__libc_init_array+0x44>)
 8005540:	f002 ff3e 	bl	80083c0 <_init>
 8005544:	1b64      	subs	r4, r4, r5
 8005546:	10a4      	asrs	r4, r4, #2
 8005548:	2600      	movs	r6, #0
 800554a:	42a6      	cmp	r6, r4
 800554c:	d105      	bne.n	800555a <__libc_init_array+0x2e>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	f855 3b04 	ldr.w	r3, [r5], #4
 8005554:	4798      	blx	r3
 8005556:	3601      	adds	r6, #1
 8005558:	e7ee      	b.n	8005538 <__libc_init_array+0xc>
 800555a:	f855 3b04 	ldr.w	r3, [r5], #4
 800555e:	4798      	blx	r3
 8005560:	3601      	adds	r6, #1
 8005562:	e7f2      	b.n	800554a <__libc_init_array+0x1e>
 8005564:	08008be4 	.word	0x08008be4
 8005568:	08008be4 	.word	0x08008be4
 800556c:	08008be4 	.word	0x08008be4
 8005570:	08008be8 	.word	0x08008be8

08005574 <memset>:
 8005574:	4402      	add	r2, r0
 8005576:	4603      	mov	r3, r0
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	f803 1b01 	strb.w	r1, [r3], #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <__cvt>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	ec55 4b10 	vmov	r4, r5, d0
 800558c:	2d00      	cmp	r5, #0
 800558e:	460e      	mov	r6, r1
 8005590:	4619      	mov	r1, r3
 8005592:	462b      	mov	r3, r5
 8005594:	bfbb      	ittet	lt
 8005596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800559a:	461d      	movlt	r5, r3
 800559c:	2300      	movge	r3, #0
 800559e:	232d      	movlt	r3, #45	; 0x2d
 80055a0:	700b      	strb	r3, [r1, #0]
 80055a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055a8:	4691      	mov	r9, r2
 80055aa:	f023 0820 	bic.w	r8, r3, #32
 80055ae:	bfbc      	itt	lt
 80055b0:	4622      	movlt	r2, r4
 80055b2:	4614      	movlt	r4, r2
 80055b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055b8:	d005      	beq.n	80055c6 <__cvt+0x42>
 80055ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055be:	d100      	bne.n	80055c2 <__cvt+0x3e>
 80055c0:	3601      	adds	r6, #1
 80055c2:	2102      	movs	r1, #2
 80055c4:	e000      	b.n	80055c8 <__cvt+0x44>
 80055c6:	2103      	movs	r1, #3
 80055c8:	ab03      	add	r3, sp, #12
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	ab02      	add	r3, sp, #8
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	ec45 4b10 	vmov	d0, r4, r5
 80055d4:	4653      	mov	r3, sl
 80055d6:	4632      	mov	r2, r6
 80055d8:	f000 fd26 	bl	8006028 <_dtoa_r>
 80055dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055e0:	4607      	mov	r7, r0
 80055e2:	d102      	bne.n	80055ea <__cvt+0x66>
 80055e4:	f019 0f01 	tst.w	r9, #1
 80055e8:	d022      	beq.n	8005630 <__cvt+0xac>
 80055ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055ee:	eb07 0906 	add.w	r9, r7, r6
 80055f2:	d110      	bne.n	8005616 <__cvt+0x92>
 80055f4:	783b      	ldrb	r3, [r7, #0]
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d10a      	bne.n	8005610 <__cvt+0x8c>
 80055fa:	2200      	movs	r2, #0
 80055fc:	2300      	movs	r3, #0
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fb fa69 	bl	8000ad8 <__aeabi_dcmpeq>
 8005606:	b918      	cbnz	r0, 8005610 <__cvt+0x8c>
 8005608:	f1c6 0601 	rsb	r6, r6, #1
 800560c:	f8ca 6000 	str.w	r6, [sl]
 8005610:	f8da 3000 	ldr.w	r3, [sl]
 8005614:	4499      	add	r9, r3
 8005616:	2200      	movs	r2, #0
 8005618:	2300      	movs	r3, #0
 800561a:	4620      	mov	r0, r4
 800561c:	4629      	mov	r1, r5
 800561e:	f7fb fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005622:	b108      	cbz	r0, 8005628 <__cvt+0xa4>
 8005624:	f8cd 900c 	str.w	r9, [sp, #12]
 8005628:	2230      	movs	r2, #48	; 0x30
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	454b      	cmp	r3, r9
 800562e:	d307      	bcc.n	8005640 <__cvt+0xbc>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005634:	1bdb      	subs	r3, r3, r7
 8005636:	4638      	mov	r0, r7
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	b004      	add	sp, #16
 800563c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	9103      	str	r1, [sp, #12]
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e7f0      	b.n	800562a <__cvt+0xa6>

08005648 <__exponent>:
 8005648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800564a:	4603      	mov	r3, r0
 800564c:	2900      	cmp	r1, #0
 800564e:	bfb8      	it	lt
 8005650:	4249      	neglt	r1, r1
 8005652:	f803 2b02 	strb.w	r2, [r3], #2
 8005656:	bfb4      	ite	lt
 8005658:	222d      	movlt	r2, #45	; 0x2d
 800565a:	222b      	movge	r2, #43	; 0x2b
 800565c:	2909      	cmp	r1, #9
 800565e:	7042      	strb	r2, [r0, #1]
 8005660:	dd2a      	ble.n	80056b8 <__exponent+0x70>
 8005662:	f10d 0407 	add.w	r4, sp, #7
 8005666:	46a4      	mov	ip, r4
 8005668:	270a      	movs	r7, #10
 800566a:	46a6      	mov	lr, r4
 800566c:	460a      	mov	r2, r1
 800566e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005672:	fb07 1516 	mls	r5, r7, r6, r1
 8005676:	3530      	adds	r5, #48	; 0x30
 8005678:	2a63      	cmp	r2, #99	; 0x63
 800567a:	f104 34ff 	add.w	r4, r4, #4294967295
 800567e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005682:	4631      	mov	r1, r6
 8005684:	dcf1      	bgt.n	800566a <__exponent+0x22>
 8005686:	3130      	adds	r1, #48	; 0x30
 8005688:	f1ae 0502 	sub.w	r5, lr, #2
 800568c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005690:	1c44      	adds	r4, r0, #1
 8005692:	4629      	mov	r1, r5
 8005694:	4561      	cmp	r1, ip
 8005696:	d30a      	bcc.n	80056ae <__exponent+0x66>
 8005698:	f10d 0209 	add.w	r2, sp, #9
 800569c:	eba2 020e 	sub.w	r2, r2, lr
 80056a0:	4565      	cmp	r5, ip
 80056a2:	bf88      	it	hi
 80056a4:	2200      	movhi	r2, #0
 80056a6:	4413      	add	r3, r2
 80056a8:	1a18      	subs	r0, r3, r0
 80056aa:	b003      	add	sp, #12
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056b6:	e7ed      	b.n	8005694 <__exponent+0x4c>
 80056b8:	2330      	movs	r3, #48	; 0x30
 80056ba:	3130      	adds	r1, #48	; 0x30
 80056bc:	7083      	strb	r3, [r0, #2]
 80056be:	70c1      	strb	r1, [r0, #3]
 80056c0:	1d03      	adds	r3, r0, #4
 80056c2:	e7f1      	b.n	80056a8 <__exponent+0x60>

080056c4 <_printf_float>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	ed2d 8b02 	vpush	{d8}
 80056cc:	b08d      	sub	sp, #52	; 0x34
 80056ce:	460c      	mov	r4, r1
 80056d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056d4:	4616      	mov	r6, r2
 80056d6:	461f      	mov	r7, r3
 80056d8:	4605      	mov	r5, r0
 80056da:	f001 fa93 	bl	8006c04 <_localeconv_r>
 80056de:	f8d0 a000 	ldr.w	sl, [r0]
 80056e2:	4650      	mov	r0, sl
 80056e4:	f7fa fd7c 	bl	80001e0 <strlen>
 80056e8:	2300      	movs	r3, #0
 80056ea:	930a      	str	r3, [sp, #40]	; 0x28
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056f8:	3307      	adds	r3, #7
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	f103 0208 	add.w	r2, r3, #8
 8005702:	f8c8 2000 	str.w	r2, [r8]
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800570e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	f8cd 8018 	str.w	r8, [sp, #24]
 800571c:	ee08 0a10 	vmov	s16, r0
 8005720:	4b9f      	ldr	r3, [pc, #636]	; (80059a0 <_printf_float+0x2dc>)
 8005722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	f7fb fa07 	bl	8000b3c <__aeabi_dcmpun>
 800572e:	bb88      	cbnz	r0, 8005794 <_printf_float+0xd0>
 8005730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005734:	4b9a      	ldr	r3, [pc, #616]	; (80059a0 <_printf_float+0x2dc>)
 8005736:	f04f 32ff 	mov.w	r2, #4294967295
 800573a:	f7fb f9e1 	bl	8000b00 <__aeabi_dcmple>
 800573e:	bb48      	cbnz	r0, 8005794 <_printf_float+0xd0>
 8005740:	2200      	movs	r2, #0
 8005742:	2300      	movs	r3, #0
 8005744:	4640      	mov	r0, r8
 8005746:	4649      	mov	r1, r9
 8005748:	f7fb f9d0 	bl	8000aec <__aeabi_dcmplt>
 800574c:	b110      	cbz	r0, 8005754 <_printf_float+0x90>
 800574e:	232d      	movs	r3, #45	; 0x2d
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005754:	4b93      	ldr	r3, [pc, #588]	; (80059a4 <_printf_float+0x2e0>)
 8005756:	4894      	ldr	r0, [pc, #592]	; (80059a8 <_printf_float+0x2e4>)
 8005758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800575c:	bf94      	ite	ls
 800575e:	4698      	movls	r8, r3
 8005760:	4680      	movhi	r8, r0
 8005762:	2303      	movs	r3, #3
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	9b05      	ldr	r3, [sp, #20]
 8005768:	f023 0204 	bic.w	r2, r3, #4
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	f04f 0900 	mov.w	r9, #0
 8005772:	9700      	str	r7, [sp, #0]
 8005774:	4633      	mov	r3, r6
 8005776:	aa0b      	add	r2, sp, #44	; 0x2c
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f000 f9d8 	bl	8005b30 <_printf_common>
 8005780:	3001      	adds	r0, #1
 8005782:	f040 8090 	bne.w	80058a6 <_printf_float+0x1e2>
 8005786:	f04f 30ff 	mov.w	r0, #4294967295
 800578a:	b00d      	add	sp, #52	; 0x34
 800578c:	ecbd 8b02 	vpop	{d8}
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	4640      	mov	r0, r8
 800579a:	4649      	mov	r1, r9
 800579c:	f7fb f9ce 	bl	8000b3c <__aeabi_dcmpun>
 80057a0:	b140      	cbz	r0, 80057b4 <_printf_float+0xf0>
 80057a2:	464b      	mov	r3, r9
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfbc      	itt	lt
 80057a8:	232d      	movlt	r3, #45	; 0x2d
 80057aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057ae:	487f      	ldr	r0, [pc, #508]	; (80059ac <_printf_float+0x2e8>)
 80057b0:	4b7f      	ldr	r3, [pc, #508]	; (80059b0 <_printf_float+0x2ec>)
 80057b2:	e7d1      	b.n	8005758 <_printf_float+0x94>
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057ba:	9206      	str	r2, [sp, #24]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	d13f      	bne.n	8005840 <_printf_float+0x17c>
 80057c0:	2306      	movs	r3, #6
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	9b05      	ldr	r3, [sp, #20]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057cc:	2300      	movs	r3, #0
 80057ce:	9303      	str	r3, [sp, #12]
 80057d0:	ab0a      	add	r3, sp, #40	; 0x28
 80057d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057d6:	ab09      	add	r3, sp, #36	; 0x24
 80057d8:	ec49 8b10 	vmov	d0, r8, r9
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057e4:	4628      	mov	r0, r5
 80057e6:	f7ff fecd 	bl	8005584 <__cvt>
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ee:	2b47      	cmp	r3, #71	; 0x47
 80057f0:	4680      	mov	r8, r0
 80057f2:	d108      	bne.n	8005806 <_printf_float+0x142>
 80057f4:	1cc8      	adds	r0, r1, #3
 80057f6:	db02      	blt.n	80057fe <_printf_float+0x13a>
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	4299      	cmp	r1, r3
 80057fc:	dd41      	ble.n	8005882 <_printf_float+0x1be>
 80057fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005802:	fa5f fb8b 	uxtb.w	fp, fp
 8005806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800580a:	d820      	bhi.n	800584e <_printf_float+0x18a>
 800580c:	3901      	subs	r1, #1
 800580e:	465a      	mov	r2, fp
 8005810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005814:	9109      	str	r1, [sp, #36]	; 0x24
 8005816:	f7ff ff17 	bl	8005648 <__exponent>
 800581a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800581c:	1813      	adds	r3, r2, r0
 800581e:	2a01      	cmp	r2, #1
 8005820:	4681      	mov	r9, r0
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	dc02      	bgt.n	800582c <_printf_float+0x168>
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	07d2      	lsls	r2, r2, #31
 800582a:	d501      	bpl.n	8005830 <_printf_float+0x16c>
 800582c:	3301      	adds	r3, #1
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005834:	2b00      	cmp	r3, #0
 8005836:	d09c      	beq.n	8005772 <_printf_float+0xae>
 8005838:	232d      	movs	r3, #45	; 0x2d
 800583a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583e:	e798      	b.n	8005772 <_printf_float+0xae>
 8005840:	9a06      	ldr	r2, [sp, #24]
 8005842:	2a47      	cmp	r2, #71	; 0x47
 8005844:	d1be      	bne.n	80057c4 <_printf_float+0x100>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1bc      	bne.n	80057c4 <_printf_float+0x100>
 800584a:	2301      	movs	r3, #1
 800584c:	e7b9      	b.n	80057c2 <_printf_float+0xfe>
 800584e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005852:	d118      	bne.n	8005886 <_printf_float+0x1c2>
 8005854:	2900      	cmp	r1, #0
 8005856:	6863      	ldr	r3, [r4, #4]
 8005858:	dd0b      	ble.n	8005872 <_printf_float+0x1ae>
 800585a:	6121      	str	r1, [r4, #16]
 800585c:	b913      	cbnz	r3, 8005864 <_printf_float+0x1a0>
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	07d0      	lsls	r0, r2, #31
 8005862:	d502      	bpl.n	800586a <_printf_float+0x1a6>
 8005864:	3301      	adds	r3, #1
 8005866:	440b      	add	r3, r1
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	65a1      	str	r1, [r4, #88]	; 0x58
 800586c:	f04f 0900 	mov.w	r9, #0
 8005870:	e7de      	b.n	8005830 <_printf_float+0x16c>
 8005872:	b913      	cbnz	r3, 800587a <_printf_float+0x1b6>
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	07d2      	lsls	r2, r2, #31
 8005878:	d501      	bpl.n	800587e <_printf_float+0x1ba>
 800587a:	3302      	adds	r3, #2
 800587c:	e7f4      	b.n	8005868 <_printf_float+0x1a4>
 800587e:	2301      	movs	r3, #1
 8005880:	e7f2      	b.n	8005868 <_printf_float+0x1a4>
 8005882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005888:	4299      	cmp	r1, r3
 800588a:	db05      	blt.n	8005898 <_printf_float+0x1d4>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	6121      	str	r1, [r4, #16]
 8005890:	07d8      	lsls	r0, r3, #31
 8005892:	d5ea      	bpl.n	800586a <_printf_float+0x1a6>
 8005894:	1c4b      	adds	r3, r1, #1
 8005896:	e7e7      	b.n	8005868 <_printf_float+0x1a4>
 8005898:	2900      	cmp	r1, #0
 800589a:	bfd4      	ite	le
 800589c:	f1c1 0202 	rsble	r2, r1, #2
 80058a0:	2201      	movgt	r2, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	e7e0      	b.n	8005868 <_printf_float+0x1a4>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	055a      	lsls	r2, r3, #21
 80058aa:	d407      	bmi.n	80058bc <_printf_float+0x1f8>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	4642      	mov	r2, r8
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b8      	blx	r7
 80058b6:	3001      	adds	r0, #1
 80058b8:	d12c      	bne.n	8005914 <_printf_float+0x250>
 80058ba:	e764      	b.n	8005786 <_printf_float+0xc2>
 80058bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058c0:	f240 80e0 	bls.w	8005a84 <_printf_float+0x3c0>
 80058c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058c8:	2200      	movs	r2, #0
 80058ca:	2300      	movs	r3, #0
 80058cc:	f7fb f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d034      	beq.n	800593e <_printf_float+0x27a>
 80058d4:	4a37      	ldr	r2, [pc, #220]	; (80059b4 <_printf_float+0x2f0>)
 80058d6:	2301      	movs	r3, #1
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f af51 	beq.w	8005786 <_printf_float+0xc2>
 80058e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	db02      	blt.n	80058f2 <_printf_float+0x22e>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	07d8      	lsls	r0, r3, #31
 80058f0:	d510      	bpl.n	8005914 <_printf_float+0x250>
 80058f2:	ee18 3a10 	vmov	r3, s16
 80058f6:	4652      	mov	r2, sl
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af41 	beq.w	8005786 <_printf_float+0xc2>
 8005904:	f04f 0800 	mov.w	r8, #0
 8005908:	f104 091a 	add.w	r9, r4, #26
 800590c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590e:	3b01      	subs	r3, #1
 8005910:	4543      	cmp	r3, r8
 8005912:	dc09      	bgt.n	8005928 <_printf_float+0x264>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	079b      	lsls	r3, r3, #30
 8005918:	f100 8105 	bmi.w	8005b26 <_printf_float+0x462>
 800591c:	68e0      	ldr	r0, [r4, #12]
 800591e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005920:	4298      	cmp	r0, r3
 8005922:	bfb8      	it	lt
 8005924:	4618      	movlt	r0, r3
 8005926:	e730      	b.n	800578a <_printf_float+0xc6>
 8005928:	2301      	movs	r3, #1
 800592a:	464a      	mov	r2, r9
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af27 	beq.w	8005786 <_printf_float+0xc2>
 8005938:	f108 0801 	add.w	r8, r8, #1
 800593c:	e7e6      	b.n	800590c <_printf_float+0x248>
 800593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	dc39      	bgt.n	80059b8 <_printf_float+0x2f4>
 8005944:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <_printf_float+0x2f0>)
 8005946:	2301      	movs	r3, #1
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	f43f af19 	beq.w	8005786 <_printf_float+0xc2>
 8005954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005958:	4313      	orrs	r3, r2
 800595a:	d102      	bne.n	8005962 <_printf_float+0x29e>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	07d9      	lsls	r1, r3, #31
 8005960:	d5d8      	bpl.n	8005914 <_printf_float+0x250>
 8005962:	ee18 3a10 	vmov	r3, s16
 8005966:	4652      	mov	r2, sl
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f af09 	beq.w	8005786 <_printf_float+0xc2>
 8005974:	f04f 0900 	mov.w	r9, #0
 8005978:	f104 0a1a 	add.w	sl, r4, #26
 800597c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597e:	425b      	negs	r3, r3
 8005980:	454b      	cmp	r3, r9
 8005982:	dc01      	bgt.n	8005988 <_printf_float+0x2c4>
 8005984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005986:	e792      	b.n	80058ae <_printf_float+0x1ea>
 8005988:	2301      	movs	r3, #1
 800598a:	4652      	mov	r2, sl
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f aef7 	beq.w	8005786 <_printf_float+0xc2>
 8005998:	f109 0901 	add.w	r9, r9, #1
 800599c:	e7ee      	b.n	800597c <_printf_float+0x2b8>
 800599e:	bf00      	nop
 80059a0:	7fefffff 	.word	0x7fefffff
 80059a4:	08008808 	.word	0x08008808
 80059a8:	0800880c 	.word	0x0800880c
 80059ac:	08008814 	.word	0x08008814
 80059b0:	08008810 	.word	0x08008810
 80059b4:	08008818 	.word	0x08008818
 80059b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059bc:	429a      	cmp	r2, r3
 80059be:	bfa8      	it	ge
 80059c0:	461a      	movge	r2, r3
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	4691      	mov	r9, r2
 80059c6:	dc37      	bgt.n	8005a38 <_printf_float+0x374>
 80059c8:	f04f 0b00 	mov.w	fp, #0
 80059cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059d0:	f104 021a 	add.w	r2, r4, #26
 80059d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	eba3 0309 	sub.w	r3, r3, r9
 80059dc:	455b      	cmp	r3, fp
 80059de:	dc33      	bgt.n	8005a48 <_printf_float+0x384>
 80059e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e4:	429a      	cmp	r2, r3
 80059e6:	db3b      	blt.n	8005a60 <_printf_float+0x39c>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	07da      	lsls	r2, r3, #31
 80059ec:	d438      	bmi.n	8005a60 <_printf_float+0x39c>
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	9a05      	ldr	r2, [sp, #20]
 80059f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059f4:	1a9a      	subs	r2, r3, r2
 80059f6:	eba3 0901 	sub.w	r9, r3, r1
 80059fa:	4591      	cmp	r9, r2
 80059fc:	bfa8      	it	ge
 80059fe:	4691      	movge	r9, r2
 8005a00:	f1b9 0f00 	cmp.w	r9, #0
 8005a04:	dc35      	bgt.n	8005a72 <_printf_float+0x3ae>
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a0e:	f104 0a1a 	add.w	sl, r4, #26
 8005a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	eba3 0309 	sub.w	r3, r3, r9
 8005a1c:	4543      	cmp	r3, r8
 8005a1e:	f77f af79 	ble.w	8005914 <_printf_float+0x250>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4652      	mov	r2, sl
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f aeaa 	beq.w	8005786 <_printf_float+0xc2>
 8005a32:	f108 0801 	add.w	r8, r8, #1
 8005a36:	e7ec      	b.n	8005a12 <_printf_float+0x34e>
 8005a38:	4613      	mov	r3, r2
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b8      	blx	r7
 8005a42:	3001      	adds	r0, #1
 8005a44:	d1c0      	bne.n	80059c8 <_printf_float+0x304>
 8005a46:	e69e      	b.n	8005786 <_printf_float+0xc2>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	9205      	str	r2, [sp, #20]
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f ae97 	beq.w	8005786 <_printf_float+0xc2>
 8005a58:	9a05      	ldr	r2, [sp, #20]
 8005a5a:	f10b 0b01 	add.w	fp, fp, #1
 8005a5e:	e7b9      	b.n	80059d4 <_printf_float+0x310>
 8005a60:	ee18 3a10 	vmov	r3, s16
 8005a64:	4652      	mov	r2, sl
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d1be      	bne.n	80059ee <_printf_float+0x32a>
 8005a70:	e689      	b.n	8005786 <_printf_float+0xc2>
 8005a72:	9a05      	ldr	r2, [sp, #20]
 8005a74:	464b      	mov	r3, r9
 8005a76:	4442      	add	r2, r8
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d1c1      	bne.n	8005a06 <_printf_float+0x342>
 8005a82:	e680      	b.n	8005786 <_printf_float+0xc2>
 8005a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a86:	2a01      	cmp	r2, #1
 8005a88:	dc01      	bgt.n	8005a8e <_printf_float+0x3ca>
 8005a8a:	07db      	lsls	r3, r3, #31
 8005a8c:	d538      	bpl.n	8005b00 <_printf_float+0x43c>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4642      	mov	r2, r8
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f43f ae74 	beq.w	8005786 <_printf_float+0xc2>
 8005a9e:	ee18 3a10 	vmov	r3, s16
 8005aa2:	4652      	mov	r2, sl
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f43f ae6b 	beq.w	8005786 <_printf_float+0xc2>
 8005ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f7fb f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005abc:	b9d8      	cbnz	r0, 8005af6 <_printf_float+0x432>
 8005abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac0:	f108 0201 	add.w	r2, r8, #1
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d10e      	bne.n	8005aee <_printf_float+0x42a>
 8005ad0:	e659      	b.n	8005786 <_printf_float+0xc2>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4652      	mov	r2, sl
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae52 	beq.w	8005786 <_printf_float+0xc2>
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4543      	cmp	r3, r8
 8005aec:	dcf1      	bgt.n	8005ad2 <_printf_float+0x40e>
 8005aee:	464b      	mov	r3, r9
 8005af0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005af4:	e6dc      	b.n	80058b0 <_printf_float+0x1ec>
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	f104 0a1a 	add.w	sl, r4, #26
 8005afe:	e7f2      	b.n	8005ae6 <_printf_float+0x422>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4642      	mov	r2, r8
 8005b04:	e7df      	b.n	8005ac6 <_printf_float+0x402>
 8005b06:	2301      	movs	r3, #1
 8005b08:	464a      	mov	r2, r9
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f ae38 	beq.w	8005786 <_printf_float+0xc2>
 8005b16:	f108 0801 	add.w	r8, r8, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	4543      	cmp	r3, r8
 8005b22:	dcf0      	bgt.n	8005b06 <_printf_float+0x442>
 8005b24:	e6fa      	b.n	800591c <_printf_float+0x258>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	f104 0919 	add.w	r9, r4, #25
 8005b2e:	e7f4      	b.n	8005b1a <_printf_float+0x456>

08005b30 <_printf_common>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	4616      	mov	r6, r2
 8005b36:	4699      	mov	r9, r3
 8005b38:	688a      	ldr	r2, [r1, #8]
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bfb8      	it	lt
 8005b44:	4613      	movlt	r3, r2
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	b10a      	cbz	r2, 8005b56 <_printf_common+0x26>
 8005b52:	3301      	adds	r3, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	6833      	ldrmi	r3, [r6, #0]
 8005b5e:	3302      	addmi	r3, #2
 8005b60:	6033      	strmi	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	f015 0506 	ands.w	r5, r5, #6
 8005b68:	d106      	bne.n	8005b78 <_printf_common+0x48>
 8005b6a:	f104 0a19 	add.w	sl, r4, #25
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc26      	bgt.n	8005bc6 <_printf_common+0x96>
 8005b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b7c:	1e13      	subs	r3, r2, #0
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	bf18      	it	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	0692      	lsls	r2, r2, #26
 8005b86:	d42b      	bmi.n	8005be0 <_printf_common+0xb0>
 8005b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d01e      	beq.n	8005bd4 <_printf_common+0xa4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	68e5      	ldr	r5, [r4, #12]
 8005b9a:	6832      	ldr	r2, [r6, #0]
 8005b9c:	f003 0306 	and.w	r3, r3, #6
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	bf08      	it	eq
 8005ba4:	1aad      	subeq	r5, r5, r2
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	bf0c      	ite	eq
 8005bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb0:	2500      	movne	r5, #0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfc4      	itt	gt
 8005bb6:	1a9b      	subgt	r3, r3, r2
 8005bb8:	18ed      	addgt	r5, r5, r3
 8005bba:	2600      	movs	r6, #0
 8005bbc:	341a      	adds	r4, #26
 8005bbe:	42b5      	cmp	r5, r6
 8005bc0:	d11a      	bne.n	8005bf8 <_printf_common+0xc8>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e008      	b.n	8005bd8 <_printf_common+0xa8>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4652      	mov	r2, sl
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4638      	mov	r0, r7
 8005bce:	47c0      	blx	r8
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_printf_common+0xac>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7c6      	b.n	8005b6e <_printf_common+0x3e>
 8005be0:	18e1      	adds	r1, r4, r3
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	2030      	movs	r0, #48	; 0x30
 8005be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bea:	4422      	add	r2, r4
 8005bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7c7      	b.n	8005b88 <_printf_common+0x58>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0e6      	beq.n	8005bd4 <_printf_common+0xa4>
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7d9      	b.n	8005bbe <_printf_common+0x8e>
	...

08005c0c <_printf_i>:
 8005c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	7e0f      	ldrb	r7, [r1, #24]
 8005c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c14:	2f78      	cmp	r7, #120	; 0x78
 8005c16:	4691      	mov	r9, r2
 8005c18:	4680      	mov	r8, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c22:	d807      	bhi.n	8005c34 <_printf_i+0x28>
 8005c24:	2f62      	cmp	r7, #98	; 0x62
 8005c26:	d80a      	bhi.n	8005c3e <_printf_i+0x32>
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f000 80d8 	beq.w	8005dde <_printf_i+0x1d2>
 8005c2e:	2f58      	cmp	r7, #88	; 0x58
 8005c30:	f000 80a3 	beq.w	8005d7a <_printf_i+0x16e>
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c3c:	e03a      	b.n	8005cb4 <_printf_i+0xa8>
 8005c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c42:	2b15      	cmp	r3, #21
 8005c44:	d8f6      	bhi.n	8005c34 <_printf_i+0x28>
 8005c46:	a101      	add	r1, pc, #4	; (adr r1, 8005c4c <_printf_i+0x40>)
 8005c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005c35 	.word	0x08005c35
 8005c58:	08005c35 	.word	0x08005c35
 8005c5c:	08005c35 	.word	0x08005c35
 8005c60:	08005c35 	.word	0x08005c35
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005c35 	.word	0x08005c35
 8005c6c:	08005c35 	.word	0x08005c35
 8005c70:	08005c35 	.word	0x08005c35
 8005c74:	08005c35 	.word	0x08005c35
 8005c78:	08005dc5 	.word	0x08005dc5
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005da7 	.word	0x08005da7
 8005c84:	08005c35 	.word	0x08005c35
 8005c88:	08005c35 	.word	0x08005c35
 8005c8c:	08005de7 	.word	0x08005de7
 8005c90:	08005c35 	.word	0x08005c35
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005c35 	.word	0x08005c35
 8005c9c:	08005c35 	.word	0x08005c35
 8005ca0:	08005daf 	.word	0x08005daf
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	602a      	str	r2, [r5, #0]
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0a3      	b.n	8005e00 <_printf_i+0x1f4>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	6829      	ldr	r1, [r5, #0]
 8005cbc:	0606      	lsls	r6, r0, #24
 8005cbe:	f101 0304 	add.w	r3, r1, #4
 8005cc2:	d50a      	bpl.n	8005cda <_printf_i+0xce>
 8005cc4:	680e      	ldr	r6, [r1, #0]
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	da03      	bge.n	8005cd4 <_printf_i+0xc8>
 8005ccc:	232d      	movs	r3, #45	; 0x2d
 8005cce:	4276      	negs	r6, r6
 8005cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd4:	485e      	ldr	r0, [pc, #376]	; (8005e50 <_printf_i+0x244>)
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	e019      	b.n	8005d0e <_printf_i+0x102>
 8005cda:	680e      	ldr	r6, [r1, #0]
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ce2:	bf18      	it	ne
 8005ce4:	b236      	sxthne	r6, r6
 8005ce6:	e7ef      	b.n	8005cc8 <_printf_i+0xbc>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	1d19      	adds	r1, r3, #4
 8005cee:	6029      	str	r1, [r5, #0]
 8005cf0:	0601      	lsls	r1, r0, #24
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_i+0xec>
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <_printf_i+0xf2>
 8005cf8:	0646      	lsls	r6, r0, #25
 8005cfa:	d5fb      	bpl.n	8005cf4 <_printf_i+0xe8>
 8005cfc:	881e      	ldrh	r6, [r3, #0]
 8005cfe:	4854      	ldr	r0, [pc, #336]	; (8005e50 <_printf_i+0x244>)
 8005d00:	2f6f      	cmp	r7, #111	; 0x6f
 8005d02:	bf0c      	ite	eq
 8005d04:	2308      	moveq	r3, #8
 8005d06:	230a      	movne	r3, #10
 8005d08:	2100      	movs	r1, #0
 8005d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d0e:	6865      	ldr	r5, [r4, #4]
 8005d10:	60a5      	str	r5, [r4, #8]
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	bfa2      	ittt	ge
 8005d16:	6821      	ldrge	r1, [r4, #0]
 8005d18:	f021 0104 	bicge.w	r1, r1, #4
 8005d1c:	6021      	strge	r1, [r4, #0]
 8005d1e:	b90e      	cbnz	r6, 8005d24 <_printf_i+0x118>
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	d04d      	beq.n	8005dc0 <_printf_i+0x1b4>
 8005d24:	4615      	mov	r5, r2
 8005d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d2e:	5dc7      	ldrb	r7, [r0, r7]
 8005d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d34:	4637      	mov	r7, r6
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	460e      	mov	r6, r1
 8005d3a:	d9f4      	bls.n	8005d26 <_printf_i+0x11a>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10b      	bne.n	8005d58 <_printf_i+0x14c>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07de      	lsls	r6, r3, #31
 8005d44:	d508      	bpl.n	8005d58 <_printf_i+0x14c>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6861      	ldr	r1, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bfde      	ittt	le
 8005d4e:	2330      	movle	r3, #48	; 0x30
 8005d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d58:	1b52      	subs	r2, r2, r5
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	464b      	mov	r3, r9
 8005d62:	aa03      	add	r2, sp, #12
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fee2 	bl	8005b30 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d14c      	bne.n	8005e0a <_printf_i+0x1fe>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b004      	add	sp, #16
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	4835      	ldr	r0, [pc, #212]	; (8005e50 <_printf_i+0x244>)
 8005d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d80:	6829      	ldr	r1, [r5, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d88:	6029      	str	r1, [r5, #0]
 8005d8a:	061d      	lsls	r5, r3, #24
 8005d8c:	d514      	bpl.n	8005db8 <_printf_i+0x1ac>
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	bf44      	itt	mi
 8005d92:	f043 0320 	orrmi.w	r3, r3, #32
 8005d96:	6023      	strmi	r3, [r4, #0]
 8005d98:	b91e      	cbnz	r6, 8005da2 <_printf_i+0x196>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f023 0320 	bic.w	r3, r3, #32
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	2310      	movs	r3, #16
 8005da4:	e7b0      	b.n	8005d08 <_printf_i+0xfc>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f043 0320 	orr.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	2378      	movs	r3, #120	; 0x78
 8005db0:	4828      	ldr	r0, [pc, #160]	; (8005e54 <_printf_i+0x248>)
 8005db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db6:	e7e3      	b.n	8005d80 <_printf_i+0x174>
 8005db8:	0659      	lsls	r1, r3, #25
 8005dba:	bf48      	it	mi
 8005dbc:	b2b6      	uxthmi	r6, r6
 8005dbe:	e7e6      	b.n	8005d8e <_printf_i+0x182>
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	e7bb      	b.n	8005d3c <_printf_i+0x130>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	6826      	ldr	r6, [r4, #0]
 8005dc8:	6961      	ldr	r1, [r4, #20]
 8005dca:	1d18      	adds	r0, r3, #4
 8005dcc:	6028      	str	r0, [r5, #0]
 8005dce:	0635      	lsls	r5, r6, #24
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0x1cc>
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0x1d2>
 8005dd8:	0670      	lsls	r0, r6, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0x1c8>
 8005ddc:	8019      	strh	r1, [r3, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	4615      	mov	r5, r2
 8005de4:	e7ba      	b.n	8005d5c <_printf_i+0x150>
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	602a      	str	r2, [r5, #0]
 8005dec:	681d      	ldr	r5, [r3, #0]
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7fa f9fc 	bl	80001f0 <memchr>
 8005df8:	b108      	cbz	r0, 8005dfe <_printf_i+0x1f2>
 8005dfa:	1b40      	subs	r0, r0, r5
 8005dfc:	6060      	str	r0, [r4, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	2300      	movs	r3, #0
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e08:	e7a8      	b.n	8005d5c <_printf_i+0x150>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	47d0      	blx	sl
 8005e14:	3001      	adds	r0, #1
 8005e16:	d0ab      	beq.n	8005d70 <_printf_i+0x164>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	079b      	lsls	r3, r3, #30
 8005e1c:	d413      	bmi.n	8005e46 <_printf_i+0x23a>
 8005e1e:	68e0      	ldr	r0, [r4, #12]
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	4298      	cmp	r0, r3
 8005e24:	bfb8      	it	lt
 8005e26:	4618      	movlt	r0, r3
 8005e28:	e7a4      	b.n	8005d74 <_printf_i+0x168>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	47d0      	blx	sl
 8005e34:	3001      	adds	r0, #1
 8005e36:	d09b      	beq.n	8005d70 <_printf_i+0x164>
 8005e38:	3501      	adds	r5, #1
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	1a5b      	subs	r3, r3, r1
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dcf2      	bgt.n	8005e2a <_printf_i+0x21e>
 8005e44:	e7eb      	b.n	8005e1e <_printf_i+0x212>
 8005e46:	2500      	movs	r5, #0
 8005e48:	f104 0619 	add.w	r6, r4, #25
 8005e4c:	e7f5      	b.n	8005e3a <_printf_i+0x22e>
 8005e4e:	bf00      	nop
 8005e50:	0800881a 	.word	0x0800881a
 8005e54:	0800882b 	.word	0x0800882b

08005e58 <_vsniprintf_r>:
 8005e58:	b530      	push	{r4, r5, lr}
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	2c00      	cmp	r4, #0
 8005e5e:	b09b      	sub	sp, #108	; 0x6c
 8005e60:	4605      	mov	r5, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	da05      	bge.n	8005e72 <_vsniprintf_r+0x1a>
 8005e66:	238b      	movs	r3, #139	; 0x8b
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	b01b      	add	sp, #108	; 0x6c
 8005e70:	bd30      	pop	{r4, r5, pc}
 8005e72:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e76:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005e7a:	bf14      	ite	ne
 8005e7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e80:	4623      	moveq	r3, r4
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e8a:	9100      	str	r1, [sp, #0]
 8005e8c:	9104      	str	r1, [sp, #16]
 8005e8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005e92:	4669      	mov	r1, sp
 8005e94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e96:	f001 fba5 	bl	80075e4 <_svfiprintf_r>
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	bfbc      	itt	lt
 8005e9e:	238b      	movlt	r3, #139	; 0x8b
 8005ea0:	602b      	strlt	r3, [r5, #0]
 8005ea2:	2c00      	cmp	r4, #0
 8005ea4:	d0e3      	beq.n	8005e6e <_vsniprintf_r+0x16>
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	e7df      	b.n	8005e6e <_vsniprintf_r+0x16>
	...

08005eb0 <vsniprintf>:
 8005eb0:	b507      	push	{r0, r1, r2, lr}
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4803      	ldr	r0, [pc, #12]	; (8005ec8 <vsniprintf+0x18>)
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f7ff ffcb 	bl	8005e58 <_vsniprintf_r>
 8005ec2:	b003      	add	sp, #12
 8005ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ec8:	20000050 	.word	0x20000050

08005ecc <_vsiprintf_r>:
 8005ecc:	b500      	push	{lr}
 8005ece:	b09b      	sub	sp, #108	; 0x6c
 8005ed0:	9100      	str	r1, [sp, #0]
 8005ed2:	9104      	str	r1, [sp, #16]
 8005ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ed8:	9105      	str	r1, [sp, #20]
 8005eda:	9102      	str	r1, [sp, #8]
 8005edc:	4905      	ldr	r1, [pc, #20]	; (8005ef4 <_vsiprintf_r+0x28>)
 8005ede:	9103      	str	r1, [sp, #12]
 8005ee0:	4669      	mov	r1, sp
 8005ee2:	f001 fb7f 	bl	80075e4 <_svfiprintf_r>
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	b01b      	add	sp, #108	; 0x6c
 8005eee:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ef2:	bf00      	nop
 8005ef4:	ffff0208 	.word	0xffff0208

08005ef8 <vsiprintf>:
 8005ef8:	4613      	mov	r3, r2
 8005efa:	460a      	mov	r2, r1
 8005efc:	4601      	mov	r1, r0
 8005efe:	4802      	ldr	r0, [pc, #8]	; (8005f08 <vsiprintf+0x10>)
 8005f00:	6800      	ldr	r0, [r0, #0]
 8005f02:	f7ff bfe3 	b.w	8005ecc <_vsiprintf_r>
 8005f06:	bf00      	nop
 8005f08:	20000050 	.word	0x20000050

08005f0c <quorem>:
 8005f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	6903      	ldr	r3, [r0, #16]
 8005f12:	690c      	ldr	r4, [r1, #16]
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	4607      	mov	r7, r0
 8005f18:	f2c0 8081 	blt.w	800601e <quorem+0x112>
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	f101 0814 	add.w	r8, r1, #20
 8005f22:	f100 0514 	add.w	r5, r0, #20
 8005f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f34:	3301      	adds	r3, #1
 8005f36:	429a      	cmp	r2, r3
 8005f38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f44:	d331      	bcc.n	8005faa <quorem+0x9e>
 8005f46:	f04f 0e00 	mov.w	lr, #0
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	46ac      	mov	ip, r5
 8005f4e:	46f2      	mov	sl, lr
 8005f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f54:	b293      	uxth	r3, r2
 8005f56:	fb06 e303 	mla	r3, r6, r3, lr
 8005f5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ebaa 0303 	sub.w	r3, sl, r3
 8005f64:	f8dc a000 	ldr.w	sl, [ip]
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f84:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f88:	4581      	cmp	r9, r0
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f96:	d2db      	bcs.n	8005f50 <quorem+0x44>
 8005f98:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f9c:	b92b      	cbnz	r3, 8005faa <quorem+0x9e>
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	3b04      	subs	r3, #4
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	d32e      	bcc.n	8006006 <quorem+0xfa>
 8005fa8:	613c      	str	r4, [r7, #16]
 8005faa:	4638      	mov	r0, r7
 8005fac:	f001 f8c6 	bl	800713c <__mcmp>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	db24      	blt.n	8005ffe <quorem+0xf2>
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f04f 0c00 	mov.w	ip, #0
 8005fbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8005fc4:	b293      	uxth	r3, r2
 8005fc6:	ebac 0303 	sub.w	r3, ip, r3
 8005fca:	0c12      	lsrs	r2, r2, #16
 8005fcc:	fa13 f38e 	uxtah	r3, r3, lr
 8005fd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fde:	45c1      	cmp	r9, r8
 8005fe0:	f840 3b04 	str.w	r3, [r0], #4
 8005fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fe8:	d2e8      	bcs.n	8005fbc <quorem+0xb0>
 8005fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff2:	b922      	cbnz	r2, 8005ffe <quorem+0xf2>
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	d30a      	bcc.n	8006012 <quorem+0x106>
 8005ffc:	613c      	str	r4, [r7, #16]
 8005ffe:	4630      	mov	r0, r6
 8006000:	b003      	add	sp, #12
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	3b04      	subs	r3, #4
 800600a:	2a00      	cmp	r2, #0
 800600c:	d1cc      	bne.n	8005fa8 <quorem+0x9c>
 800600e:	3c01      	subs	r4, #1
 8006010:	e7c7      	b.n	8005fa2 <quorem+0x96>
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	3b04      	subs	r3, #4
 8006016:	2a00      	cmp	r2, #0
 8006018:	d1f0      	bne.n	8005ffc <quorem+0xf0>
 800601a:	3c01      	subs	r4, #1
 800601c:	e7eb      	b.n	8005ff6 <quorem+0xea>
 800601e:	2000      	movs	r0, #0
 8006020:	e7ee      	b.n	8006000 <quorem+0xf4>
 8006022:	0000      	movs	r0, r0
 8006024:	0000      	movs	r0, r0
	...

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b04 	vpush	{d8-d9}
 8006030:	ec57 6b10 	vmov	r6, r7, d0
 8006034:	b093      	sub	sp, #76	; 0x4c
 8006036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800603c:	9106      	str	r1, [sp, #24]
 800603e:	ee10 aa10 	vmov	sl, s0
 8006042:	4604      	mov	r4, r0
 8006044:	9209      	str	r2, [sp, #36]	; 0x24
 8006046:	930c      	str	r3, [sp, #48]	; 0x30
 8006048:	46bb      	mov	fp, r7
 800604a:	b975      	cbnz	r5, 800606a <_dtoa_r+0x42>
 800604c:	2010      	movs	r0, #16
 800604e:	f000 fddd 	bl	8006c0c <malloc>
 8006052:	4602      	mov	r2, r0
 8006054:	6260      	str	r0, [r4, #36]	; 0x24
 8006056:	b920      	cbnz	r0, 8006062 <_dtoa_r+0x3a>
 8006058:	4ba7      	ldr	r3, [pc, #668]	; (80062f8 <_dtoa_r+0x2d0>)
 800605a:	21ea      	movs	r1, #234	; 0xea
 800605c:	48a7      	ldr	r0, [pc, #668]	; (80062fc <_dtoa_r+0x2d4>)
 800605e:	f001 fbd1 	bl	8007804 <__assert_func>
 8006062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006066:	6005      	str	r5, [r0, #0]
 8006068:	60c5      	str	r5, [r0, #12]
 800606a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800606c:	6819      	ldr	r1, [r3, #0]
 800606e:	b151      	cbz	r1, 8006086 <_dtoa_r+0x5e>
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	604a      	str	r2, [r1, #4]
 8006074:	2301      	movs	r3, #1
 8006076:	4093      	lsls	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fe1c 	bl	8006cb8 <_Bfree>
 8006080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	1e3b      	subs	r3, r7, #0
 8006088:	bfaa      	itet	ge
 800608a:	2300      	movge	r3, #0
 800608c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006090:	f8c8 3000 	strge.w	r3, [r8]
 8006094:	4b9a      	ldr	r3, [pc, #616]	; (8006300 <_dtoa_r+0x2d8>)
 8006096:	bfbc      	itt	lt
 8006098:	2201      	movlt	r2, #1
 800609a:	f8c8 2000 	strlt.w	r2, [r8]
 800609e:	ea33 030b 	bics.w	r3, r3, fp
 80060a2:	d11b      	bne.n	80060dc <_dtoa_r+0xb4>
 80060a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060b0:	4333      	orrs	r3, r6
 80060b2:	f000 8592 	beq.w	8006bda <_dtoa_r+0xbb2>
 80060b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b8:	b963      	cbnz	r3, 80060d4 <_dtoa_r+0xac>
 80060ba:	4b92      	ldr	r3, [pc, #584]	; (8006304 <_dtoa_r+0x2dc>)
 80060bc:	e022      	b.n	8006104 <_dtoa_r+0xdc>
 80060be:	4b92      	ldr	r3, [pc, #584]	; (8006308 <_dtoa_r+0x2e0>)
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	3308      	adds	r3, #8
 80060c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	9801      	ldr	r0, [sp, #4]
 80060ca:	b013      	add	sp, #76	; 0x4c
 80060cc:	ecbd 8b04 	vpop	{d8-d9}
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <_dtoa_r+0x2dc>)
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	3303      	adds	r3, #3
 80060da:	e7f3      	b.n	80060c4 <_dtoa_r+0x9c>
 80060dc:	2200      	movs	r2, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	f7fa fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e8:	ec4b ab19 	vmov	d9, sl, fp
 80060ec:	4680      	mov	r8, r0
 80060ee:	b158      	cbz	r0, 8006108 <_dtoa_r+0xe0>
 80060f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060f2:	2301      	movs	r3, #1
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 856b 	beq.w	8006bd4 <_dtoa_r+0xbac>
 80060fe:	4883      	ldr	r0, [pc, #524]	; (800630c <_dtoa_r+0x2e4>)
 8006100:	6018      	str	r0, [r3, #0]
 8006102:	1e43      	subs	r3, r0, #1
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	e7df      	b.n	80060c8 <_dtoa_r+0xa0>
 8006108:	ec4b ab10 	vmov	d0, sl, fp
 800610c:	aa10      	add	r2, sp, #64	; 0x40
 800610e:	a911      	add	r1, sp, #68	; 0x44
 8006110:	4620      	mov	r0, r4
 8006112:	f001 f8b9 	bl	8007288 <__d2b>
 8006116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800611a:	ee08 0a10 	vmov	s16, r0
 800611e:	2d00      	cmp	r5, #0
 8006120:	f000 8084 	beq.w	800622c <_dtoa_r+0x204>
 8006124:	ee19 3a90 	vmov	r3, s19
 8006128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800612c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006130:	4656      	mov	r6, sl
 8006132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800613a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800613e:	4b74      	ldr	r3, [pc, #464]	; (8006310 <_dtoa_r+0x2e8>)
 8006140:	2200      	movs	r2, #0
 8006142:	4630      	mov	r0, r6
 8006144:	4639      	mov	r1, r7
 8006146:	f7fa f8a7 	bl	8000298 <__aeabi_dsub>
 800614a:	a365      	add	r3, pc, #404	; (adr r3, 80062e0 <_dtoa_r+0x2b8>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	a364      	add	r3, pc, #400	; (adr r3, 80062e8 <_dtoa_r+0x2c0>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4606      	mov	r6, r0
 8006160:	4628      	mov	r0, r5
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa f9e6 	bl	8000534 <__aeabi_i2d>
 8006168:	a361      	add	r3, pc, #388	; (adr r3, 80062f0 <_dtoa_r+0x2c8>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa fa4b 	bl	8000608 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa f88f 	bl	800029c <__adddf3>
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	f7fa fcf1 	bl	8000b68 <__aeabi_d2iz>
 8006186:	2200      	movs	r2, #0
 8006188:	9000      	str	r0, [sp, #0]
 800618a:	2300      	movs	r3, #0
 800618c:	4630      	mov	r0, r6
 800618e:	4639      	mov	r1, r7
 8006190:	f7fa fcac 	bl	8000aec <__aeabi_dcmplt>
 8006194:	b150      	cbz	r0, 80061ac <_dtoa_r+0x184>
 8006196:	9800      	ldr	r0, [sp, #0]
 8006198:	f7fa f9cc 	bl	8000534 <__aeabi_i2d>
 800619c:	4632      	mov	r2, r6
 800619e:	463b      	mov	r3, r7
 80061a0:	f7fa fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80061a4:	b910      	cbnz	r0, 80061ac <_dtoa_r+0x184>
 80061a6:	9b00      	ldr	r3, [sp, #0]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b16      	cmp	r3, #22
 80061b0:	d85a      	bhi.n	8006268 <_dtoa_r+0x240>
 80061b2:	9a00      	ldr	r2, [sp, #0]
 80061b4:	4b57      	ldr	r3, [pc, #348]	; (8006314 <_dtoa_r+0x2ec>)
 80061b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	ec51 0b19 	vmov	r0, r1, d9
 80061c2:	f7fa fc93 	bl	8000aec <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d050      	beq.n	800626c <_dtoa_r+0x244>
 80061ca:	9b00      	ldr	r3, [sp, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061d6:	1b5d      	subs	r5, r3, r5
 80061d8:	1e6b      	subs	r3, r5, #1
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	bf45      	ittet	mi
 80061de:	f1c5 0301 	rsbmi	r3, r5, #1
 80061e2:	9304      	strmi	r3, [sp, #16]
 80061e4:	2300      	movpl	r3, #0
 80061e6:	2300      	movmi	r3, #0
 80061e8:	bf4c      	ite	mi
 80061ea:	9305      	strmi	r3, [sp, #20]
 80061ec:	9304      	strpl	r3, [sp, #16]
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	db3d      	blt.n	8006270 <_dtoa_r+0x248>
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	9a00      	ldr	r2, [sp, #0]
 80061f8:	920a      	str	r2, [sp, #40]	; 0x28
 80061fa:	4413      	add	r3, r2
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	2300      	movs	r3, #0
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	2b09      	cmp	r3, #9
 8006206:	f200 8089 	bhi.w	800631c <_dtoa_r+0x2f4>
 800620a:	2b05      	cmp	r3, #5
 800620c:	bfc4      	itt	gt
 800620e:	3b04      	subgt	r3, #4
 8006210:	9306      	strgt	r3, [sp, #24]
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	f1a3 0302 	sub.w	r3, r3, #2
 8006218:	bfcc      	ite	gt
 800621a:	2500      	movgt	r5, #0
 800621c:	2501      	movle	r5, #1
 800621e:	2b03      	cmp	r3, #3
 8006220:	f200 8087 	bhi.w	8006332 <_dtoa_r+0x30a>
 8006224:	e8df f003 	tbb	[pc, r3]
 8006228:	59383a2d 	.word	0x59383a2d
 800622c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006230:	441d      	add	r5, r3
 8006232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006236:	2b20      	cmp	r3, #32
 8006238:	bfc1      	itttt	gt
 800623a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800623e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006242:	fa0b f303 	lslgt.w	r3, fp, r3
 8006246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800624a:	bfda      	itte	le
 800624c:	f1c3 0320 	rsble	r3, r3, #32
 8006250:	fa06 f003 	lslle.w	r0, r6, r3
 8006254:	4318      	orrgt	r0, r3
 8006256:	f7fa f95d 	bl	8000514 <__aeabi_ui2d>
 800625a:	2301      	movs	r3, #1
 800625c:	4606      	mov	r6, r0
 800625e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006262:	3d01      	subs	r5, #1
 8006264:	930e      	str	r3, [sp, #56]	; 0x38
 8006266:	e76a      	b.n	800613e <_dtoa_r+0x116>
 8006268:	2301      	movs	r3, #1
 800626a:	e7b2      	b.n	80061d2 <_dtoa_r+0x1aa>
 800626c:	900b      	str	r0, [sp, #44]	; 0x2c
 800626e:	e7b1      	b.n	80061d4 <_dtoa_r+0x1ac>
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	9a00      	ldr	r2, [sp, #0]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	9304      	str	r3, [sp, #16]
 8006278:	4253      	negs	r3, r2
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	2300      	movs	r3, #0
 800627e:	930a      	str	r3, [sp, #40]	; 0x28
 8006280:	e7bf      	b.n	8006202 <_dtoa_r+0x1da>
 8006282:	2300      	movs	r3, #0
 8006284:	9308      	str	r3, [sp, #32]
 8006286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc55      	bgt.n	8006338 <_dtoa_r+0x310>
 800628c:	2301      	movs	r3, #1
 800628e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006292:	461a      	mov	r2, r3
 8006294:	9209      	str	r2, [sp, #36]	; 0x24
 8006296:	e00c      	b.n	80062b2 <_dtoa_r+0x28a>
 8006298:	2301      	movs	r3, #1
 800629a:	e7f3      	b.n	8006284 <_dtoa_r+0x25c>
 800629c:	2300      	movs	r3, #0
 800629e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b00      	ldr	r3, [sp, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	3301      	adds	r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	bfb8      	it	lt
 80062b0:	2301      	movlt	r3, #1
 80062b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062b4:	2200      	movs	r2, #0
 80062b6:	6042      	str	r2, [r0, #4]
 80062b8:	2204      	movs	r2, #4
 80062ba:	f102 0614 	add.w	r6, r2, #20
 80062be:	429e      	cmp	r6, r3
 80062c0:	6841      	ldr	r1, [r0, #4]
 80062c2:	d93d      	bls.n	8006340 <_dtoa_r+0x318>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fcb7 	bl	8006c38 <_Balloc>
 80062ca:	9001      	str	r0, [sp, #4]
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d13b      	bne.n	8006348 <_dtoa_r+0x320>
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <_dtoa_r+0x2f0>)
 80062d2:	4602      	mov	r2, r0
 80062d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062d8:	e6c0      	b.n	800605c <_dtoa_r+0x34>
 80062da:	2301      	movs	r3, #1
 80062dc:	e7df      	b.n	800629e <_dtoa_r+0x276>
 80062de:	bf00      	nop
 80062e0:	636f4361 	.word	0x636f4361
 80062e4:	3fd287a7 	.word	0x3fd287a7
 80062e8:	8b60c8b3 	.word	0x8b60c8b3
 80062ec:	3fc68a28 	.word	0x3fc68a28
 80062f0:	509f79fb 	.word	0x509f79fb
 80062f4:	3fd34413 	.word	0x3fd34413
 80062f8:	08008849 	.word	0x08008849
 80062fc:	08008860 	.word	0x08008860
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	08008845 	.word	0x08008845
 8006308:	0800883c 	.word	0x0800883c
 800630c:	08008819 	.word	0x08008819
 8006310:	3ff80000 	.word	0x3ff80000
 8006314:	08008950 	.word	0x08008950
 8006318:	080088bb 	.word	0x080088bb
 800631c:	2501      	movs	r5, #1
 800631e:	2300      	movs	r3, #0
 8006320:	9306      	str	r3, [sp, #24]
 8006322:	9508      	str	r5, [sp, #32]
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	2312      	movs	r3, #18
 8006330:	e7b0      	b.n	8006294 <_dtoa_r+0x26c>
 8006332:	2301      	movs	r3, #1
 8006334:	9308      	str	r3, [sp, #32]
 8006336:	e7f5      	b.n	8006324 <_dtoa_r+0x2fc>
 8006338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800633e:	e7b8      	b.n	80062b2 <_dtoa_r+0x28a>
 8006340:	3101      	adds	r1, #1
 8006342:	6041      	str	r1, [r0, #4]
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	e7b8      	b.n	80062ba <_dtoa_r+0x292>
 8006348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634a:	9a01      	ldr	r2, [sp, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	2b0e      	cmp	r3, #14
 8006352:	f200 809d 	bhi.w	8006490 <_dtoa_r+0x468>
 8006356:	2d00      	cmp	r5, #0
 8006358:	f000 809a 	beq.w	8006490 <_dtoa_r+0x468>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd32      	ble.n	80063c8 <_dtoa_r+0x3a0>
 8006362:	4ab7      	ldr	r2, [pc, #732]	; (8006640 <_dtoa_r+0x618>)
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800636c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006370:	9b00      	ldr	r3, [sp, #0]
 8006372:	05d8      	lsls	r0, r3, #23
 8006374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006378:	d516      	bpl.n	80063a8 <_dtoa_r+0x380>
 800637a:	4bb2      	ldr	r3, [pc, #712]	; (8006644 <_dtoa_r+0x61c>)
 800637c:	ec51 0b19 	vmov	r0, r1, d9
 8006380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006384:	f7fa fa6a 	bl	800085c <__aeabi_ddiv>
 8006388:	f007 070f 	and.w	r7, r7, #15
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	2503      	movs	r5, #3
 8006392:	4eac      	ldr	r6, [pc, #688]	; (8006644 <_dtoa_r+0x61c>)
 8006394:	b957      	cbnz	r7, 80063ac <_dtoa_r+0x384>
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	4650      	mov	r0, sl
 800639c:	4659      	mov	r1, fp
 800639e:	f7fa fa5d 	bl	800085c <__aeabi_ddiv>
 80063a2:	4682      	mov	sl, r0
 80063a4:	468b      	mov	fp, r1
 80063a6:	e028      	b.n	80063fa <_dtoa_r+0x3d2>
 80063a8:	2502      	movs	r5, #2
 80063aa:	e7f2      	b.n	8006392 <_dtoa_r+0x36a>
 80063ac:	07f9      	lsls	r1, r7, #31
 80063ae:	d508      	bpl.n	80063c2 <_dtoa_r+0x39a>
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063b8:	f7fa f926 	bl	8000608 <__aeabi_dmul>
 80063bc:	3501      	adds	r5, #1
 80063be:	4680      	mov	r8, r0
 80063c0:	4689      	mov	r9, r1
 80063c2:	107f      	asrs	r7, r7, #1
 80063c4:	3608      	adds	r6, #8
 80063c6:	e7e5      	b.n	8006394 <_dtoa_r+0x36c>
 80063c8:	f000 809b 	beq.w	8006502 <_dtoa_r+0x4da>
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	4f9d      	ldr	r7, [pc, #628]	; (8006644 <_dtoa_r+0x61c>)
 80063d0:	425e      	negs	r6, r3
 80063d2:	4b9b      	ldr	r3, [pc, #620]	; (8006640 <_dtoa_r+0x618>)
 80063d4:	f006 020f 	and.w	r2, r6, #15
 80063d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	ec51 0b19 	vmov	r0, r1, d9
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	1136      	asrs	r6, r6, #4
 80063ea:	4682      	mov	sl, r0
 80063ec:	468b      	mov	fp, r1
 80063ee:	2300      	movs	r3, #0
 80063f0:	2502      	movs	r5, #2
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d17a      	bne.n	80064ec <_dtoa_r+0x4c4>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1d3      	bne.n	80063a2 <_dtoa_r+0x37a>
 80063fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8082 	beq.w	8006506 <_dtoa_r+0x4de>
 8006402:	4b91      	ldr	r3, [pc, #580]	; (8006648 <_dtoa_r+0x620>)
 8006404:	2200      	movs	r2, #0
 8006406:	4650      	mov	r0, sl
 8006408:	4659      	mov	r1, fp
 800640a:	f7fa fb6f 	bl	8000aec <__aeabi_dcmplt>
 800640e:	2800      	cmp	r0, #0
 8006410:	d079      	beq.n	8006506 <_dtoa_r+0x4de>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d076      	beq.n	8006506 <_dtoa_r+0x4de>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	dd36      	ble.n	800648c <_dtoa_r+0x464>
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	4650      	mov	r0, sl
 8006422:	4659      	mov	r1, fp
 8006424:	1e5f      	subs	r7, r3, #1
 8006426:	2200      	movs	r2, #0
 8006428:	4b88      	ldr	r3, [pc, #544]	; (800664c <_dtoa_r+0x624>)
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	9e02      	ldr	r6, [sp, #8]
 8006430:	4682      	mov	sl, r0
 8006432:	468b      	mov	fp, r1
 8006434:	3501      	adds	r5, #1
 8006436:	4628      	mov	r0, r5
 8006438:	f7fa f87c 	bl	8000534 <__aeabi_i2d>
 800643c:	4652      	mov	r2, sl
 800643e:	465b      	mov	r3, fp
 8006440:	f7fa f8e2 	bl	8000608 <__aeabi_dmul>
 8006444:	4b82      	ldr	r3, [pc, #520]	; (8006650 <_dtoa_r+0x628>)
 8006446:	2200      	movs	r2, #0
 8006448:	f7f9 ff28 	bl	800029c <__adddf3>
 800644c:	46d0      	mov	r8, sl
 800644e:	46d9      	mov	r9, fp
 8006450:	4682      	mov	sl, r0
 8006452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006456:	2e00      	cmp	r6, #0
 8006458:	d158      	bne.n	800650c <_dtoa_r+0x4e4>
 800645a:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <_dtoa_r+0x62c>)
 800645c:	2200      	movs	r2, #0
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7f9 ff19 	bl	8000298 <__aeabi_dsub>
 8006466:	4652      	mov	r2, sl
 8006468:	465b      	mov	r3, fp
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	f7fa fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006472:	2800      	cmp	r0, #0
 8006474:	f040 8295 	bne.w	80069a2 <_dtoa_r+0x97a>
 8006478:	4652      	mov	r2, sl
 800647a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f7fa fb33 	bl	8000aec <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	f040 8289 	bne.w	800699e <_dtoa_r+0x976>
 800648c:	ec5b ab19 	vmov	sl, fp, d9
 8006490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006492:	2b00      	cmp	r3, #0
 8006494:	f2c0 8148 	blt.w	8006728 <_dtoa_r+0x700>
 8006498:	9a00      	ldr	r2, [sp, #0]
 800649a:	2a0e      	cmp	r2, #14
 800649c:	f300 8144 	bgt.w	8006728 <_dtoa_r+0x700>
 80064a0:	4b67      	ldr	r3, [pc, #412]	; (8006640 <_dtoa_r+0x618>)
 80064a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f280 80d5 	bge.w	800665c <_dtoa_r+0x634>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f300 80d1 	bgt.w	800665c <_dtoa_r+0x634>
 80064ba:	f040 826f 	bne.w	800699c <_dtoa_r+0x974>
 80064be:	4b65      	ldr	r3, [pc, #404]	; (8006654 <_dtoa_r+0x62c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa f89f 	bl	8000608 <__aeabi_dmul>
 80064ca:	4652      	mov	r2, sl
 80064cc:	465b      	mov	r3, fp
 80064ce:	f7fa fb21 	bl	8000b14 <__aeabi_dcmpge>
 80064d2:	9e03      	ldr	r6, [sp, #12]
 80064d4:	4637      	mov	r7, r6
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8245 	bne.w	8006966 <_dtoa_r+0x93e>
 80064dc:	9d01      	ldr	r5, [sp, #4]
 80064de:	2331      	movs	r3, #49	; 0x31
 80064e0:	f805 3b01 	strb.w	r3, [r5], #1
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	e240      	b.n	800696e <_dtoa_r+0x946>
 80064ec:	07f2      	lsls	r2, r6, #31
 80064ee:	d505      	bpl.n	80064fc <_dtoa_r+0x4d4>
 80064f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f4:	f7fa f888 	bl	8000608 <__aeabi_dmul>
 80064f8:	3501      	adds	r5, #1
 80064fa:	2301      	movs	r3, #1
 80064fc:	1076      	asrs	r6, r6, #1
 80064fe:	3708      	adds	r7, #8
 8006500:	e777      	b.n	80063f2 <_dtoa_r+0x3ca>
 8006502:	2502      	movs	r5, #2
 8006504:	e779      	b.n	80063fa <_dtoa_r+0x3d2>
 8006506:	9f00      	ldr	r7, [sp, #0]
 8006508:	9e03      	ldr	r6, [sp, #12]
 800650a:	e794      	b.n	8006436 <_dtoa_r+0x40e>
 800650c:	9901      	ldr	r1, [sp, #4]
 800650e:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <_dtoa_r+0x618>)
 8006510:	4431      	add	r1, r6
 8006512:	910d      	str	r1, [sp, #52]	; 0x34
 8006514:	9908      	ldr	r1, [sp, #32]
 8006516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800651a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800651e:	2900      	cmp	r1, #0
 8006520:	d043      	beq.n	80065aa <_dtoa_r+0x582>
 8006522:	494d      	ldr	r1, [pc, #308]	; (8006658 <_dtoa_r+0x630>)
 8006524:	2000      	movs	r0, #0
 8006526:	f7fa f999 	bl	800085c <__aeabi_ddiv>
 800652a:	4652      	mov	r2, sl
 800652c:	465b      	mov	r3, fp
 800652e:	f7f9 feb3 	bl	8000298 <__aeabi_dsub>
 8006532:	9d01      	ldr	r5, [sp, #4]
 8006534:	4682      	mov	sl, r0
 8006536:	468b      	mov	fp, r1
 8006538:	4649      	mov	r1, r9
 800653a:	4640      	mov	r0, r8
 800653c:	f7fa fb14 	bl	8000b68 <__aeabi_d2iz>
 8006540:	4606      	mov	r6, r0
 8006542:	f7f9 fff7 	bl	8000534 <__aeabi_i2d>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	f7f9 fea3 	bl	8000298 <__aeabi_dsub>
 8006552:	3630      	adds	r6, #48	; 0x30
 8006554:	f805 6b01 	strb.w	r6, [r5], #1
 8006558:	4652      	mov	r2, sl
 800655a:	465b      	mov	r3, fp
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	f7fa fac4 	bl	8000aec <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d163      	bne.n	8006630 <_dtoa_r+0x608>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	4936      	ldr	r1, [pc, #216]	; (8006648 <_dtoa_r+0x620>)
 800656e:	2000      	movs	r0, #0
 8006570:	f7f9 fe92 	bl	8000298 <__aeabi_dsub>
 8006574:	4652      	mov	r2, sl
 8006576:	465b      	mov	r3, fp
 8006578:	f7fa fab8 	bl	8000aec <__aeabi_dcmplt>
 800657c:	2800      	cmp	r0, #0
 800657e:	f040 80b5 	bne.w	80066ec <_dtoa_r+0x6c4>
 8006582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006584:	429d      	cmp	r5, r3
 8006586:	d081      	beq.n	800648c <_dtoa_r+0x464>
 8006588:	4b30      	ldr	r3, [pc, #192]	; (800664c <_dtoa_r+0x624>)
 800658a:	2200      	movs	r2, #0
 800658c:	4650      	mov	r0, sl
 800658e:	4659      	mov	r1, fp
 8006590:	f7fa f83a 	bl	8000608 <__aeabi_dmul>
 8006594:	4b2d      	ldr	r3, [pc, #180]	; (800664c <_dtoa_r+0x624>)
 8006596:	4682      	mov	sl, r0
 8006598:	468b      	mov	fp, r1
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	2200      	movs	r2, #0
 80065a0:	f7fa f832 	bl	8000608 <__aeabi_dmul>
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	e7c6      	b.n	8006538 <_dtoa_r+0x510>
 80065aa:	4650      	mov	r0, sl
 80065ac:	4659      	mov	r1, fp
 80065ae:	f7fa f82b 	bl	8000608 <__aeabi_dmul>
 80065b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b4:	9d01      	ldr	r5, [sp, #4]
 80065b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b8:	4682      	mov	sl, r0
 80065ba:	468b      	mov	fp, r1
 80065bc:	4649      	mov	r1, r9
 80065be:	4640      	mov	r0, r8
 80065c0:	f7fa fad2 	bl	8000b68 <__aeabi_d2iz>
 80065c4:	4606      	mov	r6, r0
 80065c6:	f7f9 ffb5 	bl	8000534 <__aeabi_i2d>
 80065ca:	3630      	adds	r6, #48	; 0x30
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4640      	mov	r0, r8
 80065d2:	4649      	mov	r1, r9
 80065d4:	f7f9 fe60 	bl	8000298 <__aeabi_dsub>
 80065d8:	f805 6b01 	strb.w	r6, [r5], #1
 80065dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065de:	429d      	cmp	r5, r3
 80065e0:	4680      	mov	r8, r0
 80065e2:	4689      	mov	r9, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	d124      	bne.n	8006634 <_dtoa_r+0x60c>
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <_dtoa_r+0x630>)
 80065ec:	4650      	mov	r0, sl
 80065ee:	4659      	mov	r1, fp
 80065f0:	f7f9 fe54 	bl	800029c <__adddf3>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fa fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8006600:	2800      	cmp	r0, #0
 8006602:	d173      	bne.n	80066ec <_dtoa_r+0x6c4>
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	4913      	ldr	r1, [pc, #76]	; (8006658 <_dtoa_r+0x630>)
 800660a:	2000      	movs	r0, #0
 800660c:	f7f9 fe44 	bl	8000298 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7fa fa68 	bl	8000aec <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f43f af35 	beq.w	800648c <_dtoa_r+0x464>
 8006622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006624:	1e6b      	subs	r3, r5, #1
 8006626:	930f      	str	r3, [sp, #60]	; 0x3c
 8006628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800662c:	2b30      	cmp	r3, #48	; 0x30
 800662e:	d0f8      	beq.n	8006622 <_dtoa_r+0x5fa>
 8006630:	9700      	str	r7, [sp, #0]
 8006632:	e049      	b.n	80066c8 <_dtoa_r+0x6a0>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_dtoa_r+0x624>)
 8006636:	f7f9 ffe7 	bl	8000608 <__aeabi_dmul>
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
 800663e:	e7bd      	b.n	80065bc <_dtoa_r+0x594>
 8006640:	08008950 	.word	0x08008950
 8006644:	08008928 	.word	0x08008928
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	40240000 	.word	0x40240000
 8006650:	401c0000 	.word	0x401c0000
 8006654:	40140000 	.word	0x40140000
 8006658:	3fe00000 	.word	0x3fe00000
 800665c:	9d01      	ldr	r5, [sp, #4]
 800665e:	4656      	mov	r6, sl
 8006660:	465f      	mov	r7, fp
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7fa f8f7 	bl	800085c <__aeabi_ddiv>
 800666e:	f7fa fa7b 	bl	8000b68 <__aeabi_d2iz>
 8006672:	4682      	mov	sl, r0
 8006674:	f7f9 ff5e 	bl	8000534 <__aeabi_i2d>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	f7f9 ffc4 	bl	8000608 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800668c:	f7f9 fe04 	bl	8000298 <__aeabi_dsub>
 8006690:	f805 6b01 	strb.w	r6, [r5], #1
 8006694:	9e01      	ldr	r6, [sp, #4]
 8006696:	9f03      	ldr	r7, [sp, #12]
 8006698:	1bae      	subs	r6, r5, r6
 800669a:	42b7      	cmp	r7, r6
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	d135      	bne.n	800670e <_dtoa_r+0x6e6>
 80066a2:	f7f9 fdfb 	bl	800029c <__adddf3>
 80066a6:	4642      	mov	r2, r8
 80066a8:	464b      	mov	r3, r9
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	f7fa fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80066b2:	b9d0      	cbnz	r0, 80066ea <_dtoa_r+0x6c2>
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7fa fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c0:	b110      	cbz	r0, 80066c8 <_dtoa_r+0x6a0>
 80066c2:	f01a 0f01 	tst.w	sl, #1
 80066c6:	d110      	bne.n	80066ea <_dtoa_r+0x6c2>
 80066c8:	4620      	mov	r0, r4
 80066ca:	ee18 1a10 	vmov	r1, s16
 80066ce:	f000 faf3 	bl	8006cb8 <_Bfree>
 80066d2:	2300      	movs	r3, #0
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	702b      	strb	r3, [r5, #0]
 80066d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066da:	3001      	adds	r0, #1
 80066dc:	6018      	str	r0, [r3, #0]
 80066de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f43f acf1 	beq.w	80060c8 <_dtoa_r+0xa0>
 80066e6:	601d      	str	r5, [r3, #0]
 80066e8:	e4ee      	b.n	80060c8 <_dtoa_r+0xa0>
 80066ea:	9f00      	ldr	r7, [sp, #0]
 80066ec:	462b      	mov	r3, r5
 80066ee:	461d      	mov	r5, r3
 80066f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066f4:	2a39      	cmp	r2, #57	; 0x39
 80066f6:	d106      	bne.n	8006706 <_dtoa_r+0x6de>
 80066f8:	9a01      	ldr	r2, [sp, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d1f7      	bne.n	80066ee <_dtoa_r+0x6c6>
 80066fe:	9901      	ldr	r1, [sp, #4]
 8006700:	2230      	movs	r2, #48	; 0x30
 8006702:	3701      	adds	r7, #1
 8006704:	700a      	strb	r2, [r1, #0]
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	3201      	adds	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e790      	b.n	8006630 <_dtoa_r+0x608>
 800670e:	4ba6      	ldr	r3, [pc, #664]	; (80069a8 <_dtoa_r+0x980>)
 8006710:	2200      	movs	r2, #0
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	f7fa f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8006722:	2800      	cmp	r0, #0
 8006724:	d09d      	beq.n	8006662 <_dtoa_r+0x63a>
 8006726:	e7cf      	b.n	80066c8 <_dtoa_r+0x6a0>
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	2a00      	cmp	r2, #0
 800672c:	f000 80d7 	beq.w	80068de <_dtoa_r+0x8b6>
 8006730:	9a06      	ldr	r2, [sp, #24]
 8006732:	2a01      	cmp	r2, #1
 8006734:	f300 80ba 	bgt.w	80068ac <_dtoa_r+0x884>
 8006738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800673a:	2a00      	cmp	r2, #0
 800673c:	f000 80b2 	beq.w	80068a4 <_dtoa_r+0x87c>
 8006740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006744:	9e07      	ldr	r6, [sp, #28]
 8006746:	9d04      	ldr	r5, [sp, #16]
 8006748:	9a04      	ldr	r2, [sp, #16]
 800674a:	441a      	add	r2, r3
 800674c:	9204      	str	r2, [sp, #16]
 800674e:	9a05      	ldr	r2, [sp, #20]
 8006750:	2101      	movs	r1, #1
 8006752:	441a      	add	r2, r3
 8006754:	4620      	mov	r0, r4
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	f000 fb66 	bl	8006e28 <__i2b>
 800675c:	4607      	mov	r7, r0
 800675e:	2d00      	cmp	r5, #0
 8006760:	dd0c      	ble.n	800677c <_dtoa_r+0x754>
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd09      	ble.n	800677c <_dtoa_r+0x754>
 8006768:	42ab      	cmp	r3, r5
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	bfa8      	it	ge
 800676e:	462b      	movge	r3, r5
 8006770:	1ad2      	subs	r2, r2, r3
 8006772:	9204      	str	r2, [sp, #16]
 8006774:	9a05      	ldr	r2, [sp, #20]
 8006776:	1aed      	subs	r5, r5, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	b31b      	cbz	r3, 80067c8 <_dtoa_r+0x7a0>
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80af 	beq.w	80068e6 <_dtoa_r+0x8be>
 8006788:	2e00      	cmp	r6, #0
 800678a:	dd13      	ble.n	80067b4 <_dtoa_r+0x78c>
 800678c:	4639      	mov	r1, r7
 800678e:	4632      	mov	r2, r6
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fc09 	bl	8006fa8 <__pow5mult>
 8006796:	ee18 2a10 	vmov	r2, s16
 800679a:	4601      	mov	r1, r0
 800679c:	4607      	mov	r7, r0
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 fb58 	bl	8006e54 <__multiply>
 80067a4:	ee18 1a10 	vmov	r1, s16
 80067a8:	4680      	mov	r8, r0
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fa84 	bl	8006cb8 <_Bfree>
 80067b0:	ee08 8a10 	vmov	s16, r8
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	1b9a      	subs	r2, r3, r6
 80067b8:	d006      	beq.n	80067c8 <_dtoa_r+0x7a0>
 80067ba:	ee18 1a10 	vmov	r1, s16
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fbf2 	bl	8006fa8 <__pow5mult>
 80067c4:	ee08 0a10 	vmov	s16, r0
 80067c8:	2101      	movs	r1, #1
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fb2c 	bl	8006e28 <__i2b>
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	4606      	mov	r6, r0
 80067d6:	f340 8088 	ble.w	80068ea <_dtoa_r+0x8c2>
 80067da:	461a      	mov	r2, r3
 80067dc:	4601      	mov	r1, r0
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fbe2 	bl	8006fa8 <__pow5mult>
 80067e4:	9b06      	ldr	r3, [sp, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	4606      	mov	r6, r0
 80067ea:	f340 8081 	ble.w	80068f0 <_dtoa_r+0x8c8>
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	6933      	ldr	r3, [r6, #16]
 80067f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067f8:	6918      	ldr	r0, [r3, #16]
 80067fa:	f000 fac5 	bl	8006d88 <__hi0bits>
 80067fe:	f1c0 0020 	rsb	r0, r0, #32
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	4418      	add	r0, r3
 8006806:	f010 001f 	ands.w	r0, r0, #31
 800680a:	f000 8092 	beq.w	8006932 <_dtoa_r+0x90a>
 800680e:	f1c0 0320 	rsb	r3, r0, #32
 8006812:	2b04      	cmp	r3, #4
 8006814:	f340 808a 	ble.w	800692c <_dtoa_r+0x904>
 8006818:	f1c0 001c 	rsb	r0, r0, #28
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	4403      	add	r3, r0
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9b05      	ldr	r3, [sp, #20]
 8006824:	4403      	add	r3, r0
 8006826:	4405      	add	r5, r0
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd07      	ble.n	8006840 <_dtoa_r+0x818>
 8006830:	ee18 1a10 	vmov	r1, s16
 8006834:	461a      	mov	r2, r3
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fc10 	bl	800705c <__lshift>
 800683c:	ee08 0a10 	vmov	s16, r0
 8006840:	9b05      	ldr	r3, [sp, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd05      	ble.n	8006852 <_dtoa_r+0x82a>
 8006846:	4631      	mov	r1, r6
 8006848:	461a      	mov	r2, r3
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fc06 	bl	800705c <__lshift>
 8006850:	4606      	mov	r6, r0
 8006852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d06e      	beq.n	8006936 <_dtoa_r+0x90e>
 8006858:	ee18 0a10 	vmov	r0, s16
 800685c:	4631      	mov	r1, r6
 800685e:	f000 fc6d 	bl	800713c <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	da67      	bge.n	8006936 <_dtoa_r+0x90e>
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	3b01      	subs	r3, #1
 800686a:	ee18 1a10 	vmov	r1, s16
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	220a      	movs	r2, #10
 8006872:	2300      	movs	r3, #0
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fa41 	bl	8006cfc <__multadd>
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	ee08 0a10 	vmov	s16, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 81b1 	beq.w	8006be8 <_dtoa_r+0xbc0>
 8006886:	2300      	movs	r3, #0
 8006888:	4639      	mov	r1, r7
 800688a:	220a      	movs	r2, #10
 800688c:	4620      	mov	r0, r4
 800688e:	f000 fa35 	bl	8006cfc <__multadd>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	4607      	mov	r7, r0
 8006898:	f300 808e 	bgt.w	80069b8 <_dtoa_r+0x990>
 800689c:	9b06      	ldr	r3, [sp, #24]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dc51      	bgt.n	8006946 <_dtoa_r+0x91e>
 80068a2:	e089      	b.n	80069b8 <_dtoa_r+0x990>
 80068a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068aa:	e74b      	b.n	8006744 <_dtoa_r+0x71c>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	1e5e      	subs	r6, r3, #1
 80068b0:	9b07      	ldr	r3, [sp, #28]
 80068b2:	42b3      	cmp	r3, r6
 80068b4:	bfbf      	itttt	lt
 80068b6:	9b07      	ldrlt	r3, [sp, #28]
 80068b8:	9607      	strlt	r6, [sp, #28]
 80068ba:	1af2      	sublt	r2, r6, r3
 80068bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068be:	bfb6      	itet	lt
 80068c0:	189b      	addlt	r3, r3, r2
 80068c2:	1b9e      	subge	r6, r3, r6
 80068c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	bfb8      	it	lt
 80068ca:	2600      	movlt	r6, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfb7      	itett	lt
 80068d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80068d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80068d8:	1a9d      	sublt	r5, r3, r2
 80068da:	2300      	movlt	r3, #0
 80068dc:	e734      	b.n	8006748 <_dtoa_r+0x720>
 80068de:	9e07      	ldr	r6, [sp, #28]
 80068e0:	9d04      	ldr	r5, [sp, #16]
 80068e2:	9f08      	ldr	r7, [sp, #32]
 80068e4:	e73b      	b.n	800675e <_dtoa_r+0x736>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	e767      	b.n	80067ba <_dtoa_r+0x792>
 80068ea:	9b06      	ldr	r3, [sp, #24]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	dc18      	bgt.n	8006922 <_dtoa_r+0x8fa>
 80068f0:	f1ba 0f00 	cmp.w	sl, #0
 80068f4:	d115      	bne.n	8006922 <_dtoa_r+0x8fa>
 80068f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068fa:	b993      	cbnz	r3, 8006922 <_dtoa_r+0x8fa>
 80068fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006900:	0d1b      	lsrs	r3, r3, #20
 8006902:	051b      	lsls	r3, r3, #20
 8006904:	b183      	cbz	r3, 8006928 <_dtoa_r+0x900>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	3301      	adds	r3, #1
 8006910:	9305      	str	r3, [sp, #20]
 8006912:	f04f 0801 	mov.w	r8, #1
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	f47f af6a 	bne.w	80067f2 <_dtoa_r+0x7ca>
 800691e:	2001      	movs	r0, #1
 8006920:	e76f      	b.n	8006802 <_dtoa_r+0x7da>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	e7f6      	b.n	8006916 <_dtoa_r+0x8ee>
 8006928:	4698      	mov	r8, r3
 800692a:	e7f4      	b.n	8006916 <_dtoa_r+0x8ee>
 800692c:	f43f af7d 	beq.w	800682a <_dtoa_r+0x802>
 8006930:	4618      	mov	r0, r3
 8006932:	301c      	adds	r0, #28
 8006934:	e772      	b.n	800681c <_dtoa_r+0x7f4>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dc37      	bgt.n	80069ac <_dtoa_r+0x984>
 800693c:	9b06      	ldr	r3, [sp, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dd34      	ble.n	80069ac <_dtoa_r+0x984>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	9302      	str	r3, [sp, #8]
 8006946:	9b02      	ldr	r3, [sp, #8]
 8006948:	b96b      	cbnz	r3, 8006966 <_dtoa_r+0x93e>
 800694a:	4631      	mov	r1, r6
 800694c:	2205      	movs	r2, #5
 800694e:	4620      	mov	r0, r4
 8006950:	f000 f9d4 	bl	8006cfc <__multadd>
 8006954:	4601      	mov	r1, r0
 8006956:	4606      	mov	r6, r0
 8006958:	ee18 0a10 	vmov	r0, s16
 800695c:	f000 fbee 	bl	800713c <__mcmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	f73f adbb 	bgt.w	80064dc <_dtoa_r+0x4b4>
 8006966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006968:	9d01      	ldr	r5, [sp, #4]
 800696a:	43db      	mvns	r3, r3
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	f04f 0800 	mov.w	r8, #0
 8006972:	4631      	mov	r1, r6
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f99f 	bl	8006cb8 <_Bfree>
 800697a:	2f00      	cmp	r7, #0
 800697c:	f43f aea4 	beq.w	80066c8 <_dtoa_r+0x6a0>
 8006980:	f1b8 0f00 	cmp.w	r8, #0
 8006984:	d005      	beq.n	8006992 <_dtoa_r+0x96a>
 8006986:	45b8      	cmp	r8, r7
 8006988:	d003      	beq.n	8006992 <_dtoa_r+0x96a>
 800698a:	4641      	mov	r1, r8
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f993 	bl	8006cb8 <_Bfree>
 8006992:	4639      	mov	r1, r7
 8006994:	4620      	mov	r0, r4
 8006996:	f000 f98f 	bl	8006cb8 <_Bfree>
 800699a:	e695      	b.n	80066c8 <_dtoa_r+0x6a0>
 800699c:	2600      	movs	r6, #0
 800699e:	4637      	mov	r7, r6
 80069a0:	e7e1      	b.n	8006966 <_dtoa_r+0x93e>
 80069a2:	9700      	str	r7, [sp, #0]
 80069a4:	4637      	mov	r7, r6
 80069a6:	e599      	b.n	80064dc <_dtoa_r+0x4b4>
 80069a8:	40240000 	.word	0x40240000
 80069ac:	9b08      	ldr	r3, [sp, #32]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80ca 	beq.w	8006b48 <_dtoa_r+0xb20>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	dd05      	ble.n	80069c8 <_dtoa_r+0x9a0>
 80069bc:	4639      	mov	r1, r7
 80069be:	462a      	mov	r2, r5
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fb4b 	bl	800705c <__lshift>
 80069c6:	4607      	mov	r7, r0
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	d05b      	beq.n	8006a86 <_dtoa_r+0xa5e>
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 f931 	bl	8006c38 <_Balloc>
 80069d6:	4605      	mov	r5, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <_dtoa_r+0x9be>
 80069da:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <_dtoa_r+0xbd0>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069e2:	f7ff bb3b 	b.w	800605c <_dtoa_r+0x34>
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	f107 010c 	add.w	r1, r7, #12
 80069f0:	300c      	adds	r0, #12
 80069f2:	f000 f913 	bl	8006c1c <memcpy>
 80069f6:	2201      	movs	r2, #1
 80069f8:	4629      	mov	r1, r5
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb2e 	bl	800705c <__lshift>
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	f103 0901 	add.w	r9, r3, #1
 8006a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	f00a 0301 	and.w	r3, sl, #1
 8006a12:	46b8      	mov	r8, r7
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	4607      	mov	r7, r0
 8006a18:	4631      	mov	r1, r6
 8006a1a:	ee18 0a10 	vmov	r0, s16
 8006a1e:	f7ff fa75 	bl	8005f0c <quorem>
 8006a22:	4641      	mov	r1, r8
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a2a:	ee18 0a10 	vmov	r0, s16
 8006a2e:	f000 fb85 	bl	800713c <__mcmp>
 8006a32:	463a      	mov	r2, r7
 8006a34:	9003      	str	r0, [sp, #12]
 8006a36:	4631      	mov	r1, r6
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fb9b 	bl	8007174 <__mdiff>
 8006a3e:	68c2      	ldr	r2, [r0, #12]
 8006a40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006a44:	4605      	mov	r5, r0
 8006a46:	bb02      	cbnz	r2, 8006a8a <_dtoa_r+0xa62>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	ee18 0a10 	vmov	r0, s16
 8006a4e:	f000 fb75 	bl	800713c <__mcmp>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4629      	mov	r1, r5
 8006a56:	4620      	mov	r0, r4
 8006a58:	9207      	str	r2, [sp, #28]
 8006a5a:	f000 f92d 	bl	8006cb8 <_Bfree>
 8006a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a62:	ea43 0102 	orr.w	r1, r3, r2
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	464d      	mov	r5, r9
 8006a6c:	d10f      	bne.n	8006a8e <_dtoa_r+0xa66>
 8006a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a72:	d02a      	beq.n	8006aca <_dtoa_r+0xaa2>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd02      	ble.n	8006a80 <_dtoa_r+0xa58>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a80:	f88b a000 	strb.w	sl, [fp]
 8006a84:	e775      	b.n	8006972 <_dtoa_r+0x94a>
 8006a86:	4638      	mov	r0, r7
 8006a88:	e7ba      	b.n	8006a00 <_dtoa_r+0x9d8>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	e7e2      	b.n	8006a54 <_dtoa_r+0xa2c>
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db04      	blt.n	8006a9e <_dtoa_r+0xa76>
 8006a94:	9906      	ldr	r1, [sp, #24]
 8006a96:	430b      	orrs	r3, r1
 8006a98:	9904      	ldr	r1, [sp, #16]
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	d122      	bne.n	8006ae4 <_dtoa_r+0xabc>
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	ddee      	ble.n	8006a80 <_dtoa_r+0xa58>
 8006aa2:	ee18 1a10 	vmov	r1, s16
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fad7 	bl	800705c <__lshift>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	ee08 0a10 	vmov	s16, r0
 8006ab4:	f000 fb42 	bl	800713c <__mcmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	dc03      	bgt.n	8006ac4 <_dtoa_r+0xa9c>
 8006abc:	d1e0      	bne.n	8006a80 <_dtoa_r+0xa58>
 8006abe:	f01a 0f01 	tst.w	sl, #1
 8006ac2:	d0dd      	beq.n	8006a80 <_dtoa_r+0xa58>
 8006ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ac8:	d1d7      	bne.n	8006a7a <_dtoa_r+0xa52>
 8006aca:	2339      	movs	r3, #57	; 0x39
 8006acc:	f88b 3000 	strb.w	r3, [fp]
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ada:	2a39      	cmp	r2, #57	; 0x39
 8006adc:	d071      	beq.n	8006bc2 <_dtoa_r+0xb9a>
 8006ade:	3201      	adds	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e746      	b.n	8006972 <_dtoa_r+0x94a>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	dd07      	ble.n	8006af8 <_dtoa_r+0xad0>
 8006ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aec:	d0ed      	beq.n	8006aca <_dtoa_r+0xaa2>
 8006aee:	f10a 0301 	add.w	r3, sl, #1
 8006af2:	f88b 3000 	strb.w	r3, [fp]
 8006af6:	e73c      	b.n	8006972 <_dtoa_r+0x94a>
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006afe:	4599      	cmp	r9, r3
 8006b00:	d047      	beq.n	8006b92 <_dtoa_r+0xb6a>
 8006b02:	ee18 1a10 	vmov	r1, s16
 8006b06:	2300      	movs	r3, #0
 8006b08:	220a      	movs	r2, #10
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f8f6 	bl	8006cfc <__multadd>
 8006b10:	45b8      	cmp	r8, r7
 8006b12:	ee08 0a10 	vmov	s16, r0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	f04f 020a 	mov.w	r2, #10
 8006b1e:	4641      	mov	r1, r8
 8006b20:	4620      	mov	r0, r4
 8006b22:	d106      	bne.n	8006b32 <_dtoa_r+0xb0a>
 8006b24:	f000 f8ea 	bl	8006cfc <__multadd>
 8006b28:	4680      	mov	r8, r0
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	e772      	b.n	8006a18 <_dtoa_r+0x9f0>
 8006b32:	f000 f8e3 	bl	8006cfc <__multadd>
 8006b36:	4639      	mov	r1, r7
 8006b38:	4680      	mov	r8, r0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	220a      	movs	r2, #10
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f8dc 	bl	8006cfc <__multadd>
 8006b44:	4607      	mov	r7, r0
 8006b46:	e7f1      	b.n	8006b2c <_dtoa_r+0xb04>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	9d01      	ldr	r5, [sp, #4]
 8006b4e:	ee18 0a10 	vmov	r0, s16
 8006b52:	4631      	mov	r1, r6
 8006b54:	f7ff f9da 	bl	8005f0c <quorem>
 8006b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006b62:	1aea      	subs	r2, r5, r3
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	dd09      	ble.n	8006b7e <_dtoa_r+0xb56>
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	220a      	movs	r2, #10
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f8c2 	bl	8006cfc <__multadd>
 8006b78:	ee08 0a10 	vmov	s16, r0
 8006b7c:	e7e7      	b.n	8006b4e <_dtoa_r+0xb26>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bfc8      	it	gt
 8006b84:	461d      	movgt	r5, r3
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	bfd8      	it	le
 8006b8a:	2501      	movle	r5, #1
 8006b8c:	441d      	add	r5, r3
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	ee18 1a10 	vmov	r1, s16
 8006b96:	2201      	movs	r2, #1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fa5f 	bl	800705c <__lshift>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	ee08 0a10 	vmov	s16, r0
 8006ba4:	f000 faca 	bl	800713c <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dc91      	bgt.n	8006ad0 <_dtoa_r+0xaa8>
 8006bac:	d102      	bne.n	8006bb4 <_dtoa_r+0xb8c>
 8006bae:	f01a 0f01 	tst.w	sl, #1
 8006bb2:	d18d      	bne.n	8006ad0 <_dtoa_r+0xaa8>
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bbc:	2a30      	cmp	r2, #48	; 0x30
 8006bbe:	d0fa      	beq.n	8006bb6 <_dtoa_r+0xb8e>
 8006bc0:	e6d7      	b.n	8006972 <_dtoa_r+0x94a>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d184      	bne.n	8006ad2 <_dtoa_r+0xaaa>
 8006bc8:	9b00      	ldr	r3, [sp, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2331      	movs	r3, #49	; 0x31
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	e6ce      	b.n	8006972 <_dtoa_r+0x94a>
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <_dtoa_r+0xbd4>)
 8006bd6:	f7ff ba95 	b.w	8006104 <_dtoa_r+0xdc>
 8006bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f aa6e 	bne.w	80060be <_dtoa_r+0x96>
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <_dtoa_r+0xbd8>)
 8006be4:	f7ff ba8e 	b.w	8006104 <_dtoa_r+0xdc>
 8006be8:	9b02      	ldr	r3, [sp, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dcae      	bgt.n	8006b4c <_dtoa_r+0xb24>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	f73f aea8 	bgt.w	8006946 <_dtoa_r+0x91e>
 8006bf6:	e7a9      	b.n	8006b4c <_dtoa_r+0xb24>
 8006bf8:	080088bb 	.word	0x080088bb
 8006bfc:	08008818 	.word	0x08008818
 8006c00:	0800883c 	.word	0x0800883c

08006c04 <_localeconv_r>:
 8006c04:	4800      	ldr	r0, [pc, #0]	; (8006c08 <_localeconv_r+0x4>)
 8006c06:	4770      	bx	lr
 8006c08:	200001a4 	.word	0x200001a4

08006c0c <malloc>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <malloc+0xc>)
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f000 bc17 	b.w	8007444 <_malloc_r>
 8006c16:	bf00      	nop
 8006c18:	20000050 	.word	0x20000050

08006c1c <memcpy>:
 8006c1c:	440a      	add	r2, r1
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c24:	d100      	bne.n	8006c28 <memcpy+0xc>
 8006c26:	4770      	bx	lr
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c32:	4291      	cmp	r1, r2
 8006c34:	d1f9      	bne.n	8006c2a <memcpy+0xe>
 8006c36:	bd10      	pop	{r4, pc}

08006c38 <_Balloc>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	b976      	cbnz	r6, 8006c60 <_Balloc+0x28>
 8006c42:	2010      	movs	r0, #16
 8006c44:	f7ff ffe2 	bl	8006c0c <malloc>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c4c:	b920      	cbnz	r0, 8006c58 <_Balloc+0x20>
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <_Balloc+0x78>)
 8006c50:	4818      	ldr	r0, [pc, #96]	; (8006cb4 <_Balloc+0x7c>)
 8006c52:	2166      	movs	r1, #102	; 0x66
 8006c54:	f000 fdd6 	bl	8007804 <__assert_func>
 8006c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c5c:	6006      	str	r6, [r0, #0]
 8006c5e:	60c6      	str	r6, [r0, #12]
 8006c60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c62:	68f3      	ldr	r3, [r6, #12]
 8006c64:	b183      	cbz	r3, 8006c88 <_Balloc+0x50>
 8006c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c6e:	b9b8      	cbnz	r0, 8006ca0 <_Balloc+0x68>
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f605 	lsl.w	r6, r1, r5
 8006c76:	1d72      	adds	r2, r6, #5
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fb60 	bl	8007340 <_calloc_r>
 8006c80:	b160      	cbz	r0, 8006c9c <_Balloc+0x64>
 8006c82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c86:	e00e      	b.n	8006ca6 <_Balloc+0x6e>
 8006c88:	2221      	movs	r2, #33	; 0x21
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fb57 	bl	8007340 <_calloc_r>
 8006c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c94:	60f0      	str	r0, [r6, #12]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e4      	bne.n	8006c66 <_Balloc+0x2e>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	6802      	ldr	r2, [r0, #0]
 8006ca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cac:	e7f7      	b.n	8006c9e <_Balloc+0x66>
 8006cae:	bf00      	nop
 8006cb0:	08008849 	.word	0x08008849
 8006cb4:	080088cc 	.word	0x080088cc

08006cb8 <_Bfree>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	b976      	cbnz	r6, 8006ce0 <_Bfree+0x28>
 8006cc2:	2010      	movs	r0, #16
 8006cc4:	f7ff ffa2 	bl	8006c0c <malloc>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6268      	str	r0, [r5, #36]	; 0x24
 8006ccc:	b920      	cbnz	r0, 8006cd8 <_Bfree+0x20>
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <_Bfree+0x3c>)
 8006cd0:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <_Bfree+0x40>)
 8006cd2:	218a      	movs	r1, #138	; 0x8a
 8006cd4:	f000 fd96 	bl	8007804 <__assert_func>
 8006cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cdc:	6006      	str	r6, [r0, #0]
 8006cde:	60c6      	str	r6, [r0, #12]
 8006ce0:	b13c      	cbz	r4, 8006cf2 <_Bfree+0x3a>
 8006ce2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ce4:	6862      	ldr	r2, [r4, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cec:	6021      	str	r1, [r4, #0]
 8006cee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	08008849 	.word	0x08008849
 8006cf8:	080088cc 	.word	0x080088cc

08006cfc <__multadd>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	690d      	ldr	r5, [r1, #16]
 8006d02:	4607      	mov	r7, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	461e      	mov	r6, r3
 8006d08:	f101 0c14 	add.w	ip, r1, #20
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d12:	b299      	uxth	r1, r3
 8006d14:	fb02 6101 	mla	r1, r2, r1, r6
 8006d18:	0c1e      	lsrs	r6, r3, #16
 8006d1a:	0c0b      	lsrs	r3, r1, #16
 8006d1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d20:	b289      	uxth	r1, r1
 8006d22:	3001      	adds	r0, #1
 8006d24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d28:	4285      	cmp	r5, r0
 8006d2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d32:	dcec      	bgt.n	8006d0e <__multadd+0x12>
 8006d34:	b30e      	cbz	r6, 8006d7a <__multadd+0x7e>
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dc19      	bgt.n	8006d70 <__multadd+0x74>
 8006d3c:	6861      	ldr	r1, [r4, #4]
 8006d3e:	4638      	mov	r0, r7
 8006d40:	3101      	adds	r1, #1
 8006d42:	f7ff ff79 	bl	8006c38 <_Balloc>
 8006d46:	4680      	mov	r8, r0
 8006d48:	b928      	cbnz	r0, 8006d56 <__multadd+0x5a>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <__multadd+0x84>)
 8006d4e:	480d      	ldr	r0, [pc, #52]	; (8006d84 <__multadd+0x88>)
 8006d50:	21b5      	movs	r1, #181	; 0xb5
 8006d52:	f000 fd57 	bl	8007804 <__assert_func>
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	3202      	adds	r2, #2
 8006d5a:	f104 010c 	add.w	r1, r4, #12
 8006d5e:	0092      	lsls	r2, r2, #2
 8006d60:	300c      	adds	r0, #12
 8006d62:	f7ff ff5b 	bl	8006c1c <memcpy>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff ffa5 	bl	8006cb8 <_Bfree>
 8006d6e:	4644      	mov	r4, r8
 8006d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d74:	3501      	adds	r5, #1
 8006d76:	615e      	str	r6, [r3, #20]
 8006d78:	6125      	str	r5, [r4, #16]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	080088bb 	.word	0x080088bb
 8006d84:	080088cc 	.word	0x080088cc

08006d88 <__hi0bits>:
 8006d88:	0c03      	lsrs	r3, r0, #16
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	b9d3      	cbnz	r3, 8006dc4 <__hi0bits+0x3c>
 8006d8e:	0400      	lsls	r0, r0, #16
 8006d90:	2310      	movs	r3, #16
 8006d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d96:	bf04      	itt	eq
 8006d98:	0200      	lsleq	r0, r0, #8
 8006d9a:	3308      	addeq	r3, #8
 8006d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006da0:	bf04      	itt	eq
 8006da2:	0100      	lsleq	r0, r0, #4
 8006da4:	3304      	addeq	r3, #4
 8006da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006daa:	bf04      	itt	eq
 8006dac:	0080      	lsleq	r0, r0, #2
 8006dae:	3302      	addeq	r3, #2
 8006db0:	2800      	cmp	r0, #0
 8006db2:	db05      	blt.n	8006dc0 <__hi0bits+0x38>
 8006db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006db8:	f103 0301 	add.w	r3, r3, #1
 8006dbc:	bf08      	it	eq
 8006dbe:	2320      	moveq	r3, #32
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	4770      	bx	lr
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e7e4      	b.n	8006d92 <__hi0bits+0xa>

08006dc8 <__lo0bits>:
 8006dc8:	6803      	ldr	r3, [r0, #0]
 8006dca:	f013 0207 	ands.w	r2, r3, #7
 8006dce:	4601      	mov	r1, r0
 8006dd0:	d00b      	beq.n	8006dea <__lo0bits+0x22>
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d423      	bmi.n	8006e1e <__lo0bits+0x56>
 8006dd6:	0798      	lsls	r0, r3, #30
 8006dd8:	bf49      	itett	mi
 8006dda:	085b      	lsrmi	r3, r3, #1
 8006ddc:	089b      	lsrpl	r3, r3, #2
 8006dde:	2001      	movmi	r0, #1
 8006de0:	600b      	strmi	r3, [r1, #0]
 8006de2:	bf5c      	itt	pl
 8006de4:	600b      	strpl	r3, [r1, #0]
 8006de6:	2002      	movpl	r0, #2
 8006de8:	4770      	bx	lr
 8006dea:	b298      	uxth	r0, r3
 8006dec:	b9a8      	cbnz	r0, 8006e1a <__lo0bits+0x52>
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	2010      	movs	r0, #16
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	b90a      	cbnz	r2, 8006dfa <__lo0bits+0x32>
 8006df6:	3008      	adds	r0, #8
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	071a      	lsls	r2, r3, #28
 8006dfc:	bf04      	itt	eq
 8006dfe:	091b      	lsreq	r3, r3, #4
 8006e00:	3004      	addeq	r0, #4
 8006e02:	079a      	lsls	r2, r3, #30
 8006e04:	bf04      	itt	eq
 8006e06:	089b      	lsreq	r3, r3, #2
 8006e08:	3002      	addeq	r0, #2
 8006e0a:	07da      	lsls	r2, r3, #31
 8006e0c:	d403      	bmi.n	8006e16 <__lo0bits+0x4e>
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	f100 0001 	add.w	r0, r0, #1
 8006e14:	d005      	beq.n	8006e22 <__lo0bits+0x5a>
 8006e16:	600b      	str	r3, [r1, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7e9      	b.n	8006df2 <__lo0bits+0x2a>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
 8006e22:	2020      	movs	r0, #32
 8006e24:	4770      	bx	lr
	...

08006e28 <__i2b>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	f7ff ff03 	bl	8006c38 <_Balloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <__i2b+0x1a>
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <__i2b+0x24>)
 8006e38:	4805      	ldr	r0, [pc, #20]	; (8006e50 <__i2b+0x28>)
 8006e3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e3e:	f000 fce1 	bl	8007804 <__assert_func>
 8006e42:	2301      	movs	r3, #1
 8006e44:	6144      	str	r4, [r0, #20]
 8006e46:	6103      	str	r3, [r0, #16]
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	080088bb 	.word	0x080088bb
 8006e50:	080088cc 	.word	0x080088cc

08006e54 <__multiply>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4691      	mov	r9, r2
 8006e5a:	690a      	ldr	r2, [r1, #16]
 8006e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bfb8      	it	lt
 8006e64:	460b      	movlt	r3, r1
 8006e66:	460c      	mov	r4, r1
 8006e68:	bfbc      	itt	lt
 8006e6a:	464c      	movlt	r4, r9
 8006e6c:	4699      	movlt	r9, r3
 8006e6e:	6927      	ldr	r7, [r4, #16]
 8006e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6861      	ldr	r1, [r4, #4]
 8006e78:	eb07 060a 	add.w	r6, r7, sl
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	b085      	sub	sp, #20
 8006e80:	bfb8      	it	lt
 8006e82:	3101      	addlt	r1, #1
 8006e84:	f7ff fed8 	bl	8006c38 <_Balloc>
 8006e88:	b930      	cbnz	r0, 8006e98 <__multiply+0x44>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b44      	ldr	r3, [pc, #272]	; (8006fa0 <__multiply+0x14c>)
 8006e8e:	4845      	ldr	r0, [pc, #276]	; (8006fa4 <__multiply+0x150>)
 8006e90:	f240 115d 	movw	r1, #349	; 0x15d
 8006e94:	f000 fcb6 	bl	8007804 <__assert_func>
 8006e98:	f100 0514 	add.w	r5, r0, #20
 8006e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	d321      	bcc.n	8006eec <__multiply+0x98>
 8006ea8:	f104 0314 	add.w	r3, r4, #20
 8006eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006eb0:	f109 0314 	add.w	r3, r9, #20
 8006eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006eb8:	9202      	str	r2, [sp, #8]
 8006eba:	1b3a      	subs	r2, r7, r4
 8006ebc:	3a15      	subs	r2, #21
 8006ebe:	f022 0203 	bic.w	r2, r2, #3
 8006ec2:	3204      	adds	r2, #4
 8006ec4:	f104 0115 	add.w	r1, r4, #21
 8006ec8:	428f      	cmp	r7, r1
 8006eca:	bf38      	it	cc
 8006ecc:	2204      	movcc	r2, #4
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	9a02      	ldr	r2, [sp, #8]
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d80c      	bhi.n	8006ef2 <__multiply+0x9e>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	dd03      	ble.n	8006ee4 <__multiply+0x90>
 8006edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d05a      	beq.n	8006f9a <__multiply+0x146>
 8006ee4:	6106      	str	r6, [r0, #16]
 8006ee6:	b005      	add	sp, #20
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	f843 2b04 	str.w	r2, [r3], #4
 8006ef0:	e7d8      	b.n	8006ea4 <__multiply+0x50>
 8006ef2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ef6:	f1ba 0f00 	cmp.w	sl, #0
 8006efa:	d024      	beq.n	8006f46 <__multiply+0xf2>
 8006efc:	f104 0e14 	add.w	lr, r4, #20
 8006f00:	46a9      	mov	r9, r5
 8006f02:	f04f 0c00 	mov.w	ip, #0
 8006f06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f0a:	f8d9 1000 	ldr.w	r1, [r9]
 8006f0e:	fa1f fb82 	uxth.w	fp, r2
 8006f12:	b289      	uxth	r1, r1
 8006f14:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f20:	4461      	add	r1, ip
 8006f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f26:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f2e:	b289      	uxth	r1, r1
 8006f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f34:	4577      	cmp	r7, lr
 8006f36:	f849 1b04 	str.w	r1, [r9], #4
 8006f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f3e:	d8e2      	bhi.n	8006f06 <__multiply+0xb2>
 8006f40:	9a01      	ldr	r2, [sp, #4]
 8006f42:	f845 c002 	str.w	ip, [r5, r2]
 8006f46:	9a03      	ldr	r2, [sp, #12]
 8006f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	f1b9 0f00 	cmp.w	r9, #0
 8006f52:	d020      	beq.n	8006f96 <__multiply+0x142>
 8006f54:	6829      	ldr	r1, [r5, #0]
 8006f56:	f104 0c14 	add.w	ip, r4, #20
 8006f5a:	46ae      	mov	lr, r5
 8006f5c:	f04f 0a00 	mov.w	sl, #0
 8006f60:	f8bc b000 	ldrh.w	fp, [ip]
 8006f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f68:	fb09 220b 	mla	r2, r9, fp, r2
 8006f6c:	4492      	add	sl, r2
 8006f6e:	b289      	uxth	r1, r1
 8006f70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f74:	f84e 1b04 	str.w	r1, [lr], #4
 8006f78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f7c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f80:	0c12      	lsrs	r2, r2, #16
 8006f82:	fb09 1102 	mla	r1, r9, r2, r1
 8006f86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f8a:	4567      	cmp	r7, ip
 8006f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f90:	d8e6      	bhi.n	8006f60 <__multiply+0x10c>
 8006f92:	9a01      	ldr	r2, [sp, #4]
 8006f94:	50a9      	str	r1, [r5, r2]
 8006f96:	3504      	adds	r5, #4
 8006f98:	e79a      	b.n	8006ed0 <__multiply+0x7c>
 8006f9a:	3e01      	subs	r6, #1
 8006f9c:	e79c      	b.n	8006ed8 <__multiply+0x84>
 8006f9e:	bf00      	nop
 8006fa0:	080088bb 	.word	0x080088bb
 8006fa4:	080088cc 	.word	0x080088cc

08006fa8 <__pow5mult>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4615      	mov	r5, r2
 8006fae:	f012 0203 	ands.w	r2, r2, #3
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	d007      	beq.n	8006fc8 <__pow5mult+0x20>
 8006fb8:	4c25      	ldr	r4, [pc, #148]	; (8007050 <__pow5mult+0xa8>)
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fc2:	f7ff fe9b 	bl	8006cfc <__multadd>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	10ad      	asrs	r5, r5, #2
 8006fca:	d03d      	beq.n	8007048 <__pow5mult+0xa0>
 8006fcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fce:	b97c      	cbnz	r4, 8006ff0 <__pow5mult+0x48>
 8006fd0:	2010      	movs	r0, #16
 8006fd2:	f7ff fe1b 	bl	8006c0c <malloc>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8006fda:	b928      	cbnz	r0, 8006fe8 <__pow5mult+0x40>
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <__pow5mult+0xac>)
 8006fde:	481e      	ldr	r0, [pc, #120]	; (8007058 <__pow5mult+0xb0>)
 8006fe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fe4:	f000 fc0e 	bl	8007804 <__assert_func>
 8006fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fec:	6004      	str	r4, [r0, #0]
 8006fee:	60c4      	str	r4, [r0, #12]
 8006ff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ff8:	b94c      	cbnz	r4, 800700e <__pow5mult+0x66>
 8006ffa:	f240 2171 	movw	r1, #625	; 0x271
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff ff12 	bl	8006e28 <__i2b>
 8007004:	2300      	movs	r3, #0
 8007006:	f8c8 0008 	str.w	r0, [r8, #8]
 800700a:	4604      	mov	r4, r0
 800700c:	6003      	str	r3, [r0, #0]
 800700e:	f04f 0900 	mov.w	r9, #0
 8007012:	07eb      	lsls	r3, r5, #31
 8007014:	d50a      	bpl.n	800702c <__pow5mult+0x84>
 8007016:	4639      	mov	r1, r7
 8007018:	4622      	mov	r2, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ff1a 	bl	8006e54 <__multiply>
 8007020:	4639      	mov	r1, r7
 8007022:	4680      	mov	r8, r0
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fe47 	bl	8006cb8 <_Bfree>
 800702a:	4647      	mov	r7, r8
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	d00b      	beq.n	8007048 <__pow5mult+0xa0>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	b938      	cbnz	r0, 8007044 <__pow5mult+0x9c>
 8007034:	4622      	mov	r2, r4
 8007036:	4621      	mov	r1, r4
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ff0b 	bl	8006e54 <__multiply>
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f8c0 9000 	str.w	r9, [r0]
 8007044:	4604      	mov	r4, r0
 8007046:	e7e4      	b.n	8007012 <__pow5mult+0x6a>
 8007048:	4638      	mov	r0, r7
 800704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704e:	bf00      	nop
 8007050:	08008a18 	.word	0x08008a18
 8007054:	08008849 	.word	0x08008849
 8007058:	080088cc 	.word	0x080088cc

0800705c <__lshift>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	6849      	ldr	r1, [r1, #4]
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	4607      	mov	r7, r0
 800706e:	4691      	mov	r9, r2
 8007070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007074:	f108 0601 	add.w	r6, r8, #1
 8007078:	42b3      	cmp	r3, r6
 800707a:	db0b      	blt.n	8007094 <__lshift+0x38>
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff fddb 	bl	8006c38 <_Balloc>
 8007082:	4605      	mov	r5, r0
 8007084:	b948      	cbnz	r0, 800709a <__lshift+0x3e>
 8007086:	4602      	mov	r2, r0
 8007088:	4b2a      	ldr	r3, [pc, #168]	; (8007134 <__lshift+0xd8>)
 800708a:	482b      	ldr	r0, [pc, #172]	; (8007138 <__lshift+0xdc>)
 800708c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007090:	f000 fbb8 	bl	8007804 <__assert_func>
 8007094:	3101      	adds	r1, #1
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	e7ee      	b.n	8007078 <__lshift+0x1c>
 800709a:	2300      	movs	r3, #0
 800709c:	f100 0114 	add.w	r1, r0, #20
 80070a0:	f100 0210 	add.w	r2, r0, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	4553      	cmp	r3, sl
 80070a8:	db37      	blt.n	800711a <__lshift+0xbe>
 80070aa:	6920      	ldr	r0, [r4, #16]
 80070ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b0:	f104 0314 	add.w	r3, r4, #20
 80070b4:	f019 091f 	ands.w	r9, r9, #31
 80070b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070c0:	d02f      	beq.n	8007122 <__lshift+0xc6>
 80070c2:	f1c9 0e20 	rsb	lr, r9, #32
 80070c6:	468a      	mov	sl, r1
 80070c8:	f04f 0c00 	mov.w	ip, #0
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	fa02 f209 	lsl.w	r2, r2, r9
 80070d2:	ea42 020c 	orr.w	r2, r2, ip
 80070d6:	f84a 2b04 	str.w	r2, [sl], #4
 80070da:	f853 2b04 	ldr.w	r2, [r3], #4
 80070de:	4298      	cmp	r0, r3
 80070e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070e4:	d8f2      	bhi.n	80070cc <__lshift+0x70>
 80070e6:	1b03      	subs	r3, r0, r4
 80070e8:	3b15      	subs	r3, #21
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	3304      	adds	r3, #4
 80070f0:	f104 0215 	add.w	r2, r4, #21
 80070f4:	4290      	cmp	r0, r2
 80070f6:	bf38      	it	cc
 80070f8:	2304      	movcc	r3, #4
 80070fa:	f841 c003 	str.w	ip, [r1, r3]
 80070fe:	f1bc 0f00 	cmp.w	ip, #0
 8007102:	d001      	beq.n	8007108 <__lshift+0xac>
 8007104:	f108 0602 	add.w	r6, r8, #2
 8007108:	3e01      	subs	r6, #1
 800710a:	4638      	mov	r0, r7
 800710c:	612e      	str	r6, [r5, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	f7ff fdd2 	bl	8006cb8 <_Bfree>
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	f842 0f04 	str.w	r0, [r2, #4]!
 800711e:	3301      	adds	r3, #1
 8007120:	e7c1      	b.n	80070a6 <__lshift+0x4a>
 8007122:	3904      	subs	r1, #4
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	f841 2f04 	str.w	r2, [r1, #4]!
 800712c:	4298      	cmp	r0, r3
 800712e:	d8f9      	bhi.n	8007124 <__lshift+0xc8>
 8007130:	e7ea      	b.n	8007108 <__lshift+0xac>
 8007132:	bf00      	nop
 8007134:	080088bb 	.word	0x080088bb
 8007138:	080088cc 	.word	0x080088cc

0800713c <__mcmp>:
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	6902      	ldr	r2, [r0, #16]
 8007140:	690c      	ldr	r4, [r1, #16]
 8007142:	1b12      	subs	r2, r2, r4
 8007144:	d10e      	bne.n	8007164 <__mcmp+0x28>
 8007146:	f100 0314 	add.w	r3, r0, #20
 800714a:	3114      	adds	r1, #20
 800714c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800715c:	42a5      	cmp	r5, r4
 800715e:	d003      	beq.n	8007168 <__mcmp+0x2c>
 8007160:	d305      	bcc.n	800716e <__mcmp+0x32>
 8007162:	2201      	movs	r2, #1
 8007164:	4610      	mov	r0, r2
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	4283      	cmp	r3, r0
 800716a:	d3f3      	bcc.n	8007154 <__mcmp+0x18>
 800716c:	e7fa      	b.n	8007164 <__mcmp+0x28>
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	e7f7      	b.n	8007164 <__mcmp+0x28>

08007174 <__mdiff>:
 8007174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	460c      	mov	r4, r1
 800717a:	4606      	mov	r6, r0
 800717c:	4611      	mov	r1, r2
 800717e:	4620      	mov	r0, r4
 8007180:	4690      	mov	r8, r2
 8007182:	f7ff ffdb 	bl	800713c <__mcmp>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d110      	bne.n	80071ac <__mdiff+0x38>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fd53 	bl	8006c38 <_Balloc>
 8007192:	b930      	cbnz	r0, 80071a2 <__mdiff+0x2e>
 8007194:	4b3a      	ldr	r3, [pc, #232]	; (8007280 <__mdiff+0x10c>)
 8007196:	4602      	mov	r2, r0
 8007198:	f240 2132 	movw	r1, #562	; 0x232
 800719c:	4839      	ldr	r0, [pc, #228]	; (8007284 <__mdiff+0x110>)
 800719e:	f000 fb31 	bl	8007804 <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	bfa4      	itt	ge
 80071ae:	4643      	movge	r3, r8
 80071b0:	46a0      	movge	r8, r4
 80071b2:	4630      	mov	r0, r6
 80071b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071b8:	bfa6      	itte	ge
 80071ba:	461c      	movge	r4, r3
 80071bc:	2500      	movge	r5, #0
 80071be:	2501      	movlt	r5, #1
 80071c0:	f7ff fd3a 	bl	8006c38 <_Balloc>
 80071c4:	b920      	cbnz	r0, 80071d0 <__mdiff+0x5c>
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <__mdiff+0x10c>)
 80071c8:	4602      	mov	r2, r0
 80071ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071ce:	e7e5      	b.n	800719c <__mdiff+0x28>
 80071d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071d4:	6926      	ldr	r6, [r4, #16]
 80071d6:	60c5      	str	r5, [r0, #12]
 80071d8:	f104 0914 	add.w	r9, r4, #20
 80071dc:	f108 0514 	add.w	r5, r8, #20
 80071e0:	f100 0e14 	add.w	lr, r0, #20
 80071e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071ec:	f108 0210 	add.w	r2, r8, #16
 80071f0:	46f2      	mov	sl, lr
 80071f2:	2100      	movs	r1, #0
 80071f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071fc:	fa1f f883 	uxth.w	r8, r3
 8007200:	fa11 f18b 	uxtah	r1, r1, fp
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	eba1 0808 	sub.w	r8, r1, r8
 800720a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800720e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007212:	fa1f f888 	uxth.w	r8, r8
 8007216:	1419      	asrs	r1, r3, #16
 8007218:	454e      	cmp	r6, r9
 800721a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800721e:	f84a 3b04 	str.w	r3, [sl], #4
 8007222:	d8e7      	bhi.n	80071f4 <__mdiff+0x80>
 8007224:	1b33      	subs	r3, r6, r4
 8007226:	3b15      	subs	r3, #21
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	3304      	adds	r3, #4
 800722e:	3415      	adds	r4, #21
 8007230:	42a6      	cmp	r6, r4
 8007232:	bf38      	it	cc
 8007234:	2304      	movcc	r3, #4
 8007236:	441d      	add	r5, r3
 8007238:	4473      	add	r3, lr
 800723a:	469e      	mov	lr, r3
 800723c:	462e      	mov	r6, r5
 800723e:	4566      	cmp	r6, ip
 8007240:	d30e      	bcc.n	8007260 <__mdiff+0xec>
 8007242:	f10c 0203 	add.w	r2, ip, #3
 8007246:	1b52      	subs	r2, r2, r5
 8007248:	f022 0203 	bic.w	r2, r2, #3
 800724c:	3d03      	subs	r5, #3
 800724e:	45ac      	cmp	ip, r5
 8007250:	bf38      	it	cc
 8007252:	2200      	movcc	r2, #0
 8007254:	441a      	add	r2, r3
 8007256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800725a:	b17b      	cbz	r3, 800727c <__mdiff+0x108>
 800725c:	6107      	str	r7, [r0, #16]
 800725e:	e7a3      	b.n	80071a8 <__mdiff+0x34>
 8007260:	f856 8b04 	ldr.w	r8, [r6], #4
 8007264:	fa11 f288 	uxtah	r2, r1, r8
 8007268:	1414      	asrs	r4, r2, #16
 800726a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800726e:	b292      	uxth	r2, r2
 8007270:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007274:	f84e 2b04 	str.w	r2, [lr], #4
 8007278:	1421      	asrs	r1, r4, #16
 800727a:	e7e0      	b.n	800723e <__mdiff+0xca>
 800727c:	3f01      	subs	r7, #1
 800727e:	e7ea      	b.n	8007256 <__mdiff+0xe2>
 8007280:	080088bb 	.word	0x080088bb
 8007284:	080088cc 	.word	0x080088cc

08007288 <__d2b>:
 8007288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800728c:	4689      	mov	r9, r1
 800728e:	2101      	movs	r1, #1
 8007290:	ec57 6b10 	vmov	r6, r7, d0
 8007294:	4690      	mov	r8, r2
 8007296:	f7ff fccf 	bl	8006c38 <_Balloc>
 800729a:	4604      	mov	r4, r0
 800729c:	b930      	cbnz	r0, 80072ac <__d2b+0x24>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <__d2b+0xb0>)
 80072a2:	4826      	ldr	r0, [pc, #152]	; (800733c <__d2b+0xb4>)
 80072a4:	f240 310a 	movw	r1, #778	; 0x30a
 80072a8:	f000 faac 	bl	8007804 <__assert_func>
 80072ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072b4:	bb35      	cbnz	r5, 8007304 <__d2b+0x7c>
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	d028      	beq.n	800730e <__d2b+0x86>
 80072bc:	4668      	mov	r0, sp
 80072be:	9600      	str	r6, [sp, #0]
 80072c0:	f7ff fd82 	bl	8006dc8 <__lo0bits>
 80072c4:	9900      	ldr	r1, [sp, #0]
 80072c6:	b300      	cbz	r0, 800730a <__d2b+0x82>
 80072c8:	9a01      	ldr	r2, [sp, #4]
 80072ca:	f1c0 0320 	rsb	r3, r0, #32
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	430b      	orrs	r3, r1
 80072d4:	40c2      	lsrs	r2, r0
 80072d6:	6163      	str	r3, [r4, #20]
 80072d8:	9201      	str	r2, [sp, #4]
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	61a3      	str	r3, [r4, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bf14      	ite	ne
 80072e2:	2202      	movne	r2, #2
 80072e4:	2201      	moveq	r2, #1
 80072e6:	6122      	str	r2, [r4, #16]
 80072e8:	b1d5      	cbz	r5, 8007320 <__d2b+0x98>
 80072ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072ee:	4405      	add	r5, r0
 80072f0:	f8c9 5000 	str.w	r5, [r9]
 80072f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072f8:	f8c8 0000 	str.w	r0, [r8]
 80072fc:	4620      	mov	r0, r4
 80072fe:	b003      	add	sp, #12
 8007300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007308:	e7d5      	b.n	80072b6 <__d2b+0x2e>
 800730a:	6161      	str	r1, [r4, #20]
 800730c:	e7e5      	b.n	80072da <__d2b+0x52>
 800730e:	a801      	add	r0, sp, #4
 8007310:	f7ff fd5a 	bl	8006dc8 <__lo0bits>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	2201      	movs	r2, #1
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	3020      	adds	r0, #32
 800731e:	e7e3      	b.n	80072e8 <__d2b+0x60>
 8007320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007328:	f8c9 0000 	str.w	r0, [r9]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fd2b 	bl	8006d88 <__hi0bits>
 8007332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007336:	e7df      	b.n	80072f8 <__d2b+0x70>
 8007338:	080088bb 	.word	0x080088bb
 800733c:	080088cc 	.word	0x080088cc

08007340 <_calloc_r>:
 8007340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007342:	fba1 2402 	umull	r2, r4, r1, r2
 8007346:	b94c      	cbnz	r4, 800735c <_calloc_r+0x1c>
 8007348:	4611      	mov	r1, r2
 800734a:	9201      	str	r2, [sp, #4]
 800734c:	f000 f87a 	bl	8007444 <_malloc_r>
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	4605      	mov	r5, r0
 8007354:	b930      	cbnz	r0, 8007364 <_calloc_r+0x24>
 8007356:	4628      	mov	r0, r5
 8007358:	b003      	add	sp, #12
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	220c      	movs	r2, #12
 800735e:	6002      	str	r2, [r0, #0]
 8007360:	2500      	movs	r5, #0
 8007362:	e7f8      	b.n	8007356 <_calloc_r+0x16>
 8007364:	4621      	mov	r1, r4
 8007366:	f7fe f905 	bl	8005574 <memset>
 800736a:	e7f4      	b.n	8007356 <_calloc_r+0x16>

0800736c <_free_r>:
 800736c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800736e:	2900      	cmp	r1, #0
 8007370:	d044      	beq.n	80073fc <_free_r+0x90>
 8007372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007376:	9001      	str	r0, [sp, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f1a1 0404 	sub.w	r4, r1, #4
 800737e:	bfb8      	it	lt
 8007380:	18e4      	addlt	r4, r4, r3
 8007382:	f000 fa9b 	bl	80078bc <__malloc_lock>
 8007386:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <_free_r+0x94>)
 8007388:	9801      	ldr	r0, [sp, #4]
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	b933      	cbnz	r3, 800739c <_free_r+0x30>
 800738e:	6063      	str	r3, [r4, #4]
 8007390:	6014      	str	r4, [r2, #0]
 8007392:	b003      	add	sp, #12
 8007394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007398:	f000 ba96 	b.w	80078c8 <__malloc_unlock>
 800739c:	42a3      	cmp	r3, r4
 800739e:	d908      	bls.n	80073b2 <_free_r+0x46>
 80073a0:	6825      	ldr	r5, [r4, #0]
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	428b      	cmp	r3, r1
 80073a6:	bf01      	itttt	eq
 80073a8:	6819      	ldreq	r1, [r3, #0]
 80073aa:	685b      	ldreq	r3, [r3, #4]
 80073ac:	1949      	addeq	r1, r1, r5
 80073ae:	6021      	streq	r1, [r4, #0]
 80073b0:	e7ed      	b.n	800738e <_free_r+0x22>
 80073b2:	461a      	mov	r2, r3
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	b10b      	cbz	r3, 80073bc <_free_r+0x50>
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d9fa      	bls.n	80073b2 <_free_r+0x46>
 80073bc:	6811      	ldr	r1, [r2, #0]
 80073be:	1855      	adds	r5, r2, r1
 80073c0:	42a5      	cmp	r5, r4
 80073c2:	d10b      	bne.n	80073dc <_free_r+0x70>
 80073c4:	6824      	ldr	r4, [r4, #0]
 80073c6:	4421      	add	r1, r4
 80073c8:	1854      	adds	r4, r2, r1
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	6011      	str	r1, [r2, #0]
 80073ce:	d1e0      	bne.n	8007392 <_free_r+0x26>
 80073d0:	681c      	ldr	r4, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	6053      	str	r3, [r2, #4]
 80073d6:	4421      	add	r1, r4
 80073d8:	6011      	str	r1, [r2, #0]
 80073da:	e7da      	b.n	8007392 <_free_r+0x26>
 80073dc:	d902      	bls.n	80073e4 <_free_r+0x78>
 80073de:	230c      	movs	r3, #12
 80073e0:	6003      	str	r3, [r0, #0]
 80073e2:	e7d6      	b.n	8007392 <_free_r+0x26>
 80073e4:	6825      	ldr	r5, [r4, #0]
 80073e6:	1961      	adds	r1, r4, r5
 80073e8:	428b      	cmp	r3, r1
 80073ea:	bf04      	itt	eq
 80073ec:	6819      	ldreq	r1, [r3, #0]
 80073ee:	685b      	ldreq	r3, [r3, #4]
 80073f0:	6063      	str	r3, [r4, #4]
 80073f2:	bf04      	itt	eq
 80073f4:	1949      	addeq	r1, r1, r5
 80073f6:	6021      	streq	r1, [r4, #0]
 80073f8:	6054      	str	r4, [r2, #4]
 80073fa:	e7ca      	b.n	8007392 <_free_r+0x26>
 80073fc:	b003      	add	sp, #12
 80073fe:	bd30      	pop	{r4, r5, pc}
 8007400:	200004e0 	.word	0x200004e0

08007404 <sbrk_aligned>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4e0e      	ldr	r6, [pc, #56]	; (8007440 <sbrk_aligned+0x3c>)
 8007408:	460c      	mov	r4, r1
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b911      	cbnz	r1, 8007416 <sbrk_aligned+0x12>
 8007410:	f000 f9e8 	bl	80077e4 <_sbrk_r>
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f9e3 	bl	80077e4 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d00a      	beq.n	8007438 <sbrk_aligned+0x34>
 8007422:	1cc4      	adds	r4, r0, #3
 8007424:	f024 0403 	bic.w	r4, r4, #3
 8007428:	42a0      	cmp	r0, r4
 800742a:	d007      	beq.n	800743c <sbrk_aligned+0x38>
 800742c:	1a21      	subs	r1, r4, r0
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f9d8 	bl	80077e4 <_sbrk_r>
 8007434:	3001      	adds	r0, #1
 8007436:	d101      	bne.n	800743c <sbrk_aligned+0x38>
 8007438:	f04f 34ff 	mov.w	r4, #4294967295
 800743c:	4620      	mov	r0, r4
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	200004e4 	.word	0x200004e4

08007444 <_malloc_r>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	1ccd      	adds	r5, r1, #3
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	2d00      	cmp	r5, #0
 8007458:	4607      	mov	r7, r0
 800745a:	db01      	blt.n	8007460 <_malloc_r+0x1c>
 800745c:	42a9      	cmp	r1, r5
 800745e:	d905      	bls.n	800746c <_malloc_r+0x28>
 8007460:	230c      	movs	r3, #12
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	2600      	movs	r6, #0
 8007466:	4630      	mov	r0, r6
 8007468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746c:	4e2e      	ldr	r6, [pc, #184]	; (8007528 <_malloc_r+0xe4>)
 800746e:	f000 fa25 	bl	80078bc <__malloc_lock>
 8007472:	6833      	ldr	r3, [r6, #0]
 8007474:	461c      	mov	r4, r3
 8007476:	bb34      	cbnz	r4, 80074c6 <_malloc_r+0x82>
 8007478:	4629      	mov	r1, r5
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ffc2 	bl	8007404 <sbrk_aligned>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	4604      	mov	r4, r0
 8007484:	d14d      	bne.n	8007522 <_malloc_r+0xde>
 8007486:	6834      	ldr	r4, [r6, #0]
 8007488:	4626      	mov	r6, r4
 800748a:	2e00      	cmp	r6, #0
 800748c:	d140      	bne.n	8007510 <_malloc_r+0xcc>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	4631      	mov	r1, r6
 8007492:	4638      	mov	r0, r7
 8007494:	eb04 0803 	add.w	r8, r4, r3
 8007498:	f000 f9a4 	bl	80077e4 <_sbrk_r>
 800749c:	4580      	cmp	r8, r0
 800749e:	d13a      	bne.n	8007516 <_malloc_r+0xd2>
 80074a0:	6821      	ldr	r1, [r4, #0]
 80074a2:	3503      	adds	r5, #3
 80074a4:	1a6d      	subs	r5, r5, r1
 80074a6:	f025 0503 	bic.w	r5, r5, #3
 80074aa:	3508      	adds	r5, #8
 80074ac:	2d0c      	cmp	r5, #12
 80074ae:	bf38      	it	cc
 80074b0:	250c      	movcc	r5, #12
 80074b2:	4629      	mov	r1, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa5 	bl	8007404 <sbrk_aligned>
 80074ba:	3001      	adds	r0, #1
 80074bc:	d02b      	beq.n	8007516 <_malloc_r+0xd2>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	442b      	add	r3, r5
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	e00e      	b.n	80074e4 <_malloc_r+0xa0>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	1b52      	subs	r2, r2, r5
 80074ca:	d41e      	bmi.n	800750a <_malloc_r+0xc6>
 80074cc:	2a0b      	cmp	r2, #11
 80074ce:	d916      	bls.n	80074fe <_malloc_r+0xba>
 80074d0:	1961      	adds	r1, r4, r5
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	6025      	str	r5, [r4, #0]
 80074d6:	bf18      	it	ne
 80074d8:	6059      	strne	r1, [r3, #4]
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	bf08      	it	eq
 80074de:	6031      	streq	r1, [r6, #0]
 80074e0:	5162      	str	r2, [r4, r5]
 80074e2:	604b      	str	r3, [r1, #4]
 80074e4:	4638      	mov	r0, r7
 80074e6:	f104 060b 	add.w	r6, r4, #11
 80074ea:	f000 f9ed 	bl	80078c8 <__malloc_unlock>
 80074ee:	f026 0607 	bic.w	r6, r6, #7
 80074f2:	1d23      	adds	r3, r4, #4
 80074f4:	1af2      	subs	r2, r6, r3
 80074f6:	d0b6      	beq.n	8007466 <_malloc_r+0x22>
 80074f8:	1b9b      	subs	r3, r3, r6
 80074fa:	50a3      	str	r3, [r4, r2]
 80074fc:	e7b3      	b.n	8007466 <_malloc_r+0x22>
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	bf0c      	ite	eq
 8007504:	6032      	streq	r2, [r6, #0]
 8007506:	605a      	strne	r2, [r3, #4]
 8007508:	e7ec      	b.n	80074e4 <_malloc_r+0xa0>
 800750a:	4623      	mov	r3, r4
 800750c:	6864      	ldr	r4, [r4, #4]
 800750e:	e7b2      	b.n	8007476 <_malloc_r+0x32>
 8007510:	4634      	mov	r4, r6
 8007512:	6876      	ldr	r6, [r6, #4]
 8007514:	e7b9      	b.n	800748a <_malloc_r+0x46>
 8007516:	230c      	movs	r3, #12
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4638      	mov	r0, r7
 800751c:	f000 f9d4 	bl	80078c8 <__malloc_unlock>
 8007520:	e7a1      	b.n	8007466 <_malloc_r+0x22>
 8007522:	6025      	str	r5, [r4, #0]
 8007524:	e7de      	b.n	80074e4 <_malloc_r+0xa0>
 8007526:	bf00      	nop
 8007528:	200004e0 	.word	0x200004e0

0800752c <__ssputs_r>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	688e      	ldr	r6, [r1, #8]
 8007532:	429e      	cmp	r6, r3
 8007534:	4682      	mov	sl, r0
 8007536:	460c      	mov	r4, r1
 8007538:	4690      	mov	r8, r2
 800753a:	461f      	mov	r7, r3
 800753c:	d838      	bhi.n	80075b0 <__ssputs_r+0x84>
 800753e:	898a      	ldrh	r2, [r1, #12]
 8007540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007544:	d032      	beq.n	80075ac <__ssputs_r+0x80>
 8007546:	6825      	ldr	r5, [r4, #0]
 8007548:	6909      	ldr	r1, [r1, #16]
 800754a:	eba5 0901 	sub.w	r9, r5, r1
 800754e:	6965      	ldr	r5, [r4, #20]
 8007550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007558:	3301      	adds	r3, #1
 800755a:	444b      	add	r3, r9
 800755c:	106d      	asrs	r5, r5, #1
 800755e:	429d      	cmp	r5, r3
 8007560:	bf38      	it	cc
 8007562:	461d      	movcc	r5, r3
 8007564:	0553      	lsls	r3, r2, #21
 8007566:	d531      	bpl.n	80075cc <__ssputs_r+0xa0>
 8007568:	4629      	mov	r1, r5
 800756a:	f7ff ff6b 	bl	8007444 <_malloc_r>
 800756e:	4606      	mov	r6, r0
 8007570:	b950      	cbnz	r0, 8007588 <__ssputs_r+0x5c>
 8007572:	230c      	movs	r3, #12
 8007574:	f8ca 3000 	str.w	r3, [sl]
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007588:	6921      	ldr	r1, [r4, #16]
 800758a:	464a      	mov	r2, r9
 800758c:	f7ff fb46 	bl	8006c1c <memcpy>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	6126      	str	r6, [r4, #16]
 800759e:	6165      	str	r5, [r4, #20]
 80075a0:	444e      	add	r6, r9
 80075a2:	eba5 0509 	sub.w	r5, r5, r9
 80075a6:	6026      	str	r6, [r4, #0]
 80075a8:	60a5      	str	r5, [r4, #8]
 80075aa:	463e      	mov	r6, r7
 80075ac:	42be      	cmp	r6, r7
 80075ae:	d900      	bls.n	80075b2 <__ssputs_r+0x86>
 80075b0:	463e      	mov	r6, r7
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	4632      	mov	r2, r6
 80075b6:	4641      	mov	r1, r8
 80075b8:	f000 f966 	bl	8007888 <memmove>
 80075bc:	68a3      	ldr	r3, [r4, #8]
 80075be:	1b9b      	subs	r3, r3, r6
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	4433      	add	r3, r6
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	e7db      	b.n	8007584 <__ssputs_r+0x58>
 80075cc:	462a      	mov	r2, r5
 80075ce:	f000 f981 	bl	80078d4 <_realloc_r>
 80075d2:	4606      	mov	r6, r0
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d1e1      	bne.n	800759c <__ssputs_r+0x70>
 80075d8:	6921      	ldr	r1, [r4, #16]
 80075da:	4650      	mov	r0, sl
 80075dc:	f7ff fec6 	bl	800736c <_free_r>
 80075e0:	e7c7      	b.n	8007572 <__ssputs_r+0x46>
	...

080075e4 <_svfiprintf_r>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	4698      	mov	r8, r3
 80075ea:	898b      	ldrh	r3, [r1, #12]
 80075ec:	061b      	lsls	r3, r3, #24
 80075ee:	b09d      	sub	sp, #116	; 0x74
 80075f0:	4607      	mov	r7, r0
 80075f2:	460d      	mov	r5, r1
 80075f4:	4614      	mov	r4, r2
 80075f6:	d50e      	bpl.n	8007616 <_svfiprintf_r+0x32>
 80075f8:	690b      	ldr	r3, [r1, #16]
 80075fa:	b963      	cbnz	r3, 8007616 <_svfiprintf_r+0x32>
 80075fc:	2140      	movs	r1, #64	; 0x40
 80075fe:	f7ff ff21 	bl	8007444 <_malloc_r>
 8007602:	6028      	str	r0, [r5, #0]
 8007604:	6128      	str	r0, [r5, #16]
 8007606:	b920      	cbnz	r0, 8007612 <_svfiprintf_r+0x2e>
 8007608:	230c      	movs	r3, #12
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	e0d1      	b.n	80077b6 <_svfiprintf_r+0x1d2>
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	616b      	str	r3, [r5, #20]
 8007616:	2300      	movs	r3, #0
 8007618:	9309      	str	r3, [sp, #36]	; 0x24
 800761a:	2320      	movs	r3, #32
 800761c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007620:	f8cd 800c 	str.w	r8, [sp, #12]
 8007624:	2330      	movs	r3, #48	; 0x30
 8007626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077d0 <_svfiprintf_r+0x1ec>
 800762a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800762e:	f04f 0901 	mov.w	r9, #1
 8007632:	4623      	mov	r3, r4
 8007634:	469a      	mov	sl, r3
 8007636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800763a:	b10a      	cbz	r2, 8007640 <_svfiprintf_r+0x5c>
 800763c:	2a25      	cmp	r2, #37	; 0x25
 800763e:	d1f9      	bne.n	8007634 <_svfiprintf_r+0x50>
 8007640:	ebba 0b04 	subs.w	fp, sl, r4
 8007644:	d00b      	beq.n	800765e <_svfiprintf_r+0x7a>
 8007646:	465b      	mov	r3, fp
 8007648:	4622      	mov	r2, r4
 800764a:	4629      	mov	r1, r5
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff ff6d 	bl	800752c <__ssputs_r>
 8007652:	3001      	adds	r0, #1
 8007654:	f000 80aa 	beq.w	80077ac <_svfiprintf_r+0x1c8>
 8007658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800765a:	445a      	add	r2, fp
 800765c:	9209      	str	r2, [sp, #36]	; 0x24
 800765e:	f89a 3000 	ldrb.w	r3, [sl]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80a2 	beq.w	80077ac <_svfiprintf_r+0x1c8>
 8007668:	2300      	movs	r3, #0
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007672:	f10a 0a01 	add.w	sl, sl, #1
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	9307      	str	r3, [sp, #28]
 800767a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800767e:	931a      	str	r3, [sp, #104]	; 0x68
 8007680:	4654      	mov	r4, sl
 8007682:	2205      	movs	r2, #5
 8007684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007688:	4851      	ldr	r0, [pc, #324]	; (80077d0 <_svfiprintf_r+0x1ec>)
 800768a:	f7f8 fdb1 	bl	80001f0 <memchr>
 800768e:	9a04      	ldr	r2, [sp, #16]
 8007690:	b9d8      	cbnz	r0, 80076ca <_svfiprintf_r+0xe6>
 8007692:	06d0      	lsls	r0, r2, #27
 8007694:	bf44      	itt	mi
 8007696:	2320      	movmi	r3, #32
 8007698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800769c:	0711      	lsls	r1, r2, #28
 800769e:	bf44      	itt	mi
 80076a0:	232b      	movmi	r3, #43	; 0x2b
 80076a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a6:	f89a 3000 	ldrb.w	r3, [sl]
 80076aa:	2b2a      	cmp	r3, #42	; 0x2a
 80076ac:	d015      	beq.n	80076da <_svfiprintf_r+0xf6>
 80076ae:	9a07      	ldr	r2, [sp, #28]
 80076b0:	4654      	mov	r4, sl
 80076b2:	2000      	movs	r0, #0
 80076b4:	f04f 0c0a 	mov.w	ip, #10
 80076b8:	4621      	mov	r1, r4
 80076ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076be:	3b30      	subs	r3, #48	; 0x30
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d94e      	bls.n	8007762 <_svfiprintf_r+0x17e>
 80076c4:	b1b0      	cbz	r0, 80076f4 <_svfiprintf_r+0x110>
 80076c6:	9207      	str	r2, [sp, #28]
 80076c8:	e014      	b.n	80076f4 <_svfiprintf_r+0x110>
 80076ca:	eba0 0308 	sub.w	r3, r0, r8
 80076ce:	fa09 f303 	lsl.w	r3, r9, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	46a2      	mov	sl, r4
 80076d8:	e7d2      	b.n	8007680 <_svfiprintf_r+0x9c>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	1d19      	adds	r1, r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	9103      	str	r1, [sp, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfbb      	ittet	lt
 80076e6:	425b      	neglt	r3, r3
 80076e8:	f042 0202 	orrlt.w	r2, r2, #2
 80076ec:	9307      	strge	r3, [sp, #28]
 80076ee:	9307      	strlt	r3, [sp, #28]
 80076f0:	bfb8      	it	lt
 80076f2:	9204      	strlt	r2, [sp, #16]
 80076f4:	7823      	ldrb	r3, [r4, #0]
 80076f6:	2b2e      	cmp	r3, #46	; 0x2e
 80076f8:	d10c      	bne.n	8007714 <_svfiprintf_r+0x130>
 80076fa:	7863      	ldrb	r3, [r4, #1]
 80076fc:	2b2a      	cmp	r3, #42	; 0x2a
 80076fe:	d135      	bne.n	800776c <_svfiprintf_r+0x188>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	1d1a      	adds	r2, r3, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	9203      	str	r2, [sp, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfb8      	it	lt
 800770c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007710:	3402      	adds	r4, #2
 8007712:	9305      	str	r3, [sp, #20]
 8007714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077e0 <_svfiprintf_r+0x1fc>
 8007718:	7821      	ldrb	r1, [r4, #0]
 800771a:	2203      	movs	r2, #3
 800771c:	4650      	mov	r0, sl
 800771e:	f7f8 fd67 	bl	80001f0 <memchr>
 8007722:	b140      	cbz	r0, 8007736 <_svfiprintf_r+0x152>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	eba0 000a 	sub.w	r0, r0, sl
 800772a:	fa03 f000 	lsl.w	r0, r3, r0
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	4303      	orrs	r3, r0
 8007732:	3401      	adds	r4, #1
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773a:	4826      	ldr	r0, [pc, #152]	; (80077d4 <_svfiprintf_r+0x1f0>)
 800773c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007740:	2206      	movs	r2, #6
 8007742:	f7f8 fd55 	bl	80001f0 <memchr>
 8007746:	2800      	cmp	r0, #0
 8007748:	d038      	beq.n	80077bc <_svfiprintf_r+0x1d8>
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <_svfiprintf_r+0x1f4>)
 800774c:	bb1b      	cbnz	r3, 8007796 <_svfiprintf_r+0x1b2>
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	3307      	adds	r3, #7
 8007752:	f023 0307 	bic.w	r3, r3, #7
 8007756:	3308      	adds	r3, #8
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	4433      	add	r3, r6
 800775e:	9309      	str	r3, [sp, #36]	; 0x24
 8007760:	e767      	b.n	8007632 <_svfiprintf_r+0x4e>
 8007762:	fb0c 3202 	mla	r2, ip, r2, r3
 8007766:	460c      	mov	r4, r1
 8007768:	2001      	movs	r0, #1
 800776a:	e7a5      	b.n	80076b8 <_svfiprintf_r+0xd4>
 800776c:	2300      	movs	r3, #0
 800776e:	3401      	adds	r4, #1
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	4619      	mov	r1, r3
 8007774:	f04f 0c0a 	mov.w	ip, #10
 8007778:	4620      	mov	r0, r4
 800777a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800777e:	3a30      	subs	r2, #48	; 0x30
 8007780:	2a09      	cmp	r2, #9
 8007782:	d903      	bls.n	800778c <_svfiprintf_r+0x1a8>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0c5      	beq.n	8007714 <_svfiprintf_r+0x130>
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	e7c3      	b.n	8007714 <_svfiprintf_r+0x130>
 800778c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007790:	4604      	mov	r4, r0
 8007792:	2301      	movs	r3, #1
 8007794:	e7f0      	b.n	8007778 <_svfiprintf_r+0x194>
 8007796:	ab03      	add	r3, sp, #12
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	462a      	mov	r2, r5
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <_svfiprintf_r+0x1f8>)
 800779e:	a904      	add	r1, sp, #16
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7fd ff8f 	bl	80056c4 <_printf_float>
 80077a6:	1c42      	adds	r2, r0, #1
 80077a8:	4606      	mov	r6, r0
 80077aa:	d1d6      	bne.n	800775a <_svfiprintf_r+0x176>
 80077ac:	89ab      	ldrh	r3, [r5, #12]
 80077ae:	065b      	lsls	r3, r3, #25
 80077b0:	f53f af2c 	bmi.w	800760c <_svfiprintf_r+0x28>
 80077b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b6:	b01d      	add	sp, #116	; 0x74
 80077b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077bc:	ab03      	add	r3, sp, #12
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	462a      	mov	r2, r5
 80077c2:	4b06      	ldr	r3, [pc, #24]	; (80077dc <_svfiprintf_r+0x1f8>)
 80077c4:	a904      	add	r1, sp, #16
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7fe fa20 	bl	8005c0c <_printf_i>
 80077cc:	e7eb      	b.n	80077a6 <_svfiprintf_r+0x1c2>
 80077ce:	bf00      	nop
 80077d0:	08008a24 	.word	0x08008a24
 80077d4:	08008a2e 	.word	0x08008a2e
 80077d8:	080056c5 	.word	0x080056c5
 80077dc:	0800752d 	.word	0x0800752d
 80077e0:	08008a2a 	.word	0x08008a2a

080077e4 <_sbrk_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d06      	ldr	r5, [pc, #24]	; (8007800 <_sbrk_r+0x1c>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f7f9 fec0 	bl	8001574 <_sbrk>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_sbrk_r+0x1a>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_sbrk_r+0x1a>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	200004e8 	.word	0x200004e8

08007804 <__assert_func>:
 8007804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007806:	4614      	mov	r4, r2
 8007808:	461a      	mov	r2, r3
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <__assert_func+0x2c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4605      	mov	r5, r0
 8007810:	68d8      	ldr	r0, [r3, #12]
 8007812:	b14c      	cbz	r4, 8007828 <__assert_func+0x24>
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <__assert_func+0x30>)
 8007816:	9100      	str	r1, [sp, #0]
 8007818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800781c:	4906      	ldr	r1, [pc, #24]	; (8007838 <__assert_func+0x34>)
 800781e:	462b      	mov	r3, r5
 8007820:	f000 f80e 	bl	8007840 <fiprintf>
 8007824:	f000 faac 	bl	8007d80 <abort>
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <__assert_func+0x38>)
 800782a:	461c      	mov	r4, r3
 800782c:	e7f3      	b.n	8007816 <__assert_func+0x12>
 800782e:	bf00      	nop
 8007830:	20000050 	.word	0x20000050
 8007834:	08008a35 	.word	0x08008a35
 8007838:	08008a42 	.word	0x08008a42
 800783c:	08008a70 	.word	0x08008a70

08007840 <fiprintf>:
 8007840:	b40e      	push	{r1, r2, r3}
 8007842:	b503      	push	{r0, r1, lr}
 8007844:	4601      	mov	r1, r0
 8007846:	ab03      	add	r3, sp, #12
 8007848:	4805      	ldr	r0, [pc, #20]	; (8007860 <fiprintf+0x20>)
 800784a:	f853 2b04 	ldr.w	r2, [r3], #4
 800784e:	6800      	ldr	r0, [r0, #0]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	f000 f897 	bl	8007984 <_vfiprintf_r>
 8007856:	b002      	add	sp, #8
 8007858:	f85d eb04 	ldr.w	lr, [sp], #4
 800785c:	b003      	add	sp, #12
 800785e:	4770      	bx	lr
 8007860:	20000050 	.word	0x20000050

08007864 <__ascii_mbtowc>:
 8007864:	b082      	sub	sp, #8
 8007866:	b901      	cbnz	r1, 800786a <__ascii_mbtowc+0x6>
 8007868:	a901      	add	r1, sp, #4
 800786a:	b142      	cbz	r2, 800787e <__ascii_mbtowc+0x1a>
 800786c:	b14b      	cbz	r3, 8007882 <__ascii_mbtowc+0x1e>
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	600b      	str	r3, [r1, #0]
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	1e10      	subs	r0, r2, #0
 8007876:	bf18      	it	ne
 8007878:	2001      	movne	r0, #1
 800787a:	b002      	add	sp, #8
 800787c:	4770      	bx	lr
 800787e:	4610      	mov	r0, r2
 8007880:	e7fb      	b.n	800787a <__ascii_mbtowc+0x16>
 8007882:	f06f 0001 	mvn.w	r0, #1
 8007886:	e7f8      	b.n	800787a <__ascii_mbtowc+0x16>

08007888 <memmove>:
 8007888:	4288      	cmp	r0, r1
 800788a:	b510      	push	{r4, lr}
 800788c:	eb01 0402 	add.w	r4, r1, r2
 8007890:	d902      	bls.n	8007898 <memmove+0x10>
 8007892:	4284      	cmp	r4, r0
 8007894:	4623      	mov	r3, r4
 8007896:	d807      	bhi.n	80078a8 <memmove+0x20>
 8007898:	1e43      	subs	r3, r0, #1
 800789a:	42a1      	cmp	r1, r4
 800789c:	d008      	beq.n	80078b0 <memmove+0x28>
 800789e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078a6:	e7f8      	b.n	800789a <memmove+0x12>
 80078a8:	4402      	add	r2, r0
 80078aa:	4601      	mov	r1, r0
 80078ac:	428a      	cmp	r2, r1
 80078ae:	d100      	bne.n	80078b2 <memmove+0x2a>
 80078b0:	bd10      	pop	{r4, pc}
 80078b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ba:	e7f7      	b.n	80078ac <memmove+0x24>

080078bc <__malloc_lock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_lock+0x8>)
 80078be:	f000 bc1f 	b.w	8008100 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	200004ec 	.word	0x200004ec

080078c8 <__malloc_unlock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__malloc_unlock+0x8>)
 80078ca:	f000 bc1a 	b.w	8008102 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	200004ec 	.word	0x200004ec

080078d4 <_realloc_r>:
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	4680      	mov	r8, r0
 80078da:	4614      	mov	r4, r2
 80078dc:	460e      	mov	r6, r1
 80078de:	b921      	cbnz	r1, 80078ea <_realloc_r+0x16>
 80078e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	4611      	mov	r1, r2
 80078e6:	f7ff bdad 	b.w	8007444 <_malloc_r>
 80078ea:	b92a      	cbnz	r2, 80078f8 <_realloc_r+0x24>
 80078ec:	f7ff fd3e 	bl	800736c <_free_r>
 80078f0:	4625      	mov	r5, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f8:	f000 fc6a 	bl	80081d0 <_malloc_usable_size_r>
 80078fc:	4284      	cmp	r4, r0
 80078fe:	4607      	mov	r7, r0
 8007900:	d802      	bhi.n	8007908 <_realloc_r+0x34>
 8007902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007906:	d812      	bhi.n	800792e <_realloc_r+0x5a>
 8007908:	4621      	mov	r1, r4
 800790a:	4640      	mov	r0, r8
 800790c:	f7ff fd9a 	bl	8007444 <_malloc_r>
 8007910:	4605      	mov	r5, r0
 8007912:	2800      	cmp	r0, #0
 8007914:	d0ed      	beq.n	80078f2 <_realloc_r+0x1e>
 8007916:	42bc      	cmp	r4, r7
 8007918:	4622      	mov	r2, r4
 800791a:	4631      	mov	r1, r6
 800791c:	bf28      	it	cs
 800791e:	463a      	movcs	r2, r7
 8007920:	f7ff f97c 	bl	8006c1c <memcpy>
 8007924:	4631      	mov	r1, r6
 8007926:	4640      	mov	r0, r8
 8007928:	f7ff fd20 	bl	800736c <_free_r>
 800792c:	e7e1      	b.n	80078f2 <_realloc_r+0x1e>
 800792e:	4635      	mov	r5, r6
 8007930:	e7df      	b.n	80078f2 <_realloc_r+0x1e>

08007932 <__sfputc_r>:
 8007932:	6893      	ldr	r3, [r2, #8]
 8007934:	3b01      	subs	r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	b410      	push	{r4}
 800793a:	6093      	str	r3, [r2, #8]
 800793c:	da08      	bge.n	8007950 <__sfputc_r+0x1e>
 800793e:	6994      	ldr	r4, [r2, #24]
 8007940:	42a3      	cmp	r3, r4
 8007942:	db01      	blt.n	8007948 <__sfputc_r+0x16>
 8007944:	290a      	cmp	r1, #10
 8007946:	d103      	bne.n	8007950 <__sfputc_r+0x1e>
 8007948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800794c:	f000 b94a 	b.w	8007be4 <__swbuf_r>
 8007950:	6813      	ldr	r3, [r2, #0]
 8007952:	1c58      	adds	r0, r3, #1
 8007954:	6010      	str	r0, [r2, #0]
 8007956:	7019      	strb	r1, [r3, #0]
 8007958:	4608      	mov	r0, r1
 800795a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800795e:	4770      	bx	lr

08007960 <__sfputs_r>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4606      	mov	r6, r0
 8007964:	460f      	mov	r7, r1
 8007966:	4614      	mov	r4, r2
 8007968:	18d5      	adds	r5, r2, r3
 800796a:	42ac      	cmp	r4, r5
 800796c:	d101      	bne.n	8007972 <__sfputs_r+0x12>
 800796e:	2000      	movs	r0, #0
 8007970:	e007      	b.n	8007982 <__sfputs_r+0x22>
 8007972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007976:	463a      	mov	r2, r7
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ffda 	bl	8007932 <__sfputc_r>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d1f3      	bne.n	800796a <__sfputs_r+0xa>
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007984 <_vfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	460d      	mov	r5, r1
 800798a:	b09d      	sub	sp, #116	; 0x74
 800798c:	4614      	mov	r4, r2
 800798e:	4698      	mov	r8, r3
 8007990:	4606      	mov	r6, r0
 8007992:	b118      	cbz	r0, 800799c <_vfiprintf_r+0x18>
 8007994:	6983      	ldr	r3, [r0, #24]
 8007996:	b90b      	cbnz	r3, 800799c <_vfiprintf_r+0x18>
 8007998:	f000 fb14 	bl	8007fc4 <__sinit>
 800799c:	4b89      	ldr	r3, [pc, #548]	; (8007bc4 <_vfiprintf_r+0x240>)
 800799e:	429d      	cmp	r5, r3
 80079a0:	d11b      	bne.n	80079da <_vfiprintf_r+0x56>
 80079a2:	6875      	ldr	r5, [r6, #4]
 80079a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079a6:	07d9      	lsls	r1, r3, #31
 80079a8:	d405      	bmi.n	80079b6 <_vfiprintf_r+0x32>
 80079aa:	89ab      	ldrh	r3, [r5, #12]
 80079ac:	059a      	lsls	r2, r3, #22
 80079ae:	d402      	bmi.n	80079b6 <_vfiprintf_r+0x32>
 80079b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b2:	f000 fba5 	bl	8008100 <__retarget_lock_acquire_recursive>
 80079b6:	89ab      	ldrh	r3, [r5, #12]
 80079b8:	071b      	lsls	r3, r3, #28
 80079ba:	d501      	bpl.n	80079c0 <_vfiprintf_r+0x3c>
 80079bc:	692b      	ldr	r3, [r5, #16]
 80079be:	b9eb      	cbnz	r3, 80079fc <_vfiprintf_r+0x78>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f96e 	bl	8007ca4 <__swsetup_r>
 80079c8:	b1c0      	cbz	r0, 80079fc <_vfiprintf_r+0x78>
 80079ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079cc:	07dc      	lsls	r4, r3, #31
 80079ce:	d50e      	bpl.n	80079ee <_vfiprintf_r+0x6a>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	b01d      	add	sp, #116	; 0x74
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	4b7b      	ldr	r3, [pc, #492]	; (8007bc8 <_vfiprintf_r+0x244>)
 80079dc:	429d      	cmp	r5, r3
 80079de:	d101      	bne.n	80079e4 <_vfiprintf_r+0x60>
 80079e0:	68b5      	ldr	r5, [r6, #8]
 80079e2:	e7df      	b.n	80079a4 <_vfiprintf_r+0x20>
 80079e4:	4b79      	ldr	r3, [pc, #484]	; (8007bcc <_vfiprintf_r+0x248>)
 80079e6:	429d      	cmp	r5, r3
 80079e8:	bf08      	it	eq
 80079ea:	68f5      	ldreq	r5, [r6, #12]
 80079ec:	e7da      	b.n	80079a4 <_vfiprintf_r+0x20>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	0598      	lsls	r0, r3, #22
 80079f2:	d4ed      	bmi.n	80079d0 <_vfiprintf_r+0x4c>
 80079f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079f6:	f000 fb84 	bl	8008102 <__retarget_lock_release_recursive>
 80079fa:	e7e9      	b.n	80079d0 <_vfiprintf_r+0x4c>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	2320      	movs	r3, #32
 8007a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0a:	2330      	movs	r3, #48	; 0x30
 8007a0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bd0 <_vfiprintf_r+0x24c>
 8007a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a14:	f04f 0901 	mov.w	r9, #1
 8007a18:	4623      	mov	r3, r4
 8007a1a:	469a      	mov	sl, r3
 8007a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a20:	b10a      	cbz	r2, 8007a26 <_vfiprintf_r+0xa2>
 8007a22:	2a25      	cmp	r2, #37	; 0x25
 8007a24:	d1f9      	bne.n	8007a1a <_vfiprintf_r+0x96>
 8007a26:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2a:	d00b      	beq.n	8007a44 <_vfiprintf_r+0xc0>
 8007a2c:	465b      	mov	r3, fp
 8007a2e:	4622      	mov	r2, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ff94 	bl	8007960 <__sfputs_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f000 80aa 	beq.w	8007b92 <_vfiprintf_r+0x20e>
 8007a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a40:	445a      	add	r2, fp
 8007a42:	9209      	str	r2, [sp, #36]	; 0x24
 8007a44:	f89a 3000 	ldrb.w	r3, [sl]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80a2 	beq.w	8007b92 <_vfiprintf_r+0x20e>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295
 8007a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a58:	f10a 0a01 	add.w	sl, sl, #1
 8007a5c:	9304      	str	r3, [sp, #16]
 8007a5e:	9307      	str	r3, [sp, #28]
 8007a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a64:	931a      	str	r3, [sp, #104]	; 0x68
 8007a66:	4654      	mov	r4, sl
 8007a68:	2205      	movs	r2, #5
 8007a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6e:	4858      	ldr	r0, [pc, #352]	; (8007bd0 <_vfiprintf_r+0x24c>)
 8007a70:	f7f8 fbbe 	bl	80001f0 <memchr>
 8007a74:	9a04      	ldr	r2, [sp, #16]
 8007a76:	b9d8      	cbnz	r0, 8007ab0 <_vfiprintf_r+0x12c>
 8007a78:	06d1      	lsls	r1, r2, #27
 8007a7a:	bf44      	itt	mi
 8007a7c:	2320      	movmi	r3, #32
 8007a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a82:	0713      	lsls	r3, r2, #28
 8007a84:	bf44      	itt	mi
 8007a86:	232b      	movmi	r3, #43	; 0x2b
 8007a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a90:	2b2a      	cmp	r3, #42	; 0x2a
 8007a92:	d015      	beq.n	8007ac0 <_vfiprintf_r+0x13c>
 8007a94:	9a07      	ldr	r2, [sp, #28]
 8007a96:	4654      	mov	r4, sl
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f04f 0c0a 	mov.w	ip, #10
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa4:	3b30      	subs	r3, #48	; 0x30
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	d94e      	bls.n	8007b48 <_vfiprintf_r+0x1c4>
 8007aaa:	b1b0      	cbz	r0, 8007ada <_vfiprintf_r+0x156>
 8007aac:	9207      	str	r2, [sp, #28]
 8007aae:	e014      	b.n	8007ada <_vfiprintf_r+0x156>
 8007ab0:	eba0 0308 	sub.w	r3, r0, r8
 8007ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	9304      	str	r3, [sp, #16]
 8007abc:	46a2      	mov	sl, r4
 8007abe:	e7d2      	b.n	8007a66 <_vfiprintf_r+0xe2>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	1d19      	adds	r1, r3, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	9103      	str	r1, [sp, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bfbb      	ittet	lt
 8007acc:	425b      	neglt	r3, r3
 8007ace:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad2:	9307      	strge	r3, [sp, #28]
 8007ad4:	9307      	strlt	r3, [sp, #28]
 8007ad6:	bfb8      	it	lt
 8007ad8:	9204      	strlt	r2, [sp, #16]
 8007ada:	7823      	ldrb	r3, [r4, #0]
 8007adc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ade:	d10c      	bne.n	8007afa <_vfiprintf_r+0x176>
 8007ae0:	7863      	ldrb	r3, [r4, #1]
 8007ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae4:	d135      	bne.n	8007b52 <_vfiprintf_r+0x1ce>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	1d1a      	adds	r2, r3, #4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	9203      	str	r2, [sp, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfb8      	it	lt
 8007af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007af6:	3402      	adds	r4, #2
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007be0 <_vfiprintf_r+0x25c>
 8007afe:	7821      	ldrb	r1, [r4, #0]
 8007b00:	2203      	movs	r2, #3
 8007b02:	4650      	mov	r0, sl
 8007b04:	f7f8 fb74 	bl	80001f0 <memchr>
 8007b08:	b140      	cbz	r0, 8007b1c <_vfiprintf_r+0x198>
 8007b0a:	2340      	movs	r3, #64	; 0x40
 8007b0c:	eba0 000a 	sub.w	r0, r0, sl
 8007b10:	fa03 f000 	lsl.w	r0, r3, r0
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	4303      	orrs	r3, r0
 8007b18:	3401      	adds	r4, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b20:	482c      	ldr	r0, [pc, #176]	; (8007bd4 <_vfiprintf_r+0x250>)
 8007b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b26:	2206      	movs	r2, #6
 8007b28:	f7f8 fb62 	bl	80001f0 <memchr>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d03f      	beq.n	8007bb0 <_vfiprintf_r+0x22c>
 8007b30:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <_vfiprintf_r+0x254>)
 8007b32:	bb1b      	cbnz	r3, 8007b7c <_vfiprintf_r+0x1f8>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	3307      	adds	r3, #7
 8007b38:	f023 0307 	bic.w	r3, r3, #7
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b42:	443b      	add	r3, r7
 8007b44:	9309      	str	r3, [sp, #36]	; 0x24
 8007b46:	e767      	b.n	8007a18 <_vfiprintf_r+0x94>
 8007b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e7a5      	b.n	8007a9e <_vfiprintf_r+0x11a>
 8007b52:	2300      	movs	r3, #0
 8007b54:	3401      	adds	r4, #1
 8007b56:	9305      	str	r3, [sp, #20]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f04f 0c0a 	mov.w	ip, #10
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b64:	3a30      	subs	r2, #48	; 0x30
 8007b66:	2a09      	cmp	r2, #9
 8007b68:	d903      	bls.n	8007b72 <_vfiprintf_r+0x1ee>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0c5      	beq.n	8007afa <_vfiprintf_r+0x176>
 8007b6e:	9105      	str	r1, [sp, #20]
 8007b70:	e7c3      	b.n	8007afa <_vfiprintf_r+0x176>
 8007b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b76:	4604      	mov	r4, r0
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e7f0      	b.n	8007b5e <_vfiprintf_r+0x1da>
 8007b7c:	ab03      	add	r3, sp, #12
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	462a      	mov	r2, r5
 8007b82:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <_vfiprintf_r+0x258>)
 8007b84:	a904      	add	r1, sp, #16
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7fd fd9c 	bl	80056c4 <_printf_float>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	1c78      	adds	r0, r7, #1
 8007b90:	d1d6      	bne.n	8007b40 <_vfiprintf_r+0x1bc>
 8007b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b94:	07d9      	lsls	r1, r3, #31
 8007b96:	d405      	bmi.n	8007ba4 <_vfiprintf_r+0x220>
 8007b98:	89ab      	ldrh	r3, [r5, #12]
 8007b9a:	059a      	lsls	r2, r3, #22
 8007b9c:	d402      	bmi.n	8007ba4 <_vfiprintf_r+0x220>
 8007b9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ba0:	f000 faaf 	bl	8008102 <__retarget_lock_release_recursive>
 8007ba4:	89ab      	ldrh	r3, [r5, #12]
 8007ba6:	065b      	lsls	r3, r3, #25
 8007ba8:	f53f af12 	bmi.w	80079d0 <_vfiprintf_r+0x4c>
 8007bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bae:	e711      	b.n	80079d4 <_vfiprintf_r+0x50>
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <_vfiprintf_r+0x258>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7fe f826 	bl	8005c0c <_printf_i>
 8007bc0:	e7e4      	b.n	8007b8c <_vfiprintf_r+0x208>
 8007bc2:	bf00      	nop
 8007bc4:	08008b9c 	.word	0x08008b9c
 8007bc8:	08008bbc 	.word	0x08008bbc
 8007bcc:	08008b7c 	.word	0x08008b7c
 8007bd0:	08008a24 	.word	0x08008a24
 8007bd4:	08008a2e 	.word	0x08008a2e
 8007bd8:	080056c5 	.word	0x080056c5
 8007bdc:	08007961 	.word	0x08007961
 8007be0:	08008a2a 	.word	0x08008a2a

08007be4 <__swbuf_r>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	460e      	mov	r6, r1
 8007be8:	4614      	mov	r4, r2
 8007bea:	4605      	mov	r5, r0
 8007bec:	b118      	cbz	r0, 8007bf6 <__swbuf_r+0x12>
 8007bee:	6983      	ldr	r3, [r0, #24]
 8007bf0:	b90b      	cbnz	r3, 8007bf6 <__swbuf_r+0x12>
 8007bf2:	f000 f9e7 	bl	8007fc4 <__sinit>
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <__swbuf_r+0x98>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d12b      	bne.n	8007c54 <__swbuf_r+0x70>
 8007bfc:	686c      	ldr	r4, [r5, #4]
 8007bfe:	69a3      	ldr	r3, [r4, #24]
 8007c00:	60a3      	str	r3, [r4, #8]
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	071a      	lsls	r2, r3, #28
 8007c06:	d52f      	bpl.n	8007c68 <__swbuf_r+0x84>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	b36b      	cbz	r3, 8007c68 <__swbuf_r+0x84>
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	1ac0      	subs	r0, r0, r3
 8007c12:	6963      	ldr	r3, [r4, #20]
 8007c14:	b2f6      	uxtb	r6, r6
 8007c16:	4283      	cmp	r3, r0
 8007c18:	4637      	mov	r7, r6
 8007c1a:	dc04      	bgt.n	8007c26 <__swbuf_r+0x42>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f93c 	bl	8007e9c <_fflush_r>
 8007c24:	bb30      	cbnz	r0, 8007c74 <__swbuf_r+0x90>
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	6022      	str	r2, [r4, #0]
 8007c32:	701e      	strb	r6, [r3, #0]
 8007c34:	6963      	ldr	r3, [r4, #20]
 8007c36:	3001      	adds	r0, #1
 8007c38:	4283      	cmp	r3, r0
 8007c3a:	d004      	beq.n	8007c46 <__swbuf_r+0x62>
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	d506      	bpl.n	8007c50 <__swbuf_r+0x6c>
 8007c42:	2e0a      	cmp	r6, #10
 8007c44:	d104      	bne.n	8007c50 <__swbuf_r+0x6c>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 f927 	bl	8007e9c <_fflush_r>
 8007c4e:	b988      	cbnz	r0, 8007c74 <__swbuf_r+0x90>
 8007c50:	4638      	mov	r0, r7
 8007c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <__swbuf_r+0x9c>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d101      	bne.n	8007c5e <__swbuf_r+0x7a>
 8007c5a:	68ac      	ldr	r4, [r5, #8]
 8007c5c:	e7cf      	b.n	8007bfe <__swbuf_r+0x1a>
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <__swbuf_r+0xa0>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	bf08      	it	eq
 8007c64:	68ec      	ldreq	r4, [r5, #12]
 8007c66:	e7ca      	b.n	8007bfe <__swbuf_r+0x1a>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 f81a 	bl	8007ca4 <__swsetup_r>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d0cb      	beq.n	8007c0c <__swbuf_r+0x28>
 8007c74:	f04f 37ff 	mov.w	r7, #4294967295
 8007c78:	e7ea      	b.n	8007c50 <__swbuf_r+0x6c>
 8007c7a:	bf00      	nop
 8007c7c:	08008b9c 	.word	0x08008b9c
 8007c80:	08008bbc 	.word	0x08008bbc
 8007c84:	08008b7c 	.word	0x08008b7c

08007c88 <__ascii_wctomb>:
 8007c88:	b149      	cbz	r1, 8007c9e <__ascii_wctomb+0x16>
 8007c8a:	2aff      	cmp	r2, #255	; 0xff
 8007c8c:	bf85      	ittet	hi
 8007c8e:	238a      	movhi	r3, #138	; 0x8a
 8007c90:	6003      	strhi	r3, [r0, #0]
 8007c92:	700a      	strbls	r2, [r1, #0]
 8007c94:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c98:	bf98      	it	ls
 8007c9a:	2001      	movls	r0, #1
 8007c9c:	4770      	bx	lr
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4770      	bx	lr
	...

08007ca4 <__swsetup_r>:
 8007ca4:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <__swsetup_r+0xcc>)
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b125      	cbz	r5, 8007cba <__swsetup_r+0x16>
 8007cb0:	69ab      	ldr	r3, [r5, #24]
 8007cb2:	b913      	cbnz	r3, 8007cba <__swsetup_r+0x16>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 f985 	bl	8007fc4 <__sinit>
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <__swsetup_r+0xd0>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d10f      	bne.n	8007ce0 <__swsetup_r+0x3c>
 8007cc0:	686c      	ldr	r4, [r5, #4]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d42c      	bmi.n	8007d26 <__swsetup_r+0x82>
 8007ccc:	06dd      	lsls	r5, r3, #27
 8007cce:	d411      	bmi.n	8007cf4 <__swsetup_r+0x50>
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	e03e      	b.n	8007d5e <__swsetup_r+0xba>
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <__swsetup_r+0xd4>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d101      	bne.n	8007cea <__swsetup_r+0x46>
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	e7eb      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cea:	4b24      	ldr	r3, [pc, #144]	; (8007d7c <__swsetup_r+0xd8>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	bf08      	it	eq
 8007cf0:	68ec      	ldreq	r4, [r5, #12]
 8007cf2:	e7e6      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cf4:	0758      	lsls	r0, r3, #29
 8007cf6:	d512      	bpl.n	8007d1e <__swsetup_r+0x7a>
 8007cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfa:	b141      	cbz	r1, 8007d0e <__swsetup_r+0x6a>
 8007cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d002      	beq.n	8007d0a <__swsetup_r+0x66>
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff fb31 	bl	800736c <_free_r>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	2300      	movs	r3, #0
 8007d18:	6063      	str	r3, [r4, #4]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f043 0308 	orr.w	r3, r3, #8
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	b94b      	cbnz	r3, 8007d3e <__swsetup_r+0x9a>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d003      	beq.n	8007d3e <__swsetup_r+0x9a>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f000 fa09 	bl	8008150 <__smakebuf_r>
 8007d3e:	89a0      	ldrh	r0, [r4, #12]
 8007d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d44:	f010 0301 	ands.w	r3, r0, #1
 8007d48:	d00a      	beq.n	8007d60 <__swsetup_r+0xbc>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	6963      	ldr	r3, [r4, #20]
 8007d50:	425b      	negs	r3, r3
 8007d52:	61a3      	str	r3, [r4, #24]
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	b943      	cbnz	r3, 8007d6a <__swsetup_r+0xc6>
 8007d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d5c:	d1ba      	bne.n	8007cd4 <__swsetup_r+0x30>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	0781      	lsls	r1, r0, #30
 8007d62:	bf58      	it	pl
 8007d64:	6963      	ldrpl	r3, [r4, #20]
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	e7f4      	b.n	8007d54 <__swsetup_r+0xb0>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e7f7      	b.n	8007d5e <__swsetup_r+0xba>
 8007d6e:	bf00      	nop
 8007d70:	20000050 	.word	0x20000050
 8007d74:	08008b9c 	.word	0x08008b9c
 8007d78:	08008bbc 	.word	0x08008bbc
 8007d7c:	08008b7c 	.word	0x08008b7c

08007d80 <abort>:
 8007d80:	b508      	push	{r3, lr}
 8007d82:	2006      	movs	r0, #6
 8007d84:	f000 fa54 	bl	8008230 <raise>
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7f9 fb7b 	bl	8001484 <_exit>
	...

08007d90 <__sflush_r>:
 8007d90:	898a      	ldrh	r2, [r1, #12]
 8007d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d96:	4605      	mov	r5, r0
 8007d98:	0710      	lsls	r0, r2, #28
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	d458      	bmi.n	8007e50 <__sflush_r+0xc0>
 8007d9e:	684b      	ldr	r3, [r1, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dc05      	bgt.n	8007db0 <__sflush_r+0x20>
 8007da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc02      	bgt.n	8007db0 <__sflush_r+0x20>
 8007daa:	2000      	movs	r0, #0
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db2:	2e00      	cmp	r6, #0
 8007db4:	d0f9      	beq.n	8007daa <__sflush_r+0x1a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dbc:	682f      	ldr	r7, [r5, #0]
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	d032      	beq.n	8007e28 <__sflush_r+0x98>
 8007dc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	075a      	lsls	r2, r3, #29
 8007dc8:	d505      	bpl.n	8007dd6 <__sflush_r+0x46>
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	1ac0      	subs	r0, r0, r3
 8007dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd0:	b10b      	cbz	r3, 8007dd6 <__sflush_r+0x46>
 8007dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dd4:	1ac0      	subs	r0, r0, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b0      	blx	r6
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	d106      	bne.n	8007df6 <__sflush_r+0x66>
 8007de8:	6829      	ldr	r1, [r5, #0]
 8007dea:	291d      	cmp	r1, #29
 8007dec:	d82c      	bhi.n	8007e48 <__sflush_r+0xb8>
 8007dee:	4a2a      	ldr	r2, [pc, #168]	; (8007e98 <__sflush_r+0x108>)
 8007df0:	40ca      	lsrs	r2, r1
 8007df2:	07d6      	lsls	r6, r2, #31
 8007df4:	d528      	bpl.n	8007e48 <__sflush_r+0xb8>
 8007df6:	2200      	movs	r2, #0
 8007df8:	6062      	str	r2, [r4, #4]
 8007dfa:	04d9      	lsls	r1, r3, #19
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	d504      	bpl.n	8007e0c <__sflush_r+0x7c>
 8007e02:	1c42      	adds	r2, r0, #1
 8007e04:	d101      	bne.n	8007e0a <__sflush_r+0x7a>
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	b903      	cbnz	r3, 8007e0c <__sflush_r+0x7c>
 8007e0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e0e:	602f      	str	r7, [r5, #0]
 8007e10:	2900      	cmp	r1, #0
 8007e12:	d0ca      	beq.n	8007daa <__sflush_r+0x1a>
 8007e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	d002      	beq.n	8007e22 <__sflush_r+0x92>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7ff faa5 	bl	800736c <_free_r>
 8007e22:	2000      	movs	r0, #0
 8007e24:	6360      	str	r0, [r4, #52]	; 0x34
 8007e26:	e7c1      	b.n	8007dac <__sflush_r+0x1c>
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	1c41      	adds	r1, r0, #1
 8007e32:	d1c7      	bne.n	8007dc4 <__sflush_r+0x34>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0c4      	beq.n	8007dc4 <__sflush_r+0x34>
 8007e3a:	2b1d      	cmp	r3, #29
 8007e3c:	d001      	beq.n	8007e42 <__sflush_r+0xb2>
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d101      	bne.n	8007e46 <__sflush_r+0xb6>
 8007e42:	602f      	str	r7, [r5, #0]
 8007e44:	e7b1      	b.n	8007daa <__sflush_r+0x1a>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	e7ad      	b.n	8007dac <__sflush_r+0x1c>
 8007e50:	690f      	ldr	r7, [r1, #16]
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d0a9      	beq.n	8007daa <__sflush_r+0x1a>
 8007e56:	0793      	lsls	r3, r2, #30
 8007e58:	680e      	ldr	r6, [r1, #0]
 8007e5a:	bf08      	it	eq
 8007e5c:	694b      	ldreq	r3, [r1, #20]
 8007e5e:	600f      	str	r7, [r1, #0]
 8007e60:	bf18      	it	ne
 8007e62:	2300      	movne	r3, #0
 8007e64:	eba6 0807 	sub.w	r8, r6, r7
 8007e68:	608b      	str	r3, [r1, #8]
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	dd9c      	ble.n	8007daa <__sflush_r+0x1a>
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e74:	4643      	mov	r3, r8
 8007e76:	463a      	mov	r2, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	dc06      	bgt.n	8007e8e <__sflush_r+0xfe>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e78e      	b.n	8007dac <__sflush_r+0x1c>
 8007e8e:	4407      	add	r7, r0
 8007e90:	eba8 0800 	sub.w	r8, r8, r0
 8007e94:	e7e9      	b.n	8007e6a <__sflush_r+0xda>
 8007e96:	bf00      	nop
 8007e98:	20400001 	.word	0x20400001

08007e9c <_fflush_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	690b      	ldr	r3, [r1, #16]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b913      	cbnz	r3, 8007eac <_fflush_r+0x10>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	b118      	cbz	r0, 8007eb6 <_fflush_r+0x1a>
 8007eae:	6983      	ldr	r3, [r0, #24]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_fflush_r+0x1a>
 8007eb2:	f000 f887 	bl	8007fc4 <__sinit>
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <_fflush_r+0x6c>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d11b      	bne.n	8007ef4 <_fflush_r+0x58>
 8007ebc:	686c      	ldr	r4, [r5, #4]
 8007ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0ef      	beq.n	8007ea6 <_fflush_r+0xa>
 8007ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec8:	07d0      	lsls	r0, r2, #31
 8007eca:	d404      	bmi.n	8007ed6 <_fflush_r+0x3a>
 8007ecc:	0599      	lsls	r1, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_fflush_r+0x3a>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed2:	f000 f915 	bl	8008100 <__retarget_lock_acquire_recursive>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	4621      	mov	r1, r4
 8007eda:	f7ff ff59 	bl	8007d90 <__sflush_r>
 8007ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee0:	07da      	lsls	r2, r3, #31
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	d4e0      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	059b      	lsls	r3, r3, #22
 8007eea:	d4dd      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eee:	f000 f908 	bl	8008102 <__retarget_lock_release_recursive>
 8007ef2:	e7d9      	b.n	8007ea8 <_fflush_r+0xc>
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <_fflush_r+0x70>)
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d101      	bne.n	8007efe <_fflush_r+0x62>
 8007efa:	68ac      	ldr	r4, [r5, #8]
 8007efc:	e7df      	b.n	8007ebe <_fflush_r+0x22>
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <_fflush_r+0x74>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	bf08      	it	eq
 8007f04:	68ec      	ldreq	r4, [r5, #12]
 8007f06:	e7da      	b.n	8007ebe <_fflush_r+0x22>
 8007f08:	08008b9c 	.word	0x08008b9c
 8007f0c:	08008bbc 	.word	0x08008bbc
 8007f10:	08008b7c 	.word	0x08008b7c

08007f14 <std>:
 8007f14:	2300      	movs	r3, #0
 8007f16:	b510      	push	{r4, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f22:	6083      	str	r3, [r0, #8]
 8007f24:	8181      	strh	r1, [r0, #12]
 8007f26:	6643      	str	r3, [r0, #100]	; 0x64
 8007f28:	81c2      	strh	r2, [r0, #14]
 8007f2a:	6183      	str	r3, [r0, #24]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	2208      	movs	r2, #8
 8007f30:	305c      	adds	r0, #92	; 0x5c
 8007f32:	f7fd fb1f 	bl	8005574 <memset>
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <std+0x38>)
 8007f38:	6263      	str	r3, [r4, #36]	; 0x24
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <std+0x3c>)
 8007f3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <std+0x40>)
 8007f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f42:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <std+0x44>)
 8007f44:	6224      	str	r4, [r4, #32]
 8007f46:	6323      	str	r3, [r4, #48]	; 0x30
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08008269 	.word	0x08008269
 8007f50:	0800828b 	.word	0x0800828b
 8007f54:	080082c3 	.word	0x080082c3
 8007f58:	080082e7 	.word	0x080082e7

08007f5c <_cleanup_r>:
 8007f5c:	4901      	ldr	r1, [pc, #4]	; (8007f64 <_cleanup_r+0x8>)
 8007f5e:	f000 b8af 	b.w	80080c0 <_fwalk_reent>
 8007f62:	bf00      	nop
 8007f64:	08007e9d 	.word	0x08007e9d

08007f68 <__sfmoreglue>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	2268      	movs	r2, #104	; 0x68
 8007f6c:	1e4d      	subs	r5, r1, #1
 8007f6e:	4355      	muls	r5, r2
 8007f70:	460e      	mov	r6, r1
 8007f72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f76:	f7ff fa65 	bl	8007444 <_malloc_r>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	b140      	cbz	r0, 8007f90 <__sfmoreglue+0x28>
 8007f7e:	2100      	movs	r1, #0
 8007f80:	e9c0 1600 	strd	r1, r6, [r0]
 8007f84:	300c      	adds	r0, #12
 8007f86:	60a0      	str	r0, [r4, #8]
 8007f88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f8c:	f7fd faf2 	bl	8005574 <memset>
 8007f90:	4620      	mov	r0, r4
 8007f92:	bd70      	pop	{r4, r5, r6, pc}

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 b8b3 	b.w	8008100 <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	200004ed 	.word	0x200004ed

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 b8ae 	b.w	8008102 <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	200004ed 	.word	0x200004ed

08007fac <__sinit_lock_acquire>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__sinit_lock_acquire+0x8>)
 8007fae:	f000 b8a7 	b.w	8008100 <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	200004ee 	.word	0x200004ee

08007fb8 <__sinit_lock_release>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__sinit_lock_release+0x8>)
 8007fba:	f000 b8a2 	b.w	8008102 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	200004ee 	.word	0x200004ee

08007fc4 <__sinit>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	f7ff fff0 	bl	8007fac <__sinit_lock_acquire>
 8007fcc:	69a3      	ldr	r3, [r4, #24]
 8007fce:	b11b      	cbz	r3, 8007fd8 <__sinit+0x14>
 8007fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd4:	f7ff bff0 	b.w	8007fb8 <__sinit_lock_release>
 8007fd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fdc:	6523      	str	r3, [r4, #80]	; 0x50
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <__sinit+0x68>)
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <__sinit+0x6c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	bf04      	itt	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	61a3      	streq	r3, [r4, #24]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 f820 	bl	8008034 <__sfp>
 8007ff4:	6060      	str	r0, [r4, #4]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f81c 	bl	8008034 <__sfp>
 8007ffc:	60a0      	str	r0, [r4, #8]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f818 	bl	8008034 <__sfp>
 8008004:	2200      	movs	r2, #0
 8008006:	60e0      	str	r0, [r4, #12]
 8008008:	2104      	movs	r1, #4
 800800a:	6860      	ldr	r0, [r4, #4]
 800800c:	f7ff ff82 	bl	8007f14 <std>
 8008010:	68a0      	ldr	r0, [r4, #8]
 8008012:	2201      	movs	r2, #1
 8008014:	2109      	movs	r1, #9
 8008016:	f7ff ff7d 	bl	8007f14 <std>
 800801a:	68e0      	ldr	r0, [r4, #12]
 800801c:	2202      	movs	r2, #2
 800801e:	2112      	movs	r1, #18
 8008020:	f7ff ff78 	bl	8007f14 <std>
 8008024:	2301      	movs	r3, #1
 8008026:	61a3      	str	r3, [r4, #24]
 8008028:	e7d2      	b.n	8007fd0 <__sinit+0xc>
 800802a:	bf00      	nop
 800802c:	08008804 	.word	0x08008804
 8008030:	08007f5d 	.word	0x08007f5d

08008034 <__sfp>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	4607      	mov	r7, r0
 8008038:	f7ff ffac 	bl	8007f94 <__sfp_lock_acquire>
 800803c:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <__sfp+0x84>)
 800803e:	681e      	ldr	r6, [r3, #0]
 8008040:	69b3      	ldr	r3, [r6, #24]
 8008042:	b913      	cbnz	r3, 800804a <__sfp+0x16>
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ffbd 	bl	8007fc4 <__sinit>
 800804a:	3648      	adds	r6, #72	; 0x48
 800804c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008050:	3b01      	subs	r3, #1
 8008052:	d503      	bpl.n	800805c <__sfp+0x28>
 8008054:	6833      	ldr	r3, [r6, #0]
 8008056:	b30b      	cbz	r3, 800809c <__sfp+0x68>
 8008058:	6836      	ldr	r6, [r6, #0]
 800805a:	e7f7      	b.n	800804c <__sfp+0x18>
 800805c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008060:	b9d5      	cbnz	r5, 8008098 <__sfp+0x64>
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <__sfp+0x88>)
 8008064:	60e3      	str	r3, [r4, #12]
 8008066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800806a:	6665      	str	r5, [r4, #100]	; 0x64
 800806c:	f000 f847 	bl	80080fe <__retarget_lock_init_recursive>
 8008070:	f7ff ff96 	bl	8007fa0 <__sfp_lock_release>
 8008074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800807c:	6025      	str	r5, [r4, #0]
 800807e:	61a5      	str	r5, [r4, #24]
 8008080:	2208      	movs	r2, #8
 8008082:	4629      	mov	r1, r5
 8008084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008088:	f7fd fa74 	bl	8005574 <memset>
 800808c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008094:	4620      	mov	r0, r4
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008098:	3468      	adds	r4, #104	; 0x68
 800809a:	e7d9      	b.n	8008050 <__sfp+0x1c>
 800809c:	2104      	movs	r1, #4
 800809e:	4638      	mov	r0, r7
 80080a0:	f7ff ff62 	bl	8007f68 <__sfmoreglue>
 80080a4:	4604      	mov	r4, r0
 80080a6:	6030      	str	r0, [r6, #0]
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1d5      	bne.n	8008058 <__sfp+0x24>
 80080ac:	f7ff ff78 	bl	8007fa0 <__sfp_lock_release>
 80080b0:	230c      	movs	r3, #12
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	e7ee      	b.n	8008094 <__sfp+0x60>
 80080b6:	bf00      	nop
 80080b8:	08008804 	.word	0x08008804
 80080bc:	ffff0001 	.word	0xffff0001

080080c0 <_fwalk_reent>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	4606      	mov	r6, r0
 80080c6:	4688      	mov	r8, r1
 80080c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080cc:	2700      	movs	r7, #0
 80080ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080d2:	f1b9 0901 	subs.w	r9, r9, #1
 80080d6:	d505      	bpl.n	80080e4 <_fwalk_reent+0x24>
 80080d8:	6824      	ldr	r4, [r4, #0]
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d1f7      	bne.n	80080ce <_fwalk_reent+0xe>
 80080de:	4638      	mov	r0, r7
 80080e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e4:	89ab      	ldrh	r3, [r5, #12]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d907      	bls.n	80080fa <_fwalk_reent+0x3a>
 80080ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ee:	3301      	adds	r3, #1
 80080f0:	d003      	beq.n	80080fa <_fwalk_reent+0x3a>
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	47c0      	blx	r8
 80080f8:	4307      	orrs	r7, r0
 80080fa:	3568      	adds	r5, #104	; 0x68
 80080fc:	e7e9      	b.n	80080d2 <_fwalk_reent+0x12>

080080fe <__retarget_lock_init_recursive>:
 80080fe:	4770      	bx	lr

08008100 <__retarget_lock_acquire_recursive>:
 8008100:	4770      	bx	lr

08008102 <__retarget_lock_release_recursive>:
 8008102:	4770      	bx	lr

08008104 <__swhatbuf_r>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	460e      	mov	r6, r1
 8008108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810c:	2900      	cmp	r1, #0
 800810e:	b096      	sub	sp, #88	; 0x58
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	da08      	bge.n	8008128 <__swhatbuf_r+0x24>
 8008116:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	061a      	lsls	r2, r3, #24
 8008120:	d410      	bmi.n	8008144 <__swhatbuf_r+0x40>
 8008122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008126:	e00e      	b.n	8008146 <__swhatbuf_r+0x42>
 8008128:	466a      	mov	r2, sp
 800812a:	f000 f903 	bl	8008334 <_fstat_r>
 800812e:	2800      	cmp	r0, #0
 8008130:	dbf1      	blt.n	8008116 <__swhatbuf_r+0x12>
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008138:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800813c:	425a      	negs	r2, r3
 800813e:	415a      	adcs	r2, r3
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	e7ee      	b.n	8008122 <__swhatbuf_r+0x1e>
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2000      	movs	r0, #0
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	b016      	add	sp, #88	; 0x58
 800814c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008150 <__smakebuf_r>:
 8008150:	898b      	ldrh	r3, [r1, #12]
 8008152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008154:	079d      	lsls	r5, r3, #30
 8008156:	4606      	mov	r6, r0
 8008158:	460c      	mov	r4, r1
 800815a:	d507      	bpl.n	800816c <__smakebuf_r+0x1c>
 800815c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	2301      	movs	r3, #1
 8008166:	6163      	str	r3, [r4, #20]
 8008168:	b002      	add	sp, #8
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	ab01      	add	r3, sp, #4
 800816e:	466a      	mov	r2, sp
 8008170:	f7ff ffc8 	bl	8008104 <__swhatbuf_r>
 8008174:	9900      	ldr	r1, [sp, #0]
 8008176:	4605      	mov	r5, r0
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff f963 	bl	8007444 <_malloc_r>
 800817e:	b948      	cbnz	r0, 8008194 <__smakebuf_r+0x44>
 8008180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008184:	059a      	lsls	r2, r3, #22
 8008186:	d4ef      	bmi.n	8008168 <__smakebuf_r+0x18>
 8008188:	f023 0303 	bic.w	r3, r3, #3
 800818c:	f043 0302 	orr.w	r3, r3, #2
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	e7e3      	b.n	800815c <__smakebuf_r+0xc>
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <__smakebuf_r+0x7c>)
 8008196:	62b3      	str	r3, [r6, #40]	; 0x28
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	6020      	str	r0, [r4, #0]
 800819c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	9b00      	ldr	r3, [sp, #0]
 80081a4:	6163      	str	r3, [r4, #20]
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	6120      	str	r0, [r4, #16]
 80081aa:	b15b      	cbz	r3, 80081c4 <__smakebuf_r+0x74>
 80081ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f8d1 	bl	8008358 <_isatty_r>
 80081b6:	b128      	cbz	r0, 80081c4 <__smakebuf_r+0x74>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	89a0      	ldrh	r0, [r4, #12]
 80081c6:	4305      	orrs	r5, r0
 80081c8:	81a5      	strh	r5, [r4, #12]
 80081ca:	e7cd      	b.n	8008168 <__smakebuf_r+0x18>
 80081cc:	08007f5d 	.word	0x08007f5d

080081d0 <_malloc_usable_size_r>:
 80081d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d4:	1f18      	subs	r0, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfbc      	itt	lt
 80081da:	580b      	ldrlt	r3, [r1, r0]
 80081dc:	18c0      	addlt	r0, r0, r3
 80081de:	4770      	bx	lr

080081e0 <_raise_r>:
 80081e0:	291f      	cmp	r1, #31
 80081e2:	b538      	push	{r3, r4, r5, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	d904      	bls.n	80081f4 <_raise_r+0x14>
 80081ea:	2316      	movs	r3, #22
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081f6:	b112      	cbz	r2, 80081fe <_raise_r+0x1e>
 80081f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081fc:	b94b      	cbnz	r3, 8008212 <_raise_r+0x32>
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 f830 	bl	8008264 <_getpid_r>
 8008204:	462a      	mov	r2, r5
 8008206:	4601      	mov	r1, r0
 8008208:	4620      	mov	r0, r4
 800820a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800820e:	f000 b817 	b.w	8008240 <_kill_r>
 8008212:	2b01      	cmp	r3, #1
 8008214:	d00a      	beq.n	800822c <_raise_r+0x4c>
 8008216:	1c59      	adds	r1, r3, #1
 8008218:	d103      	bne.n	8008222 <_raise_r+0x42>
 800821a:	2316      	movs	r3, #22
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	2001      	movs	r0, #1
 8008220:	e7e7      	b.n	80081f2 <_raise_r+0x12>
 8008222:	2400      	movs	r4, #0
 8008224:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008228:	4628      	mov	r0, r5
 800822a:	4798      	blx	r3
 800822c:	2000      	movs	r0, #0
 800822e:	e7e0      	b.n	80081f2 <_raise_r+0x12>

08008230 <raise>:
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <raise+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f7ff bfd3 	b.w	80081e0 <_raise_r>
 800823a:	bf00      	nop
 800823c:	20000050 	.word	0x20000050

08008240 <_kill_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	; (8008260 <_kill_r+0x20>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f7f9 f909 	bl	8001464 <_kill>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d102      	bne.n	800825c <_kill_r+0x1c>
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	b103      	cbz	r3, 800825c <_kill_r+0x1c>
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	bf00      	nop
 8008260:	200004e8 	.word	0x200004e8

08008264 <_getpid_r>:
 8008264:	f7f9 b8f6 	b.w	8001454 <_getpid>

08008268 <__sread>:
 8008268:	b510      	push	{r4, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	f000 f894 	bl	800839c <_read_r>
 8008274:	2800      	cmp	r0, #0
 8008276:	bfab      	itete	ge
 8008278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800827a:	89a3      	ldrhlt	r3, [r4, #12]
 800827c:	181b      	addge	r3, r3, r0
 800827e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008282:	bfac      	ite	ge
 8008284:	6563      	strge	r3, [r4, #84]	; 0x54
 8008286:	81a3      	strhlt	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__swrite>:
 800828a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828e:	461f      	mov	r7, r3
 8008290:	898b      	ldrh	r3, [r1, #12]
 8008292:	05db      	lsls	r3, r3, #23
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	4616      	mov	r6, r2
 800829a:	d505      	bpl.n	80082a8 <__swrite+0x1e>
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2302      	movs	r3, #2
 80082a2:	2200      	movs	r2, #0
 80082a4:	f000 f868 	bl	8008378 <_lseek_r>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	4632      	mov	r2, r6
 80082b6:	463b      	mov	r3, r7
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082be:	f000 b817 	b.w	80082f0 <_write_r>

080082c2 <__sseek>:
 80082c2:	b510      	push	{r4, lr}
 80082c4:	460c      	mov	r4, r1
 80082c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ca:	f000 f855 	bl	8008378 <_lseek_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	bf15      	itete	ne
 80082d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082de:	81a3      	strheq	r3, [r4, #12]
 80082e0:	bf18      	it	ne
 80082e2:	81a3      	strhne	r3, [r4, #12]
 80082e4:	bd10      	pop	{r4, pc}

080082e6 <__sclose>:
 80082e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ea:	f000 b813 	b.w	8008314 <_close_r>
	...

080082f0 <_write_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_write_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 f8e7 	bl	80014d2 <_write>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_write_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_write_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200004e8 	.word	0x200004e8

08008314 <_close_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	; (8008330 <_close_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f9 f8f3 	bl	800150a <_close>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_close_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_close_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	200004e8 	.word	0x200004e8

08008334 <_fstat_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	; (8008354 <_fstat_r+0x20>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	f7f9 f8ee 	bl	8001522 <_fstat>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d102      	bne.n	8008350 <_fstat_r+0x1c>
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	b103      	cbz	r3, 8008350 <_fstat_r+0x1c>
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	bd38      	pop	{r3, r4, r5, pc}
 8008352:	bf00      	nop
 8008354:	200004e8 	.word	0x200004e8

08008358 <_isatty_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d06      	ldr	r5, [pc, #24]	; (8008374 <_isatty_r+0x1c>)
 800835c:	2300      	movs	r3, #0
 800835e:	4604      	mov	r4, r0
 8008360:	4608      	mov	r0, r1
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f7f9 f8ed 	bl	8001542 <_isatty>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_isatty_r+0x1a>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_isatty_r+0x1a>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	200004e8 	.word	0x200004e8

08008378 <_lseek_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_lseek_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7f9 f8e6 	bl	8001558 <_lseek>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_lseek_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_lseek_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	200004e8 	.word	0x200004e8

0800839c <_read_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	; (80083bc <_read_r+0x20>)
 80083a0:	4604      	mov	r4, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	602a      	str	r2, [r5, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7f9 f874 	bl	8001498 <_read>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_read_r+0x1e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_read_r+0x1e>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	200004e8 	.word	0x200004e8

080083c0 <_init>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr

080083cc <_fini>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr
